{
    "version": "https://jsonfeed.org/version/1",
    "title": "hpc.social - Aggregated Commercial Blog",
    "home_page_url": "https://hpc.social/commercial-blog/",
    "feed_url": "https://hpc.social/commercial-blog/feed.json",
    "description": "Vendor and commercial posts in the hpc.social community",
    "icon": "https://hpc.social/commercial-blog/assets/images/apple-touch-icon.png",
    "favicon": "https://hpc.social/commercial-blog/assets/images/favicon.png",
    "expired": false,
    
    "author":  {
        "name": "hpc.social",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://hpc.social/commercial-blog/2025/tangram-puzzles/",
            "title": "Tangram Puzzles",
            "summary": null,
            "content_text": "The tangram is an ancient Chinese puzzle with seven pieces. ContentsVarietySchoolsFiguresPuzzleKittySwanSquareWebVarietyTangram puzzles can be made with paper, plastic or wood. SchoolsSchool kids all over the world enjoy tangram puzzles. FiguresThousands of figures, like these animals, can be made. PuzzleMy MATLAB code Tangram opens with a screen showing seven pieces, which are called tans. There are two large triangles, one medium triangle, two small triangles, one square, and one parallelogram. The puzzle is interactive. You can move the tans. KittyThe kitty is a newcomer's favorite. SwanThe parallelogram is the only tans that does not have reflection symmetry. It needs to be reversed with the flipper button when forming shapes like this swan. The swan at the top of this blog is looking in the opposite direction and does not need its parallelogram flipped. SquareHere are the starting moves for making a square. You can finish the square yourself by downloading Tangram_mzip.Or, if you are not in a do-it-yourself mood and just want the answer, see square_3.gif. WebThere are hundreds of web sites about Tangrams. Here are two that I enjoyed.https://www.pinterest.com/ivahilator/tangram.https://kubiyagames.com/products/tangram-puzzle-two-sets-with-65-challenge-cards.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>The tangram is an ancient <a href=\"https://en.wikipedia.org/wiki/Tangram\">Chinese puzzle</a> with seven pieces.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/swan_2.png\" vspace=\"5\" /> </p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e3fac958-571e-4dfc-9943-c3e6250a779a\">Variety</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#23d91121-5eca-43bb-b9ef-587b28b6f440\">Schools</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#71e383f8-992a-444a-9334-aaa0af5bd8cf\">Figures</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#3fe0b7fe-11b9-4809-962d-272da517b3ea\">Puzzle</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#11e28fd4-f5c4-42a7-9c40-3350639dc0df\">Kitty</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#92e32c00-95f1-47b6-88d0-cba48c41904b\">Swan</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#32ee23f9-f6d0-4f66-aa77-32538b980b92\">Square</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#33682566-0424-4870-9dcc-4617a477dc89\">Web</a></li></ul></div><h4>Variety<a name=\"e3fac958-571e-4dfc-9943-c3e6250a779a\"></a></h4><p>Tangram puzzles can be made with paper, plastic or wood.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/wooden_3.jpg\" vspace=\"5\" /> </p><h4>Schools<a name=\"23d91121-5eca-43bb-b9ef-587b28b6f440\"></a></h4><p>School kids all over the world enjoy tangram puzzles.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/school.png\" vspace=\"5\" /> </p><h4>Figures<a name=\"71e383f8-992a-444a-9334-aaa0af5bd8cf\"></a></h4><p>Thousands of figures, like these animals, can be made.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/animals.png\" vspace=\"5\" /> </p><h4>Puzzle<a name=\"3fe0b7fe-11b9-4809-962d-272da517b3ea\"></a></h4><p>My MATLAB code <a href=\"https://blogs.mathworks.com/cleve/files/Tangram_mzip.m\">Tangram</a> opens with a screen showing seven pieces, which are called <i>tans</i>. There are two large triangles, one medium triangle, two small triangles, one square, and one parallelogram.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Tangram_screen.png\" vspace=\"5\" /> </p><p>The puzzle is interactive. You can move the tans.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/open.gif\" vspace=\"5\" /> </p><h4>Kitty<a name=\"11e28fd4-f5c4-42a7-9c40-3350639dc0df\"></a></h4><p>The kitty is a newcomer's favorite.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/kitty.gif\" vspace=\"5\" /> </p><h4>Swan<a name=\"92e32c00-95f1-47b6-88d0-cba48c41904b\"></a></h4><p>The parallelogram is the only tans that does not have reflection symmetry. It needs to be reversed with the <tt>flipper</tt> button when forming shapes like this swan. The swan at the top of this blog is looking in the opposite direction and does not need its parallelogram flipped.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/swan.gif\" vspace=\"5\" /> </p><h4>Square<a name=\"32ee23f9-f6d0-4f66-aa77-32538b980b92\"></a></h4><p>Here are the starting moves for making a square. You can finish the square yourself by downloading <a href=\"https://blogs.mathworks.com/cleve/files/Tangram_mzip.m\">Tangram_mzip</a>.</p><p>Or, if you are not in a do-it-yourself mood and just want the answer, see <a href=\"https://blogs.mathworks.com/cleve/files/square_3.gif\">square_3.gif</a>.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/start.gif\" vspace=\"5\" /> </p><h4>Web<a name=\"33682566-0424-4870-9dcc-4617a477dc89\"></a></h4><p>There are hundreds of web sites about Tangrams. Here are two that I enjoyed.</p><p><a href=\"https://www.pinterest.com/ivahilator/tangram\">https://www.pinterest.com/ivahilator/tangram</a>.</p><p><a href=\"https://kubiyagames.com/products/tangram-puzzle-two-sets-with-65-challenge-cards\">https://kubiyagames.com/products/tangram-puzzle-two-sets-with-65-challenge-cards</a>.</p><!--     function grabCode_8d7a45faf5094d1d99b8164f5491dfdd() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='8d7a45faf5094d1d99b8164f5491dfdd ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 8d7a45faf5094d1d99b8164f5491dfdd';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--8d7a45faf5094d1d99b8164f5491dfdd ##### SOURCE BEGIN #####%% Tangram Puzzle% The tangram is an ancient % <https://en.wikipedia.org/wiki/Tangram Chinese puzzle>% with seven pieces.%% <<swan_2.png>>%% Variety% Tangram puzzles can be made with paper, plastic or wood.%% <<wooden_3.jpg>>%% Schools% School kids all over the world enjoy tangram puzzles.%% <<school.png>>%% Figures% Thousands of figures, like these animals, can be made.%% <<animals.png>>%% Puzzle% My MATLAB code% <https://blogs.mathworks.com/cleve/files/Tangram_mzip.m% Tangram>% opens with a screen showing seven pieces,% which are called _tans_.% There are% two large triangles, one medium triangle, two small% triangles, one square, and one parallelogram.%% <<Tangram_screen.png>>%%% The puzzle is interactive.  You can move the tans.%% <<open.gif>>%% Kitty% The kitty is a newcomer's favorite.% % <<kitty.gif>>%% Swan% The parallelogram is the only tans that does not have reflection% symmetry. It needs to be reversed with the |flipper| button when% forming shapes like this swan.  The swan at the top of this blog% is looking in the opposite direction and does not need its% parallelogram flipped.%% <<swan.gif>>%% Square% Here are the starting moves for making a square.% You can finish the square yourself by downloading % <https://blogs.mathworks.com/cleve/files/Tangram_mzip.m% Tangram_mzip>.%% Or, if you are not in a do-it-yourself mood and just want the% answer, see% <https://blogs.mathworks.com/cleve/files/square_3.gif square_3.gif>.% % <<start.gif>>%%% Web% There are hundreds of web sites about Tangrams.% Here are two that I enjoyed.%% <https://www.pinterest.com/ivahilator/tangram>.%% <https://kubiyagames.com/products/tangram-puzzle-two-sets-with-65-challenge-cards>.% ##### SOURCE END ##### 8d7a45faf5094d1d99b8164f5491dfdd-->",
            "url": "https://hpc.social/commercial-blog/2025/tangram-puzzles/",
            
            
            
            
            
            "date_published": "2025-10-23T15:43:47-06:00",
            "date_modified": "2025-10-23T15:43:47-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/travel-report-juit-india/",
            "title": "Travel Report, JUIT, India",
            "summary": null,
            "content_text": "I was invited recently to give a virtual talk to the student chapter of SIAM at JUIT, the Jaycee Institute of Information Technology, in Wagnaghat, India.ContentsMapHimalayasCampusHostsStudentsLibraryDormsTubeimshow('icon.jpg') MapJUIT is in northern India between Nepal and Tibet to the east, and Pakistan and Afghanistan to the west.imshow('juit_map.png') HimalayasThe campus sits at an altitude of 10,000 feet in the foothills of the Himalayas.imshow('juit_foothills.jpg') CampusThe campus opened in 2002.imshow('banner2.png') HostsHere are my hosts -- Nandaya Vegad, Ritik Joshi and Omansh Sharma -- in the auditorium that will be used for my talk.imshow('hosts.png') StudentsJUIT is a private technical university with selective admissions.imshow('students.png') LibraryThe libraries are up to date.imshow('library.png') DormsMany of the offices and dorms have courtyards.imshow('dorms.png') TubeI want to visit JUIT in person and walk though this tube.imshow('Tube.png') Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>I was invited recently to give a virtual talk to the <a href=\"https://siam-juit.github.io/website/\" target=\"_blank\">student chapter</a> of SIAM at <a href=\"https://www.juit.ac.in/\" target=\"_blank\">JUIT</a>, the Jaycee Institute of Information Technology, in Wagnaghat, India.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#9b7f4a3a-3f0e-416c-ae83-4dcd73e87c90\">Map</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#602cd942-67e2-4397-915a-87be911ecfdf\">Himalayas</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#cf79fec0-2288-4b69-ada9-e8418fd16bbe\">Campus</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#688035f2-a005-4994-8d1f-2a559158ecbf\">Hosts</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8bb57be7-694a-43d5-94f1-49104e59fb1c\">Students</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#1e2c8a0f-10c7-454e-84d6-f310e6d35fbb\">Library</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#df4b70c0-34b9-49d9-af6d-147e6adca8eb\">Dorms</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#339c7e3e-a0cd-4427-a11e-55bc3861a50e\">Tube</a></li></ul></div><pre class=\"codeinput\">imshow(<span class=\"string\">'icon.jpg'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Juit_blog_01.png\" vspace=\"5\" /> <h4>Map<a name=\"9b7f4a3a-3f0e-416c-ae83-4dcd73e87c90\"></a></h4><p>JUIT is in northern India between Nepal and Tibet to the east, and Pakistan and Afghanistan to the west.</p><pre class=\"codeinput\">imshow(<span class=\"string\">'juit_map.png'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Juit_blog_02.png\" vspace=\"5\" /> <h4>Himalayas<a name=\"602cd942-67e2-4397-915a-87be911ecfdf\"></a></h4><p>The campus sits at an altitude of 10,000 feet in the foothills of the Himalayas.</p><pre class=\"codeinput\">imshow(<span class=\"string\">'juit_foothills.jpg'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Juit_blog_03.png\" vspace=\"5\" /> <h4>Campus<a name=\"cf79fec0-2288-4b69-ada9-e8418fd16bbe\"></a></h4><p>The campus opened in 2002.</p><pre class=\"codeinput\">imshow(<span class=\"string\">'banner2.png'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Juit_blog_04.png\" vspace=\"5\" /> <h4>Hosts<a name=\"688035f2-a005-4994-8d1f-2a559158ecbf\"></a></h4><p>Here are my hosts -- Nandaya Vegad, Ritik Joshi and Omansh Sharma -- in the auditorium that will be used for my talk.</p><pre class=\"codeinput\">imshow(<span class=\"string\">'hosts.png'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Juit_blog_05.png\" vspace=\"5\" /> <h4>Students<a name=\"8bb57be7-694a-43d5-94f1-49104e59fb1c\"></a></h4><p>JUIT is a private technical university with selective admissions.</p><pre class=\"codeinput\">imshow(<span class=\"string\">'students.png'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Juit_blog_06.png\" vspace=\"5\" /> <h4>Library<a name=\"1e2c8a0f-10c7-454e-84d6-f310e6d35fbb\"></a></h4><p>The libraries are up to date.</p><pre class=\"codeinput\">imshow(<span class=\"string\">'library.png'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Juit_blog_07.png\" vspace=\"5\" /> <h4>Dorms<a name=\"df4b70c0-34b9-49d9-af6d-147e6adca8eb\"></a></h4><p>Many of the offices and dorms have courtyards.</p><pre class=\"codeinput\">imshow(<span class=\"string\">'dorms.png'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Juit_blog_08.png\" vspace=\"5\" /> <h4>Tube<a name=\"339c7e3e-a0cd-4427-a11e-55bc3861a50e\"></a></h4><p>I want to visit JUIT in person and walk though this tube.</p><pre class=\"codeinput\">imshow(<span class=\"string\">'Tube.png'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Juit_blog_09.png\" vspace=\"5\" /> <!--     function grabCode_a392cfdb259644ee8015ca5edfa30b0e() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='a392cfdb259644ee8015ca5edfa30b0e ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' a392cfdb259644ee8015ca5edfa30b0e';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--a392cfdb259644ee8015ca5edfa30b0e ##### SOURCE BEGIN #####%% Virtual Travel Report, JUIT, India% I was invited recently to give a virtual talk to the% <https://siam-juit.github.io/website/ student chapter> of SIAM at% <https://www.juit.ac.in/ JUIT>, % the Jaycee Institute of Information Technology,% in Wagnaghat, India.%%    imshow('icon.jpg')%% Map% JUIT is in northern India between Nepal and Tibet % to the east, and Pakistan and Afghanistan to the west.    imshow('juit_map.png')%% Himalayas% The campus sits at an altitude of 10,000 feet in the foothills% of the Himalayas.    imshow('juit_foothills.jpg')%% Campus% The campus opened in 2002.    imshow('banner2.png')    %% Hosts% Here are my hosts REPLACE_WITH_DASH_DASH Nandaya Vegad, Ritik Joshi and Omansh Sharma REPLACE_WITH_DASH_DASH% in the auditorium that will be used for my talk.    imshow('hosts.png') %% Students% JUIT is a private technical university with selective admissions.    imshow('students.png')%% Library% The libraries are up to date.    imshow('library.png')%% Dorms% Many of the offices and dorms have courtyards.    imshow('dorms.png')%% Tube% I want to visit JUIT in person and walk though this tube.    imshow('Tube.png')##### SOURCE END ##### a392cfdb259644ee8015ca5edfa30b0e-->",
            "url": "https://hpc.social/commercial-blog/2025/travel-report-juit-india/",
            
            
            
            
            
            "date_published": "2025-10-11T18:44:22-06:00",
            "date_modified": "2025-10-11T18:44:22-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/wordler-and-i-fail-on-puzzle-1497/",
            "title": "Wordler and I Fail on Puzzle 1497",
            "summary": null,
            "content_text": "Like millions of other folks, I play Wordle from the New York Times almost every day. The Times reports that Wordle puzzle number 1497 on Friday, July 25, was especially difficult. The average puzzler required 5.7 attempts and many failed to get the answer in the six moves allowed. I have a MATLAB assistant that I call Wordler and, even with her help, I failed on number 1497. Here's why.(In 2022, Wordle was the most-searched term on Google worldwide. For more interesting facts about Wordle, see the Wikipedia article.)ContentsWordlerWordler's VocabularyWord OneWord TwoWord ThreeWord FourWord FiveWord SixFinal WordSoftwareWordlerMaking a move in Wordle involves two tasks. First, thinking of the words that can be played, and second, deciding which of them to play. I like to make all the key decisions myself, so my assistant does not actually play Wordle. When I ask Wordler for help, she just lists all the words that could be played. It is up to me to choose one.Wordler's VocabularyWordler's vocabulary is a hidden list of 2315 five-letter English words that are the possible solutions. The letter frequencies in this list are not the same as in English itself. For example, English has many five-letter words ending in S, but most of them are plural nouns and third-person singular verbs. The vocabulary does not have any of these. Wordle words end in S less than 2% of the time, compared to 31% of the time with the full set of five-letter words.Here is a portion of the vocabulary.dbtypevocabulary1:9dbtypevocabulary291:2951     function vocab = vocabulary(~)2         % vocabulary is 2315 words that are targets.3            4        vocab = [ ... 5         \"ABACK\" \"ABASE\" \"ABATE\" \"ABBEY\" \"ABBOT\" \"ABHOR\" \"ABIDE\" \"ABLED\" ...6         \"ABODE\" \"ABORT\" \"ABOUT\" \"ABOVE\" \"ABUSE\" \"ABYSS\" \"ACORN\" \"ACRID\" ...7         \"ACTOR\" \"ACUTE\" \"ADAGE\" \"ADAPT\" \"ADEPT\" \"ADMIN\" \"ADMIT\" \"ADOBE\" ...8         \"ADOPT\" \"ADORE\" \"ADORN\" \"ADULT\" \"AFFIX\" \"AFIRE\" \"AFOOT\" \"AFOUL\" ...9         \"AFTER\" \"AGAIN\" \"AGAPE\" \"AGATE\" \"AGENT\" \"AGILE\" \"AGING\" \"AGLOW\" ...291       \"WORSE\" \"WORST\" \"WORTH\" \"WOULD\" \"WOUND\" \"WOVEN\" \"WRACK\" \"WRATH\" ...292       \"WREAK\" \"WRECK\" \"WREST\" \"WRING\" \"WRIST\" \"WRITE\" \"WRONG\" \"WROTE\" ...293       \"WRUNG\" \"WRYLY\" \"YACHT\" \"YEARN\" \"YEAST\" \"YIELD\" \"YOUNG\" \"YOUTH\" ...294       \"ZEBRA\" \"ZESTY\" \"ZONAL\" ];295   endWord OneI always start with the word LEAST. It contains two popular vowels, and I like to use mathematical and other technical words. On July 25, a gold E from the Times tells me that the answer has an E somewhere, but not in slot number 2. The remaining letters are black, so today's answer does not have any L, A, S or T.(If I were to ask Wordler for assistance with the first word, she would just reply with all 2315 words she knows.) Word TwoFor the second word, I chose PHONE. It has the required E, as well as another popular vowel. It gets a gold O to go with the gold E.(Wordler's suggestion in this situation would have been the 268 words containing an E in any slot except the second. That's not much help.) Word ThreeI know now that I am seeking a word with an E in any slot except 2 or 5, an O in any slot except 3, and no L, A, S, T, P, H or N. I decided to try COVER and am rewarded with three green letters.(Wordler knows 23 words meeting the requirements.) Word FourHere, for the first time, I decided to ask Wordler. I press the Words button and get some bad news. She tells me she knows seven possible words.BOXERFOYERJOKERMOWERROGERROWERWOOERI have only three guesses remaining. My odds of winning are less than 50-50. I chose MOWER because, if it is not correct, the three words containing W would be eliminated. Word FiveGetting worried, I chose ROGER because it has two Rs. Again, not much luck. Word SixThis is my last chance and there are still three words remaining.BOXERFOYERJOKERWhich would you choose?I chose JOKER and strike out. Final WordIf you happen to have played puzzle number 1497, you realize that Wordler is missing at least one word from her vocabulary. The word that tripped up so many last week is GOFER, which neither I nor my assistant thought of.(Ever-helpful Google informs us that a GOFER is \"a person who runs errands, especially on a movie set or in an office.\")SoftwareThe current version of Wordler isn't ready for public consumption. As we have just seen, her vocabulary is incomplete. I also know of bugs when there are repeated letters. If you would like a copy anyway, send me an email.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>Like millions of other folks, I play <a href=\"https://www.nytimes.com/games/wordle\"><i>Wordle</i></a> from the <i>New York Times</i> almost every day. The <i>Times</i> reports that <i>Wordle</i> puzzle number 1497 on Friday, July 25, was especially difficult. The average puzzler required 5.7 attempts and many failed to get the answer in the six moves allowed. I have a MATLAB assistant that I call Wordler and, even with her help, I failed on number 1497. Here's why.</p><p>(In 2022, <i>Wordle</i> was the most-searched term on Google worldwide. For more interesting facts about <i>Wordle</i>, see the <a href=\"https://en.wikipedia.org/wiki/Wordle\">Wikipedia article</a>.)</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#6821f7b2-f8a0-477b-af1a-90e617842627\">Wordler</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b9e94f76-063d-490c-baa5-ac3dbd89860f\">Wordler's Vocabulary</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#d3faa9b1-8bcf-48d5-b799-d734e407e76c\">Word One</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e7c96b4b-26c7-4362-991f-f89625e418e4\">Word Two</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#ecbedb8e-b368-424c-845c-13a8ffa38ca6\">Word Three</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4ae0c571-eeb1-4f98-a47c-b695cf181456\">Word Four</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#bb6699b4-4722-41fc-a429-cec8fa1ce44e\">Word Five</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#f48e61e4-4b42-48a7-865f-a8de79008a6a\">Word Six</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#ec08f35c-412c-40b0-aa08-ef088e160836\">Final Word</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#d2350965-9e73-48bc-a9a9-5745e964f356\">Software</a></li></ul></div><h4>Wordler<a name=\"6821f7b2-f8a0-477b-af1a-90e617842627\"></a></h4><p>Making a move in <i>Wordle</i> involves two tasks. First, thinking of the words that can be played, and second, deciding which of them to play. I like to make all the key decisions myself, so my assistant does not actually play <i>Wordle</i>. When I ask Wordler for help, she just lists all the words that could be played. It is up to me to choose one.</p><h4>Wordler's Vocabulary<a name=\"b9e94f76-063d-490c-baa5-ac3dbd89860f\"></a></h4><p>Wordler's vocabulary is a hidden list of 2315 five-letter English words that are the possible solutions. The letter frequencies in this list are not the same as in English itself. For example, English has many five-letter words ending in S, but most of them are plural nouns and third-person singular verbs. The vocabulary does not have any of these. <i>Wordle</i> words end in S less than 2% of the time, compared to 31% of the time with the full set of five-letter words.</p><p>Here is a portion of the vocabulary.</p><pre class=\"codeinput\">dbtype<span class=\"string\">vocabulary</span><span class=\"string\">1:9</span>dbtype<span class=\"string\">vocabulary</span><span class=\"string\">291:295</span></pre><pre class=\"codeoutput\">1     function vocab = vocabulary(~)2         % vocabulary is 2315 words that are targets.3            4        vocab = [ ... 5         \"ABACK\" \"ABASE\" \"ABATE\" \"ABBEY\" \"ABBOT\" \"ABHOR\" \"ABIDE\" \"ABLED\" ...6         \"ABODE\" \"ABORT\" \"ABOUT\" \"ABOVE\" \"ABUSE\" \"ABYSS\" \"ACORN\" \"ACRID\" ...7         \"ACTOR\" \"ACUTE\" \"ADAGE\" \"ADAPT\" \"ADEPT\" \"ADMIN\" \"ADMIT\" \"ADOBE\" ...8         \"ADOPT\" \"ADORE\" \"ADORN\" \"ADULT\" \"AFFIX\" \"AFIRE\" \"AFOOT\" \"AFOUL\" ...9         \"AFTER\" \"AGAIN\" \"AGAPE\" \"AGATE\" \"AGENT\" \"AGILE\" \"AGING\" \"AGLOW\" ...291       \"WORSE\" \"WORST\" \"WORTH\" \"WOULD\" \"WOUND\" \"WOVEN\" \"WRACK\" \"WRATH\" ...292       \"WREAK\" \"WRECK\" \"WREST\" \"WRING\" \"WRIST\" \"WRITE\" \"WRONG\" \"WROTE\" ...293       \"WRUNG\" \"WRYLY\" \"YACHT\" \"YEARN\" \"YEAST\" \"YIELD\" \"YOUNG\" \"YOUTH\" ...294       \"ZEBRA\" \"ZESTY\" \"ZONAL\" ];295   end</pre><h4>Word One<a name=\"d3faa9b1-8bcf-48d5-b799-d734e407e76c\"></a></h4><p>I always start with the word LEAST. It contains two popular vowels, and I like to use mathematical and other technical words. On July 25, a gold E from the <i>Times</i> tells me that the answer has an E somewhere, but not in slot number 2. The remaining letters are black, so today's answer does not have any L, A, S or T.</p><p>(If I were to ask Wordler for assistance with the first word, she would just reply with all 2315 words she knows.)</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Wordler01.png\" vspace=\"5\" /> </p><h4>Word Two<a name=\"e7c96b4b-26c7-4362-991f-f89625e418e4\"></a></h4><p>For the second word, I chose PHONE. It has the required E, as well as another popular vowel. It gets a gold O to go with the gold E.</p><p>(Wordler's suggestion in this situation would have been the 268 words containing an E in any slot except the second. That's not much help.)</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Wordler02.png\" vspace=\"5\" /> </p><h4>Word Three<a name=\"ecbedb8e-b368-424c-845c-13a8ffa38ca6\"></a></h4><p>I know now that I am seeking a word with an E in any slot except 2 or 5, an O in any slot except 3, and no L, A, S, T, P, H or N. I decided to try COVER and am rewarded with three green letters.</p><p>(Wordler knows 23 words meeting the requirements.)</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Wordler03.png\" vspace=\"5\" /> </p><h4>Word Four<a name=\"4ae0c571-eeb1-4f98-a47c-b695cf181456\"></a></h4><p>Here, for the first time, I decided to ask Wordler. I press the <tt>Words</tt> button and get some bad news. She tells me she knows seven possible words.</p><div><ul><li>BOXER</li><li>FOYER</li><li>JOKER</li><li>MOWER</li><li>ROGER</li><li>ROWER</li><li>WOOER</li></ul></div><p>I have only three guesses remaining. My odds of winning are less than 50-50. I chose MOWER because, if it is not correct, the three words containing W would be eliminated.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Wordler04.png\" vspace=\"5\" /> </p><h4>Word Five<a name=\"bb6699b4-4722-41fc-a429-cec8fa1ce44e\"></a></h4><p>Getting worried, I chose ROGER because it has two Rs. Again, not much luck.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Wordler05.png\" vspace=\"5\" /> </p><h4>Word Six<a name=\"f48e61e4-4b42-48a7-865f-a8de79008a6a\"></a></h4><p>This is my last chance and there are still three words remaining.</p><div><ul><li>BOXER</li><li>FOYER</li><li>JOKER</li></ul></div><p>Which would <i>you</i> choose?</p><p>I chose JOKER and strike out.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Wordler06.png\" vspace=\"5\" /> </p><h4>Final Word<a name=\"ec08f35c-412c-40b0-aa08-ef088e160836\"></a></h4><p>If you happen to have played puzzle number 1497, you realize that Wordler is missing at least one word from her vocabulary. The word that tripped up so many last week is GOFER, which neither I nor my assistant thought of.</p><p>(Ever-helpful Google informs us that a <a href=\"https://www.google.com/search?q=gofer\">GOFER</a> is \"a person who runs errands, especially on a movie set or in an office.\")</p><h4>Software<a name=\"d2350965-9e73-48bc-a9a9-5745e964f356\"></a></h4><p>The current version of Wordler isn't ready for public consumption. As we have just seen, her vocabulary is incomplete. I also know of bugs when there are repeated letters. If you would like a copy anyway, send me an email.</p><!--     function grabCode_cdfc5f3a37174fc19477d4e577edc688() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='cdfc5f3a37174fc19477d4e577edc688 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' cdfc5f3a37174fc19477d4e577edc688';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--cdfc5f3a37174fc19477d4e577edc688 ##### SOURCE BEGIN #####%% Wordler and I Fail on Puzzle 1497% Like millions of other folks, I play% <https://www.nytimes.com/games/wordle% _Wordle_> from the _New York Times_ almost every day.  % The _Times_ reports that _Wordle_ puzzle number 1497% on Friday, July 25,% was especially difficult.  The average puzzler required 5.7 attempts% and many failed to get the answer in the six moves allowed.% I have a MATLAB assistant that I call Wordler and, even with her% help, I failed on number 1497.% Here's why.%% (In 2022, _Wordle_ was the most-searched term on Google worldwide.% For more interesting facts about _Wordle_, see the% <https://en.wikipedia.org/wiki/Wordle% Wikipedia article>.)%% Wordler% Making a move in _Wordle_ involves two tasks.  First, thinking% of the words that can be played, and second,% deciding which of them to play.% I like to make all the key decisions myself, so my assistant does not% actually play _Wordle_.% When I ask Wordler for help, she just lists all % the words that could be played.  It is up to me to choose one.%% Wordler's Vocabulary%% Wordler's vocabulary is a hidden list of 2315 five-letter English words% that are the possible solutions.  The letter frequencies in this list% are not the same as in English itself.  For example, English has many % five-letter words ending in S, but most of them are plural nouns% and third-person singular verbs.  The vocabulary does not% have any of these. _Wordle_ words end in S less than 2% of the time, % compared to 31% of the time with the full set of five-letter words.%% Here is a portion of the vocabulary.dbtype vocabulary 1:9dbtype vocabulary 291:295%% Word One% I always start with the word LEAST.  It contains two popular% vowels, and I like to use mathematical and  other technical words.% On July 25, a gold E from the _Times_ tells me that the answer% has an E somewhere, but not in slot number 2.  The remaining letters% are black, so today's answer does not have any L, A, S or T.%% (If I were to ask Wordler for assistance with the first word, she% would just reply with all 2315 words she knows.)%% <<Wordler01.png>>%%% Word Two% For the second word, I chose PHONE.  It has the required E, as % well as another popular vowel.  It gets a gold O to go with % the gold E.%% (Wordler's suggestion in this situation would have been the 268 words% containing an E in any slot except the second.  That's not much help.)%% <<Wordler02.png>>%%% Word Three% I know now that I am seeking a word with an E in any slot except% 2 or 5, an O in any slot except 3, and no L, A, S, T, P,% H or N.  I decided to try COVER and am rewarded with three green% letters.%% (Wordler knows 23 words meeting the requirements.)%% <<Wordler03.png>>%%%  Word Four% Here, for the first time, I decided to ask Wordler.  I press the |Words|% button and get some bad news.% She tells me she knows seven possible words.%% * BOXER% * FOYER% * JOKER% * MOWER% * ROGER% * ROWER% * WOOER%% I have only three guesses remaining. % My odds of winning are less than 50-50.% I chose MOWER because, if it is not correct, the three words% containing W would be eliminated.%% <<Wordler04.png>>%%% Word Five% Getting worried, I chose ROGER because it has two Rs.% Again, not much luck.%% <<Wordler05.png>>%%% Word Six% This is my last chance and there are still three words remaining.%% * BOXER% * FOYER% * JOKER% % Which would _you_ choose?%% I chose JOKER and strike out.%% <<Wordler06.png>>%%% Final Word% If you happen to have played puzzle number 1497, you realize that% Wordler is missing at least one word from her vocabulary.  The word% that tripped up so many last week is GOFER, which neither I nor % my assistant thought of.% % (Ever-helpful Google informs us that a% <https://www.google.com/search?q=gofer GOFER> is \"a person who runs % errands, especially on a movie set or in an office.\")%% Software% The current version of Wordler isn't ready for public consumption.% As we have just seen, her vocabulary is incomplete. I also know% of bugs when there are repeated letters.  If you would like% a copy anyway, send me an email.##### SOURCE END ##### cdfc5f3a37174fc19477d4e577edc688-->",
            "url": "https://hpc.social/commercial-blog/2025/wordler-and-i-fail-on-puzzle-1497/",
            
            
            
            
            
            "date_published": "2025-07-29T19:44:54-06:00",
            "date_modified": "2025-07-29T19:44:54-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/my-favorite-matlab-demos/",
            "title": "My Favorite MATLAB Demos",
            "summary": null,
            "content_text": "In 1988, while I was with Ardent Computer in Silicon Valley, I gave a talk that previewed MATLAB graphics. The title was \"Pictures of Matrices\". At the time, a mathematician friend of mine asked.  Why would anyone want pictures of matrices?My response is the graphics demonstrations that we have done over the years. Here is a baker's dozen of my favorite examples.ContentsVibesPitch, Roll and YawRubiks CubeEigenwalkerSimulationSpongeDrumsJahnke and EmdePennyJordan FormExpshowEigshowEdenVibesThe vibrating L-shaped membrane.https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo/. Pitch, Roll and YawStudying rotations.https://blogs.mathworks.com/cleve/2023/02/10/grafix-users-guide/ Rubiks CubeThe world's greatest mathematical puzzle.https://blogs.mathworks.com/cleve/2022/04/04/digital-simulation-of-rubiks-cube/ EigenwalkerPrinciple component analysis of the human gait.https://blogs.mathworks.com/cleve/2016/04/11/the-eigenwalker-model-of-the-human-gait/ SimulationSimulink at the test track.https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices/ SpongeThe Menger sponge is a popular fractal that generalizes Cantor sets and Sierpinski triangles.https://blogs.mathworks.com/cleve/2021/12/06/the-menger-sponge-fractal/ DrumsContour plots of isospectral pairs.https://blogs.mathworks.com/cleve/2012/08/06/can-one-hear-the-shape-of-a-drum-part-1-eigenvalues/ Jahnke and EmdeContour plot of the Hankel function, based on a hand drawing in a 1933 book by German mathematicians Eugene Jahnke and Fritz Emde.https://blogs.mathworks.com/cleve/2014/12/15/jahnke-and-emde-revisited/ PennyHigh resolution measurements of the depth of the mold for the United States one cent coin.https://blogs.mathworks.com/cleve/2014/03/17/higher-resolution-penny/ Jordan FormJordan Canonical Form of the 64-by-64 Redheffer matrix from the MATLAB Gallery.https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix/ ExpshowAn interactive graphical experiment lets you discover the value of one of the most important numerical quantities in mathematics.https://blogs.mathworks.com/cleve/2015/07/27/discover-e-with-a-graphical-experiment/ EigshowOne of my all-time favorite MATLAB examples is eigshow.https://blogs.mathworks.com/cleve/2013/07/08/eigshow-week-1 EdenThis sketch of the MathWorks Logo was made by Eden Rajapakse when she was ten years old. Her blog post has received more \"likes\" than any other post.https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo/ Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>In 1988, while I was with Ardent Computer in Silicon Valley, I gave a talk that previewed MATLAB graphics. The title was \"Pictures of Matrices\". At the time, a mathematician friend of mine asked.</p><pre>  Why would anyone want pictures of matrices?</pre><p>My response is the graphics demonstrations that we have done over the years. Here is a baker's dozen of my favorite examples.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#1050b54b-03cc-4651-a92f-08b47bce1aba\">Vibes</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#cca646f4-d29d-4f64-8b12-9c8d6868aa07\">Pitch, Roll and Yaw</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#523be0a1-ef64-4117-8827-aadab1aec717\">Rubiks Cube</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#6c148e13-491e-48c4-8a1f-17bd6e1208ab\">Eigenwalker</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#5808e6ab-e3fa-4128-b43b-94218f7d6659\">Simulation</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#37dae5b7-d02a-41e0-805c-11d11d1418f8\">Sponge</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#9916dfbf-68eb-45a6-8e75-695014dcbc68\">Drums</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#744ce13d-9dbe-42d9-a2df-f3d6dc3c2548\">Jahnke and Emde</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#52de6435-9b73-4c4e-8402-401b64ad6571\">Penny</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#3fe4f412-05a9-4faf-823f-321a39baeb80\">Jordan Form</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c90e69f0-d3f5-4e44-a23a-c7434bffc251\">Expshow</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b73f8b6f-ac84-4b66-9b08-303afb8eaf13\">Eigshow</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8cac3156-b0b3-47d7-abf4-653302fc719c\">Eden</a></li></ul></div><h4>Vibes<a name=\"1050b54b-03cc-4651-a92f-08b47bce1aba\"></a></h4><p>The vibrating L-shaped membrane.</p><p><a href=\"https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo/\">https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo/</a>.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/vibes.gif\" vspace=\"5\" /> </p><h4>Pitch, Roll and Yaw<a name=\"cca646f4-d29d-4f64-8b12-9c8d6868aa07\"></a></h4><p>Studying rotations.</p><p><a href=\"https://blogs.mathworks.com/cleve/2023/02/10/grafix-users-guide/\">https://blogs.mathworks.com/cleve/2023/02/10/grafix-users-guide/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Graphics.png\" vspace=\"5\" /> </p><h4>Rubiks Cube<a name=\"523be0a1-ef64-4117-8827-aadab1aec717\"></a></h4><p>The world's greatest mathematical puzzle.</p><p><a href=\"https://blogs.mathworks.com/cleve/2022/04/04/digital-simulation-of-rubiks-cube/\">https://blogs.mathworks.com/cleve/2022/04/04/digital-simulation-of-rubiks-cube/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Qube_simplified.png\" vspace=\"5\" /> </p><h4>Eigenwalker<a name=\"6c148e13-491e-48c4-8a1f-17bd6e1208ab\"></a></h4><p>Principle component analysis of the human gait.</p><p><a href=\"https://blogs.mathworks.com/cleve/2016/04/11/the-eigenwalker-model-of-the-human-gait/\">https://blogs.mathworks.com/cleve/2016/04/11/the-eigenwalker-model-of-the-human-gait/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/walker.gif\" vspace=\"5\" /> </p><h4>Simulation<a name=\"5808e6ab-e3fa-4128-b43b-94218f7d6659\"></a></h4><p>Simulink at the test track.</p><p><a href=\"https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices/\">https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Simulink.png\" vspace=\"5\" /> </p><h4>Sponge<a name=\"37dae5b7-d02a-41e0-805c-11d11d1418f8\"></a></h4><p>The Menger sponge is a popular fractal that generalizes Cantor sets and Sierpinski triangles.</p><p><a href=\"https://blogs.mathworks.com/cleve/2021/12/06/the-menger-sponge-fractal/\">https://blogs.mathworks.com/cleve/2021/12/06/the-menger-sponge-fractal/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sponge2.png\" vspace=\"5\" /> </p><h4>Drums<a name=\"9916dfbf-68eb-45a6-8e75-695014dcbc68\"></a></h4><p>Contour plots of isospectral pairs.</p><p><a href=\"https://blogs.mathworks.com/cleve/2012/08/06/can-one-hear-the-shape-of-a-drum-part-1-eigenvalues/\">https://blogs.mathworks.com/cleve/2012/08/06/can-one-hear-the-shape-of-a-drum-part-1-eigenvalues/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/drums.png\" vspace=\"5\" /> </p><h4>Jahnke and Emde<a name=\"744ce13d-9dbe-42d9-a2df-f3d6dc3c2548\"></a></h4><p>Contour plot of the Hankel function, based on a hand drawing in a 1933 book by German mathematicians Eugene Jahnke and Fritz Emde.</p><p><a href=\"https://blogs.mathworks.com/cleve/2014/12/15/jahnke-and-emde-revisited/\">https://blogs.mathworks.com/cleve/2014/12/15/jahnke-and-emde-revisited/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/jahnke.png\" vspace=\"5\" /> </p><h4>Penny<a name=\"52de6435-9b73-4c4e-8402-401b64ad6571\"></a></h4><p>High resolution measurements of the depth of the mold for the United States one cent coin.</p><p><a href=\"https://blogs.mathworks.com/cleve/2014/03/17/higher-resolution-penny/\">https://blogs.mathworks.com/cleve/2014/03/17/higher-resolution-penny/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/penny.png\" vspace=\"5\" /> </p><h4>Jordan Form<a name=\"3fe4f412-05a9-4faf-823f-321a39baeb80\"></a></h4><p>Jordan Canonical Form of the 64-by-64 Redheffer matrix from the <a href=\"https://www.mathworks.com/help/releases/R2024b/matlab/ref/gallery.html\">MATLAB Gallery</a>.</p><p><a href=\"https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix/\">https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/jcf64.png\" vspace=\"5\" /> </p><h4>Expshow<a name=\"c90e69f0-d3f5-4e44-a23a-c7434bffc251\"></a></h4><p>An interactive graphical experiment lets you discover the value of one of the most important numerical quantities in mathematics.</p><p><a href=\"https://blogs.mathworks.com/cleve/2015/07/27/discover-e-with-a-graphical-experiment/\">https://blogs.mathworks.com/cleve/2015/07/27/discover-e-with-a-graphical-experiment/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/expshow.gif\" vspace=\"5\" /> </p><h4>Eigshow<a name=\"b73f8b6f-ac84-4b66-9b08-303afb8eaf13\"></a></h4><p>One of my all-time favorite MATLAB examples is eigshow.</p><p><a href=\"https://blogs.mathworks.com/cleve/2013/07/08/eigshow-week-1\">https://blogs.mathworks.com/cleve/2013/07/08/eigshow-week-1</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/eigshowp.gif\" vspace=\"5\" /> </p><h4>Eden<a name=\"8cac3156-b0b3-47d7-abf4-653302fc719c\"></a></h4><p>This sketch of the MathWorks Logo was made by Eden Rajapakse when she was ten years old. Her blog post has received more \"likes\" than any other post.</p><p><a href=\"https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo/\">https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo/</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Eden.png\" vspace=\"5\" /> </p><!--     function grabCode_2ccfc7657e20451c9a4b077ee478fbf0() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='2ccfc7657e20451c9a4b077ee478fbf0 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 2ccfc7657e20451c9a4b077ee478fbf0';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--2ccfc7657e20451c9a4b077ee478fbf0 ##### SOURCE BEGIN #####%% My Favorite MATLAB Demos% In 1988, while I was with Ardent Computer in Silicon Valley,% I gave a talk that previewed MATLAB graphics.  The title was% \"Pictures of Matrices\".  At the time, a mathematician friend% of mine asked.%%    Why would anyone want pictures of matrices?%% My response is the graphics demonstrations that we have done over the% years.  Here is a baker's dozen of my favorite examples.%% Vibes% The vibrating L-shaped membrane.%% <https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo></https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo>.%% <<vibes.gif>>%%% Pitch, Roll and Yaw% Studying rotations.%% <https://blogs.mathworks.com/cleve/2023/02/10/grafix-users-guide></https://blogs.mathworks.com/cleve/2023/02/10/grafix-users-guide>%% <<Graphics.png>>%%% Rubiks Cube% The world's greatest mathematical puzzle.%% <https://blogs.mathworks.com/cleve/2022/04/04/digital-simulation-of-rubiks-cube></https://blogs.mathworks.com/cleve/2022/04/04/digital-simulation-of-rubiks-cube>%% <<Qube_simplified.png>>%  %% Eigenwalker% Principle component analysis of the human gait.%% <https://blogs.mathworks.com/cleve/2016/04/11/the-eigenwalker-model-of-the-human-gait></https://blogs.mathworks.com/cleve/2016/04/11/the-eigenwalker-model-of-the-human-gait>%% <<walker.gif>>%%% Simulation% Simulink at the test track.%% <https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices></https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices>%% <<Simulink.png>>%% Sponge% The Menger sponge is a popular fractal that generalizes Cantor sets % and Sierpinski triangles. %% <https://blogs.mathworks.com/cleve/2021/12/06/the-menger-sponge-fractal></https://blogs.mathworks.com/cleve/2021/12/06/the-menger-sponge-fractal>%% <<sponge2.png>>%% Drums% Contour plots of isospectral pairs.%% <https://blogs.mathworks.com/cleve/2012/08/06/can-one-hear-the-shape-of-a-drum-part-1-eigenvalues></https://blogs.mathworks.com/cleve/2012/08/06/can-one-hear-the-shape-of-a-drum-part-1-eigenvalues>%% <<drums.png>>%% Jahnke and Emde% Contour plot of the Hankel function,% based on a hand drawing in a 1933 book by% German mathematicians Eugene Jahnke and Fritz Emde.%% <https://blogs.mathworks.com/cleve/2014/12/15/jahnke-and-emde-revisited></https://blogs.mathworks.com/cleve/2014/12/15/jahnke-and-emde-revisited>%% <<jahnke.png>>%% Penny% High resolution measurements of the depth of the mold for the% United States one cent coin.%% <https://blogs.mathworks.com/cleve/2014/03/17/higher-resolution-penny></https://blogs.mathworks.com/cleve/2014/03/17/higher-resolution-penny>%% <<penny.png>>%% Jordan Form% Jordan Canonical Form of the 64-by-64 Redheffer matrix% from the % <https://www.mathworks.com/help/releases/R2024b/matlab/ref/gallery.html% MATLAB Gallery>.%% <https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix></https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix>%% <<jcf64.png>>%% Expshow% An interactive graphical experiment lets you discover the value of one of the most important numerical quantities in mathematics.%% <https://blogs.mathworks.com/cleve/2015/07/27/discover-e-with-a-graphical-experiment></https://blogs.mathworks.com/cleve/2015/07/27/discover-e-with-a-graphical-experiment>%% <<expshow.gif>>%% Eigshow% One of my all-time favorite MATLAB examples is eigshow.%% <https://blogs.mathworks.com/cleve/2013/07/08/eigshow-week-1>%% <<eigshowp.gif>>%%% Eden% This sketch of the MathWorks Logo was made by Eden Rajapakse when % she was ten years old.  Her blog post has received more \"likes\"% than any other post.%% <https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo></https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo>%% <<Eden.png>>%##### SOURCE END ##### 2ccfc7657e20451c9a4b077ee478fbf0-->",
            "url": "https://hpc.social/commercial-blog/2025/my-favorite-matlab-demos/",
            
            
            
            
            
            "date_published": "2025-07-12T14:01:57-06:00",
            "date_modified": "2025-07-12T14:01:57-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/trip-report-householder-xxii/",
            "title": "Trip Report, Householder XXII",
            "summary": null,
            "content_text": "The twenty-second Householder Symposium on Numerical Linear Algebra was held June 8 - June 13 at Cornell. The local organizers were Anil Damle, Alex Townsend and David Bindel. Anil served as host and cheerleader.My talk was Wednesday morning. Here is the complete schedule.ContentsGroup SelfiePoster SessionQuantum ComputingHouseholder PrizesExcursionGr&uuml;eziThanksGroup SelfieAnil and Erik De Sturle orchestrated this group selfie. Can you find me? Do you recognize anyone else? Poster SessionThe Tuesday evening poster session was a high point of the meeting. Over 50 posters were set up in the Statler Terrace. We mingled, drank beer, ate ice cream and discussed the posters with their authors. I was impressed by the number of young people doing exciting work. Quantum ComputingA poster by Christine Tobler from MathWorks described the MATLAB Support Package for Quantum Computing. One model of a hypothetical quantum computer involves a state vector of probabilities and multiplication by unitary matrices.https://www.mathworks.com/content/dam/mathworks/handout/quantum-computing-cheat-sheet.pdf. A second poster by Sophia Keip, visiting Lawrence Berkeley National Laboratory from Fern Universit&auml;t in Hagen, Germany, and a plenary talk by Roel Van Beeumen from LBL, described QCLAB, another MATLAB quantum toolboxhttps://github.com/QuantumComputingLab/qclab. Householder PrizesThe Alston S. Householder Prize is awarded to the author of the best dissertation in numerical linear algebra submitted over the previous three years. This time there were two prize-winning submissions described in a special plenary session on Thursday evening.Alice Cortinovis from the University of Pisa won the prize for a dissertation supervised by Daniel Kressner from the Swiss Federal Institute of Technology in Lausanne. Jorge Garza-Vargas from Caltech and Jess Banks from U. C. Berkeley shared a second prize for a pair of dissertations supervised by Nikhil Srivastava from Berkeley. Jorge gave the talk. ExcursionA tradition at the seminars is the Wednesday afternoon excursion. This year we had the choice of a serious hike, an easy walk, a visit to a nearby winery, or a nap at the hotel. The walk was on the Gorge trail in Taughannock Falls State Park and was fabulous. Gr&uuml;eziGr&uuml;ezi is Swiss German for Hello. Anyone planning to attend the Householder seminar in 2028 should learn how to pronounce Gr&uuml;ezi. The seminar will be in Pontresina, Switzerland. Bart Vandereycken made the announcement. Pontresina was also the site for the Householder seminar in 1996. The Wednesday excursion at that meeting was a hike down the Morteratsch glacier at Diavolezza. ThanksThanks to Erik De Sturle for several of these photos.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>The twenty-second Householder Symposium on Numerical Linear Algebra was held June 8 - June 13 at Cornell. The local organizers were Anil Damle, Alex Townsend and David Bindel. Anil served as host and cheerleader.</p><p><a href=\"https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix/\">My talk</a> was Wednesday morning. Here is the complete <a href=\"https://householder-symposium.github.io/schedule.html\">schedule</a>.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#f402423b-cb81-4e90-93ab-76eebe7e3bff\">Group Selfie</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#900d99fc-07f7-4a8c-a630-0e6c7f347a8c\">Poster Session</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#ef80a124-71d5-4978-82d7-cd69347d59c9\">Quantum Computing</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#650df2ca-6b59-4e9d-b3b9-f02a4cf2bb10\">Householder Prizes</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#af59e9bd-360d-4e8c-9096-dd5f227784ea\">Excursion</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#928e34bb-faf3-4382-960a-704094ecbfe4\">Gr&uuml;ezi</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#f6f32e88-3fc4-4287-93d4-17b877519b2b\">Thanks</a></li></ul></div><h4>Group Selfie<a name=\"f402423b-cb81-4e90-93ab-76eebe7e3bff\"></a></h4><p>Anil and Erik De Sturle orchestrated this group selfie. Can you find me? Do you recognize anyone else?</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/HXXII_selfie.png\" vspace=\"5\" /> </p><h4>Poster Session<a name=\"900d99fc-07f7-4a8c-a630-0e6c7f347a8c\"></a></h4><p>The Tuesday evening poster session was a high point of the meeting. Over 50 posters were set up in the Statler Terrace. We mingled, drank beer, ate ice cream and discussed the posters with their authors. I was impressed by the number of young people doing exciting work.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Posters.png\" vspace=\"5\" /> </p><h4>Quantum Computing<a name=\"ef80a124-71d5-4978-82d7-cd69347d59c9\"></a></h4><p>A poster by Christine Tobler from MathWorks described the MATLAB Support Package for Quantum Computing. One model of a hypothetical quantum computer involves a state vector of probabilities and multiplication by unitary matrices.</p><div><ul><li><a href=\"https://www.mathworks.com/content/dam/mathworks/handout/quantum-computing-cheat-sheet.pdf\">https://www.mathworks.com/content/dam/mathworks/handout/quantum-computing-cheat-sheet.pdf</a>.</li></ul></div><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Christine.png\" vspace=\"5\" /> </p><p>A second poster by Sophia Keip, visiting Lawrence Berkeley National Laboratory from Fern Universit&auml;t in Hagen, Germany, and a plenary talk by Roel Van Beeumen from LBL, described QCLAB, another MATLAB quantum toolbox</p><div><ul><li><a href=\"https://github.com/QuantumComputingLab/qclab\">https://github.com/QuantumComputingLab/qclab</a>.</li></ul></div><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/QCLAB_poster.jpg\" vspace=\"5\" /> </p><h4>Householder Prizes<a name=\"650df2ca-6b59-4e9d-b3b9-f02a4cf2bb10\"></a></h4><p>The Alston S. Householder Prize is awarded to the author of the best dissertation in numerical linear algebra submitted over the previous three years. This time there were two prize-winning submissions described in a special plenary session on Thursday evening.</p><p>Alice Cortinovis from the University of Pisa won the prize for a dissertation supervised by Daniel Kressner from the Swiss Federal Institute of Technology in Lausanne.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Alice.png\" vspace=\"5\" /> </p><p>Jorge Garza-Vargas from Caltech and Jess Banks from U. C. Berkeley shared a second prize for a pair of dissertations supervised by Nikhil Srivastava from Berkeley. Jorge gave the talk.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Jorge.png\" vspace=\"5\" /> </p><h4>Excursion<a name=\"af59e9bd-360d-4e8c-9096-dd5f227784ea\"></a></h4><p>A tradition at the seminars is the Wednesday afternoon excursion. This year we had the choice of a serious hike, an easy walk, a visit to a nearby winery, or a nap at the hotel. The walk was on the Gorge trail in Taughannock Falls State Park and was fabulous.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Taughannock.png\" vspace=\"5\" /> </p><h4>Gr&uuml;ezi<a name=\"928e34bb-faf3-4382-960a-704094ecbfe4\"></a></h4><p>Gr&uuml;ezi is Swiss German for Hello. Anyone planning to attend the Householder seminar in 2028 should learn how to pronounce Gr&uuml;ezi. The seminar will be in Pontresina, Switzerland. Bart Vandereycken made the announcement.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Pontresina.png\" vspace=\"5\" /> </p><p>Pontresina was also the site for the Householder seminar in 1996. The Wednesday excursion at that meeting was a hike down the Morteratsch glacier at Diavolezza.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Glacier.png\" vspace=\"5\" /> </p><h4>Thanks<a name=\"f6f32e88-3fc4-4287-93d4-17b877519b2b\"></a></h4><p>Thanks to Erik De Sturle for several of these photos.</p><!--     function grabCode_3fc25520ada249c38d629067b3d5dc17() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='3fc25520ada249c38d629067b3d5dc17 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 3fc25520ada249c38d629067b3d5dc17';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--3fc25520ada249c38d629067b3d5dc17 ##### SOURCE BEGIN #####%% Trip Report, Householder XXII% The twenty-second% Householder Symposium on Numerical Linear Algebra was % held June 8 - June 13 at Cornell.% The local organizers were Anil Damle,% Alex Townsend and David Bindel.  Anil served as host and% cheerleader.  %% <https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix/% My talk> was Wednesday morning.% Here is the complete% <https://householder-symposium.github.io/schedule.html schedule>.%% Group Selfie% Anil and Erik De Sturle orchestrated this group selfie.% Can you find me?  Do you recognize anyone else?%% <<HXXII_selfie.png>>%%% Poster Session% The Tuesday evening poster session was a high point of the meeting.% Over 50 posters were set up in the Statler Terrace.% We mingled, drank beer, ate ice cream and% discussed the posters with their authors.% I was impressed by the number of young people doing exciting work.%% <<Posters.png>>%% Quantum Computing% A poster by Christine Tobler from MathWorks described the % MATLAB Support Package for Quantum Computing.% One model of a hypothetical quantum computer involves a% state vector of probabilities and multiplication by unitary matrices.%% * <https://www.mathworks.com/content/dam/mathworks/handout/quantum-computing-cheat-sheet.pdf>.%% <<Christine.png>>%% A second poster by Sophia Keip, visiting% Lawrence Berkeley National Laboratory from Fern Universität in% Hagen, Germany, and a plenary talk by % Roel Van Beeumen from LBL, % described QCLAB, another MATLAB quantum toolbox%% * <https://github.com/QuantumComputingLab/qclab>.%% <<QCLAB_poster.jpg>>%% Householder Prizes% The Alston S. Householder Prize is awarded to the author of% the best dissertation in numerical linear algebra % submitted over the previous three years.% This time there were two prize-winning submissions% described in a special plenary session on Thursday evening.% % Alice Cortinovis from the University of Pisa% won the prize for a dissertation% supervised by Daniel Kressner from the% Swiss Federal Institute of Technology in Lausanne.%% <<Alice.png>>%% Jorge Garza-Vargas from Caltech and % Jess Banks from U. C. Berkeley shared% a second prize for a pair of dissertations% supervised by Nikhil Srivastava from Berkeley.% Jorge gave the talk.%% <<Jorge.png>>%%% Excursion% A tradition at the seminars is the Wednesday afternoon excursion.% This year we had the choice of a serious hike, an easy walk,% a visit to a nearby winery, or a nap at the hotel.  The walk was on% the Gorge trail in Taughannock Falls State Park and was fabulous.%% <<Taughannock.png>>%% Grüezi% Grüezi is Swiss German for Hello.  Anyone planning to attend% the Householder seminar in 2028 should learn how to pronounce% Grüezi.% The seminar will be in Pontresina, Switzerland.% Bart Vandereycken made the announcement.%% <<Pontresina.png>>%% Pontresina was also the site for the Householder seminar in 1996.% The Wednesday excursion at that meeting was a hike down the Morteratsch% glacier at Diavolezza.% % <<Glacier.png>>%%% Thanks% Thanks to Erik De Sturle for several of these photos.##### SOURCE END ##### 3fc25520ada249c38d629067b3d5dc17-->",
            "url": "https://hpc.social/commercial-blog/2025/trip-report-householder-xxii/",
            
            
            
            
            
            "date_published": "2025-06-21T17:58:32-06:00",
            "date_modified": "2025-06-21T17:58:32-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/a-million-dollar-matrix/",
            "title": "A Million Dollar Matrix",
            "summary": null,
            "content_text": "The twenty-second Householder Symposium on Numerical Linear Algebra is this week, June 8 - June 13, 2025 at Cornell. My talk on Wednesday had the provocative title \"A Million-Dollar Matrix\". A PDF of the slides available at link_1. The talk covers posts in the Cleve's Corner blog last fall. link_2, link_3, link_4.ContentsRedheffer MatrixM&ouml;bius FunctionMertens FunctionRedheffer = MertensMertens ConjectureRiemann HypothesisRiemann Computations$1MSpoilerRedheffer MatrixEigenvaluesCharacteristic polynomialJordan Canonical FormCodeSparse RedhefferFive WaysComplexityTimingReferencesThanksRedheffer MatrixRay Redheffer (1921-2005) was a professor of mathematics at UCLA from 1950 until 2000. The Redheffer matrix, which he introduced in 1977, is n-by-n, with elements   R(k,j) = 1, if j = 1 or k divides j,          = 0, otherwiseHere is a spy plot for n = 64. The nonzero elements lie in the first column and on diagonals with integer-valued slopes. M&ouml;bius FunctionAugust M&ouml;bius (1790-1868) was an eminent 19th-century German mathematician. His M&ouml;bius function is a fundamental tool in the study of prime numbers.   mu(k) = 1 if k has an even number of distinct prime factors,         = 0 if k has a repeated prime factor,         = -1 if k has an odd number of distinct prime factors Mertens FunctionFranz Mertens (1840-1927) was born in the Grand Duchy of Posen in the Kingdom of Prussia, which is now Poland. He lived much his life in Vienna, Austria. The Mertens function is the cumulative sum of the M&ouml;bius function.$$ M(n) = \\sum_{k = 1}^{n} \\mu(k) $$M(n) is a running count of the integers that have an even number of prime factors, minus those with an odd number of prime factors. Redheffer = MertensThe determinant of the Redheffer matrix is equal to the Mertens function.det(R(n)) = M(n)Plots of M(n) are also plots of det(R(n)).Mertens ConjectureHow fast does M(n) grow as n increases? Here are plots of M(n) for n in powers of 10 from n = 10 to n = 10^8, together with plots of sqrt(n) and -sqrt(n). We see that, at least for n &lt; 10^8,   |M(n)| &lt; &radic;nThe Mertens conjecture is that this inequality holds for all n as n &rarr; &infin;. This conjecture is of interest because it implies the Riemann hypothesis.Riemann HypothesisThe Riemann hypothesis has been called the &ldquo;Most important unsolved problem in mathematics\". Its resolution is the objective of a Clay Millenium Prize valued at one-million dollars. The hypothesis, proposed by G. F. Bernard Riemann in 1859, concerns the zeta function ζ(z) and the location of its zeros.Riemann ComputationsComputation of the first N non-trivial zeros of ζ(s).                authors                    year                     N   ____________________________________    ____    __________________   Riemann                                 1854                     ?   Gram                                    1903                    10   Backlund                                1914                    79   Hutchinson                              1925                   138   Titchmarsh                              1936                 1,041   Turing                                  1953                 1,104   Lehmer                                  1956                25,000   Meller                                  1958                35,337   Lehman                                  1966               250,000   Rosser, Yohe, Schoenfield               1969             3,502,500   Brent                                   1977            40,000,000   Brent                                   1979            81,000,001   Brent, Van_de_Lune, Te_Riele, Winter    1982           200,000,001   Van_de_Lune, Te_Riele, Winter           1986         1,500,000,001   Van_de_Lune                             2001       100,000,000,000   Wedeniwski                              2003       250,000,000,000   Gourdon                                 2004    10,000,000,000,000$1MThe Mertens conjecture  |M(n)| &lt; &radic;nimplies the Riemann hypothesis and is worth $1M.So, a proof that  |det(R(n)| &lt; &radic;nwould earn R the title \"Million-Dollar Matrix\".SpoilerThe Mertens conjecture is false.Andrew Odlyzko and Herman te Riele (1985) prove  limsup n&rarr;&infin; M(n)/&radic;n &gt; 1.06This proves the existence of infinitely many values of n for which  |det(R(n))| &gt; 1.06 &radic;nThe proof is indirect. Nobody knows an actual value of n. Estimates are  n &gt;&gt; 10^30Redheffer MatrixEven though it is not worth a million dollars, Nick Higham included the Redheffer matrix in the original MATLAB gallery. The command  help private/redheffsays  A has N-FLOOR(LOG2(N))-1 eigenvalues equal to 1,  a real eigenvalue approximately SQRT(N),  a negative eigenvalue approximately -SQRT(N),  and the remaining eigenvalues are provably \"small\".For n = 64, this becomes  R(64) has 57 eigenvalues equal to 1,  a real eigenvalue approximately 8.0,  a negative eigenvalue approximately -8.0,  and the remaining eigenvalues are provably \"small\".EigenvaluesThe eigenvalues of R(64) are   eig(redheffer(64))   10.0445 + 0.0000i   -5.5442 + 0.0000i    0.0726 + 0.0000i    0.3213 + 0.4487i    0.3213 - 0.4487i    0.8923 + 0.1262i    0.8923 - 0.1262i   followed by    1.0000 + 0.0000i   repeated 57 times.Characteristic polynomialThe characteristic polynomial of R(64) is  p(z) * (z &ndash; 1)^57where  p(z) = z^7 - 7^z^6 - 42*z^5 + 127*z^4 - 130*z^3 + 67*z^2 - 18*z + 1Jordan Canonical Form Codetypemobius.mfunction mu = mobius(n)    % mu = mobius(n)    mu = ones(1,n);    mu(1) = -1;    for p = primes(n)        mu(p^2:p^2:n) = 0;        mu(p:p:n) = -mu(p:p:n);    endendtypemertens.mfunction M = mertens(n)    % M = mertens(n)    mu = mobius(n);    M = cumsum([1 mu(2:n)]);endtyperedheffer.mfunction R = redheffer(n)    % R = redheffer(n)    k = 1:n;    R = mod(k,k') == 0;    R(:,1) = 1;    R = double(R);endtypesparse_redheffer.mfunction S = sparse_redheffer(n)    % S = sparse_redheffer(n)    j(1:n) = (1:n)';    k(1:n) = 1;    m = n;    for i = 2:n        t = [1 i:i:n]';        p = length(t);        j(m+(1:p)) = t;        k(m+(1:p)) = i;        m = m+p;    end    S = sparse(k,j,1,n,n);endSparse Redheffer     n    tictoc            bytes            nnz      sparsity      det    |det|/&radic;n  10^1     0.000              664             36     0.3600000       -1      0.316  10^2     0.000           10,104            581     0.0581000        1      0.100  10^3     0.003          137,096          8,068     0.0080680        2      0.063  10^4     0.021        1,738,680        103,667     0.0010367      -23      0.230  10^5     0.216       21,067,992      1,266,749     0.0001267      -48      0.152  10^6     2.515      247,520,536     14,970,033     0.0000150      212      0.212  10^7    32.429    2,843,605,816    172,725,363     0.0000017     1037      0.328Five Waystypefivewaysfunction M = fiveways(n)    % Five Ways to Compute the Mertens/Redheffer Function     %1         R = redheffer(n);        M(1) = det(R);    %2         R =  sparse_redheffer(n);        [L,U,P,Q] = lu(R);        M(2) = det(L)*det(U)*det(P)*det(Q);    %3        R =  sparse_redheffer(n);        R(:,[1 n]) = R(:,[n 1]);        M(3) = -det(R);    %4        R =  sparse_redheffer(n);        T = R(2:n,2:n);        e = ones(1,n-1);        M(4) = 1 - e*(T\\e');    %5         mu = mobius(n);        cmu = cumsum([1 mu(2:end)]);        M(5) = cmu(n);end   Complexity     redheffer function  dets  complexity      M  #1 full      gallery     1   n^3             1  #2 sparse    lu          4   n*log(n)^2      1  #3 sparse    swap        1   n*log(n)^2      1  #4 sparse    \\           0   n*log(n)        1  #5 none      primes      0   n*log(log(n))  manyTiming         2e4     2e5     2e6     2e7   #1   26.33     -       -       -   #2    0.36   21.53     -       -   #3    0.08    1.29   16.71     -   #4    0.05    0.57    6.32   70.85   #5    0.01    0.03    0.27    3.18               Time (seconds)ReferencesM&ouml;bius (1832), Journal f&uuml;r die reine und angewandte Mathematik.9:105&ndash;123.Riemann (1859), \"Ueber die Anzahl der Primzahlen unter einer gegebenen Gr&ouml;sse\", Monatsberichte der Berliner Akademie (1892).Mertens (1897), Akademie Wissenschaftlicher Wien Mathematik-Naturlich, IIA.106:761&ndash;830.Redheffer (1977), Numerische Methoden bei Optimierungsaufgaben, Band 3: 213&ndash;216.Odlyzko &amp; te Riele (1985), Journal f&uuml;r die reine und angewandte Mathematik 357: 138&ndash;160.Barrett &amp; Jarvis (1992), Linear Algebra and Its Applications: 162&ndash;164.Borwein (2009), https://www.cecm.sfu.ca/~pborwein/course/math08/lecture.pdfThanksTim DavisJohn GilbertPat QuillenSteve LordJan van LentFrank StengerClaudeGet       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>The twenty-second Householder Symposium on Numerical Linear Algebra is this week, June 8 - June 13, 2025 at Cornell. My talk on Wednesday had the provocative title \"A Million-Dollar Matrix\". A PDF of the slides available at <a href=\"https://blogs.mathworks.com/cleve/files/HXXII.pdf\">link_1</a>. The talk covers posts in the Cleve's Corner blog last fall. <a href=\"https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/\">link_2</a>, <a href=\"https://blogs.mathworks.com/cleve/2024/09/27/redheffer-and-mertens-continued/\">link_3</a>, <a href=\"https://blogs.mathworks.com/cleve/2024/09/30/redheffer-and-mertens-accelerated/\">link_4</a>.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#25b2aace-84e9-4d9a-a27c-15d5539a37ad\">Redheffer Matrix</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#993f7c88-74fd-4966-9744-f4de4727cefb\">M&ouml;bius Function</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#7d219b38-27c3-4b59-a878-b38207378b02\">Mertens Function</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#f3c157c6-623e-40a9-b49b-6875c174e6ee\">Redheffer = Mertens</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c6cc0275-d896-4240-878d-0b4526b1469c\">Mertens Conjecture</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#7dd4489a-97fd-4d39-8241-3fcea4971a9b\">Riemann Hypothesis</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#40745ff7-a37f-4842-86aa-25f0466f3025\">Riemann Computations</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4b7c91ee-a863-443f-9d89-949e74e4e76f\">$1M</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#13d73959-3607-481b-9f91-0aa84ef5374d\">Spoiler</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#48fabfd4-1898-452d-bf69-8ecad8633faf\">Redheffer Matrix</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#a137a9e0-5a74-42e6-a581-2263656a7922\">Eigenvalues</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#961b7e39-1b1c-4228-8efc-b933a413c337\">Characteristic polynomial</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#720a334a-f1dd-4bcb-b9f0-b4a90b8cc462\">Jordan Canonical Form</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#40944e0c-0e4d-40f7-af80-eb42f70047c0\">Code</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#d3753176-600f-4555-8df8-79b0e1bd0041\">Sparse Redheffer</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c399ff75-6de0-431a-a7cf-0123a6b76cd4\">Five Ways</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#d8f77259-0ebb-4c0f-83ba-045268e8f55e\">Complexity</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#42aa9cf9-a26a-4397-87ea-76deefa34f22\">Timing</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#484631b3-76b0-4785-8239-045c0efe4492\">References</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#33b645c0-16b0-4849-88e1-05e50cb538c2\">Thanks</a></li></ul></div><h4>Redheffer Matrix<a name=\"25b2aace-84e9-4d9a-a27c-15d5539a37ad\"></a></h4><p>Ray Redheffer (1921-2005) was a professor of mathematics at UCLA from 1950 until 2000. The Redheffer matrix, which he introduced in 1977, is n-by-n, with elements</p><pre>   R(k,j) = 1, if j = 1 or k divides j,          = 0, otherwise</pre><p>Here is a <tt>spy</tt> plot for n = 64. The nonzero elements lie in the first column and on diagonals with integer-valued slopes.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/redheffer.png\" vspace=\"5\" /> </p><h4>M&ouml;bius Function<a name=\"993f7c88-74fd-4966-9744-f4de4727cefb\"></a></h4><p>August M&ouml;bius (1790-1868) was an eminent 19th-century German mathematician. His M&ouml;bius function is a fundamental tool in the study of prime numbers.</p><pre>   mu(k) = 1 if k has an even number of distinct prime factors,         = 0 if k has a repeated prime factor,         = -1 if k has an odd number of distinct prime factors</pre><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/mobius.png\" vspace=\"5\" /> </p><h4>Mertens Function<a name=\"7d219b38-27c3-4b59-a878-b38207378b02\"></a></h4><p>Franz Mertens (1840-1927) was born in the Grand Duchy of Posen in the Kingdom of Prussia, which is now Poland. He lived much his life in Vienna, Austria. The Mertens function is the cumulative sum of the M&ouml;bius function.</p><p>$$ M(n) = \\sum_{k = 1}^{n} \\mu(k) $$</p><p>M(n) is a running count of the integers that have an even number of prime factors, minus those with an odd number of prime factors.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/mertens.png\" vspace=\"5\" /> </p><h4>Redheffer = Mertens<a name=\"f3c157c6-623e-40a9-b49b-6875c174e6ee\"></a></h4><p>The determinant of the Redheffer matrix is equal to the Mertens function.</p><p><b>det(R(n)) = M(n)</b></p><p>Plots of M(n) are also plots of det(R(n)).</p><h4>Mertens Conjecture<a name=\"c6cc0275-d896-4240-878d-0b4526b1469c\"></a></h4><p>How fast does M(n) grow as n increases? Here are plots of M(n) for n in powers of 10 from n = 10 to n = 10^8, together with plots of sqrt(n) and -sqrt(n).</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/mertens2x4.png\" vspace=\"5\" /> </p><p>We see that, at least for n &lt; 10^8,</p><pre>   |M(n)| &lt; &radic;n</pre><p>The Mertens conjecture is that this inequality holds for all n as n &rarr; &infin;. This conjecture is of interest because it implies the Riemann hypothesis.</p><h4>Riemann Hypothesis<a name=\"7dd4489a-97fd-4d39-8241-3fcea4971a9b\"></a></h4><p>The Riemann hypothesis has been called the &ldquo;Most important unsolved problem in mathematics\". Its resolution is the objective of a Clay Millenium Prize valued at one-million dollars. The hypothesis, proposed by G. F. Bernard Riemann in 1859, concerns the zeta function ζ(z) and the location of its zeros.</p><h4>Riemann Computations<a name=\"40745ff7-a37f-4842-86aa-25f0466f3025\"></a></h4><p>Computation of the first N non-trivial zeros of ζ(s).</p><pre>                authors                    year                     N   ____________________________________    ____    __________________   Riemann                                 1854                     ?   Gram                                    1903                    10   Backlund                                1914                    79   Hutchinson                              1925                   138   Titchmarsh                              1936                 1,041   Turing                                  1953                 1,104   Lehmer                                  1956                25,000   Meller                                  1958                35,337   Lehman                                  1966               250,000   Rosser, Yohe, Schoenfield               1969             3,502,500   Brent                                   1977            40,000,000   Brent                                   1979            81,000,001   Brent, Van_de_Lune, Te_Riele, Winter    1982           200,000,001   Van_de_Lune, Te_Riele, Winter           1986         1,500,000,001   Van_de_Lune                             2001       100,000,000,000   Wedeniwski                              2003       250,000,000,000   Gourdon                                 2004    10,000,000,000,000</pre><h4>$1M<a name=\"4b7c91ee-a863-443f-9d89-949e74e4e76f\"></a></h4><p>The Mertens conjecture</p><pre>  |M(n)| &lt; &radic;n</pre><p>implies the Riemann hypothesis and is worth $1M.</p><p>So, a proof that</p><pre>  |det(R(n)| &lt; &radic;n</pre><p>would earn R the title \"Million-Dollar Matrix\".</p><h4>Spoiler<a name=\"13d73959-3607-481b-9f91-0aa84ef5374d\"></a></h4><p>The Mertens conjecture is false.</p><p>Andrew Odlyzko and Herman te Riele (1985) prove</p><pre>  limsup n&rarr;&infin; M(n)/&radic;n &gt; 1.06</pre><p>This proves the existence of infinitely many values of <tt>n</tt> for which</p><pre>  |det(R(n))| &gt; 1.06 &radic;n</pre><p>The proof is indirect. Nobody knows an actual value of <tt>n</tt>. Estimates are</p><pre>  n &gt;&gt; 10^30</pre><h4>Redheffer Matrix<a name=\"48fabfd4-1898-452d-bf69-8ecad8633faf\"></a></h4><p>Even though it is not worth a million dollars, Nick Higham included the Redheffer matrix in the original MATLAB <tt>gallery</tt>. The command</p><pre>  help private/redheff</pre><p>says</p><pre>  A has N-FLOOR(LOG2(N))-1 eigenvalues equal to 1,  a real eigenvalue approximately SQRT(N),  a negative eigenvalue approximately -SQRT(N),  and the remaining eigenvalues are provably \"small\".</pre><p>For n = 64, this becomes</p><pre>  R(64) has 57 eigenvalues equal to 1,  a real eigenvalue approximately 8.0,  a negative eigenvalue approximately -8.0,  and the remaining eigenvalues are provably \"small\".</pre><h4>Eigenvalues<a name=\"a137a9e0-5a74-42e6-a581-2263656a7922\"></a></h4><p>The eigenvalues of R(64) are</p><pre>   eig(redheffer(64))</pre><pre>   10.0445 + 0.0000i   -5.5442 + 0.0000i    0.0726 + 0.0000i    0.3213 + 0.4487i    0.3213 - 0.4487i    0.8923 + 0.1262i    0.8923 - 0.1262i</pre><pre>   followed by</pre><pre>    1.0000 + 0.0000i</pre><pre>   repeated 57 times.</pre><h4>Characteristic polynomial<a name=\"961b7e39-1b1c-4228-8efc-b933a413c337\"></a></h4><p>The characteristic polynomial of R(64) is</p><pre>  p(z) * (z &ndash; 1)^57</pre><p>where</p><pre>  p(z) = z^7 - 7^z^6 - 42*z^5 + 127*z^4 - 130*z^3 + 67*z^2 - 18*z + 1</pre><h4>Jordan Canonical Form<a name=\"720a334a-f1dd-4bcb-b9f0-b4a90b8cc462\"></a></h4><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/jcf64.png\" vspace=\"5\" /> </p><h4>Code<a name=\"40944e0c-0e4d-40f7-af80-eb42f70047c0\"></a></h4><pre class=\"codeinput\">type<span class=\"string\">mobius.m</span></pre><pre class=\"codeoutput\">function mu = mobius(n)    % mu = mobius(n)    mu = ones(1,n);    mu(1) = -1;    for p = primes(n)        mu(p^2:p^2:n) = 0;        mu(p:p:n) = -mu(p:p:n);    endend</pre><pre class=\"codeinput\">type<span class=\"string\">mertens.m</span></pre><pre class=\"codeoutput\">function M = mertens(n)    % M = mertens(n)    mu = mobius(n);    M = cumsum([1 mu(2:n)]);end</pre><pre class=\"codeinput\">type<span class=\"string\">redheffer.m</span></pre><pre class=\"codeoutput\">function R = redheffer(n)    % R = redheffer(n)    k = 1:n;    R = mod(k,k') == 0;    R(:,1) = 1;    R = double(R);end</pre><pre class=\"codeinput\">type<span class=\"string\">sparse_redheffer.m</span></pre><pre class=\"codeoutput\">function S = sparse_redheffer(n)    % S = sparse_redheffer(n)    j(1:n) = (1:n)';    k(1:n) = 1;    m = n;    for i = 2:n        t = [1 i:i:n]';        p = length(t);        j(m+(1:p)) = t;        k(m+(1:p)) = i;        m = m+p;    end    S = sparse(k,j,1,n,n);end</pre><h4>Sparse Redheffer<a name=\"d3753176-600f-4555-8df8-79b0e1bd0041\"></a></h4><pre>     n    tictoc            bytes            nnz      sparsity      det    |det|/&radic;n  10^1     0.000              664             36     0.3600000       -1      0.316  10^2     0.000           10,104            581     0.0581000        1      0.100  10^3     0.003          137,096          8,068     0.0080680        2      0.063  10^4     0.021        1,738,680        103,667     0.0010367      -23      0.230  10^5     0.216       21,067,992      1,266,749     0.0001267      -48      0.152  10^6     2.515      247,520,536     14,970,033     0.0000150      212      0.212  10^7    32.429    2,843,605,816    172,725,363     0.0000017     1037      0.328</pre><h4>Five Ways<a name=\"c399ff75-6de0-431a-a7cf-0123a6b76cd4\"></a></h4><pre class=\"codeinput\">type<span class=\"string\">fiveways</span></pre><pre class=\"codeoutput\">function M = fiveways(n)    % Five Ways to Compute the Mertens/Redheffer Function     %1         R = redheffer(n);        M(1) = det(R);    %2         R =  sparse_redheffer(n);        [L,U,P,Q] = lu(R);        M(2) = det(L)*det(U)*det(P)*det(Q);    %3        R =  sparse_redheffer(n);        R(:,[1 n]) = R(:,[n 1]);        M(3) = -det(R);    %4        R =  sparse_redheffer(n);        T = R(2:n,2:n);        e = ones(1,n-1);        M(4) = 1 - e*(T\\e');    %5         mu = mobius(n);        cmu = cumsum([1 mu(2:end)]);        M(5) = cmu(n);end   </pre><h4>Complexity<a name=\"d8f77259-0ebb-4c0f-83ba-045268e8f55e\"></a></h4><pre>     redheffer function  dets  complexity      M</pre><pre>  #1 full      gallery     1   n^3             1  #2 sparse    lu          4   n*log(n)^2      1  #3 sparse    swap        1   n*log(n)^2      1  #4 sparse    \\           0   n*log(n)        1  #5 none      primes      0   n*log(log(n))  many</pre><h4>Timing<a name=\"42aa9cf9-a26a-4397-87ea-76deefa34f22\"></a></h4><pre>         2e4     2e5     2e6     2e7</pre><pre>   #1   26.33     -       -       -   #2    0.36   21.53     -       -   #3    0.08    1.29   16.71     -   #4    0.05    0.57    6.32   70.85   #5    0.01    0.03    0.27    3.18</pre><pre>               Time (seconds)</pre><h4>References<a name=\"484631b3-76b0-4785-8239-045c0efe4492\"></a></h4><div><ul><li>M&ouml;bius (1832), Journal f&uuml;r die reine und angewandte Mathematik.9:105&ndash;123.</li><li>Riemann (1859), \"Ueber die Anzahl der Primzahlen unter einer gegebenen Gr&ouml;sse\", Monatsberichte der Berliner Akademie (1892).</li><li>Mertens (1897), Akademie Wissenschaftlicher Wien Mathematik-Naturlich, IIA.106:761&ndash;830.</li><li>Redheffer (1977), Numerische Methoden bei Optimierungsaufgaben, Band 3: 213&ndash;216.</li><li>Odlyzko &amp; te Riele (1985), Journal f&uuml;r die reine und angewandte Mathematik 357: 138&ndash;160.</li><li>Barrett &amp; Jarvis (1992), Linear Algebra and Its Applications: 162&ndash;164.</li><li>Borwein (2009), <a href=\"https://www.cecm.sfu.ca/~pborwein/course/math08/lecture.pdf\">https://www.cecm.sfu.ca/~pborwein/course/math08/lecture.pdf</a></li></ul></div><h4>Thanks<a name=\"33b645c0-16b0-4849-88e1-05e50cb538c2\"></a></h4><div><ul><li>Tim Davis</li><li>John Gilbert</li><li>Pat Quillen</li><li>Steve Lord</li><li>Jan van Lent</li><li>Frank Stenger</li><li>Claude</li></ul></div><!--     function grabCode_e40ab05a928f42b9956d24c156a2b00f() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='e40ab05a928f42b9956d24c156a2b00f ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' e40ab05a928f42b9956d24c156a2b00f';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--e40ab05a928f42b9956d24c156a2b00f ##### SOURCE BEGIN #####    %% My Talk at Householder XXII% The twenty-second Householder Symposium on % Numerical Linear Algebra is this week,% June 8 - June 13, 2025 at Cornell.% My talk on Wednesday had the provocative title% \"A Million-Dollar Matrix\".% A PDF of the slides available at% <https://blogs.mathworks.com/cleve/files/HXXII.pdf% link_1>.% The talk covers posts in the Cleve's Corner blog last fall.% <https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/% link_2>,% <https://blogs.mathworks.com/cleve/2024/09/27/redheffer-and-mertens-continued/% link_3>,% <https://blogs.mathworks.com/cleve/2024/09/30/redheffer-and-mertens-accelerated/% link_4>.%% Redheffer Matrix% Ray Redheffer (1921-2005) was a professor of mathematics% at UCLA from 1950 until 2000.  The Redheffer matrix, which% he introduced in 1977, is n-by-n, with elements%%     R(k,j) = 1, if j = 1 or k divides j,%            = 0, otherwise%% Here is a |spy| plot for n = 64.  The nonzero elements lie% in the first column and on diagonals with integer-valued slopes.% % <<redheffer.png>>%%% Möbius Function % August Möbius (1790-1868) was an eminent 19th-century German% mathematician.  His Möbius function is a fundamental tool in% the study of prime numbers.% %     mu(k) = 1 if k has an even number of distinct prime factors,%           = 0 if k has a repeated prime factor,%           = -1 if k has an odd number of distinct prime factors%% <<mobius.png>>%%% Mertens Function% Franz Mertens (1840-1927) was born in the Grand Duchy of Posen% in the Kingdom of Prussia, which is now Poland.  He lived much% his life in Vienna, Austria.  The Mertens function is the% cumulative sum of the Möbius function.%% $$ M(n) = \\sum_{k = 1}^{n} \\mu(k) $$%% M(n) is a running count of the integers that have% an even number of prime factors, minus those with% an odd number of prime factors.%% <<mertens.png>>%%% Redheffer = Mertens% The determinant of the Redheffer matrix is equal to the Mertens% function.%% *det(R(n)) = M(n)*%% Plots of M(n) are also plots of det(R(n)).%% Mertens Conjecture% How  fast does M(n) grow as n increases?% Here are plots of M(n) for n in powers of 10 from n = 10 to n = 10^8,% together with plots of sqrt(n) and -sqrt(n). %% <<mertens2x4.png>>%%%% We see that, at least for n < 10^8,%%     |M(n)| < √n%% The Mertens conjecture is that this inequality holds for all n as n → ∞.% This conjecture is of interest because it% implies the Riemann hypothesis.%% Riemann Hypothesis% The Riemann hypothesis has been called the “Most important unsolved % problem in mathematics\".  Its resolution is the objective of a% Clay Millenium Prize valued at one-million dollars.% The hypothesis, proposed by G. F. Bernard Riemann in 1859,% concerns the zeta function ζ(z) and the location of its zeros.%%% Riemann Computations% Computation of the first N non-trivial zeros of ζ(s).%%                  authors                    year                     N       %     ____________________________________    ____    __________________%     Riemann                                 1854                     ?%     Gram                                    1903                    10%     Backlund                                1914                    79%     Hutchinson                              1925                   138%     Titchmarsh                              1936                 1,041%     Turing                                  1953                 1,104%     Lehmer                                  1956                25,000%     Meller                                  1958                35,337%     Lehman                                  1966               250,000%     Rosser, Yohe, Schoenfield               1969             3,502,500%     Brent                                   1977            40,000,000%     Brent                                   1979            81,000,001%     Brent, Van_de_Lune, Te_Riele, Winter    1982           200,000,001%     Van_de_Lune, Te_Riele, Winter           1986         1,500,000,001%     Van_de_Lune                             2001       100,000,000,000%     Wedeniwski                              2003       250,000,000,000%     Gourdon                                 2004    10,000,000,000,000%% $1M% The Mertens conjecture%%    |M(n)| < √n%% implies the Riemann hypothesis and is worth $1M. %% So, a proof that%%    |det(R(n)| < √n%% would earn R the title \"Million-Dollar Matrix\".%% Spoiler% The Mertens conjecture is false.%% Andrew Odlyzko and Herman te Riele (1985) prove%%    limsup n→∞ M(n)/√n > 1.06%% This proves the existence of infinitely many values% of |n| for which%%    |det(R(n))| > 1.06 √n%% The proof is indirect.  Nobody knows an actual value of |n|.% Estimates are %%    n >> 10^30%%% Redheffer Matrix% Even though it is not worth a million dollars,% Nick Higham included the Redheffer matrix in the original% MATLAB |gallery|. The command%%    help private/redheff% % says%%    A has N-FLOOR(LOG2(N))-1 eigenvalues equal to 1,%    a real eigenvalue approximately SQRT(N),%    a negative eigenvalue approximately -SQRT(N),%    and the remaining eigenvalues are provably \"small\".%% For n = 64, this becomes%%    R(64) has 57 eigenvalues equal to 1,%    a real eigenvalue approximately 8.0,%    a negative eigenvalue approximately -8.0,%    and the remaining eigenvalues are provably \"small\".%%% Eigenvalues% The eigenvalues of R(64) are%%     eig(redheffer(64))%   %     10.0445 + 0.0000i%     -5.5442 + 0.0000i%      0.0726 + 0.0000i%      0.3213 + 0.4487i%      0.3213 - 0.4487i%      0.8923 + 0.1262i%      0.8923 - 0.1262i  %%     followed by%%      1.0000 + 0.0000i%%     repeated 57 times.%%% Characteristic polynomial% The characteristic polynomial of R(64) is% %    p(z) * (z – 1)^57%% where %%    p(z) = z^7 - 7^z^6 - 42*z^5 + 127*z^4 - 130*z^3 + 67*z^2 - 18*z + 1%%% Jordan Canonical Form%% <<jcf64.png>>%% Code%    type mobius.m%%%    type mertens.m%%%    type redheffer.m%%%    type sparse_redheffer.m%% Sparse Redheffer%  %       n    tictoc            bytes            nnz      sparsity      det    |det|/√n%    10^1     0.000              664             36     0.3600000       -1      0.316%    10^2     0.000           10,104            581     0.0581000        1      0.100%    10^3     0.003          137,096          8,068     0.0080680        2      0.063%    10^4     0.021        1,738,680        103,667     0.0010367      -23      0.230%    10^5     0.216       21,067,992      1,266,749     0.0001267      -48      0.152%    10^6     2.515      247,520,536     14,970,033     0.0000150      212      0.212%    10^7    32.429    2,843,605,816    172,725,363     0.0000017     1037      0.328%        %% Five Ways%    type fiveways  %% Complexity%%%%       redheffer function  dets  complexity      M%%    #1 full      gallery     1   n^3             1%    #2 sparse    lu          4   n*log(n)^2      1%    #3 sparse    swap        1   n*log(n)^2      1%    #4 sparse    \\           0   n*log(n)        1%    #5 none      primes      0   n*log(log(n))  many%% Timing%%%           2e4     2e5     2e6     2e7%%     #1   26.33     -       -       -%     #2    0.36   21.53     -       -%     #3    0.08    1.29   16.71     -%     #4    0.05    0.57    6.32   70.85%     #5    0.01    0.03    0.27    3.18%%                 Time (seconds)%% References%% * Möbius (1832), Journal für die reine und angewandte Mathematik.9:105–123.% * Riemann (1859), \"Ueber die Anzahl der Primzahlen unter einer gegebenen Grösse\",%   Monatsberichte der Berliner Akademie (1892).% * Mertens (1897), Akademie Wissenschaftlicher Wien Mathematik-Naturlich, IIA.106:761–830.% * Redheffer (1977), Numerische Methoden bei Optimierungsaufgaben, Band 3: 213–216.% * Odlyzko & te Riele (1985), Journal für die reine und angewandte Mathematik 357: 138–160.% * Barrett & Jarvis (1992), Linear Algebra and Its Applications: 162–164.% * Borwein (2009), https://www.cecm.sfu.ca/~pborwein/course/math08/lecture.pdf%% Thanks% * Tim Davis% * John Gilbert% * Pat Quillen% * Steve Lord% * Jan van Lent% * Frank Stenger% * Claude##### SOURCE END ##### e40ab05a928f42b9956d24c156a2b00f-->",
            "url": "https://hpc.social/commercial-blog/2025/a-million-dollar-matrix/",
            
            
            
            
            
            "date_published": "2025-06-12T20:32:59-06:00",
            "date_modified": "2025-06-12T20:32:59-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/revolving-century-puzzle-and-magic-squares/",
            "title": "Revolving Century Puzzle and Magic Squares",
            "summary": null,
            "content_text": "The Revolving Century puzzle is a beautifully made wooden puzzle from Creative Crafthouse in Hudson, Florida.The sum of the numbers on each of the six rotating puzzle pieces is 100. The goal is to rotate the pieces so that the sum for each of the six columns is also 100. It is like a circular 6-by-6 magic square. ContentsDigital VersionStateMoveSearchMagicSolutionSoftwareDigital VersionOur digital version of the Revolving Century puzzle uses 36 polyshapes like this one.  The pieces are numbered with the integers from zero to 35, except the piece numbered 30 has been replaced by a second zero. This gives the desired \"century\" sum.   v = 0:35;   v(v==30) = 0;   c = sum(v)/6   c =      100StateThe state of the puzzle is described by a 6-by-6 matrix.    A = start   A =        1     4    25    29     6    35       18     5    34    33     0    10       19    24     2    26     8    21       28    13    32     0    11    16       12    14    23     7    27    17       15    20    22    31     3     9The row sums are all equal, but the column sums are not.   rows = sum(A')   cols = sum(A)   rows =      100   100   100   100   100   100   cols =       93    80   138   126    55   108MoveA puzzle move rotates one row of the state matrix, for example, the third row.   shift = [2:6 1];   r = 3;   A   A(r,:) = A(r,shift)   A =        1     4    25    29     6    35       18     5    34    33     0    10       19    24     2    26     8    21       28    13    32     0    11    16       12    14    23     7    27    17       15    20    22    31     3     9  A =        1     4    25    29     6    35       18     5    34    33     0    10       24     2    26     8    21    19       28    13    32     0    11    16       12    14    23     7    27    17       15    20    22    31     3     9Since we have a computer handy, we can also track the column sums. SearchThe only way to find a solution that I know of is an exhaustive search. There are only 6^5 = 7776 possible states. It takes 4787 steps and less than a tenth of a second on my laptop to find the solution.Here are the last few steps of the exhaustive search for a solution. MagicI could have used an actual magic square.   A = magic(6)   A =       35     1     6    26    19    24        3    32     7    21    23    25       31     9     2    22    27    20        8    28    33    17    10    15       30     5    34    12    14    16        4    36    29    13    18    11I would need to change the name of the puzzle to \"Revolution 111\". SolutionHere is the solution of the original Revolution Century puzzle.   A = solution   A =       25    29     6    35     1     4       33     0    10    18     5    34       21    19    24     2    26     8       11    16    28    13    32     0        7    27    17    12    14    23        3     9    15    20    22    31 I can transfer that to the analog puzzle. SoftwareA self-extracting archive for polypuzzle is available here.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>The Revolving Century puzzle is a beautifully made wooden puzzle from <a href=\"https://www.creativecrafthouse.com/\">Creative Crafthouse</a> in Hudson, Florida.</p><p>The sum of the numbers on each of the six rotating puzzle pieces is 100. The goal is to rotate the pieces so that the sum for each of the six columns is also 100. It is like a circular 6-by-6 magic square.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/start.png\" vspace=\"5\" /> </p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#370f5ced-4a82-475a-a76b-65fd1b2a7bb7\">Digital Version</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c1a4a056-9449-4e06-b815-9d6a39b356bb\">State</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#89c70e0c-1c00-487f-9231-5089993f00c4\">Move</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e7b4e63f-911d-498e-b8d5-7db3f9ebb8b7\">Search</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#5bf0e80f-113f-44e0-8c18-fbd782201f99\">Magic</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#a233dce1-c8e7-4952-9d4f-e1c668c44e38\">Solution</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c80f5fc6-c4ef-4d9f-b617-4d868c466333\">Software</a></li></ul></div><h4>Digital Version<a name=\"370f5ced-4a82-475a-a76b-65fd1b2a7bb7\"></a></h4><p>Our digital version of the Revolving Century puzzle uses 36 <a href=\"https://blogs.mathworks.com/cleve/2022/08/21/polygons-polyshapes-and-puzzles/\">polyshapes</a> like this one.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/piece19.png\" vspace=\"5\" /> </p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/m_start.png\" vspace=\"5\" /> </p><p>The pieces are numbered with the integers from zero to 35, except the piece numbered 30 has been replaced by a second zero. This gives the desired \"century\" sum.</p><pre class=\"codeinput\">   v = 0:35;   v(v==30) = 0;   c = sum(v)/6</pre><pre class=\"codeoutput\">   c =      100</pre><h4>State<a name=\"c1a4a056-9449-4e06-b815-9d6a39b356bb\"></a></h4><p>The state of the puzzle is described by a 6-by-6 matrix.</p><pre class=\"codeinput\">    A = start</pre><pre class=\"codeoutput\">   A =        1     4    25    29     6    35       18     5    34    33     0    10       19    24     2    26     8    21       28    13    32     0    11    16       12    14    23     7    27    17       15    20    22    31     3     9</pre><p>The row sums are all equal, but the column sums are not.</p><pre class=\"codeinput\">   rows = sum(A')   cols = sum(A)</pre><pre class=\"codeoutput\">   rows =      100   100   100   100   100   100   cols =       93    80   138   126    55   108</pre><h4>Move<a name=\"89c70e0c-1c00-487f-9231-5089993f00c4\"></a></h4><p>A puzzle move rotates one row of the state matrix, for example, the third row.</p><pre class=\"codeinput\">   shift = [2:6 1];   r = 3;   A   A(r,:) = A(r,shift)</pre><pre class=\"codeoutput\">   A =        1     4    25    29     6    35       18     5    34    33     0    10       19    24     2    26     8    21       28    13    32     0    11    16       12    14    23     7    27    17       15    20    22    31     3     9  A =        1     4    25    29     6    35       18     5    34    33     0    10       24     2    26     8    21    19       28    13    32     0    11    16       12    14    23     7    27    17       15    20    22    31     3     9</pre><p>Since we have a computer handy, we can also track the column sums.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/piece19.gif\" vspace=\"5\" /> </p><h4>Search<a name=\"e7b4e63f-911d-498e-b8d5-7db3f9ebb8b7\"></a></h4><p>The only way to find a solution that I know of is an exhaustive search. There are only <tt>6^5 = 7776</tt> possible states. It takes 4787 steps and less than a tenth of a second on my laptop to find the solution.</p><p>Here are the last few steps of the exhaustive search for a solution.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/polypuzzle.gif\" vspace=\"5\" /> </p><h4>Magic<a name=\"5bf0e80f-113f-44e0-8c18-fbd782201f99\"></a></h4><p>I could have used an actual magic square.</p><pre class=\"codeinput\">   A = magic(6)</pre><pre class=\"codeoutput\">   A =       35     1     6    26    19    24        3    32     7    21    23    25       31     9     2    22    27    20        8    28    33    17    10    15       30     5    34    12    14    16        4    36    29    13    18    11</pre><p>I would need to change the name of the puzzle to \"Revolution 111\".</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/magic6.gif\" vspace=\"5\" /> </p><h4>Solution<a name=\"a233dce1-c8e7-4952-9d4f-e1c668c44e38\"></a></h4><p>Here is the solution of the original Revolution Century puzzle.</p><pre class=\"codeinput\">   A = solution</pre><pre class=\"codeoutput\">   A =       25    29     6    35     1     4       33     0    10    18     5    34       21    19    24     2    26     8       11    16    28    13    32     0        7    27    17    12    14    23        3     9    15    20    22    31</pre><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/m_solution.png\" vspace=\"5\" /> </p><p>I can transfer that to the analog puzzle.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/solution.png\" vspace=\"5\" /> </p><h4>Software<a name=\"c80f5fc6-c4ef-4d9f-b617-4d868c466333\"></a></h4><p>A self-extracting archive for <tt>polypuzzle</tt> is available <a href=\"https://blogs.mathworks.com/cleve/files/Puzzle_mzip.m\">here</a>.</p><!--     function grabCode_f1d26faf2b644b55b95e3995bb8d7cdb() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='f1d26faf2b644b55b95e3995bb8d7cdb ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' f1d26faf2b644b55b95e3995bb8d7cdb';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--f1d26faf2b644b55b95e3995bb8d7cdb ##### SOURCE BEGIN #####%% Revolving Century Puzzle and Magic Squares% The Revolving Century puzzle is a beautifully made wooden puzzle% from <https://www.creativecrafthouse.com/ Creative Crafthouse>% in Hudson, Florida.%% The sum of the numbers on each of the six rotating puzzle% pieces is 100.  The goal is to rotate the pieces so that% the sum for each of the six columns is also 100.  It is like % a circular 6-by-6 magic square.%% <<start.png>>%%% Digital Version% Our digital version of the Revolving Century puzzle uses 36  % <https://blogs.mathworks.com/cleve/2022/08/21/polygons-polyshapes-and-puzzles/% polyshapes> like this one.%% <<piece19.png>>%% <<m_start.png>>%%%% The pieces are numbered with the integers from zero to 35, except% the piece numbered 30 has been replaced by a second zero. % This gives the desired \"century\" sum.      v = 0:35;    v(v==30) = 0;     c = sum(v)/6%% State% The state of the puzzle is described by a 6-by-6 matrix.    A = start%%% The row sums are all equal, but the column sums are not.    rows = sum(A')    cols = sum(A)%% Move% A puzzle move rotates one row of the state matrix,% for example, the third row.    shift = [2:6 1];    r = 3;    A    A(r,:) = A(r,shift)%%% Since we have a computer handy, we can also track the column sums.%% <<piece19.gif>>%%% Search% The only way to find a solution that I know of is% an exhaustive search.  There are only |6^5 = 7776|% possible states.  % It takes 4787 steps and less than a tenth of a second% on my laptop to find the solution.%% Here are the last few steps of the exhaustive search% for a solution.% % <<polypuzzle.gif>>%%% Magic% I could have used an actual magic square.    A = magic(6)%%% I would need to change the name of the puzzle to \"Revolution 111\".%% <<magic6.gif>>%%% Solution% Here is the solution of the original Revolution Century puzzle.    A = solution%%% <<m_solution.png>>%% I can transfer that to the analog puzzle.%% <<solution.png>>%%% Software% A self-extracting archive for |polypuzzle| is available% <https://blogs.mathworks.com/cleve/files/Puzzle_mzip.m here>.##### SOURCE END ##### f1d26faf2b644b55b95e3995bb8d7cdb-->",
            "url": "https://hpc.social/commercial-blog/2025/revolving-century-puzzle-and-magic-squares/",
            
            
            
            
            
            "date_published": "2025-05-11T14:53:11-06:00",
            "date_modified": "2025-05-11T14:53:11-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/l-systems-plants-fractal-curves-turtles-and-dragons/",
            "title": "L-systems, Plants, Fractal Curves, Turtles and Dragons",
            "summary": null,
            "content_text": "No, this is not the script for an episode of \"Game of Thrones\". It is a blog post about Lindenmayer grammars, growing plants, space-filling fractals, turtle graphics and dragon curves.Here is the opening screen from our new program, MLogo. ContentsL-systemsMLogoDragon CurveHilbert CurveGosper FractalAlgorithmic Beauty of PlantsSoftwareL-systemsAristid Lindenmayer (1925-1989) was a Hungarian biologist and botanist at the University of Utrecht. In 1968 he introduced a formal grammar for string rewrite rules that can describe living plants, artificial fractals, and especially, artificial fractals that model living plants.Lindenmayer's strings drive MLogo. A simple example is  R = @(s) replace(s,\"A\",\"A+A-A\");If you start with  s = \"A\"and repeat  s = R(s)three times, the result is  A  A+A-A  A+A-A+A+A-A-A+A-A  A+A-A+A+A-A-A+A-A+A+A-A+A+A-A-A+A-A-A+A-A+A+A-A-A+A-AMLogoLogo is a programming language, aimed at young students, developed in 1967 by MIT professors Wally Feurzeig, Seymour Papert, and Cynthia Solomon. Logo has been very influential, spawning hundreds of implementations and successors. MLogo, short for MATLAB Logo, is another successor.A distinctive feature of Logo offprings is \"turtle graphics\". Basic Logo commands like step, turn, and draw drive a virtual tortoise, originally a motorized toy, and later a graphics cursor. Here is a sample with turtle driven by this Lindenmayer system.A step forward+ turn left 90 degrees- turn right 90 degreess = A+A-A-A+ Dragon CurveThe dragon space-filling fractal curve was invented by NASA physicist John Heighway and his colleagues and featured in Martin Gardner's Scientific American column in 1967. I made a Cleve's Corner posting about the dragon curve in 2018.Here is MLogo's dragon. Here is a frame from \"Numberphile\" video where Brady Haran visits Don Knuth and the unique ceramic tile dragon in his home. Hilbert CurveDavid Hilbert (1862-1943), one of the most influential mathematicians of his era, introduced the space-filling fractal Hilbert curve in 1891.Here is MLogo's Hilbert curve. Here is a crazy application of the Hilbert curve, Randall Munroe's view of Internet addresses in 2006, https://xkcd.com/195. https://xkcd.com/195Gosper FractalBill Gosper, one of the original MIT \"hackers\", has made major contributions to Lisp and Macsyma, found the \"glider gun\" for Conway's Game of Life, and invented the Gosper fractal.Here is MLogo's rendition. Dragon Nerd creates jewelry from the Gosper curve and other fractals. https://www.etsy.com/shop/DragonNerdAlgorithmic Beauty of Plants\"The Algorithmic Beauty of Plants\" is a beautiful book by Przemyslaw Prusinkiewicz and Aristid Lindenmayer, featuring over fifty color figures of computer-generated plants. The original book is available from Springer Nature. A PDF version is available from AlgormicBotany at the University of Calgary. This is MLogo's rendition of one small example. Softwarehttps://blogs.mathworks.com/cleve/files/MLogo.mGet       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>No, this is not the script for an episode of \"Game of Thrones\". It is a blog post about Lindenmayer grammars, growing plants, space-filling fractals, turtle graphics and dragon curves.</p><p>Here is the opening screen from our new program, MLogo.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/MLogo.png\" vspace=\"5\" /> </p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e4c73f18-5203-41ab-aae7-29dfc3c677bc\">L-systems</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#2b729287-e100-42ba-9e7f-ceab5a7a41a4\">MLogo</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#fb091433-870d-4ce0-82f6-4310e751f537\">Dragon Curve</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#984588f4-4cb8-4fa5-8978-ec6e07b244b2\">Hilbert Curve</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#27758267-deb0-4d68-9287-7f7af46ef0ec\">Gosper Fractal</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#164f12f3-6e87-42af-b4e5-b38dd5d03010\">Algorithmic Beauty of Plants</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b0adc2d3-245d-4aca-b9f1-6a19fc7af2f3\">Software</a></li></ul></div><h4>L-systems<a name=\"e4c73f18-5203-41ab-aae7-29dfc3c677bc\"></a></h4><p>Aristid Lindenmayer (1925-1989) was a Hungarian biologist and botanist at the University of Utrecht. In 1968 he introduced a formal grammar for string rewrite rules that can describe living plants, artificial fractals, and especially, artificial fractals that model living plants.</p><p>Lindenmayer's strings drive MLogo. A simple example is</p><pre>  R = @(s) replace(s,\"A\",\"A+A-A\");</pre><p>If you start with</p><pre>  s = \"A\"</pre><p>and repeat</p><pre>  s = R(s)</pre><p>three times, the result is</p><pre>  A  A+A-A  A+A-A+A+A-A-A+A-A  A+A-A+A+A-A-A+A-A+A+A-A+A+A-A-A+A-A-A+A-A+A+A-A-A+A-A</pre><h4>MLogo<a name=\"2b729287-e100-42ba-9e7f-ceab5a7a41a4\"></a></h4><p><a href=\"https://en.wikipedia.org/wiki/Logo_(programming_language)\">Logo</a> is a programming language, aimed at young students, developed in 1967 by MIT professors Wally Feurzeig, Seymour Papert, and Cynthia Solomon. Logo has been very influential, spawning hundreds of implementations and successors. MLogo, short for MATLAB Logo, is another successor.</p><p>A distinctive feature of Logo offprings is \"turtle graphics\". Basic Logo commands like <tt>step</tt>, <tt>turn</tt>, and <tt>draw</tt> drive a virtual tortoise, originally a motorized toy, and later a graphics cursor. Here is a sample with turtle driven by this Lindenmayer system.</p><pre>A step forward+ turn left 90 degrees- turn right 90 degrees</pre><pre>s = A+A-A-A+</pre><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Turtle-2.gif\" vspace=\"5\" /> </p><h4>Dragon Curve<a name=\"fb091433-870d-4ce0-82f6-4310e751f537\"></a></h4><p>The dragon space-filling fractal curve was invented by NASA physicist John Heighway and his colleagues and featured in Martin Gardner's <i>Scientific American</i> column in 1967. I made a <a href=\"https://blogs.mathworks.com/cleve/2018/04/06/the-dragon-curve\">Cleve's Corner</a> posting about the dragon curve in 2018.</p><p>Here is MLogo's dragon.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Dragon-1.gif\" vspace=\"5\" /> </p><p>Here is a frame from \"Numberphile\" video where Brady Haran visits <a href=\"https://www.youtube.com/watch?v=v678Em6qyzk\">Don Knuth</a> and the unique ceramic tile dragon in his home.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Knuth.png\" vspace=\"5\" /> </p><h4>Hilbert Curve<a name=\"984588f4-4cb8-4fa5-8978-ec6e07b244b2\"></a></h4><p><a href=\"https://en.wikipedia.org/wiki/David_Hilbert\">David Hilbert</a> (1862-1943), one of the most influential mathematicians of his era, introduced the space-filling fractal <a href=\"https://en.wikipedia.org/wiki/Hilbert_curve\">Hilbert curve</a> in 1891.</p><p>Here is MLogo's Hilbert curve.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Hilbert.gif\" vspace=\"5\" /> </p><p>Here is a crazy application of the Hilbert curve, Randall Munroe's view of Internet addresses in 2006, <a href=\"https://xkcd.com/195\">https://xkcd.com/195</a>.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/xkcd.png\" vspace=\"5\" /> </p><p><a href=\"https://xkcd.com/195\">https://xkcd.com/195</a></p><h4>Gosper Fractal<a name=\"27758267-deb0-4d68-9287-7f7af46ef0ec\"></a></h4><p><a href=\"https://en.wikipedia.org/wiki/Bill_Gosper\">Bill Gosper</a>, one of the original MIT \"hackers\", has made major contributions to Lisp and Macsyma, found the \"glider gun\" for Conway's Game of Life, and invented the Gosper fractal.</p><p>Here is MLogo's rendition.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Gosper-1.gif\" vspace=\"5\" /> </p><p>Dragon Nerd creates jewelry from the Gosper curve and other fractals.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/DragonNerd.png\" vspace=\"5\" /> </p><p><a href=\"https://www.etsy.com/shop/DragonNerd\">https://www.etsy.com/shop/DragonNerd</a></p><h4>Algorithmic Beauty of Plants<a name=\"164f12f3-6e87-42af-b4e5-b38dd5d03010\"></a></h4><p>\"The Algorithmic Beauty of Plants\" is a beautiful book by Przemyslaw Prusinkiewicz and Aristid Lindenmayer, featuring over fifty color figures of computer-generated plants. The original book is available from <a href=\"https://link.springer.com/book/10.1007/978-1-4613-8476-2\">Springer Nature</a>. A PDF version is available from <a href=\"https://algorithmicbotany.org/papers/#abop\">AlgormicBotany</a> at the University of Calgary.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/abop.png\" vspace=\"5\" /> </p><p>This is MLogo's rendition of one small example.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Plant-2.gif\" vspace=\"5\" /> </p><h4>Software<a name=\"b0adc2d3-245d-4aca-b9f1-6a19fc7af2f3\"></a></h4><p><a href=\"https://blogs.mathworks.com/cleve/files/MLogo.m\">https://blogs.mathworks.com/cleve/files/MLogo.m</a></p><!--     function grabCode_038066df016b4e6685a8571703c3f9db() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='038066df016b4e6685a8571703c3f9db ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 038066df016b4e6685a8571703c3f9db';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--038066df016b4e6685a8571703c3f9db ##### SOURCE BEGIN #####%% L-systems, Plants, Fractal Curves, Turtles and Dragons% No, this is not the script for an episode of \"Game of Thrones\".% It is a blog post about% Lindenmayer grammars, growing plants, space-filling fractals,% turtle graphics and dragon curves.%% Here is the opening screen from our new program, MLogo.%% <<MLogo.png>>%%% L-systems% Aristid Lindenmayer (1925-1989) was a Hungarian biologist and% botanist at the University of Utrecht.  In 1968 he introduced a% formal grammar for string rewrite rules that can describe  % living plants, artificial fractals, and especially, artificial% fractals that model living plants. %% Lindenmayer's strings drive MLogo.  A simple example is%%    R = @(s) replace(s,\"A\",\"A+A-A\");%% If you start with%%    s = \"A\"%% and repeat%%    s = R(s)%% three times, the result is%%    A%    A+A-A%    A+A-A+A+A-A-A+A-A%    A+A-A+A+A-A-A+A-A+A+A-A+A+A-A-A+A-A-A+A-A+A+A-A-A+A-A%%% MLogo% <https://en.wikipedia.org/wiki/Logo_(programming_language)% Logo> is a programming language, aimed at young students,% developed in 1967 by MIT professors Wally Feurzeig, Seymour Papert,% and Cynthia Solomon.  Logo has been very influential, spawning% hundreds of implementations and successors.  MLogo, short for% MATLAB Logo, is another successor.%% A distinctive feature of Logo offprings is \"turtle graphics\".% Basic Logo commands like |step|, |turn|, and |draw| drive a% virtual tortoise, originally a motorized toy, and later a graphics % cursor.  Here is a sample with turtle driven by this% Lindenmayer system. %%  A step forward%  + turn left 90 degrees%  - turn right 90 degrees%%  s = A+A-A-A+ %% <<Turtle-2.gif>>%%% Dragon Curve% The dragon space-filling fractal curve was invented by NASA% physicist John Heighway and his colleagues and featured in % Martin Gardner's _Scientific American_ column in 1967. I made a% <https://blogs.mathworks.com/cleve/2018/04/06/the-dragon-curve% Cleve's Corner> posting about the dragon curve in 2018.%% Here is MLogo's dragon.%% <<Dragon-1.gif>>%% Here is a frame from \"Numberphile\" video where Brady Haran visits% <https://www.youtube.com/watch?v=v678Em6qyzk Don Knuth>% and the unique ceramic tile dragon in his home.%% <<Knuth.png>>%% Hilbert Curve% <https://en.wikipedia.org/wiki/David_Hilbert David Hilbert>% (1862-1943), one of the most influential mathematicians% of his era, introduced the space-filling fractal % <https://en.wikipedia.org/wiki/Hilbert_curve Hilbert curve>% in 1891.%% Here is MLogo's Hilbert curve.%% <<Hilbert.gif>>%% Here is a crazy application of the Hilbert curve,% Randall Munroe's view of Internet addresses in 2006,% <https://xkcd.com/195>.%% <<xkcd.png>>%% <https://xkcd.com/195>%%% Gosper Fractal% <https://en.wikipedia.org/wiki/Bill_Gosper Bill Gosper>,% one of the original MIT \"hackers\",% has made major contributions to Lisp and Macsyma,% found the \"glider gun\" for Conway's Game of Life,% and invented the Gosper fractal.%% Here is MLogo's rendition.%% <<Gosper-1.gif>>%% Dragon Nerd creates jewelry from the Gosper curve and other fractals.%% <<DragonNerd.png>>%% <https://www.etsy.com/shop/DragonNerd>%% Algorithmic Beauty of Plants% \"The Algorithmic Beauty of Plants\" is a beautiful book by% Przemyslaw Prusinkiewicz and Aristid Lindenmayer, featuring% over fifty color figures of computer-generated plants.% The original book is available from % <https://link.springer.com/book/10.1007/978-1-4613-8476-2% Springer Nature>.  A PDF version is available from% <https://algorithmicbotany.org/papers/#abop% AlgormicBotany> at the University of Calgary.%% <<abop.png>>%% This is MLogo's rendition of one small example.%% <<Plant-2.gif>>%%% Software%% <https://blogs.mathworks.com/cleve/files/MLogo.m>##### SOURCE END ##### 038066df016b4e6685a8571703c3f9db-->",
            "url": "https://hpc.social/commercial-blog/2025/l-systems-plants-fractal-curves-turtles-and-dragons/",
            
            
            
            
            
            "date_published": "2025-05-03T15:09:59-06:00",
            "date_modified": "2025-05-03T15:09:59-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/the-hat-a-tridecagon-aperiordic-monotile/",
            "title": "The Hat, a Tridecagon Aperiordic Monotile",
            "summary": null,
            "content_text": "Two years ago, in March of 2023, an unlikely team of mathematical hobbyists announced the discovery of a remarkable 13-sided polygon that they nick-named the \"Hat\". Today, a Google search for the Hat's more formal name, \"Aperiodic Monotile\", yields dozens of links.This blog post is about the Hat and the resulting polyshape object. ContentsAn Aperiodic MonotileTilingsTridecagonsPenrose TilingReflectionsMonotile TilingPolyshapesLevel 0Level 1Level 2Level 3NumbersLevel ColorConvex HullAn Aperiodic MonotileThe authors of the paper that announced the discovery of the Hat are David Smith, Joseph Samuel Myers, Craig S. Kaplan and Chaim Goodman-Strauss. The announcement was made in an archive&gt;math preprint with the title \"An Aperiodic Monotile\".Within days of the announcement, articles like this one in Science News appeared. Two months later, Florentin Waligorski created an origami Hat.The official paper was published in June of 2024 in the journal Combinatorial Theory. It was also titled \"An Aperiodic Monotile\".I first heard about the Hat is an article by Erica Klarreich in the magazine Quanta, Hobbyist Finds Math&rsquo;s Elusive &lsquo;Einstein&rsquo; Tile.TilingsQuoting Wikipedia:  A \"tessellation\" or \"tiling\" is the covering of a surface,  often a plane, using one or more geometric shapes, called \"tiles\"  with no overlaps and no gaps.  A \"periodic tiling\" has a repeating pattern. Some special kinds  include regular tilings with regular polygonal tiles all of the  same shape, and semiregular tilings with regular tiles of more  than one shape and with every corner identically arranged.  A tiling that lacks a repeating pattern is called \"aperiodic\".  An aperiodic tiling uses a small set of tile shapes that  cannot form a repeating pattern.TridecagonsA tridecagon is a polygon with 13 sides, like this gold coin from the Czech Republic. The sides of a regular tridecagon are all the same length. Any attempt to tile your floor with these coins inevitably has gaps. Regular tridecagons cannot tile the plane. The Hat is an irregular tridecagon that can tile the plane. Penrose TilingRoger Penrose is a Nobel prize-winning mathematician and physicist. Among his many achievements are the Moore-Penrose pseudoinverse and the Penrose tiling. The Penrose tiling uses these regular quadrilateral tiles, the \"kite\" and the \"dart\", to produce an aperiodic tiling with two tiles. The Hat generates an aperiodic tiling with a single tile. Steve Eddins is a FOC-winning French horn player. Among his many achievements is a Cleve's Corner about this Penrose tiling. ReflectionsWe say that the Hat on the left is reflected and the one on the right is not reflected. Monotile TilingHere is (a finite piece of) an infinite, aperiodic tiling of the plane using only the Hat and its reflection. This figure is one half of figure 2.12 from the original preprint, \"An Aperiodic Monotile\". Each dark blue tile is surrounded by three light blue tiles. The white tiles appear alone or in pairs. If you look carefully, you can see the grey tiles form filaments. The filaments are more apparent in the other half of figure 2.12 on page 20 of the preprint.The dark tiles are not reflected; all of the other tiles are reflected. PolyshapesQuoting the MATLAB documentation for the polyshape object.  The polyshape function creates polygon-like shapes from 2-D vertices.  However, unlike polygons, a polyshape can have discontiguous regions  and holes. The properties of a polyshape object describe its vertices,  solid regions, and holes.All of the figures after this point in the blog post were made with polyshape/plot.We begin with a pentagonal polyshape made from a portion of a regular hexagon. The Hat itself is a polyshape formed from the union of four rotated and translated copies of the pentagon. Level 0We have experimented with a tiling created by expanding rings of unreflected hats centered around a single reflected hat. We stop after three rings because additional reflected hats are needed to continue.The zeroth level is a single reflected hat. Level 1The first level adds a ring of three hats. Level 2The second ring has nine more hats. Level 3The level 3 ring has 18 hats. NumbersOur Hats program allows you to move a hat around the screen with your mouse. When you get close to another hat, numbers appear to guide your final approach. Here are vertices 8, 9 and 10 on hat number 6 near vertices 12, 11 and 10 on hat number 2. This crowded figure shows all the hat numbers and all the vertex indices at level 2. Level ColorEach level has a single color.0 Dark blue1 Light blue2 White3 GreyCompare this with the detail in figure 2.12 of \"An Aperiodic Monotile\". Convex HullConvex hull is one of many other methods available for polyshape objects. Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>Two years ago, in March of 2023, an unlikely team of mathematical hobbyists announced the discovery of a remarkable 13-sided polygon that they nick-named the \"Hat\". Today, a Google search for the Hat's more formal name, \"Aperiodic Monotile\", yields dozens of links.</p><p>This blog post is about the Hat and the resulting <tt>polyshape</tt> object.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/hat.png\" vspace=\"5\" /> </p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#47b05df3-6f23-47ad-b33e-eeae5b4b2822\">An Aperiodic Monotile</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#19f4faeb-8f21-4d97-8f08-1531f4c826d5\">Tilings</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4ece77ab-9cf1-45f7-8a4b-63021b78316f\">Tridecagons</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#a3c51c10-1d21-4888-a3b3-25da70fac536\">Penrose Tiling</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#50b6067c-f41a-4758-aa37-eaa346cbf0d9\">Reflections</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e6049ad0-8f8c-4c08-a097-eb440a0902a7\">Monotile Tiling</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#7c35a5ad-2cde-45b0-9451-1276d5b7a8a9\">Polyshapes</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4645d478-11a0-4e5a-8ea3-36bdda8c1e9c\">Level 0</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#88ebca11-e5fd-4596-b7c8-543ba7261e66\">Level 1</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#cbe159ac-4696-42ed-8038-0aeb10f035ec\">Level 2</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#6d0246a4-496b-47ef-8e97-866a074ed1d0\">Level 3</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#42c85302-ca00-44af-a291-221be3893d76\">Numbers</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#efb8c915-e026-43f2-ae98-4c375c0da12f\">Level Color</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#52bfd4a0-ab54-4291-bd8d-33faf7ad7dde\">Convex Hull</a></li></ul></div><h4>An Aperiodic Monotile<a name=\"47b05df3-6f23-47ad-b33e-eeae5b4b2822\"></a></h4><p>The authors of the paper that announced the discovery of the Hat are <a href=\"https://the-orangery.weebly.com\">David Smith</a>, <a href=\"https://www.polyomino.org.uk\">Joseph Samuel Myers</a>, <a href=\"https://cs.uwaterloo.ca/~csk/\">Craig S. Kaplan</a> and <a href=\"https://chaimgoodmanstrauss.com/\">Chaim Goodman-Strauss</a>. The announcement was made in an <tt>archive&gt;math</tt> preprint with the title <a href=\"https://arxiv.org/abs/2303.10798\">\"An Aperiodic Monotile\"</a>.</p><p>Within days of the announcement, articles like this one in <a href=\"https://www.sciencenews.org/article/mathematicians-discovered-einstein-tile\">Science News</a> appeared. Two months later, Florentin Waligorski created an <a href=\"https://www.youtube.com/watch?v=BoAx-rLo5P0\">origami Hat</a>.</p><p>The official paper was published in June of 2024 in the journal <i>Combinatorial Theory</i>. It was also titled <a href=\"https://doi.org/10.5070/C64163843\">\"An Aperiodic Monotile\"</a>.</p><p>I first heard about the Hat is an article by Erica Klarreich in the magazine <i>Quanta</i>, <a href=\"https://www.quantamagazine.org/hobbyist-finds-maths-elusive-einstein-tile-20230404/\">Hobbyist Finds Math&rsquo;s Elusive &lsquo;Einstein&rsquo; Tile</a>.</p><h4>Tilings<a name=\"19f4faeb-8f21-4d97-8f08-1531f4c826d5\"></a></h4><p>Quoting <a href=\"https://en.wikipedia.org/wiki/Tessellation\">Wikipedia</a>:</p><pre>  A \"tessellation\" or \"tiling\" is the covering of a surface,  often a plane, using one or more geometric shapes, called \"tiles\"  with no overlaps and no gaps.</pre><pre>  A \"periodic tiling\" has a repeating pattern. Some special kinds  include regular tilings with regular polygonal tiles all of the  same shape, and semiregular tilings with regular tiles of more  than one shape and with every corner identically arranged.</pre><pre>  A tiling that lacks a repeating pattern is called \"aperiodic\".  An aperiodic tiling uses a small set of tile shapes that  cannot form a repeating pattern.</pre><h4>Tridecagons<a name=\"4ece77ab-9cf1-45f7-8a4b-63021b78316f\"></a></h4><p>A <i>tridecagon</i> is a polygon with 13 sides, like this gold coin from the Czech Republic. The sides of a <i>regular</i> <i>tridecagon</i> are all the same length. Any attempt to tile your floor with these coins inevitably has gaps. Regular tridecagons cannot tile the plane. The Hat is an <i>irregular</i> tridecagon that can tile the plane.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/20_CZK.png\" vspace=\"5\" /> </p><h4>Penrose Tiling<a name=\"a3c51c10-1d21-4888-a3b3-25da70fac536\"></a></h4><p><a href=\"https://en.wikipedia.org/wiki/Roger_Penrose\">Roger Penrose</a> is a <a href=\"https://www.google.com/search?q=Nobel+prize\">Nobel prize-winning</a> mathematician and physicist. Among his many achievements are the <a href=\"https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse\">Moore-Penrose pseudoinverse</a> and the <a href=\"https://en.wikipedia.org/wiki/Penrose_tiling\">Penrose tiling</a>. The Penrose tiling uses these regular quadrilateral tiles, the \"kite\" and the \"dart\", to produce an aperiodic tiling with two tiles. The Hat generates an aperiodic tiling with a <i>single</i> tile.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Kite_Dart.png\" vspace=\"5\" /> </p><p><a href=\"https://steveeddins.com/\">Steve Eddins</a> is a <a href=\"https://blogs.mathworks.com/cleve/files/foc.txt\">FOC-winning</a> French horn player. Among his many achievements is a <a href=\"https://blogs.mathworks.com/cleve/2018/11/26/penrose-and-fourier-design-playing-cards/\">Cleve's Corner</a> about this Penrose tiling.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Penrose.png\" vspace=\"5\" /> </p><h4>Reflections<a name=\"50b6067c-f41a-4758-aa37-eaa346cbf0d9\"></a></h4><p>We say that the Hat on the left is reflected and the one on the right is not reflected.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/polarity.png\" vspace=\"5\" /> </p><h4>Monotile Tiling<a name=\"e6049ad0-8f8c-4c08-a097-eb440a0902a7\"></a></h4><p>Here is (a finite piece of) an infinite, aperiodic tiling of the plane using only the Hat and its reflection. This figure is one half of figure 2.12 from the original preprint, <a href=\"https://doi.org/10.5070/C64163843\">\"An Aperiodic Monotile\"</a>. Each dark blue tile is surrounded by three light blue tiles. The white tiles appear alone or in pairs. If you look carefully, you can see the grey tiles form filaments. The filaments are more apparent in the other half of figure 2.12 on page 20 of the preprint.</p><p>The dark tiles are not reflected; all of the other tiles are reflected.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/monotile_tiling.png\" vspace=\"5\" /> </p><h4>Polyshapes<a name=\"7c35a5ad-2cde-45b0-9451-1276d5b7a8a9\"></a></h4><p>Quoting the MATLAB documentation for the <a href=\"https://www.mathworks.com/help/matlab/ref/polyshape.html\"><tt>polyshape object</tt></a>.</p><pre>  The polyshape function creates polygon-like shapes from 2-D vertices.  However, unlike polygons, a polyshape can have discontiguous regions  and holes. The properties of a polyshape object describe its vertices,  solid regions, and holes.</pre><p>All of the figures after this point in the blog post were made with <tt>polyshape/plot</tt>.</p><p>We begin with a pentagonal <tt>polyshape</tt> made from a portion of a regular hexagon.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/polyhat0.png\" vspace=\"5\" /> </p><p>The Hat itself is a <tt>polyshape</tt> formed from the <tt>union</tt> of four rotated and translated copies of the pentagon.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/polyhat1.png\" vspace=\"5\" /> </p><h4>Level 0<a name=\"4645d478-11a0-4e5a-8ea3-36bdda8c1e9c\"></a></h4><p>We have experimented with a tiling created by expanding rings of unreflected hats centered around a single reflected hat. We stop after three rings because additional reflected hats are needed to continue.</p><p>The zeroth level is a single reflected hat.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/hats_0.gif\" vspace=\"5\" /> </p><h4>Level 1<a name=\"88ebca11-e5fd-4596-b7c8-543ba7261e66\"></a></h4><p>The first level adds a ring of three hats.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/hats_1.gif\" vspace=\"5\" /> </p><h4>Level 2<a name=\"cbe159ac-4696-42ed-8038-0aeb10f035ec\"></a></h4><p>The second ring has nine more hats.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/hats_2.gif\" vspace=\"5\" /> </p><h4>Level 3<a name=\"6d0246a4-496b-47ef-8e97-866a074ed1d0\"></a></h4><p>The level 3 ring has 18 hats.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/hats_3.gif\" vspace=\"5\" /> </p><h4>Numbers<a name=\"42c85302-ca00-44af-a291-221be3893d76\"></a></h4><p>Our <tt>Hats</tt> program allows you to move a hat around the screen with your mouse. When you get close to another hat, numbers appear to guide your final approach. Here are vertices 8, 9 and 10 on hat number 6 near vertices 12, 11 and 10 on hat number 2.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/target.png\" vspace=\"5\" /> </p><p>This crowded figure shows all the hat numbers and all the vertex indices at level 2.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/numbers.png\" vspace=\"5\" /> </p><h4>Level Color<a name=\"efb8c915-e026-43f2-ae98-4c375c0da12f\"></a></h4><p>Each level has a single color.</p><div><ul><li>0 Dark blue</li><li>1 Light blue</li><li>2 White</li><li>3 Grey</li></ul></div><p>Compare this with the detail in figure 2.12 of <a href=\"https://arxiv.org/abs/2303.10798\">\"An Aperiodic Monotile\"</a>.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/levelcolor.png\" vspace=\"5\" /> </p><h4>Convex Hull<a name=\"52bfd4a0-ab54-4291-bd8d-33faf7ad7dde\"></a></h4><p>Convex hull is one of many other methods available for <a href=\"https://www.mathworks.com/help/matlab/ref/polyshape.html\"><tt>polyshape objects</tt></a>.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/convhull.png\" vspace=\"5\" /> </p><!--     function grabCode_8d40a9f81f874076b9a0b40b3a48ce78() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='8d40a9f81f874076b9a0b40b3a48ce78 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 8d40a9f81f874076b9a0b40b3a48ce78';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--8d40a9f81f874076b9a0b40b3a48ce78 ##### SOURCE BEGIN #####%% The Hat, a Remarkable Tridecagon% Two years ago, in March of 2023, an unlikely team of% mathematical hobbyists announced the discovery of a remarkable % 13-sided polygon that they nick-named the \"Hat\".% Today, a Google search for the Hat's more formal name,% \"Aperiodic Monotile\", yields dozens of links.%% This blog post is about the Hat and the resulting |polyshape| object.% % <<hat.png>>%%% An Aperiodic Monotile% The authors of the paper that announced the discovery of the Hat are% <https://the-orangery.weebly.com David Smith>, % <https://www.polyomino.org.uk Joseph Samuel Myers>, % <https://cs.uwaterloo.ca/~csk/ Craig S. Kaplan> and % <https://chaimgoodmanstrauss.com/ Chaim Goodman-Strauss>.% The announcement was made in an |archive>math| preprint with the title% <https://arxiv.org/abs/2303.10798 \"An Aperiodic Monotile\">.%% Within days of the announcement, articles like this one in% <https://www.sciencenews.org/article/mathematicians-discovered-einstein-tile% Science News> appeared.% Two months later, Florentin Waligorski created an% <https://www.youtube.com/watch?v=BoAx-rLo5P0 origami Hat>.%% The official paper was published in June of 2024 in the journal% _Combinatorial Theory_.  It was also titled % <https://doi.org/10.5070/C64163843 \"An Aperiodic Monotile\">.%% I first heard about the Hat is an article by Erica Klarreich% in the magazine _Quanta_,% <https://www.quantamagazine.org/hobbyist-finds-maths-elusive-einstein-tile-20230404/% Hobbyist Finds Math’s Elusive ‘Einstein’ Tile>.%%% Tilings% Quoting <https://en.wikipedia.org/wiki/Tessellation Wikipedia>:%%    A \"tessellation\" or \"tiling\" is the covering of a surface, %    often a plane, using one or more geometric shapes, called \"tiles\"%    with no overlaps and no gaps.%%    A \"periodic tiling\" has a repeating pattern. Some special kinds %    include regular tilings with regular polygonal tiles all of the %    same shape, and semiregular tilings with regular tiles of more%    than one shape and with every corner identically arranged.%%    A tiling that lacks a repeating pattern is called \"aperiodic\". %    An aperiodic tiling uses a small set of tile shapes that%    cannot form a repeating pattern.%% Tridecagons% A _tridecagon_ is a polygon with 13 sides, like this gold coin from% the Czech Republic. The sides of a _regular_ _tridecagon_ are all% the same length.  Any attempt to tile your floor with these coins% inevitably has gaps.  Regular tridecagons cannot tile the plane.% The Hat is an _irregular_ tridecagon that can tile the plane. %% <<20_CZK.png>>%%% Penrose Tiling% <https://en.wikipedia.org/wiki/Roger_Penrose Roger Penrose> is a% <https://www.google.com/search?q=Nobel+prize Nobel prize-winning>% mathematician and physicist.% Among his many achievements are the% <https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse% Moore-Penrose pseudoinverse> and the% <https://en.wikipedia.org/wiki/Penrose_tiling Penrose tiling>.% The Penrose tiling uses these regular quadrilateral tiles,% the \"kite\" and the \"dart\", to produce an aperiodic tiling with% two tiles.% The Hat generates an aperiodic tiling with a _single_ tile.%% <<Kite_Dart.png>>%% <https://steveeddins.com/ Steve Eddins> is a % <https://blogs.mathworks.com/cleve/files/foc.txt FOC-winning>% French horn player.% Among his many achievements is a % <https://blogs.mathworks.com/cleve/2018/11/26/penrose-and-fourier-design-playing-cards/% Cleve's Corner> about this Penrose tiling.%% <<Penrose.png>>% %% Reflections% We say that the Hat on the left is reflected and the one on the right% is not reflected.%% <<polarity.png>>%%% Monotile Tiling% Here is (a finite piece of) an infinite, aperiodic tiling of the plane% using only the Hat and its reflection.  % This figure is one half of figure 2.12 from the original preprint,% <https://doi.org/10.5070/C64163843 \"An Aperiodic Monotile\">.% Each dark blue tile is surrounded by three light blue tiles.% The white tiles appear alone or in pairs.% If you look carefully, you can see the grey tiles form filaments.% The filaments are more apparent in the other half of figure 2.12% on page 20 of the preprint.%% The dark tiles are not reflected; all of the other tiles are reflected.%% <<monotile_tiling.png>>%%% Polyshapes% Quoting the MATLAB documentation for the% <https://www.mathworks.com/help/matlab/ref/polyshape.html% |polyshape object|>.%%    The polyshape function creates polygon-like shapes from 2-D vertices.%    However, unlike polygons, a polyshape can have discontiguous regions%    and holes. The properties of a polyshape object describe its vertices,%    solid regions, and holes.%%% All of the figures after this point in the blog post were made with% |polyshape/plot|.%%% We begin with a pentagonal |polyshape| made from a portion of a % regular hexagon.%% <<polyhat0.png>>%%%% The Hat itself is a |polyshape| formed from the |union| of four rotated% and translated copies of the pentagon.%%% <<polyhat1.png>>%%% Level 0% We have experimented with a tiling created by expanding rings of% unreflected hats centered around a single reflected hat.% We stop after three rings because additional reflected hats% are needed to continue.%%% The zeroth level is a single reflected hat.%% <<hats_0.gif>>%%% Level 1% The first level adds a ring of three hats.%% <<hats_1.gif>>%%% Level 2% The second ring has nine more hats.%% <<hats_2.gif>>%%% Level 3% The level 3 ring has 18 hats.%% <<hats_3.gif>>%%% Numbers% Our |Hats| program allows you to move a hat around the screen with% your mouse.  When you get close to another hat, numbers appear% to guide your final approach.  Here are vertices 8, 9 and 10 on% hat number 6 near vertices 12, 11 and 10 on hat number 2. %% <<target.png>>%%% This crowded figure shows all the hat numbers and all the vertex% indices at level 2.%   % <<numbers.png>>%%% Level Color% Each level has a single color.%% * 0  Dark blue% * 1  Light blue% * 2  White% * 3  Grey%% Compare this with the detail in figure 2.12 of% <https://arxiv.org/abs/2303.10798 \"An Aperiodic Monotile\">. %% <<levelcolor.png>>%%% Convex Hull% Convex hull is one of many other methods available for% <https://www.mathworks.com/help/matlab/ref/polyshape.html% |polyshape objects|>.%% <<convhull.png>>%##### SOURCE END ##### 8d40a9f81f874076b9a0b40b3a48ce78-->",
            "url": "https://hpc.social/commercial-blog/2025/the-hat-a-tridecagon-aperiordic-monotile/",
            
            
            
            
            
            "date_published": "2025-03-27T16:30:52-06:00",
            "date_modified": "2025-03-27T16:30:52-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/matrices-at-an-exposition/",
            "title": "Matrices at an Exposition",
            "summary": null,
            "content_text": "A look at the structure, and the eigenvalues and singular values of interesting test matrices.ContentsWilkinsonParterBuckyCheckerboardCompanionFiedlerRedhefferPermutationRandomSoftwareWilkinsonJ. H. Wilkinson's most famous examples are Wn+, a family of symmetric, tridiagonal matrices with pairs of \"remarkably\" and \"pathologically\" close eigenvalues. The two largest eigenvalues of W20+,   10.246194182902979 and   10.246194182903745,agree to 12 decimal places.For more, see my blog post on Wilkinson matrices. And see page 308 of Wilkinson's The Algebraic Eigenvalue Problem.    n = 20;    m = (n-1)/2;    D = diag(ones(n-1,1),1);    A = diag(abs(-m:m)) + D + D';    mat_expo(A,'wilkinson') ParterOne of my favorite test matrices is this nonsymmetric cousin of the Hilbert matrix. I was surprised when I discovered that most of its singular values are equal to pi. Seymour Parter explained why. See Surprising SVD, Square Waves and Pi.    j = 1:n;    k = j';    A = 1./(k-j+1/2);    mat_expo(A,'parter') BuckyThe leading 20-by-20 submatrix of the 60-by-60 Bucky Ball is symmetric, so its eigenvalues are real. But the matrix is not positive definite, so the eigenvalues do not equal the singular values. See Bringing Back the Bucky Ball.    B = bucky;    A = B(1:n,1:n);    mat_expo(A,'bucky')     CheckerboardWe introduced the Checkerboard family just two weeks ago; see Two Flavors of SVD. There are only two nonzero eigenvalues and singular values.    A = checkerboard(n/4,2,2);    mat_expo(A,'checkerboard') CompanionBefore 1965, the fact that the eigenvalues of a companion matrix are equal to the zeros of the polynomial with coefficients in the first row was often the basis of methods to compute matrix eigenvalues. But the discovery of modern QR methods allowed the first MATLAB to reverse this approach and compute polynomial zeros as matrix eigenvalues.In this example, the polynomial coefficients are 1:n+1 and the polynomial zeros lie on a nearly circular curve in the complex plane.    c = 2:n+1;    A = diag(ones(n-1,1),-1);    A(1,:) = -c;    mat_expo(A,'companion') FiedlerFiedler companion matrix. Discovered by a contemporary Czech mathematician, Miroslav Fiedler, this matrix distributes the polynomial coefficients along the diagonals of an elegant pentadiagonal matrix whose eigenvalues are equal to the zeros of the polynomial. See Fiedler companion matrix.Here is the same polynomial as the traditional companion matrix.    A = fiedler(c);    mat_expo(A,'fiedler')     RedhefferThe Redheffer matrix has been in the gallery for a long time, but I ignored it until last September. Then I began a long series of blog posts. See Redheffer and One Million Dollars and M&ouml;bius, Mertens and Redheffer.Most of the eigenvalues of the Redheffer matrix are equal to one. The product of all the eigenvalues, the determinant, is the Mertens function, which is related to the Riemann hypothesis.    A = gallery('redheff',n);    mat_expo(A,'redheffer') PermutationA permutation matrix has a single 1 in each row and column and 0's elsewhere. The matrix is orthogonal, so all the eigenvalues lie on the unit circle and all the singular values are equal to one.    p = randperm(n);    A = sparse(p,1:n,1);    mat_expo(A,'permutation')     RandomThis random matrix has about 1/3 of its elements equal to zero and the remaining elements normally distributed about zero. I have included such a matrix in this exposition to represent matrices in general that do not have particularly remarkable eigenvalues and singular values.    A = sprandn(n,n,1/3);    mat_expo(A,'sprandn')             SoftwareYou can publish the source for this blog post if you also have the three functions in Mat_Expo_mzip.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>A look at the structure, and the eigenvalues and singular values of interesting test matrices.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#f44a3f1b-f808-41d4-a66f-f2cce10287dd\">Wilkinson</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#54f8e32a-b6c4-4bff-805c-2fcf4cc01309\">Parter</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8d7ed044-57b1-4c74-9e0a-fa30ff9194d2\">Bucky</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#608e9f99-1ae9-4496-b7dc-cf082abb6f08\">Checkerboard</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#0a2419d6-28c5-4683-974d-abc97d2388dc\">Companion</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#dfac2927-7f5b-4987-9dc3-3f8d41f6bb32\">Fiedler</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#9de50834-140d-4fdc-b016-4882204d9272\">Redheffer</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e7db7d8c-8230-4dfb-bab9-255dabcae02d\">Permutation</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#99e3f6f0-feee-488c-9304-e95be2aa1486\">Random</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#791596eb-5f2d-415d-a61e-7c49a068db9c\">Software</a></li></ul></div><h4>Wilkinson<a name=\"f44a3f1b-f808-41d4-a66f-f2cce10287dd\"></a></h4><p>J. H. Wilkinson's most famous examples are <tt>Wn+</tt>, a family of symmetric, tridiagonal matrices with pairs of \"remarkably\" and \"pathologically\" close eigenvalues. The two largest eigenvalues of <tt>W20+</tt>,</p><pre>   10.246194182902979 and   10.246194182903745,</pre><p>agree to 12 decimal places.</p><p>For more, see my blog post on <a href=\"https://blogs.mathworks.com/cleve/2013/04/15/wilkinsons-matrices-2\">Wilkinson matrices</a>. And see page 308 of Wilkinson's <i>The Algebraic Eigenvalue Problem</i>.</p><pre class=\"codeinput\">    n = 20;    m = (n-1)/2;    D = diag(ones(n-1,1),1);    A = diag(abs(-m:m)) + D + D';    mat_expo(A,'wilkinson')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mat_expo_blog_01.png\" vspace=\"5\" /> <h4>Parter<a name=\"54f8e32a-b6c4-4bff-805c-2fcf4cc01309\"></a></h4><p>One of my favorite test matrices is this nonsymmetric cousin of the Hilbert matrix. I was surprised when I discovered that most of its singular values are equal to <tt>pi</tt>. Seymour Parter explained why. See <a href=\"https://blogs.mathworks.com/cleve/2014/02/03/surprising-svd-square-waves-and-pi/\">Surprising SVD, Square Waves and Pi</a>.</p><pre class=\"codeinput\">    j = 1:n;    k = j';    A = 1./(k-j+1/2);    mat_expo(A,'parter')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mat_expo_blog_02.png\" vspace=\"5\" /> <h4>Bucky<a name=\"8d7ed044-57b1-4c74-9e0a-fa30ff9194d2\"></a></h4><p>The leading 20-by-20 submatrix of the 60-by-60 Bucky Ball is symmetric, so its eigenvalues are real. But the matrix is not positive definite, so the eigenvalues do not equal the singular values. See <a href=\"https://blogs.mathworks.com/cleve/2021/05/12/bringing-back-the-bucky-ball/\">Bringing Back the Bucky Ball</a>.</p><pre class=\"codeinput\">    B = bucky;    A = B(1:n,1:n);    mat_expo(A,'bucky')    </pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mat_expo_blog_03.png\" vspace=\"5\" /> <h4>Checkerboard<a name=\"608e9f99-1ae9-4496-b7dc-cf082abb6f08\"></a></h4><p>We introduced the Checkerboard family just two weeks ago; see <a href=\"https://blogs.mathworks.com/cleve/2025/02/23/two-flavors-of-svd\">Two Flavors of SVD</a>. There are only two nonzero eigenvalues and singular values.</p><pre class=\"codeinput\">    A = checkerboard(n/4,2,2);    mat_expo(A,'checkerboard')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mat_expo_blog_04.png\" vspace=\"5\" /> <h4>Companion<a name=\"0a2419d6-28c5-4683-974d-abc97d2388dc\"></a></h4><p>Before 1965, the fact that the eigenvalues of a companion matrix are equal to the zeros of the polynomial with coefficients in the first row was often the basis of methods to compute matrix eigenvalues. But the discovery of modern QR methods allowed the first MATLAB to reverse this approach and compute polynomial zeros as matrix eigenvalues.</p><p>In this example, the polynomial coefficients are 1:n+1 and the polynomial zeros lie on a nearly circular curve in the complex plane.</p><pre class=\"codeinput\">    c = 2:n+1;    A = diag(ones(n-1,1),-1);    A(1,:) = -c;    mat_expo(A,'companion')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mat_expo_blog_05.png\" vspace=\"5\" /> <h4>Fiedler<a name=\"dfac2927-7f5b-4987-9dc3-3f8d41f6bb32\"></a></h4><p>Fiedler companion matrix. Discovered by a contemporary Czech mathematician, Miroslav Fiedler, this matrix distributes the polynomial coefficients along the diagonals of an elegant pentadiagonal matrix whose eigenvalues are equal to the zeros of the polynomial. See <a href=\"https://blogs.mathworks.com/cleve/2013/12/23/fiedler-companion-matrix\">Fiedler companion matrix</a>.</p><p>Here is the same polynomial as the traditional companion matrix.</p><pre class=\"codeinput\">    A = fiedler(c);    mat_expo(A,'fiedler')    </pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mat_expo_blog_06.png\" vspace=\"5\" /> <h4>Redheffer<a name=\"9de50834-140d-4fdc-b016-4882204d9272\"></a></h4><p>The Redheffer matrix has been in the <tt>gallery</tt> for a long time, but I ignored it until last September. Then I began a long series of blog posts. See <a href=\"https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/\">Redheffer and One Million Dollars</a> and <a href=\"https://blogs.mathworks.com/cleve/2024/10/22/mobius-mertens-and-redheffer\">M&ouml;bius, Mertens and Redheffer</a>.</p><p>Most of the eigenvalues of the Redheffer matrix are equal to one. The product of all the eigenvalues, the determinant, is the Mertens function, which is related to the Riemann hypothesis.</p><pre class=\"codeinput\">    A = gallery('redheff',n);    mat_expo(A,'redheffer')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mat_expo_blog_07.png\" vspace=\"5\" /> <h4>Permutation<a name=\"e7db7d8c-8230-4dfb-bab9-255dabcae02d\"></a></h4><p>A permutation matrix has a single 1 in each row and column and 0's elsewhere. The matrix is orthogonal, so all the eigenvalues lie on the unit circle and all the singular values are equal to one.</p><pre class=\"codeinput\">    p = randperm(n);    A = sparse(p,1:n,1);    mat_expo(A,'permutation')    </pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mat_expo_blog_08.png\" vspace=\"5\" /> <h4>Random<a name=\"99e3f6f0-feee-488c-9304-e95be2aa1486\"></a></h4><p>This random matrix has about 1/3 of its elements equal to zero and the remaining elements normally distributed about zero. I have included such a matrix in this exposition to represent matrices in general that do not have particularly remarkable eigenvalues and singular values.</p><pre class=\"codeinput\">    A = sprandn(n,n,1/3);    mat_expo(A,'sprandn')            </pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mat_expo_blog_09.png\" vspace=\"5\" /> <h4>Software<a name=\"791596eb-5f2d-415d-a61e-7c49a068db9c\"></a></h4><p>You can <tt>publish</tt> the source for this blog post if you also have the three functions in <a href=\"https://blogs.mathworks.com/cleve/files/MatExpo_mzip.m\">Mat_Expo_mzip</a>.</p><!--     function grabCode_3f61369346ec476aa19ed9e1ce542433() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='3f61369346ec476aa19ed9e1ce542433 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 3f61369346ec476aa19ed9e1ce542433';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--3f61369346ec476aa19ed9e1ce542433 ##### SOURCE BEGIN #####%% Matrices at an Exposition% A look at the structure, and the eigenvalues and singular values of% interesting test matrices.  %% Wilkinson% J. H. Wilkinson's most famous examples are |Wn+|, a family of symmetric, % tridiagonal matrices with pairs of \"remarkably\" and \"pathologically\" % close eigenvalues. The two largest eigenvalues of |W20+|,%%     10.246194182902979 and%     10.246194182903745,%% agree to 12 decimal places.%% For more, see my blog post on % <https://blogs.mathworks.com/cleve/2013/04/15/wilkinsons-matrices-2% Wilkinson matrices>.% And see page 308 of Wilkinson's _The Algebraic Eigenvalue Problem_.    n = 20;    m = (n-1)/2;    D = diag(ones(n-1,1),1);    A = diag(abs(-m:m)) + D + D';    mat_expo(A,'wilkinson')%% Parter% One of my favorite test matrices is this nonsymmetric cousin of the% Hilbert matrix.  I was surprised when I discovered that% most of its singular values are equal to |pi|. % Seymour Parter explained why.  See% <https://blogs.mathworks.com/cleve/2014/02/03/surprising-svd-square-waves-and-pi/% Surprising SVD, Square Waves and Pi>.     j = 1:n;    k = j';    A = 1./(k-j+1/2);    mat_expo(A,'parter')%% Bucky% The leading 20-by-20 submatrix of the 60-by-60 Bucky Ball is symmetric,% so its eigenvalues are real.  But the matrix is not positive definite,% so the eigenvalues do not equal the singular values.  See% <https://blogs.mathworks.com/cleve/2021/05/12/bringing-back-the-bucky-ball/% Bringing Back the Bucky Ball>.     B = bucky;    A = B(1:n,1:n);    mat_expo(A,'bucky')    %% Checkerboard% We introduced the Checkerboard family just two weeks ago; see% <https://blogs.mathworks.com/cleve/2025/02/23/two-flavors-of-svd% Two Flavors of SVD>.  There are only two nonzero eigenvalues and% singular values.    A = checkerboard(n/4,2,2);    mat_expo(A,'checkerboard')%% Companion% Before 1965, the fact that the eigenvalues of a companion matrix are% equal to the zeros of the polynomial with coefficients in the% first row was often the basis of methods to compute matrix eigenvalues.% But the discovery of modern QR methods allowed the first MATLAB to% reverse this approach and compute polynomial zeros as matrix% eigenvalues.%% In this example, the polynomial coefficients are 1:n+1 and the % polynomial zeros lie on a nearly circular curve in the complex plane.    c = 2:n+1;    A = diag(ones(n-1,1),-1);    A(1,:) = -c;    mat_expo(A,'companion')%% Fiedler% Fiedler companion matrix.% Discovered by a contemporary Czech mathematician, Miroslav Fiedler,% this matrix distributes the polynomial coefficients along the% diagonals of an elegant pentadiagonal matrix whose eigenvalues are % equal to the zeros of the polynomial.  See% <https://blogs.mathworks.com/cleve/2013/12/23/fiedler-companion-matrix% Fiedler companion matrix>.%% Here is the same polynomial as the traditional companion matrix.    A = fiedler(c);    mat_expo(A,'fiedler')    %% Redheffer% The Redheffer matrix has been in the |gallery| for a long time, but% I ignored it until last September.  Then  I began a long series of% blog posts.  See% <https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/% Redheffer and One Million Dollars> and% <https://blogs.mathworks.com/cleve/2024/10/22/mobius-mertens-and-redheffer% Möbius, Mertens and Redheffer>.%% Most of the eigenvalues of the Redheffer matrix are equal to one.% The  product of all the eigenvalues, the determinant, is the Mertens % function, which is related to the Riemann hypothesis.    A = gallery('redheff',n);    mat_expo(A,'redheffer')%% Permutation% A permutation matrix has a single 1 in each row and column and 0's% elsewhere.  The matrix is orthogonal, so all the eigenvalues lie on% the unit circle and all the singular values are equal to one.    p = randperm(n);    A = sparse(p,1:n,1);    mat_expo(A,'permutation')    %% Random% This random matrix has about 1/3 of its elements equal to zero% and the remaining elements normally distributed about zero.% I have included such a matrix in this exposition to represent matrices% in general that do not have particularly remarkable eigenvalues and% singular values.    A = sprandn(n,n,1/3);    mat_expo(A,'sprandn')            %% Software% You can |publish| the source for this blog post if you also have% the three functions in% <https://blogs.mathworks.com/cleve/files/MatExpo_mzip.m% Mat_Expo_mzip>.##### SOURCE END ##### 3f61369346ec476aa19ed9e1ce542433-->",
            "url": "https://hpc.social/commercial-blog/2025/matrices-at-an-exposition/",
            
            
            
            
            
            "date_published": "2025-03-07T16:21:56-07:00",
            "date_modified": "2025-03-07T16:21:56-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/two-flavors-of-svd/",
            "title": "Two Flavors of SVD",
            "summary": null,
            "content_text": "MATLAB has two different ways to compute singular values. The easiest is to compute the singular values without the singular vectors. Use svd with one output argument, s1.  s1 = svd(A)The alternative is to use svd with three outputs. Ignore the first and third output and specify the second output to be a column vector, s2.  [~,s2,~] = svd(A,'vector')The MathWorks technical support team receives calls from observant users who notice that the two approaches might produce different singular values. Which is more accurate, s1 or s2? Which is faster? Which should we use?I found myself asking the same questions.A key feature of all our experiments is the rank of the matrix. Let's investigate three cases: a rank 2 matrix, a low rank matrix, and a full rank matrix.ContentsCheckerboardLow RankFull RankTimingRemarksSoftwareCheckerboardThe first example, motivated by a recent query, is an 80-by-80 matrix of zeros and ones derived from the checkerboard function in the Image Processing Toolbox.    A = double(checkerboard &gt; 0);The rank of the checkerboard matrix is 2.    r = rank(A)r =     2The image function provides the same portrait of A as its spy plot.    imagem(A)    title('rank 2') Let's begin with the exact singular values. The two nonzero singular values are both equal to 40. The zero singular value has multiplicity 78.    s = [40; 40; zeros(78,1)];    disp('  s =')    disp(s(1:5))    disp('     :')    disp(s(end-2:end))  s =    40    40     0     0     0     :     0     0     0A perfect plot of the singular values of a rank 2 matrix would look like this.    plotem(s)    title('rank 2') What do we get when we actually compute the SVD of the checkerboard?The built-in SVD function uses Householder reflections to reduce the matrix to bidiagonal form. When the vectors are not required, a divide and conquer iteration then reduces the bidiagonal to diagonal. In all our examples, after divide and conquer has found the nonzero singular values, all that remains is roundoff error. Despite this fact, the iterations are continued in order to find all singular values \"to high relative error independent of their magnitudes.\" We have roundoff in roundoff, then roundoff in roundoff in roundoff, and so on.The following logarithmic plot of s1 for the checkerboard matrix shows the phenomenon that I like to call \"cascading roundoff\". There are lines at norm(A) and at    tol = eps(norm(A))tol =   7.1054e-15This is the tolerance initially involved in the convergence test. The steps in the plot are at powers of tol.    s1 = svd(A);    plotem(s1,inf)    title('rank 2') If we specify three outputs, the iterative portion of the SVD function uses a traditional QR iteration with a more conservative convergence criterion instead of divide and conquer. There is no cascading roundoff. All the s2 singular values that would be zero with exact computation are of size tol.    [~,s2,~] = svd(A,'vector');    plotem(s1,s2,[-48,4])    title('rank 2') The plots of s1 and s2 are very different, and neither plot looks like the plot of the exact answer. However, all three plots agree about the double value at 40. And all the disagreements, including the cascading roundoff in s1, are below the line at tol.The checkerboard example shows that s1 and s2 can be very different, but s1 and s2 are much closer to each other than either is to the right answer.Low RankFor a matrix with rank between 2 and full order n, we can use the venerable Hilbert matrix. We have a row vector j and a column vector k in a singleton expansion.    n = 80;    j = 1:n;    k = (1:n)';    A = 1./(k+j-1);The effective rank turns out to be 17.    r = rank(A)r =    17The elements of this Hilbert matrix vary over three orders of magnitude, so a logarithmic image is appropriate.    imagem(floor(log2(A)))    title('low rank') Compare the one-output and the three-output singular values,    s1 = svd(A);    [~,s2,~] = svd(A,'vector');    plotem(s1,s2,[-22,3])    title('low rank') The results s1 and s2 agree about the first 17 values and all disagreements are below the line at tol.Full RankUsing the same column vector k and row vector j in another example of single expansion produces a full rank matrix.    A = min(k,j);Check that A has full rank.    r = rank(A)r =    80The logarithm is not needed for this image.    imagem(A)    title('full rank') Compare the one-output and the three-output singular values,    s1 = svd(A);    [~,s2,~] = svd(A,'vector');    plotem(s1,s2,[-2,4])    title('full rank') With full rank, all values of s1 and s2 are essentially equal. Any line at tol would be irrelevant.TimingWhich is faster, s1 or s2?One extensive timing experiment involves matrices with full rank and with orders   n = 250:250:5000The times measured for computing s1 and s2 are shown by the o's in the following plot.Since the time complexity for computing SVD is O(n^3), we fit the data by cubic polynomials. For large n, the time required is dominated by the n^3 terms. The ratio of the coefficients of these dominate terms is   ratio = 1.17In other words, for large problems s1 is about 17 percent faster than s2.    timefit  RemarksI will admit to a personal preference for s2 over s1. I am more familiar with QR than I am with divide and conquer. As a result, I have more confidence in s2.I realize that the LAPACK divide and conquer driver DSVDD can achieve the stated goal of finding all singular values \"to high relative error independent of their magnitudes\" if the input A is bidiagonal and known exactly. But I don't see that in MATLAB with s1. I suspect that MATLAB does not make a special case for bidiagonal svd.I will be very happy to see any other examples. Please comment.SoftwareThis blog post is executable. You can publish it if you also have the three files in Checkerboard_mzip.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>MATLAB has two different ways to compute singular values. The easiest is to compute the singular values without the singular vectors. Use <tt>svd</tt> with one output argument, s1.</p><pre>  s1 = svd(A)</pre><p>The alternative is to use <tt>svd</tt> with three outputs. Ignore the first and third output and specify the second output to be a column vector, s2.</p><pre>  [~,s2,~] = svd(A,'vector')</pre><p>The MathWorks technical support team receives calls from observant users who notice that the two approaches might produce different singular values. Which is more accurate, s1 or s2? Which is faster? Which should we use?</p><p>I found myself asking the same questions.</p><p>A key feature of all our experiments is the <i>rank</i> of the matrix. Let's investigate three cases: a rank 2 matrix, a low rank matrix, and a full rank matrix.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#95ccb0c0-cd7a-41c9-a5b4-2fab6df73f18\">Checkerboard</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#af38c7f7-7ab0-4c74-9327-f3253195cd70\">Low Rank</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c9b91229-31a6-44d1-b2a6-567d20246e0d\">Full Rank</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#50932af3-6dcd-4556-bfa5-6821e1a3e2a4\">Timing</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#a505363d-3df2-4fbe-9888-d7c67ce58af0\">Remarks</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#ba7766fd-745c-434c-9ac4-24950aa30394\">Software</a></li></ul></div><h4>Checkerboard<a name=\"95ccb0c0-cd7a-41c9-a5b4-2fab6df73f18\"></a></h4><p>The first example, motivated by a recent query, is an 80-by-80 matrix of zeros and ones derived from the <tt>checkerboard</tt> function in the Image Processing Toolbox.</p><pre class=\"codeinput\">    A = double(checkerboard &gt; 0);</pre><p>The rank of the checkerboard matrix is 2.</p><pre class=\"codeinput\">    r = rank(A)</pre><pre class=\"codeoutput\">r =     2</pre><p>The <tt>image</tt> function provides the same portrait of A as its <tt>spy</tt> plot.</p><pre class=\"codeinput\">    imagem(A)    title('rank 2')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/checkerboard_blog_01.png\" vspace=\"5\" /> <p>Let's begin with the exact singular values. The two nonzero singular values are both equal to 40. The zero singular value has multiplicity 78.</p><pre class=\"codeinput\">    s = [40; 40; zeros(78,1)];    disp('  s =')    disp(s(1:5))    disp('     :')    disp(s(end-2:end))</pre><pre class=\"codeoutput\">  s =    40    40     0     0     0     :     0     0     0</pre><p>A perfect plot of the singular values of a rank 2 matrix would look like this.</p><pre class=\"codeinput\">    plotem(s)    title('rank 2')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/checkerboard_blog_02.png\" vspace=\"5\" /> <p>What do we get when we actually compute the SVD of the checkerboard?</p><p>The built-in SVD function uses Householder reflections to reduce the matrix to bidiagonal form. When the vectors are not required, a divide and conquer iteration then reduces the bidiagonal to diagonal. In all our examples, after divide and conquer has found the nonzero singular values, all that remains is roundoff error. Despite this fact, the iterations are continued in order to find all singular values \"to high relative error independent of their magnitudes.\" We have roundoff in roundoff, then roundoff in roundoff in roundoff, and so on.</p><p>The following logarithmic plot of s1 for the checkerboard matrix shows the phenomenon that I like to call \"cascading roundoff\". There are lines at <tt>norm(A)</tt> and at</p><pre class=\"codeinput\">    tol = eps(norm(A))</pre><pre class=\"codeoutput\">tol =   7.1054e-15</pre><p>This is the tolerance initially involved in the convergence test. The steps in the plot are at powers of <tt>tol</tt>.</p><pre class=\"codeinput\">    s1 = svd(A);    plotem(s1,inf)    title('rank 2')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/checkerboard_blog_03.png\" vspace=\"5\" /> <p>If we specify three outputs, the iterative portion of the SVD function uses a traditional QR iteration with a more conservative convergence criterion instead of divide and conquer. There is no cascading roundoff. All the s2 singular values that would be zero with exact computation are of size <tt>tol</tt>.</p><pre class=\"codeinput\">    [~,s2,~] = svd(A,'vector');    plotem(s1,s2,[-48,4])    title('rank 2')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/checkerboard_blog_04.png\" vspace=\"5\" /> <p>The plots of s1 and s2 are very different, and neither plot looks like the plot of the exact answer. However, all three plots agree about the double value at 40. And all the disagreements, including the cascading roundoff in s1, are below the line at <tt>tol</tt>.</p><p>The checkerboard example shows that s1 and s2 can be very different, but s1 and s2 are much closer to each other than either is to the right answer.</p><h4>Low Rank<a name=\"af38c7f7-7ab0-4c74-9327-f3253195cd70\"></a></h4><p>For a matrix with rank between 2 and full order n, we can use the venerable Hilbert matrix. We have a row vector j and a column vector k in a singleton expansion.</p><pre class=\"codeinput\">    n = 80;    j = 1:n;    k = (1:n)';    A = 1./(k+j-1);</pre><p>The effective rank turns out to be 17.</p><pre class=\"codeinput\">    r = rank(A)</pre><pre class=\"codeoutput\">r =    17</pre><p>The elements of this Hilbert matrix vary over three orders of magnitude, so a logarithmic image is appropriate.</p><pre class=\"codeinput\">    imagem(floor(log2(A)))    title('low rank')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/checkerboard_blog_05.png\" vspace=\"5\" /> <p>Compare the one-output and the three-output singular values,</p><pre class=\"codeinput\">    s1 = svd(A);    [~,s2,~] = svd(A,'vector');    plotem(s1,s2,[-22,3])    title('low rank')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/checkerboard_blog_06.png\" vspace=\"5\" /> <p>The results s1 and s2 agree about the first 17 values and all disagreements are below the line at <tt>tol</tt>.</p><h4>Full Rank<a name=\"c9b91229-31a6-44d1-b2a6-567d20246e0d\"></a></h4><p>Using the same column vector k and row vector j in another example of single expansion produces a full rank matrix.</p><pre class=\"codeinput\">    A = min(k,j);</pre><p>Check that A has full rank.</p><pre class=\"codeinput\">    r = rank(A)</pre><pre class=\"codeoutput\">r =    80</pre><p>The logarithm is not needed for this image.</p><pre class=\"codeinput\">    imagem(A)    title('full rank')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/checkerboard_blog_07.png\" vspace=\"5\" /> <p>Compare the one-output and the three-output singular values,</p><pre class=\"codeinput\">    s1 = svd(A);    [~,s2,~] = svd(A,'vector');    plotem(s1,s2,[-2,4])    title('full rank')</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/checkerboard_blog_08.png\" vspace=\"5\" /> <p>With full rank, all values of s1 and s2 are essentially equal. Any line at <tt>tol</tt> would be irrelevant.</p><h4>Timing<a name=\"50932af3-6dcd-4556-bfa5-6821e1a3e2a4\"></a></h4><p>Which is faster, s1 or s2?</p><p>One extensive timing experiment involves matrices with full rank and with orders</p><pre class=\"language-matlab\">   n = 250:250:5000</pre><p>The times measured for computing s1 and s2 are shown by the o's in the following plot.</p><p>Since the time complexity for computing SVD is O(n^3), we fit the data by cubic polynomials. For large n, the time required is dominated by the n^3 terms. The ratio of the coefficients of these dominate terms is</p><pre class=\"language-matlab\">   ratio = 1.17</pre><p>In other words, for large problems s1 is about 17 percent faster than s2.</p><pre class=\"codeinput\">    timefit </pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/checkerboard_blog_09.png\" vspace=\"5\" /> <h4>Remarks<a name=\"a505363d-3df2-4fbe-9888-d7c67ce58af0\"></a></h4><p>I will admit to a personal preference for s2 over s1. I am more familiar with QR than I am with divide and conquer. As a result, I have more confidence in s2.</p><p>I realize that the LAPACK divide and conquer driver DSVDD can achieve the stated goal of finding all singular values \"to high relative error independent of their magnitudes\" if the input A is bidiagonal and known exactly. But I don't see that in MATLAB with s1. I suspect that MATLAB does not make a special case for bidiagonal svd.</p><p>I will be very happy to see any other examples. Please comment.</p><h4>Software<a name=\"ba7766fd-745c-434c-9ac4-24950aa30394\"></a></h4><p>This blog post is executable. You can <tt>publish</tt> it if you also have the three files in <a href=\"https://blogs.mathworks.com/cleve/files/Checkerboard_mzip.m\">Checkerboard_mzip</a>.</p><!--     function grabCode_185f15c23b664f8f8895b024a48f0e70() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='185f15c23b664f8f8895b024a48f0e70 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 185f15c23b664f8f8895b024a48f0e70';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--185f15c23b664f8f8895b024a48f0e70 ##### SOURCE BEGIN #####%% Two Flavors of SVD% MATLAB has two different ways to compute singular values.% The easiest is to compute the singular values without the singular% vectors.  Use |svd| with one output argument, s1.%%    s1 = svd(A)%% The alternative is to use |svd| with three outputs.  Ignore the % first and third output and specify the second output to be a% column vector, s2.%%    [~,s2,~] = svd(A,'vector')%% The MathWorks technical support team receives calls from observant% users who notice that the two approaches might produce different% singular values.% Which is more accurate, s1 or s2?% Which is faster?% Which should we use?%% I found myself asking the same questions.%% A key feature of all our experiments is the _rank_ of the matrix.% Let's investigate three cases: a rank 2 matrix, a low rank matrix,% and a full rank matrix.%% Checkerboard% The first example, motivated by a recent query,% is an 80-by-80 matrix of zeros and ones% derived from the |checkerboard| function in the% Image Processing Toolbox.    A = double(checkerboard > 0); %%% The rank of the checkerboard matrix is 2.      r = rank(A)%%% The |image| function provides the same portrait of A as its |spy| plot.    imagem(A)    title('rank 2')%%% Let's begin with the exact singular values.% The two nonzero singular values are both equal to 40.% The zero singular value has multiplicity 78.    s = [40; 40; zeros(78,1)];    disp('  s =')    disp(s(1:5))    disp('     :')    disp(s(end-2:end))%%% A perfect plot of the singular values of a rank 2 matrix% would look like this.    plotem(s)    title('rank 2')%%% What do we get when we actually compute the SVD of the checkerboard?%% The built-in SVD function uses Householder reflections to reduce% the matrix to bidiagonal form.  When the vectors are not required,% a divide and conquer iteration then reduces the bidiagonal to diagonal.% In all our examples, after divide and conquer has found the nonzero% singular values, all that remains is roundoff error.  Despite this% fact, the iterations are continued in order to find all singular% values \"to high relative error independent of their magnitudes.\"% We have roundoff in roundoff, then roundoff in roundoff in roundoff,% and so on. %% The following logarithmic plot of s1 for the checkerboard matrix% shows the phenomenon that I like% to call \"cascading roundoff\". There are lines at |norm(A)| and at    tol = eps(norm(A))%%% This is the tolerance initially involved in the convergence test.% The steps in the plot are at powers of |tol|.    s1 = svd(A);    plotem(s1,inf)    title('rank 2')%%% If we specify three outputs, the iterative portion of the SVD function% uses a traditional QR iteration with a more conservative convergence % criterion instead of divide and conquer.% There is no cascading roundoff. All the s2 singular values% that would be zero with exact computation are of size |tol|.    [~,s2,~] = svd(A,'vector');    plotem(s1,s2,[-48,4])    title('rank 2')%%% The plots of s1 and s2 are very different, and neither plot looks like% the plot of the exact answer. However, all three plots agree about the% double value at 40.  And all the disagreements, including the cascading% roundoff in s1, are below the line at |tol|.%% The checkerboard example shows that s1 and s2 can be very different,% but s1 and s2 are much closer to each other than either is to the % right answer.%% Low Rank% For a matrix with rank between 2 and full order n, we can use the% venerable Hilbert matrix. We have a row vector j and a column vector k% in a singleton expansion.    n = 80;    j = 1:n;    k = (1:n)';    A = 1./(k+j-1);%%% The effective rank turns out to be 17.    r = rank(A)   %%% The elements of this Hilbert matrix vary over three orders of% magnitude, so a logarithmic image is appropriate.    imagem(floor(log2(A)))    title('low rank')%%% Compare the one-output and the three-output singular values,    s1 = svd(A);    [~,s2,~] = svd(A,'vector');    plotem(s1,s2,[-22,3])    title('low rank')%%% The results s1 and s2 agree about the first 17 values and% all disagreements are below the line % at |tol|.%% Full Rank% Using the same column vector k and row vector j in another% example of single expansion produces a full rank matrix.    A = min(k,j);%%% Check that A has full rank.    r = rank(A)%%% The logarithm is not needed for this image.    imagem(A)    title('full rank')%%% Compare the one-output and the three-output singular values,    s1 = svd(A);    [~,s2,~] = svd(A,'vector');    plotem(s1,s2,[-2,4])    title('full rank')%%% With full rank, all values of s1 and s2 are essentially equal.% Any line at |tol| would be irrelevant.%% Timing% Which is faster, s1 or s2?%% One extensive timing experiment involves matrices with full rank% and with orders% %   n = 250:250:5000  %% The times measured for computing s1 and s2 are shown by the o's in% the following plot.%% Since the time complexity for computing SVD is O(n^3),% we fit the data by cubic polynomials.% For large n, the time required is dominated by the n^3 terms.% The ratio of the coefficients of these dominate terms is%%   ratio = 1.17%% In other words, for large problems s1 is about 17 percent faster % than s2.    timefit %% Remarks% I will admit to a personal preference for s2 over s1.% I am more familiar with QR than I am with divide and conquer.% As a result, I have more confidence in s2.%% I realize that the LAPACK divide and conquer driver DSVDD can achieve% the stated goal of finding all singular values \"to high relative error% independent of their magnitudes\" if the input A is bidiagonal and% known exactly.  But I don't see that in MATLAB with s1.% I suspect that MATLAB does not make a special case for bidiagonal svd.%% I will be very happy to see any other examples.% Please comment.%% Software% This blog post is executable.  You can |publish| it% if you also have the three files in% <https://blogs.mathworks.com/cleve/files/Checkerboard_mzip.m% Checkerboard_mzip>.##### SOURCE END ##### 185f15c23b664f8f8895b024a48f0e70-->",
            "url": "https://hpc.social/commercial-blog/2025/two-flavors-of-svd/",
            
            
            
            
            
            "date_published": "2025-02-23T21:27:51-07:00",
            "date_modified": "2025-02-23T21:27:51-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2025/lutool-animation-of-gaussian-elimination/",
            "title": "LUTool, Animation of Gaussian Elimination",
            "summary": null,
            "content_text": "LUTool provides an interactive animation of Gaussian elimination, the most important algorithm in technical computing.ContentsLU Matrix FactorizationLUToolMagic SquaresPositive Definite MatricesRedheffer MatricesSingular MatricesSoftwareLU Matrix FactorizationThe triangular factorization of a square, n-by-n matrix A is  A(p,q) = L*Uwhere L is a lower triangular matrix with ones on the diagonal, U is an upper triangular matrix, and p and q are indices of row and column permutations.There are three kinds of pivoting.* none. No interchanges.* partial. Choose the largest element in the current pivot column.* complete. Choose the largest element in the entire unreduced matrix.In general, pivoting permutations are necessary for numerical stability by avoiding divisions by small pivots. However, some test matrices can be successfully factored without pivoting.LUToolLUTool displays the lower portion of L and the row indices p in blue and the upper portion of U and the column indices q in lavender. The product of the pivot values on the diagonal of U is the determinant of A.A popup menu lists the available test matrix families from gallery and from the MATLAB path. info and help buttons display information about the selected family and about LUTool itself. Magic SquaresHere are the three pivoting options with the 5-by-5 magic square.complete partial none Positive Definite MatricesPascal matrices are positive definite and do not require pivoting. The same triangular factorization is computed by chol. Redheffer MatricesLast fall, I made a series of blog posts about Redheffer matrices and the Riemann hypothesis. Since the first column of a Redheffer matrix is all ones, the resulting lower triangular factor is nearly full. Pat Quillen suggested interchanging the first and last columns, so there would be much less fill-in. Singular MatricesIt is widely believed that only nonsingular matrices have triangular factorizations. However, with proper pivoting, singular matrices also have LU factorizations. (The consequences of singularity or poor conditioning are realized when U is subsequently used to solve a linear system.)For example, restart the random number generator with  rng(1)Then  n = 6  gallery('rando',n,0)produces a singular matrix and  [A,p,q,L,U] = LUTool('rando',n,'partial',0.02)encounters two zero pivots. Nevertheless, the output satisfies  A(p,q) = L*U For my final example, the rank of the 8-by-8 magic square is only 3. LUTool with partial pivoting encounters five negligible pivots. The first three columns of L and the first three rows of U are all that is required to reconstruct the original magic square. SoftwareA self-extracting archive of LUTool is available from this linkGet       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p><tt>LUTool</tt> provides an interactive animation of Gaussian elimination, the most important algorithm in technical computing.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#9a082e23-5f77-439b-87dc-27e094abd2ea\">LU Matrix Factorization</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#db10948f-e8f6-4220-9707-a33f965c2272\"><tt>LUTool</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#6b4793de-6686-4da5-91ce-363fc58c068b\">Magic Squares</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b5f1a600-244e-4bff-823c-210673ec5273\">Positive Definite Matrices</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#84f5b49b-4243-477d-96d3-87c8d72c829d\">Redheffer Matrices</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#5b2600ac-9536-457c-a935-7e35339edb57\">Singular Matrices</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#ab040aa1-def2-4b72-b9a9-945da1a77b19\">Software</a></li></ul></div><h4>LU Matrix Factorization<a name=\"9a082e23-5f77-439b-87dc-27e094abd2ea\"></a></h4><p>The triangular factorization of a square, n-by-n matrix <tt>A</tt> is</p><pre>  A(p,q) = L*U</pre><p>where <tt>L</tt> is a lower triangular matrix with ones on the diagonal, <tt>U</tt> is an upper triangular matrix, and p and q are indices of row and column permutations.</p><p>There are three kinds of pivoting.</p><pre>* none. No interchanges.* partial. Choose the largest element in the current pivot column.* complete. Choose the largest element in the entire unreduced matrix.</pre><p>In general, pivoting permutations are necessary for numerical stability by avoiding divisions by small pivots. However, some test matrices can be successfully factored without pivoting.</p><h4><tt>LUTool</tt><a name=\"db10948f-e8f6-4220-9707-a33f965c2272\"></a></h4><p><tt>LUTool</tt> displays the lower portion of <tt>L</tt> and the row indices <tt>p</tt> in blue and the upper portion of <tt>U</tt> and the column indices <tt>q</tt> in lavender. The product of the pivot values on the diagonal of <tt>U</tt> is the determinant of <tt>A</tt>.</p><p>A popup menu lists the available test matrix families from <tt>gallery</tt> and from the MATLAB path. <tt>info</tt> and <tt>help</tt> buttons display information about the selected family and about <tt>LUTool</tt> itself.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/magic_3_static.gif\" vspace=\"5\" /> </p><h4>Magic Squares<a name=\"6b4793de-6686-4da5-91ce-363fc58c068b\"></a></h4><p>Here are the three pivoting options with the 5-by-5 magic square.</p><p><b>complete</b></p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/magic_5_complete.gif\" vspace=\"5\" /> </p><p><b>partial</b></p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/magic_5_partial.gif\" vspace=\"5\" /> </p><p><b>none</b></p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/magic_5_none.gif\" vspace=\"5\" /> </p><h4>Positive Definite Matrices<a name=\"b5f1a600-244e-4bff-823c-210673ec5273\"></a></h4><p>Pascal matrices are positive definite and do not require pivoting. The same triangular factorization is computed by <tt>chol</tt>.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/pascal_6_none.gif\" vspace=\"5\" /> </p><h4>Redheffer Matrices<a name=\"84f5b49b-4243-477d-96d3-87c8d72c829d\"></a></h4><p>Last fall, I made <a href=\"https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/\">a series of blog posts</a> about Redheffer matrices and the Riemann hypothesis. Since the first column of a Redheffer matrix is all ones, the resulting lower triangular factor is nearly full.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/redheff_7_partial.gif\" vspace=\"5\" /> </p><p>Pat Quillen suggested interchanging the first and last columns, so there would be much less fill-in.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/redheff_3_7_partial.gif\" vspace=\"5\" /> </p><h4>Singular Matrices<a name=\"5b2600ac-9536-457c-a935-7e35339edb57\"></a></h4><p>It is widely believed that only nonsingular matrices have triangular factorizations. However, with proper pivoting, singular matrices also have LU factorizations. (The consequences of singularity or poor conditioning are realized when <tt>U</tt> is subsequently used to solve a linear system.)</p><p>For example, restart the random number generator with</p><pre>  rng(1)</pre><p>Then</p><pre>  n = 6  gallery('rando',n,0)</pre><p>produces a singular matrix and</p><pre>  [A,p,q,L,U] = LUTool('rando',n,'partial',0.02)</pre><p>encounters two zero pivots. Nevertheless, the output satisfies</p><pre>  A(p,q) = L*U</pre><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/rando_6_partial.gif\" vspace=\"5\" /> </p><p>For my final example, the rank of the 8-by-8 magic square is only 3. <tt>LUTool</tt> with partial pivoting encounters five negligible pivots. The first three columns of <tt>L</tt> and the first three rows of <tt>U</tt> are all that is required to reconstruct the original magic square.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/magic_8_partial.gif\" vspace=\"5\" /> </p><h4>Software<a name=\"ab040aa1-def2-4b72-b9a9-945da1a77b19\"></a></h4><p>A self-extracting archive of <tt>LUTool</tt> is available from <a href=\"https://blogs.mathworks.com/cleve/files/LUTool_mzip.m\">this link</a></p><!--     function grabCode_39dca6aaf7274169876a8296cc5c2505() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='39dca6aaf7274169876a8296cc5c2505 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 39dca6aaf7274169876a8296cc5c2505';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2025 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--39dca6aaf7274169876a8296cc5c2505 ##### SOURCE BEGIN #####%% LUTool, Animation of Gaussian Elimination% |LUTool| provides an interactive animation of Gaussian elimination,% the most important algorithm in technical computing.%% LU Matrix Factorization% The triangular factorization of a square, n-by-n matrix |A| is%%    A(p,q) = L*U%% where |L| is a lower triangular matrix with ones on the diagonal,% |U| is an upper triangular matrix, and p and q are indices of% row and column permutations.%% There are three kinds of pivoting.%%  * none. No interchanges.%  * partial. Choose the largest element in the current pivot column.%  * complete. Choose the largest element in the entire unreduced matrix.%% In general, pivoting permutations are necessary for numerical stability% by avoiding divisions by small pivots.  However, some test matrices% can be successfully factored without pivoting.%% |LUTool|% |LUTool| displays the lower portion of |L| and the row indices |p|% in blue and the upper portion of |U| and the column indices |q|% in lavender.  The product of the pivot values on the diagonal of |U|% is the determinant of |A|.%% A popup menu lists the available test matrix families from |gallery|% and from the MATLAB path. |info| and |help| buttons display% information about the selected family and about |LUTool| itself.%% <<magic_3_static.gif>>%%% Magic Squares% Here are the three pivoting options with the 5-by-5 magic square.%% *complete*% % <<magic_5_complete.gif>>%% *partial*% % <<magic_5_partial.gif>>%% *none*% % <<magic_5_none.gif>>%% Positive Definite Matrices% Pascal matrices are positive definite and do not require pivoting. % The same triangular factorization is computed by |chol|.%% <<pascal_6_none.gif>>%%% Redheffer Matrices% Last fall, I made% <https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/% a series of blog posts> about Redheffer matrices and the Riemann% hypothesis.  Since the first column of a Redheffer matrix is all ones,% the resulting lower triangular factor is nearly full.%% <<redheff_7_partial.gif>>%% Pat Quillen suggested interchanging the first and last columns, so% there would be much less fill-in.%% <<redheff_3_7_partial.gif>>%%% Singular Matrices% It is widely believed that only nonsingular matrices have triangular% factorizations.  However, with proper pivoting, singular matrices also% have LU factorizations.  (The consequences of singularity or poor% conditioning are realized when |U| is subsequently used to solve% a linear system.)%% For example, restart the random number generator with% %    rng(1)%% Then%%    n = 6%    gallery('rando',n,0)%% produces a singular matrix and%%    [A,p,q,L,U] = LUTool('rando',n,'partial',0.02)%% encounters two zero pivots.  Nevertheless, the output satisfies%%    A(p,q) = L*U%% <<rando_6_partial.gif>>%%%% For my final example, the rank of the 8-by-8 magic square is only 3.% |LUTool| with partial pivoting encounters five negligible pivots.% The first three columns of |L| and the first three rows of |U|% are all that is required to reconstruct the original magic square.%% <<magic_8_partial.gif>>%%% Software% A self-extracting archive of |LUTool| is available from% <https://blogs.mathworks.com/cleve/files/LUTool_mzip.m this link>##### SOURCE END ##### 39dca6aaf7274169876a8296cc5c2505-->",
            "url": "https://hpc.social/commercial-blog/2025/lutool-animation-of-gaussian-elimination/",
            
            
            
            
            
            "date_published": "2025-02-09T02:45:38-07:00",
            "date_modified": "2025-02-09T02:45:38-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/code-for-sonic-and-ten-sonic-movies/",
            "title": "Code for Sonic and Ten Sonic Movies",
            "summary": null,
            "content_text": "Two previous blog posts, Dec. 12, 2024 and Nov. 16, 2024, introduced \"Sonic\", my new tool for incorporating sound in videos. Today's blog post includes a link to the MATLAB source code for Sonic, as well as links to new versions of ten examples.ContentsCodeSonicTen MoviesCodeThe MATLAB code for Sonic and all the examples is available in this 11 MB zip file.Sonic.zipSonicThere are two ways to generate the musical sounds. The three movies Warm-Up, TanSin and Blackjack use recordings of C-major scales played on three different pianos. All the other movies rely on resampling a single note from a trumpet, xylophone or piano.The function sonic_examples(kases,n) is a driver for sonic. The first parameter, kases, is an integer vector of desired examples, 0 though 9. The second parameter, n, is the number of desired samples.n = 25 is very fastn = 100 is reasonablen = 200 is the defaultn = 300 is overkillTen MoviesHere are links to new versions of the animated videos, and the final frames.0. Warm-Upsonic_examples_0.mp4 1. Lissajoussonic_examples_1.mp4 2. Mertenssonic_examples_2.mp4 3. TanSinsonic_examples_3.mp4 4. Van der Polsonic_examples_4.mp4 5. VdP Derivativesonic_examples_5.mp4 6. Blackjacksonic_examples_6.mp4 7. Vibrating L-shaped Membranesonic_examples_7.mp4 8. Recam&aacute;n Sequencesonic_examples_8.mp4 9. Swinging Stickssonic_examples_9.mp4 Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>Two previous blog posts, <a href=\"https://blogs.mathworks.com/cleve/2024/12/08/sonic-adds-sound-to-logo-recaman-chaos/\">Dec. 12, 2024</a> and <a href=\"https://blogs.mathworks.com/cleve/2024/11/16/lights-camera-action-and-sound/\">Nov. 16, 2024</a>, introduced \"Sonic\", my new tool for incorporating sound in videos. Today's blog post includes a link to the MATLAB source code for Sonic, as well as links to new versions of ten examples.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#430e1f71-5674-4dd0-9822-ecdf14267246\">Code</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#261cb182-c13b-4b1e-9932-f52485ff1334\">Sonic</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c9a4823d-d0b6-48fd-a9f0-388f00ec93b3\">Ten Movies</a></li></ul></div><h4>Code<a name=\"430e1f71-5674-4dd0-9822-ecdf14267246\"></a></h4><p>The MATLAB code for Sonic and all the examples is available in this 11 MB <tt>zip</tt> file.</p><p><a href=\"https://blogs.mathworks.com/cleve/files/Sonic.zip\">Sonic.zip</a></p><h4>Sonic<a name=\"261cb182-c13b-4b1e-9932-f52485ff1334\"></a></h4><p>There are two ways to generate the musical sounds. The three movies Warm-Up, TanSin and Blackjack use recordings of C-major scales played on three different pianos. All the other movies rely on <a href=\"https://www.mathworks.com/help/signal/ref/resample.html\">resampling</a> a single note from a trumpet, xylophone or piano.</p><p>The function <tt>sonic_examples(kases,n)</tt> is a driver for <tt>sonic</tt>. The first parameter, <tt>kases</tt>, is an integer vector of desired examples, 0 though 9. The second parameter, <tt>n</tt>, is the number of desired samples.</p><div><ul><li>n = 25 is very fast</li><li>n = 100 is reasonable</li><li>n = 200 is the default</li><li>n = 300 is overkill</li></ul></div><h4>Ten Movies<a name=\"c9a4823d-d0b6-48fd-a9f0-388f00ec93b3\"></a></h4><p>Here are links to new versions of the animated videos, and the final frames.</p><p><b>0. Warm-Up</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_0.mp4\">sonic_examples_0.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_0.png\" vspace=\"5\" /> </p><p><b>1. Lissajous</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_1.mp4\">sonic_examples_1.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_1.png\" vspace=\"5\" /> </p><p><b>2. Mertens</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_2.mp4\">sonic_examples_2.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_2.png\" vspace=\"5\" /> </p><p><b>3. TanSin</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_3.mp4\">sonic_examples_3.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_3.png\" vspace=\"5\" /> </p><p><b>4. Van der Pol</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_4.mp4\">sonic_examples_4.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_4.png\" vspace=\"5\" /> </p><p><b>5. VdP Derivative</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_5.mp4\">sonic_examples_5.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_5.png\" vspace=\"5\" /> </p><p><b>6. Blackjack</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_6.mp4\">sonic_examples_6.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_6.png\" vspace=\"5\" /> </p><p><b>7. Vibrating L-shaped Membrane</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_7.mp4\">sonic_examples_7.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_7.png\" vspace=\"5\" /> </p><p><b>8. Recam&aacute;n Sequence</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_8.mp4\">sonic_examples_8.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_8.png\" vspace=\"5\" /> </p><p><b>9. Swinging Sticks</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/sonic_examples_9.mp4\">sonic_examples_9.mp4</a></p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sonic_examples_9.png\" vspace=\"5\" /> </p><!--     function grabCode_6be05d5d2be34097bc51738847d9f5b6() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='6be05d5d2be34097bc51738847d9f5b6 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 6be05d5d2be34097bc51738847d9f5b6';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--6be05d5d2be34097bc51738847d9f5b6 ##### SOURCE BEGIN #####%% Code for Sonic and Ten Sonic Movies% Two previous blog posts,% <https://blogs.mathworks.com/cleve/2024/12/08/sonic-adds-sound-to-logo-recaman-chaos/% Dec. 12, 2024> and% <https://blogs.mathworks.com/cleve/2024/11/16/lights-camera-action-and-sound/% Nov. 16, 2024>,% introduced \"Sonic\", my new tool for incorporating sound in videos. % Today's blog post includes a link to the MATLAB source code for Sonic,% as well as links to new versions of ten examples.%% Code% The MATLAB code for Sonic and all the examples is available in this% 11 MB |zip| file.%% <https://blogs.mathworks.com/cleve/files/Sonic.zip Sonic.zip>% %% Sonic% There are two ways to generate the musical sounds.% The three movies Warm-Up, TanSin and Blackjack use recordings% of C-major scales played on three different pianos. % All the other movies rely on % <https://www.mathworks.com/help/signal/ref/resample.html resampling>% a single note from a trumpet, xylophone or piano.%% The function |sonic_examples(kases,n)| is a driver for |sonic|.% The first parameter, |kases|, is an integer vector of desired examples,% 0 though 9.  The second parameter, |n|, is the number of desired samples.%% * n = 25 is very fast% * n = 100 is reasonable % * n = 200 is the default% * n = 300 is overkill%% Ten Movies% Here are links to new versions of the animated videos, and the final% frames.%% *0. Warm-Up*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_0.mp4 sonic_examples_0.mp4>%% <<sonic_examples_0.png>>%%%% *1. Lissajous*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_1.mp4 sonic_examples_1.mp4>%% <<sonic_examples_1.png>>%%% *2. Mertens*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_2.mp4 sonic_examples_2.mp4>%% <<sonic_examples_2.png>>%%% *3. TanSin*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_3.mp4 sonic_examples_3.mp4>%% <<sonic_examples_3.png>>%% % *4. Van der Pol*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_4.mp4 sonic_examples_4.mp4>%% <<sonic_examples_4.png>>%% % *5. VdP Derivative*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_5.mp4 sonic_examples_5.mp4>%% <<sonic_examples_5.png>>%%% *6. Blackjack*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_6.mp4 sonic_examples_6.mp4>%% <<sonic_examples_6.png>>%%% *7. Vibrating L-shaped Membrane*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_7.mp4 sonic_examples_7.mp4>%% <<sonic_examples_7.png>>%%% *8. Recamán Sequence*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_8.mp4 sonic_examples_8.mp4>%% <<sonic_examples_8.png>>%%% *9. Swinging Sticks*%% <https://blogs.mathworks.com/cleve/files/sonic_examples_9.mp4 sonic_examples_9.mp4>%% <<sonic_examples_9.png>>   %%   ##### SOURCE END ##### 6be05d5d2be34097bc51738847d9f5b6-->",
            "url": "https://hpc.social/commercial-blog/2024/code-for-sonic-and-ten-sonic-movies/",
            
            
            
            
            
            "date_published": "2024-12-18T15:13:08-07:00",
            "date_modified": "2024-12-18T15:13:08-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/sonic-adds-sound-to-logo-recam%C3%A1n-chaos/",
            "title": "Sonic Adds Sound to Logo, Recamán, Chaos",
            "summary": null,
            "content_text": "I introduced Sonic in my blog post last month. Today I will use Sonic to add sound to the graphics from three old posts, the vibrating L-shaped membrane, the Recam&aacute;n sequence and the chaotic behavior of the Swinging Sticks.ContentsVibrating L-shaped MembraneRecam&aacute;nSwinging SticksTriple featureVibrating L-shaped MembraneFor almost fifty years, I have wanted to hear the MathWorks logo. I have written about the L-shaped membrane many times, link #1, link #2, link #3.Click on this link and listen to the audio in a Sonic movie of the vibrating membrane. The sound is generated by resampling one tone from a xylophone.And here is one frame from the movie. Recam&aacute;nThe inventor of the Recam&aacute;n sequence is a Columbian mathematician, Bernardo Recam&aacute;n Santos. The sequence is A005132 in the OEIS, the On-Line Encyclopedia of Integer Sequences. Here is my blog post.Click on this link and the listen to the audio in a Sonic movie of the Recam&aacute;n sequence. The sound is generated by resampling the middle-C key of a piano.Here is one frame from the movie. Swinging SticksThe Swinging Sticks is a kinetic sculpture that exhibits chaotic behavior. I have added sound to my blog post about the sticks.Here is the link to a Sonic movie of the Swinging Sticks. The audio is also generated by resampling one tone from a xylophone.And, here is one frame from the movie. Triple featureClick on this link to see -- and hear-- all three movies.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>I introduced Sonic in my <a href=\"https://blogs.mathworks.com/cleve/2024/11/16/lights-camera-action-and-sound\">blog post</a> last month. Today I will use Sonic to add sound to the graphics from three old posts, the vibrating L-shaped membrane, the Recam&aacute;n sequence and the chaotic behavior of the Swinging Sticks.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8beb910f-b7ff-4f4a-957c-1af21319f187\">Vibrating L-shaped Membrane</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#3e98e8b6-2291-4284-b4d0-c3b6da33bdc7\">Recam&aacute;n</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#cf487494-235c-48ab-8849-b0e0d6a1099e\">Swinging Sticks</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#1f278f40-79e9-42e7-877e-dad57ee84e1f\">Triple feature</a></li></ul></div><h4>Vibrating L-shaped Membrane<a name=\"8beb910f-b7ff-4f4a-957c-1af21319f187\"></a></h4><p>For almost fifty years, I have wanted to <i>hear</i> the MathWorks logo. I have written about the L-shaped membrane many times, <a href=\"https://www.mathworks.com/content/dam/mathworks/tag-team/Objects/t/72943_92021v00Cleve_L_Shaped_Membrane_Nov_2003.pdf\">link #1</a>, <a href=\"https://blogs.mathworks.com/cleve/2014/10/13/mathworks-logo-part-one-why-is-it-l-shaped/\">link #2</a>, <a href=\"https://blogs.mathworks.com/cleve/2014/11/17/mathworks-logo-part-four-method-of-particular-solutions-generates-the-logo/\">link #3</a>.</p><p><a href=\"https://blogs.mathworks.com/cleve/files/L_membrane.mp4\">Click on this link</a> and listen to the audio in a Sonic movie of the vibrating membrane. The sound is generated by resampling one tone from a xylophone.</p><p>And here is one frame from the movie.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/L_membrane_png.png\" vspace=\"5\" /> </p><h4>Recam&aacute;n<a name=\"3e98e8b6-2291-4284-b4d0-c3b6da33bdc7\"></a></h4><p>The inventor of the <a href=\"https://en.wikipedia.org/wiki/Recam%C3%A1n%27s_sequence\">Recam&aacute;n sequence</a> is a Columbian mathematician, Bernardo Recam&aacute;n Santos. The sequence is <a href=\"https://oeis.org/A005132\">A005132</a> in the OEIS, the On-Line Encyclopedia of Integer Sequences. Here is <a href=\"https://blogs.mathworks.com/cleve/2018/07/09/the-oeis-and-the-recaman-sequence\">my blog post</a>.</p><p><a href=\"https://blogs.mathworks.com/cleve/files/Recaman.mp4\">Click on this link</a> and the listen to the audio in a Sonic movie of the Recam&aacute;n sequence. The sound is generated by resampling the middle-C key of a piano.</p><p>Here is one frame from the movie.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Recaman_png.png\" vspace=\"5\" /> </p><h4>Swinging Sticks<a name=\"cf487494-235c-48ab-8849-b0e0d6a1099e\"></a></h4><p>The <a href=\"https://www.the-swinging-sticks.com/en\">Swinging Sticks</a> is a kinetic sculpture that exhibits chaotic behavior. I have added sound to my <a href=\"https://blogs.mathworks.com/cleve/2024/02/20/chaotic-swinging-sticks/\">blog post</a> about the sticks.</p><p><a href=\"https://blogs.mathworks.com/cleve/files/Sticks.mp4\">Here is the link</a> to a Sonic movie of the Swinging Sticks. The audio is also generated by resampling one tone from a xylophone.</p><p>And, here is one frame from the movie.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/sticks_png.png\" vspace=\"5\" /> </p><h4>Triple feature<a name=\"1f278f40-79e9-42e7-877e-dad57ee84e1f\"></a></h4><p><a href=\"https://blogs.mathworks.com/cleve/files/Sonic2_all.mp4\">Click on this link</a> to see -- and <i>hear</i>-- all three movies.</p><!--     function grabCode_91e688fef9a140df96e3d2ba28e351b3() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='91e688fef9a140df96e3d2ba28e351b3 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 91e688fef9a140df96e3d2ba28e351b3';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--91e688fef9a140df96e3d2ba28e351b3 ##### SOURCE BEGIN #####%% Sonic Adds Sound to Logo, Recamán, Chaos% I introduced Sonic in my% <https://blogs.mathworks.com/cleve/2024/11/16/lights-camera-action-and-sound% blog post> last month.  Today I will use Sonic to add sound to the % graphics from three old posts, the vibrating L-shaped membrane,% the Recamán sequence and the chaotic behavior of the% Swinging Sticks.%%% Vibrating L-shaped Membrane% For almost fifty years, I have wanted to _hear_ the MathWorks logo.% I have written about the L-shaped membrane many times,% <https://www.mathworks.com/content/dam/mathworks/tag-team/Objects/t/72943_92021v00Cleve_L_Shaped_Membrane_Nov_2003.pdf% link #1>,% <https://blogs.mathworks.com/cleve/2014/10/13/mathworks-logo-part-one-why-is-it-l-shaped/% link #2>,% <https://blogs.mathworks.com/cleve/2014/11/17/mathworks-logo-part-four-method-of-particular-solutions-generates-the-logo/% link #3>.%% <https://blogs.mathworks.com/cleve/files/L_membrane.mp4% Click on this link> and% listen to the audio in a Sonic movie of the vibrating membrane.% The sound is generated by resampling one tone from a xylophone.%% And here is one frame from the movie.%% <<L_membrane_png.png>>%%% Recamán% The inventor of the% <https://en.wikipedia.org/wiki/Recam%C3%A1n%27s_sequence% Recamán sequence> is a Columbian mathematician, Bernardo Recamán Santos.% The sequence is <https://oeis.org/A005132 A005132> in the OEIS,% the On-Line Encyclopedia of Integer Sequences.% Here is% <https://blogs.mathworks.com/cleve/2018/07/09/the-oeis-and-the-recaman-sequence% my blog post>.%% <https://blogs.mathworks.com/cleve/files/Recaman.mp4% Click on this link> and the % listen to the audio in a Sonic movie of the Recamán sequence.% The sound  is generated by resampling% the middle-C key of a piano.%% Here is one frame from the movie.%% <<Recaman_png.png>>%%% Swinging Sticks% The <https://www.the-swinging-sticks.com/en Swinging Sticks>% is a kinetic sculpture that exhibits chaotic behavior.% I have added sound to my% <https://blogs.mathworks.com/cleve/2024/02/20/chaotic-swinging-sticks/% blog post> about the sticks.%% <https://blogs.mathworks.com/cleve/files/Sticks.mp4% Here is the link> to a Sonic movie of the Swinging Sticks.% The audio is also generated by resampling% one tone from a xylophone.%%% And, here is one frame from the movie.%% <<sticks_png.png>>%% Triple feature% <https://blogs.mathworks.com/cleve/files/Sonic2_all.mp4% Click on this link> to see REPLACE_WITH_DASH_DASH and _hear_REPLACE_WITH_DASH_DASH% all three movies. ##### SOURCE END ##### 91e688fef9a140df96e3d2ba28e351b3-->",
            "url": "https://hpc.social/commercial-blog/2024/sonic-adds-sound-to-logo-recam%C3%A1n-chaos/",
            
            
            
            
            
            "date_published": "2024-12-08T11:51:55-07:00",
            "date_modified": "2024-12-08T11:51:55-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/lights-camera-action-and-sound/",
            "title": "Lights, Camera, Action — and Sound",
            "summary": null,
            "content_text": "I am very excited to incorporate sound in animations. This blog post has five examples with links to videos enclosed in '+ + + +'.ContentsMertensLissajoustansinVan der PolBlackjackMertensI began making animations with sound while investigating the Mertens Conjecture. The OEIS page offers an opportunity to listen to the Mertens sequence, but I wanted more control.The resample function is the Signal Processing Toolbox resamples a signal at a fraction, p/q, times the original sample rate. The sound in this Mertens example is generated from a recording of piano playing middle C that is resampled to simulate the other notes.Here is a link to a 40-second video of M(n) and sqrt(n) for n = 200. (Homework: How long would the video last if n = 10^8? Post your answers in the comments.)+ + + + + + + + + + + + + + + + + + + + + + + + + + +https://blogs.mathworks.com/cleve/files/mertens.mp4+ + + + + + + + + + + + + + + + + + + + + + + + + + +Here is a static graphic, the last frame of the video. LissajousYou may well have seen Lissajous curves before, but have you ever listened to them? They were first studied extensively by Jules Lissajous, a nineteenth-century French physicist. There are many Lissajous curves similar to the following, where the trajectory in the x-y plane is described by two functions of a parameter t.n = 200;t = 3*pi*(-1:2/n:1);x = 5*cos(t)+3*cos(5/3*t);y = 5*sin(t)-sin(5/3*t);This 40-second video employs sound produced by resampling a note from a xylophone.+ + + + + + + + + + + + + + + + + + + + + + + + + + +https://blogs.mathworks.com/cleve/files/lissajous.mp4+ + + + + + + + + + + + + + + + + + + + + + + + + + +Here is the last frame. tansinI have used variations of this function many times.F = @(x) tan(sin(x))+sin(tan(x));When x approaches an integer multiple of pi, both sin(x) and tan(x) approach zero, so F(x) also approaches zero. But when x approaches an odd multiple of pi/2, tan(x) becomes infinite, so both sin(tan(x)) and F(x) oscillate infinitely often.Here is a link to a 45-second video of F(x) for n = 200 evenly spaced values of x between -2pi and 2pi. If we increase n, we would see more of the oscillations at the singularities. The sound comes from resampling a single note played by a trumpet.+ + + + + + + + + + + + + + + + + + + + + + + + + + +https://blogs.mathworks.com/cleve/files/tansin.mp4+ + + + + + + + + + + + + + + + + + + + + + + + + + + Van der PolQuoting Wikipedia.  In the study of dynamical systems, the van der Pol oscillator  (named for Dutch physicist Balthasar van der Pol) is a  non-conservative, oscillating system with non-linear damping.In this video, we see -- and hear -- the numerical solution, computed by ode45, of the Van der Pol equation at n points between t = 0 and t = 20. The damping parameter is mu = 2.The sound comes from a recording of a student practicing a piano. In this case we have scales spanning four octaves, so no resampling is required.+ + + + + + + + + + + + + + + + + + + + + + + + + + +https://blogs.mathworks.com/cleve/files/vanderpol.mp4+ + + + + + + + + + + + + + + + + + + + + + + + + + + BlackjackThe card game Blackjack is another example that I use frequently; see \"Simulating Blackjack\" and MATLAB file exchange. The video shows a simulation of a few hundred hands, starting each hand with a $10 bet. The sound comes from a piano playing a C-major scale. Again, resampling is not necessary.The emerging histograms in the video, and the static outcome in the final frame, show the percentages observed for each of ten possible outcomes. The histograms can be compared with those in the \"Simulating Blackjack\" article that describes the use of the Parallel Computing Toolbox to play 10,000 hands with these results.bjpercent    \"   Push, player and dealer have equal totals not exceeding 21             \"    \"   Win, player's total is greater than dealer's and does not exceed 21    \"    \"   Lose, dealer's total is greater than player's and does not exceed 21   \"    \"   Blackjack, player has 21 with two cards, dealer does not               \"    \"                                                                          \"    \"   $-40     0.03     Split and double, lose both                          \"    \"   $-30     0.17     Split and double, lose one                           \"    \"   $-20     4.71     Split or double, lose                                \"    \"   $-10    42.94     Lose                                                 \"    \"   $  0     9.06     Push                                                 \"    \"   $+10    32.13     Win                                                  \"    \"   $+15     4.44     Blackjack                                            \"    \"   $+20     6.19     Split or double, win                                 \"    \"   $+30     0.28     Split and double, win one                            \"    \"   $+40     0.06     Split and double, win both                           \"(Homework. This simulation happens to have three hands with the very rare swings of more than $20. Find the hand numbers where such rare events occur. Post your answers in the comments. Hint: watch the emerging histograms.)+ + + + + + + + + + + + + + + + + + + + + + + + + + + +https://blogs.mathworks.com/cleve/files/blackjack.mp4+ + + + + + + + + + + + + + + + + + + + + + + + + + + +  Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024b",
            "content_html": "<div class=\"content\"><!--introduction--><p>I am very excited to incorporate sound in animations. This blog post has five examples with links to videos enclosed in <tt>'+ + + +'</tt>.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#beb66eab-d057-4b35-b679-ceb8341bac55\">Mertens</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#acc96bc1-84ad-4503-af62-3207c0cddc9d\">Lissajous</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c8bcb2e7-342f-4b58-a7ba-b3d7f7034476\">tansin</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#7e32cd92-b6a9-46ec-aa1c-980089ff6833\">Van der Pol</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e791b241-63f8-4987-a4d3-4451b5b8f39d\">Blackjack</a></li></ul></div><h4>Mertens<a name=\"beb66eab-d057-4b35-b679-ceb8341bac55\"></a></h4><p>I began making animations with sound while investigating the <a href=\"https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/\">Mertens Conjecture</a>. The <a href=\"https://oeis.org/A002321\">OEIS</a> page offers an opportunity to listen to the Mertens sequence, but I wanted more control.</p><p>The <tt>resample</tt> function is the Signal Processing Toolbox resamples a signal at a fraction, <tt>p/q</tt>, times the original sample rate. The sound in this Mertens example is generated from a recording of piano playing middle C that is resampled to simulate the other notes.</p><p>Here is a link to a 40-second video of <tt>M(n)</tt> and <tt>sqrt(n)</tt> for <tt>n = 200</tt>. (Homework: How long would the video last if <tt>n = 10^8</tt>? Post your answers in the comments.)</p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/mertens.mp4\">https://blogs.mathworks.com/cleve/files/mertens.mp4</a></p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p>Here is a static graphic, the last frame of the video.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mertens.png\" vspace=\"5\" /> </p><h4>Lissajous<a name=\"acc96bc1-84ad-4503-af62-3207c0cddc9d\"></a></h4><p>You may well have seen <a href=\"https://en.wikipedia.org/wiki/Lissajous_curve\">Lissajous curves</a> before, but have you ever <i>listened</i> to them? They were first studied extensively by <a href=\"https://en.wikipedia.org/wiki/Jules_Antoine_Lissajous\">Jules Lissajous</a>, a nineteenth-century French physicist. There are many Lissajous curves similar to the following, where the trajectory in the <tt>x-y</tt> plane is described by two functions of a parameter <tt>t</tt>.</p><pre class=\"language-matlab\">n = 200;t = 3*pi*(-1:2/n:1);x = 5*cos(t)+3*cos(5/3*t);y = 5*sin(t)-sin(5/3*t);</pre><p>This 40-second video employs sound produced by resampling a note from a xylophone.</p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/lissajous.mp4\">https://blogs.mathworks.com/cleve/files/lissajous.mp4</a></p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p>Here is the last frame.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/lissajous.png\" vspace=\"5\" /> </p><h4>tansin<a name=\"c8bcb2e7-342f-4b58-a7ba-b3d7f7034476\"></a></h4><p>I have used variations of <a href=\"https://blogs.mathworks.com/cleve/2012/09/24/supremum\">this function</a> many times.</p><pre>F = @(x) tan(sin(x))+sin(tan(x));</pre><p>When <tt>x</tt> approaches an integer multiple of <tt>pi</tt>, both <tt>sin(x)</tt> and <tt>tan(x)</tt> approach zero, so <tt>F(x)</tt> also approaches zero. But when <tt>x</tt> approaches an odd multiple of <tt>pi/2</tt>, <tt>tan(x)</tt> becomes infinite, so both <tt>sin(tan(x))</tt> and <tt>F(x)</tt> oscillate infinitely often.</p><p>Here is a link to a 45-second video of <tt>F(x)</tt> for <tt>n = 200</tt> evenly spaced values of <tt>x</tt> between <tt>-2pi</tt> and <tt>2pi</tt>. If we increase <tt>n</tt>, we would see more of the oscillations at the singularities. The sound comes from resampling a single note played by a trumpet.</p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/tansin.mp4\">https://blogs.mathworks.com/cleve/files/tansin.mp4</a></p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/tansin.png\" vspace=\"5\" /> </p><h4>Van der Pol<a name=\"7e32cd92-b6a9-46ec-aa1c-980089ff6833\"></a></h4><p>Quoting <a href=\"https://en.wikipedia.org/wiki/Van_der_Pol_oscillator\">Wikipedia</a>.</p><pre>  In the study of dynamical systems, the van der Pol oscillator  (named for Dutch physicist Balthasar van der Pol) is a  non-conservative, oscillating system with non-linear damping.</pre><p>In this video, we see -- and hear -- the numerical solution, computed by <tt>ode45</tt>, of the Van der Pol equation at <tt>n</tt> points between <tt>t = 0</tt> and <tt>t = 20</tt>. The damping parameter is <tt>mu = 2</tt>.</p><p>The sound comes from a recording of a student practicing a piano. In this case we have scales spanning four octaves, so no resampling is required.</p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/vanderpol.mp4\">https://blogs.mathworks.com/cleve/files/vanderpol.mp4</a></p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/vanderpol.png\" vspace=\"5\" /> </p><h4>Blackjack<a name=\"e791b241-63f8-4987-a4d3-4451b5b8f39d\"></a></h4><p>The card game Blackjack is another example that I use frequently; see <a href=\"https://www.mathworks.com/company/technical-articles/simulating-blackjack-with-matlab.html\">\"Simulating Blackjack\"</a> and <a href=\"https://www.mathworks.com/matlabcentral/fileexchange/4404-blackjack\">MATLAB file exchange</a>. The video shows a simulation of a few hundred hands, starting each hand with a $10 bet. The sound comes from a piano playing a C-major scale. Again, resampling is not necessary.</p><p>The emerging histograms in the video, and the static outcome in the final frame, show the percentages observed for each of ten possible outcomes. The histograms can be compared with those in the <a href=\"https://www.mathworks.com/company/technical-articles/simulating-blackjack-with-matlab.html\">\"Simulating Blackjack\"</a> article that describes the use of the Parallel Computing Toolbox to play 10,000 hands with these results.</p><pre class=\"codeinput\">bjpercent</pre><pre class=\"codeoutput\">    \"   Push, player and dealer have equal totals not exceeding 21             \"    \"   Win, player's total is greater than dealer's and does not exceed 21    \"    \"   Lose, dealer's total is greater than player's and does not exceed 21   \"    \"   Blackjack, player has 21 with two cards, dealer does not               \"    \"                                                                          \"    \"   $-40     0.03     Split and double, lose both                          \"    \"   $-30     0.17     Split and double, lose one                           \"    \"   $-20     4.71     Split or double, lose                                \"    \"   $-10    42.94     Lose                                                 \"    \"   $  0     9.06     Push                                                 \"    \"   $+10    32.13     Win                                                  \"    \"   $+15     4.44     Blackjack                                            \"    \"   $+20     6.19     Split or double, win                                 \"    \"   $+30     0.28     Split and double, win one                            \"    \"   $+40     0.06     Split and double, win both                           \"</pre><p>(Homework. This simulation happens to have three hands with the very rare swings of more than $20. Find the hand numbers where such rare events occur. Post your answers in the comments. Hint: watch the emerging histograms.)</p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p><a href=\"https://blogs.mathworks.com/cleve/files/blackjack.mp4\">https://blogs.mathworks.com/cleve/files/blackjack.mp4</a></p><p><b>+ + + + + + + + + + + + + + + + + + + + + + + + + + + +</b></p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/blackjack.png\" vspace=\"5\" /> </p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/bj100K.png\" vspace=\"5\" /> </p><!--     function grabCode_ef605386b1c14b589860f69f1d2032a2() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='ef605386b1c14b589860f69f1d2032a2 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' ef605386b1c14b589860f69f1d2032a2';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024b<br /></p></div><!--ef605386b1c14b589860f69f1d2032a2 ##### SOURCE BEGIN #####%% Lights, Camera, Action REPLACE_WITH_DASH_DASH and Sound% I am very excited to incorporate sound in animations.% This blog post has five examples with% links to videos enclosed in |'+ + + +'|.%% Mertens% I began making animations with sound while investigating the% <https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/% Mertens Conjecture>.% The <https://oeis.org/A002321 OEIS> page % offers an opportunity to listen to the Mertens sequence, but% I wanted more control.%% The |resample| function is the Signal Processing Toolbox% resamples a signal at a fraction, |p/q|, times the original sample rate.% The sound in this Mertens example is generated from a recording of piano% playing middle C that is resampled to simulate the other notes.%% Here is a link to a 40-second video of |M(n)| and |sqrt(n)|% for |n = 200|. % (Homework: How long would the video last if |n = 10^8|?% Post your answers in the comments.)%% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* %% <https://blogs.mathworks.com/cleve/files/mertens.mp4>%% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* %% Here is a static graphic, the last frame of the video.%% <<mertens.png>>%%% Lissajous% You may well have seen <https://en.wikipedia.org/wiki/Lissajous_curve % Lissajous curves> before, but have you ever% _listened_ to them?% They were first studied extensively by % <https://en.wikipedia.org/wiki/Jules_Antoine_Lissajous Jules Lissajous>,% a nineteenth-century French physicist.% There are many Lissajous curves similar to the following, where % the trajectory in the |x-y| plane is described by two functions of % a parameter |t|.%%   n = 200;%   t = 3*pi*(-1:2/n:1);%   x = 5*cos(t) + 3*cos(5/3*t);%   y = 5*sin(t) - sin(5/3*t);%% This 40-second video employs sound produced by resampling a note% from a xylophone.%% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* %% <https://blogs.mathworks.com/cleve/files/lissajous.mp4>%% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* %% Here is the last frame.%% <<lissajous.png>>%%% tansin% I have used variations of% <https://blogs.mathworks.com/cleve/2012/09/24/supremum this function>% many times.%%  F = @(x) tan(sin(x))+sin(tan(x));%% When |x| approaches an integer multiple of |pi|, both |sin(x)| and |tan(x)|% approach zero, so |F(x)| also approaches zero.  But when |x| approaches% an odd multiple of |pi/2|, |tan(x)| becomes infinite, so both |sin(tan(x))| % and |F(x)| oscillate infinitely often.% % Here is a link to a 45-second video% of |F(x)| for |n = 200| evenly spaced values of |x| between |-2pi| and% |2pi|.% If we increase |n|, we would see more of the oscillations at the % singularities.  The sound comes from resampling a single note% played by a trumpet.%% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* %% <https://blogs.mathworks.com/cleve/files/tansin.mp4>%% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* %% <<tansin.png>>%%% Van der Pol% Quoting % <https://en.wikipedia.org/wiki/Van_der_Pol_oscillator Wikipedia>.%%    In the study of dynamical systems, the van der Pol oscillator%    (named for Dutch physicist Balthasar van der Pol) is a %    non-conservative, oscillating system with non-linear damping.% % In this video, we see REPLACE_WITH_DASH_DASH and hear REPLACE_WITH_DASH_DASH the numerical solution, computed% by |ode45|, of the Van der Pol equation at |n| points between% |t = 0| and |t = 20|.  The damping parameter is |mu = 2|.%% The sound comes from a recording of a student practicing a piano.% In this case we have scales spanning four octaves, so no resampling% is required.%    % *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* %% <https://blogs.mathworks.com/cleve/files/vanderpol.mp4>%% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* %% <<vanderpol.png>>%%% Blackjack% The card game Blackjack is another example that I use frequently; see % <https://www.mathworks.com/company/technical-articles/simulating-blackjack-with-matlab.html% \"Simulating Blackjack\"> and% <https://www.mathworks.com/matlabcentral/fileexchange/4404-blackjack% MATLAB file exchange>.% The video shows a simulation of a few hundred hands,% starting each hand with a $10 bet.% The sound comes from a piano playing a C-major scale.% Again, resampling is not necessary.%% The emerging histograms in the video, and the static outcome in% the final frame, show the percentages observed for each% of ten possible outcomes.% The histograms can be compared with those in the% <https://www.mathworks.com/company/technical-articles/simulating-blackjack-with-matlab.html% \"Simulating Blackjack\">% article that describes the use of the  Parallel Computing Toolbox% to play 10,000 hands with these results.   bjpercent%%% (Homework.  This simulation happens to have three hands  with% the very rare swings of more than $20.  Find the hand numbers% where such rare events occur.  Post your answers in the comments.% Hint: watch the emerging histograms.)%%% *+ + + + + + + + + + + + + + + + + + + + + + + + + + + +* %% <https://blogs.mathworks.com/cleve/files/blackjack.mp4>%% *+ + + + + + + + + + + + + + + + + + + + + + + + + + + +* %% <<blackjack.png>>%% <<bj100K.png>>%##### SOURCE END ##### ef605386b1c14b589860f69f1d2032a2-->",
            "url": "https://hpc.social/commercial-blog/2024/lights-camera-action-and-sound/",
            
            
            
            
            
            "date_published": "2024-11-16T06:03:58-07:00",
            "date_modified": "2024-11-16T06:03:58-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/m%C3%B6bius-mertens-and-redheffer/",
            "title": "Möbius, Mertens and Redheffer",
            "summary": null,
            "content_text": "Recently, I have made a series of blog posts about Redheffer matrices and the Mertens conjecture. After each of the posts, readers and colleagues offered suggestions to speed up the calculations. Here is a summary of what I have learned.ContentsM&ouml;bius FunctionMertens FunctionRedheffer MatricesOEISTen MillionMertens ConjectureConjecture is FalseMatricesSparsityComputing Mertens#1#2#3#4#5PerformanceM&ouml;bius Function The function named after the mid-nineteenth century German mathematician August M&ouml;bius is fundamental to the study of prime numbers. The M&ouml;bius function maps the positive integers onto -1,0 and +1.  mu(n) = 0 if n has a repeated prime factor,        = (-1)^(number prime factors) if the factors of n are not repeatedHere is my code for the M&ouml;bius function. It relies on factor(n) which uses a sieve to find the prime factors of n.  function mu = mobius(n)     % mu = mobius(n) returns mu(1:n).     mu = -eye(1,n);     for k = 2:n         f = factor(k);         d = diff([1 f]);         if any(d == 0)             mu(k) = 0;         else             mu(k) = (-1)^length(f);         end     end  endHere is a graph of mu(n) for n = 1:40. For example, mu(29:31) are all -1 because 29 and 31 are both prime and 30 has an odd number of prime factors, 2, 3 and 5.    mu = moebius(40);    plot(1:40,mu,'.-','linewidth',1.5,'markersize',16)    axis([-242-1.51.5])    title('M&ouml;bius function') Mertens Function The Mertens function is named after the late-nineteenth century Polish mathematician Franz Mertens. The function, which we denote by M(n), is simply the partial sums of the M&ouml;bius function. The MATLAB code is very short.  function M = mertens(n)     % M = mertens(n) returns Mertens(1:n).     mu = moebius(n);     M = cumsum([1 mu(2:n)]);  endHere is a graph of M(n) for n = 1:40.    M = mertens(40);    plot(1:40,M,'.-','linewidth',1.5,'markersize',16)    axis([-242-4.51.5])    title('Mertens function') Redheffer Matrices The twentieth-century American mathematician Ray Redheffer, who was a professor at UCLA for 55 years, had a wide range of interests. He was the author of several popular textbooks, the inventor of the electronic game Nim and, with Ray and Charles Eames, the creator of a four-meter long poster Men of Modern Mathematics.The n-by-n Redheffer's matrix R(n) is a matrix of zeros and ones. For j &gt; 1, the element R(k,j) equals one if j is a divisor of k. And importantly, for j = 1, the first column R(:,1) is all ones.  function R = redheffer(n)     k = 1:n;     j = k';     R = (mod(k,j) == 0);     R(:,1) = 1;  endNick Higham put Redheffer's matrix in the MATLAB Gallery several years ago. Here is a spy plot of the 200-by-200.    R = gallery('redheff',200);    spy(R)    title('Redheffer') OEISIn the Online Encyclopedia of Integer Sequences, the Mertens function is OEIS/A002321. One of the many cool features of the OEIS is \"listen\", which generates music driven by the sequences. Take a look -- and a listen -- to my 63 second movie about A002321.https://blogs.mathworks.com/cleve/files/mertens_plot.mp4Ten MillionHere are plots of M(1:n) with n ranging from 100 to 10 million. Each plot after the first also shows the range of the previous plot. I will discuss the red lines in the next section    load mertens M    tiledlayout(2,3)    for n = 10.^(2:7)        nexttile        mertens_plot(M(1:n))    end Mertens ConjectureThe red lines above are plots of &plusmn;sqrt(n). They clearly bound M(n) for n up to 10 million. The Mertens Conjecture is that this holds for all n.  |M(n)| &lt; sqrt(n) for all n &gt; 0The conjecture appears in a 1885 letter from Thomas Stieltjes to Charles Hermite and in a 1897 paper by Mertens.Wikipedia says  It is a striking example of a mathematical conjecture proven false  despite a large amount of computational evidence in its favor.Conjecture is FalseIn 1985, 100 years after the Stieltjes letter, Andrew Odlyzko and Herman te Riele proved that the conjecture is false. Their proof is indirect. They prove the existence of infinitely many n for which  |M(n)|/sqrt(n) &gt; 1.06But they do not know the value of any particular n. They informally estimate that such an n would be greater than 10^30 and probably much larger.MatricesLet's get back to the world of matrices. It is not obvious, but is true, that the determinants of Redheffer matrices are equal to the Mertens function.  det(R(n)) = M(n)So, if I could have proved that  |det(R(n))| &lt; sqrt(n) for all n &gt; 0I would have had a proof of the Riemann Hypothesis.It might appear that I am out of the clutches of number theory and safely back to matrix computation. But that illusion does not last for long.SparsityThe 0(n^3) memory required by the Redheffer matrix from the gallery runs out of steam quickly. We need to take advantage of sparsity. This function generates the sparse representation of a Redheffer matrix directly.  function R = spredheffer(n)      j = (1:n)';      k = ones(n,1);      m = n;      for i = 2:n          t = [1 i:i:n];          p = length(t);          j(m+(1:p)) = t;          k(m+(1:p)) = i;          m = m+p;      end      R = sparse(k,j,1,n,n);  endComputing MertensHere are five methods for computing the Mertens function.#1The first simply takes the determinant of the Redheffer matrix in the gallery.  M = det(gallery('redheff',n))#2The sparse Gaussian elimination function lu with one input and four sparse outputs is designed for solving sparse linear systems. Written primarily by Tim Davis and included in his UMFPACK package, the function uses an unsymmetric pattern multifrontal pivoting strategy to reduce fill-in while maintaining numerical stability. The determinant of the input matrix is the product of the four determinants of the output matrices. Two them are triangular and two are permutations, so it is easy, and quick, to compute their determinants.  R = spredheffer(n);  [L,U,P,Q] = lu(R)  M = det(L)*det(U)*det(P)*det(Q);#3Pat Quillen realized that by interchanging the first and last columns, there would be little fill-in. We need only one determinant.  R = spredheffer(n);  R(:,[1 n]) = R(:,[n 1]);  M = -det(R);#4A thoughtful reader of the blog submitted a suggestion based on the Schur complement. Suppose E is a block matrix,  E = [A B       C D]Schur's formula for the determinant of E is  det(E) = det(D)*det(A - B*(D\\C))Apply this to R(n) with A the (1,1) entry, which is 1, and D the lower (n-1)-by-(n-1) submatrix, which is upper triangular with ones on the diagonal and determinant equal 1. This leads to method #4 which uses backslash with a sparse, unit, upper triangular matrix. There is a Redheffer matrix, but no determinant.  S = spredheffer(n);  e = ones(n-1,1);  M = 1 - e'*(S(2:n,2:n)\\e);#5Once we have generated R(n) and computed M(n), how do we get R(n+1) and M(n+1)? After several iterations of this approach, I found myself without any matrices and only the original definitions of M&ouml;bius and Mertens.  mu = mobius(n);  M = cumsum([1 mu(2:n)]);PerformanceLet's summarize the five methods. The first four generate a single, isolated value of M(n). Method #5 generates M(n) for all n from 1 to any specified maximum.        matrix     function    dets    M  #1    full       gallery       1     1  #2    sparse     lu            4     1  #3    sparse     swap          1     1  #4    sparse     \\             0     1  #5    none       factor        0    manyTime in seconds to compute M(n) on my Lenovo T14 laptop running Windows.    n    2e4      2e5      2e6     2e7  #1    28.652     -        -       -  #2     0.344   21.77      -       -  #3     0.086    1.29    16.4  #4     0.055    0.65     6.7    70.1  #5     0.075    0.80    10.7   204.5Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>Recently, I have made <a href=\"https://blogs.mathworks.com/cleve/\">a series of blog posts</a> about Redheffer matrices and the Mertens conjecture. After each of the posts, readers and colleagues offered suggestions to speed up the calculations. Here is a summary of what I have learned.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#32215cb4-c6e7-4c82-a09c-be2a0e403218\">M&ouml;bius Function</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#2421ff74-677d-4dda-9728-8ad0f481f610\">Mertens Function</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#fbbf8ec1-839c-4bd7-9416-f48ae24df402\">Redheffer Matrices</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#2c3c2db6-e1d2-41c4-8a2b-d1efbabe86e7\">OEIS</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#a6e6f284-1b69-42f0-a04f-f9e20891cdbc\">Ten Million</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#888c9931-3060-4b47-8405-ed484be2f796\">Mertens Conjecture</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#21f44074-f0af-4aa2-b6a3-adb1a2756ea2\">Conjecture is False</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e485344f-bda2-4d4d-9fd0-e7102df79117\">Matrices</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#5ffa1b4e-3fe8-4908-a32c-b41a2d162cd6\">Sparsity</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#39aa4540-d55c-47d1-882b-33b04368d495\">Computing Mertens</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#25c55aa9-7b26-4eb8-ae66-fbfbefea38b1\">#1</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4c32719f-3698-4320-a518-3b9d554916f9\">#2</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#1d535f36-08d5-4044-87d1-b3aa7094574a\">#3</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4b32160d-f00c-46f0-861a-4fe8cf231394\">#4</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e624ea53-1063-4c25-a75f-c186f877d82c\">#5</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#75297d30-41f2-45ca-ad62-8e710261ee95\">Performance</a></li></ul></div><h4>M&ouml;bius Function<a name=\"32215cb4-c6e7-4c82-a09c-be2a0e403218\"></a></h4><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Mobius.jpg\" vspace=\"5\" /> </p><p>The function named after the mid-nineteenth century German mathematician <a href=\"https://en.wikipedia.org/wiki/August_Ferdinand_M%C3%B6bius\">August M&ouml;bius</a> is fundamental to the study of prime numbers. The M&ouml;bius function maps the positive integers onto -1,0 and +1.</p><pre>  mu(n) = 0 if n has a repeated prime factor,        = (-1)^(number prime factors) if the factors of n are not repeated</pre><p>Here is my code for the M&ouml;bius function. It relies on <tt>factor(n)</tt> which uses a sieve to find the prime factors of <tt>n</tt>.</p><pre>  function mu = mobius(n)     % mu = mobius(n) returns mu(1:n).     mu = -eye(1,n);     for k = 2:n         f = factor(k);         d = diff([1 f]);         if any(d == 0)             mu(k) = 0;         else             mu(k) = (-1)^length(f);         end     end  end</pre><p>Here is a graph of <tt>mu(n)</tt> for <tt>n</tt> = 1:40. For example, <tt>mu(29:31)</tt> are all -1 because 29 and 31 are both prime and 30 has an odd number of prime factors, 2, 3 and 5.</p><pre class=\"language-matlab\">    mu = moebius(40);    plot(1:40,mu,<span class=\"string\">'.-'</span>,<span class=\"string\">'linewidth'</span>,1.5,<span class=\"string\">'markersize'</span>,16)    axis([-242-1.51.5])    title(<span class=\"string\">'M&ouml;bius function'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Mertens_finale_blog_01.png\" vspace=\"5\" /> <h4>Mertens Function<a name=\"2421ff74-677d-4dda-9728-8ad0f481f610\"></a></h4><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Mertens.jpg\" vspace=\"5\" /> </p><p>The Mertens function is named after the late-nineteenth century Polish mathematician <a href=\"https://en.wikipedia.org/wiki/Franz_Mertens\">Franz Mertens</a>. The function, which we denote by <tt>M(n)</tt>, is simply the partial sums of the M&ouml;bius function. The MATLAB code is very short.</p><pre>  function M = mertens(n)     % M = mertens(n) returns Mertens(1:n).     mu = moebius(n);     M = cumsum([1 mu(2:n)]);  end</pre><p>Here is a graph of <tt>M(n)</tt> for <tt>n</tt> = 1:40.</p><pre class=\"language-matlab\">    M = mertens(40);    plot(1:40,M,<span class=\"string\">'.-'</span>,<span class=\"string\">'linewidth'</span>,1.5,<span class=\"string\">'markersize'</span>,16)    axis([-242-4.51.5])    title(<span class=\"string\">'Mertens function'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Mertens_finale_blog_02.png\" vspace=\"5\" /> <h4>Redheffer Matrices<a name=\"fbbf8ec1-839c-4bd7-9416-f48ae24df402\"></a></h4><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Redheffer.jpg\" vspace=\"5\" /> </p><p>The twentieth-century American mathematician <a href=\"https://en.wikipedia.org/wiki/Raymond_Redheffer\">Ray Redheffer</a>, who was a professor at UCLA for 55 years, had a wide range of interests. He was the author of several popular textbooks, the inventor of the electronic game <a href=\"https://en.wikipedia.org/wiki/Nim\">Nim</a> and, with Ray and Charles Eames, the creator of a four-meter long poster <a href=\"https://www.worthpoint.com/worthopedia/1966-ray-charles-eames-office-men-1724813663\">Men of Modern Mathematics</a>.</p><p>The n-by-n Redheffer's matrix <tt>R(n)</tt> is a matrix of zeros and ones. For <tt>j &gt; 1</tt>, the element <tt>R(k,j)</tt> equals one if <tt>j</tt> is a divisor of <tt>k</tt>. And importantly, for <tt>j = 1</tt>, the first column <tt>R(:,1)</tt> is all ones.</p><pre>  function R = redheffer(n)     k = 1:n;     j = k';     R = (mod(k,j) == 0);     R(:,1) = 1;  end</pre><p>Nick Higham put Redheffer's matrix in the <a href=\"https://blogs.mathworks.com/cleve/2019/06/24/bohemian-matrices-in-the-matlab-gallery/\">MATLAB Gallery</a> several years ago. Here is a spy plot of the 200-by-200.</p><pre class=\"language-matlab\">    R = gallery(<span class=\"string\">'redheff'</span>,200);    spy(R)    title(<span class=\"string\">'Redheffer'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Mertens_finale_blog_03.png\" vspace=\"5\" /> <h4>OEIS<a name=\"2c3c2db6-e1d2-41c4-8a2b-d1efbabe86e7\"></a></h4><p>In the Online Encyclopedia of Integer Sequences, the Mertens function is <a href=\"http://oeis.org/A002321\">OEIS/A002321</a>. One of the many cool features of the OEIS is \"listen\", which generates music driven by the sequences. Take a look -- and a listen -- to my 63 second movie about A002321.</p><p><a href=\"https://blogs.mathworks.com/cleve/files/mertens_plot.mp4\">https://blogs.mathworks.com/cleve/files/mertens_plot.mp4</a></p><h4>Ten Million<a name=\"a6e6f284-1b69-42f0-a04f-f9e20891cdbc\"></a></h4><p>Here are plots of <tt>M(1:n)</tt> with <tt>n</tt> ranging from 100 to 10 million. Each plot after the first also shows the range of the previous plot. I will discuss the red lines in the next section</p><pre class=\"language-matlab\">    load<span class=\"string\"> mertens</span><span class=\"string\"> M</span>    tiledlayout(2,3)    <span class=\"keyword\">for</span> n = 10.^(2:7)        nexttile        mertens_plot(M(1:n))    <span class=\"keyword\">end</span></pre><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/Mertens_finale_blog_04.png\" vspace=\"5\" /> <h4>Mertens Conjecture<a name=\"888c9931-3060-4b47-8405-ed484be2f796\"></a></h4><p>The red lines above are plots of <tt>&plusmn;sqrt(n)</tt>. They clearly bound <tt>M(n)</tt> for <tt>n</tt> up to 10 million. The Mertens Conjecture is that this holds for all <tt>n</tt>.</p><pre>  |M(n)| &lt; sqrt(n) for all n &gt; 0</pre><p>The conjecture appears in a 1885 letter from Thomas Stieltjes to Charles Hermite and in a 1897 paper by Mertens.</p><p><a href=\"https://en.wikipedia.org/wiki/Mertens_conjecture\">Wikipedia</a> says</p><pre>  It is a striking example of a mathematical conjecture proven false  despite a large amount of computational evidence in its favor.</pre><h4>Conjecture is False<a name=\"21f44074-f0af-4aa2-b6a3-adb1a2756ea2\"></a></h4><p>In 1985, 100 years after the Stieltjes letter, Andrew Odlyzko and Herman te Riele proved that the conjecture is false. Their proof is indirect. They prove the existence of infinitely many <tt>n</tt> for which</p><pre>  |M(n)|/sqrt(n) &gt; 1.06</pre><p>But they do not know the value of any particular <tt>n</tt>. They informally estimate that such an <tt>n</tt> would be greater than 10^30 and probably much larger.</p><h4>Matrices<a name=\"e485344f-bda2-4d4d-9fd0-e7102df79117\"></a></h4><p>Let's get back to the world of matrices. It is not obvious, but is true, that the determinants of Redheffer matrices are equal to the Mertens function.</p><pre>  det(R(n)) = M(n)</pre><p>So, if I could have proved that</p><pre>  |det(R(n))| &lt; sqrt(n) for all n &gt; 0</pre><p>I would have had a proof of the Riemann Hypothesis.</p><p>It might appear that I am out of the clutches of number theory and safely back to matrix computation. But that illusion does not last for long.</p><h4>Sparsity<a name=\"5ffa1b4e-3fe8-4908-a32c-b41a2d162cd6\"></a></h4><p>The <tt>0(n^3)</tt> memory required by the Redheffer matrix from the gallery runs out of steam quickly. We need to take advantage of sparsity. This function generates the sparse representation of a Redheffer matrix directly.</p><pre>  function R = spredheffer(n)      j = (1:n)';      k = ones(n,1);      m = n;      for i = 2:n          t = [1 i:i:n];          p = length(t);          j(m+(1:p)) = t;          k(m+(1:p)) = i;          m = m+p;      end      R = sparse(k,j,1,n,n);  end</pre><h4>Computing Mertens<a name=\"39aa4540-d55c-47d1-882b-33b04368d495\"></a></h4><p>Here are five methods for computing the Mertens function.</p><h4>#1<a name=\"25c55aa9-7b26-4eb8-ae66-fbfbefea38b1\"></a></h4><p>The first simply takes the determinant of the Redheffer matrix in the <tt>gallery</tt>.</p><pre>  M = det(gallery('redheff',n))</pre><h4>#2<a name=\"4c32719f-3698-4320-a518-3b9d554916f9\"></a></h4><p>The sparse Gaussian elimination function <tt>lu</tt> with one input and four sparse outputs is designed for solving sparse linear systems. Written primarily by Tim Davis and included in his UMFPACK package, the function uses an unsymmetric pattern multifrontal pivoting strategy to reduce fill-in while maintaining numerical stability. The determinant of the input matrix is the product of the four determinants of the output matrices. Two them are triangular and two are permutations, so it is easy, and quick, to compute their determinants.</p><pre>  R = spredheffer(n);  [L,U,P,Q] = lu(R)  M = det(L)*det(U)*det(P)*det(Q);</pre><h4>#3<a name=\"1d535f36-08d5-4044-87d1-b3aa7094574a\"></a></h4><p>Pat Quillen realized that by interchanging the first and last columns, there would be little fill-in. We need only one determinant.</p><pre>  R = spredheffer(n);  R(:,[1 n]) = R(:,[n 1]);  M = -det(R);</pre><h4>#4<a name=\"4b32160d-f00c-46f0-861a-4fe8cf231394\"></a></h4><p>A thoughtful reader of the blog submitted a suggestion based on the Schur complement. Suppose <tt>E</tt> is a block matrix,</p><pre>  E = [A B       C D]</pre><p>Schur's formula for the determinant of <tt>E</tt> is</p><pre>  det(E) = det(D)*det(A - B*(D\\C))</pre><p>Apply this to <tt>R(n)</tt> with <tt>A</tt> the (1,1) entry, which is 1, and <tt>D</tt> the lower (n-1)-by-(n-1) submatrix, which is upper triangular with ones on the diagonal and determinant equal 1. This leads to method #4 which uses backslash with a sparse, unit, upper triangular matrix. There is a Redheffer matrix, but no determinant.</p><pre>  S = spredheffer(n);  e = ones(n-1,1);  M = 1 - e'*(S(2:n,2:n)\\e);</pre><h4>#5<a name=\"e624ea53-1063-4c25-a75f-c186f877d82c\"></a></h4><p>Once we have generated <tt>R(n)</tt> and computed <tt>M(n)</tt>, how do we get <tt>R(n+1)</tt> and <tt>M(n+1)</tt>? After several iterations of this approach, I found myself without any matrices and only the original definitions of M&ouml;bius and Mertens.</p><pre>  mu = mobius(n);  M = cumsum([1 mu(2:n)]);</pre><h4>Performance<a name=\"75297d30-41f2-45ca-ad62-8e710261ee95\"></a></h4><p>Let's summarize the five methods. The first four generate a single, isolated value of <tt>M(n)</tt>. Method #5 generates <tt>M(n)</tt> for all <tt>n</tt> from 1 to any specified maximum.</p><pre>        matrix     function    dets    M</pre><pre>  #1    full       gallery       1     1  #2    sparse     lu            4     1  #3    sparse     swap          1     1  #4    sparse     \\             0     1  #5    none       factor        0    many</pre><p>Time in seconds to compute <tt>M(n)</tt> on my Lenovo T14 laptop running Windows.</p><pre>    n    2e4      2e5      2e6     2e7</pre><pre>  #1    28.652     -        -       -  #2     0.344   21.77      -       -  #3     0.086    1.29    16.4  #4     0.055    0.65     6.7    70.1  #5     0.075    0.80    10.7   204.5</pre><!--     function grabCode_a7956cd39e4e4b2da601dae253a9ad13() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='a7956cd39e4e4b2da601dae253a9ad13 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' a7956cd39e4e4b2da601dae253a9ad13';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--a7956cd39e4e4b2da601dae253a9ad13 ##### SOURCE BEGIN #####%% Möbius, Mertens and Redheffer% Recently, I have made% <https://blogs.mathworks.com/cleve/ a series of blog posts>% about Redheffer matrices and the Mertens conjecture.% After each of the posts, readers and colleagues% offered suggestions to speed up the calculations. % Here is a summary of what I have learned.%% Möbius Function%% <<Mobius.jpg>>%% The function named after the mid-nineteenth century German% mathematician% <https://en.wikipedia.org/wiki/August_Ferdinand_M%C3%B6bius% August Möbius>% is fundamental to the study of prime numbers.% The Möbius function maps the positive integers onto -1,0 and +1.%%    mu(n) = 0 if n has a repeated prime factor,%          = (-1)^(number prime factors) if the factors of n are not repeated%% Here is my code for the Möbius function.  It relies on |factor(n)|% which uses a sieve to find the prime factors of |n|.%%    function mu = mobius(n)%       % mu = mobius(n) returns mu(1:n). %       mu = -eye(1,n);%       for k = 2:n%           f = factor(k);%           d = diff([1 f]);%           if any(d == 0)%               mu(k) = 0;%           else%               mu(k) = (-1)^length(f);%           end%       end%    end%% Here is a graph of |mu(n)| for |n| = 1:40.  For example,% |mu(29:31)| are all -1 because 29 and 31 are both prime% and 30 has an odd number of prime factors, 2, 3 and 5.%     mu = moebius(40);     plot(1:40,mu,'.-','linewidth',1.5,'markersize',16)     axis([-2 42 -1.5 1.5])     title('Möbius function')%% Mertens Function%% <<Mertens.jpg>>%% The Mertens function is named after the late-nineteenth century Polish% mathematician% <https://en.wikipedia.org/wiki/Franz_Mertens Franz Mertens>.% The function, which we denote by |M(n)|, is simply the partial sums% of the Möbius function.  The MATLAB code is very short.%%    function M = mertens(n)%       % M = mertens(n) returns Mertens(1:n).%       mu = moebius(n);%       M = cumsum([1 mu(2:n)]);%    end%% Here is a graph of |M(n)| for |n| = 1:40.  %    M = mertens(40);    plot(1:40,M,'.-','linewidth',1.5,'markersize',16)    axis([-2 42 -4.5 1.5])    title('Mertens function')%% Redheffer Matrices%% <<Redheffer.jpg>>%% The twentieth-century American mathematician% <https://en.wikipedia.org/wiki/Raymond_Redheffer Ray Redheffer>,% who was a professor at UCLA for 55 years,% had a wide range of interests.% He was the author of several popular textbooks, the inventor% of the electronic game <https://en.wikipedia.org/wiki/Nim Nim>   % and, with Ray and Charles Eames, the creator of a four-meter long poster% <https://www.worthpoint.com/worthopedia/1966-ray-charles-eames-office-men-1724813663% Men of Modern Mathematics>.%% The n-by-n Redheffer's matrix |R(n)| is a matrix of zeros and ones.% For |j > 1|, the element |R(k,j)| equals one if |j| is a divisor of |k|.% And importantly, for |j = 1|, the first column |R(:,1)| is all ones.% %    function R = redheffer(n)%       k = 1:n;%       j = k';%       R = (mod(k,j) == 0);%       R(:,1) = 1;%    end%% Nick Higham put Redheffer's matrix in the % <https://blogs.mathworks.com/cleve/2019/06/24/bohemian-matrices-in-the-matlab-gallery/% MATLAB Gallery> several years ago.  % Here is a spy plot of the 200-by-200.%       R = gallery('redheff',200);     spy(R)     title('Redheffer')    %% OEIS% In the Online Encyclopedia of Integer Sequences, the Mertens function% is <http://oeis.org/A002321 OEIS/A002321>.  One of the many cool% features of the OEIS is \"listen\", which generates music driven by % the sequences.% Take a look REPLACE_WITH_DASH_DASH and a listen REPLACE_WITH_DASH_DASH to my 63 second movie about A002321.%% <https://blogs.mathworks.com/cleve/files/mertens_plot.mp4>%% Ten Million% Here are plots of |M(1:n)| with |n| ranging from 100 to 10 million.% Each plot after the first also shows the range of the previous plot.% I will discuss the red lines in the next section%    load mertens M    tiledlayout(2,3)    for n = 10.^(2:7)        nexttile        mertens_plot(M(1:n))    end%% Mertens Conjecture% The red lines above are plots of |±sqrt(n)|.% They clearly bound |M(n)| for |n| up to 10 million.% The Mertens Conjecture is that this holds for all |n|.%%    |M(n)| < sqrt(n) for all n > 0%% The conjecture appears in a 1885 letter from Thomas Stieltjes to% Charles Hermite and in a 1897 paper by Mertens.%% <https://en.wikipedia.org/wiki/Mertens_conjecture Wikipedia> says% %    It is a striking example of a mathematical conjecture proven false%    despite a large amount of computational evidence in its favor.%% Conjecture is False% In 1985, 100 years after the Stieltjes letter, Andrew Odlyzko% and Herman te Riele proved that the conjecture is false.% Their proof is indirect.  They prove the existence of% infinitely many |n| for which%%    |M(n)|/sqrt(n) > 1.06%% But they do not know the value of any particular |n|.  They informally% estimate that such an |n| would be greater than 10^30 and probably% much larger.%% Matrices% Let's get back to the world of matrices.  It is not obvious,% but is true, that the determinants of Redheffer matrices% are equal to the Mertens function.% %    det(R(n)) = M(n)%% So, if I could have proved that %%    |det(R(n))| < sqrt(n) for all n > 0%% I would have had a proof of the Riemann Hypothesis.%% It might appear that I am out of the clutches of number theory% and safely back to matrix computation.  But that illusion does% not last for long.%% Sparsity% The |0(n^3)| memory required by the Redheffer matrix % from the gallery runs out of steam quickly.% We need to take advantage of sparsity.% This function generates the sparse representation of % a Redheffer matrix directly.%%    function R = spredheffer(n)%        j = (1:n)';%        k = ones(n,1);%        m = n;%        for i = 2:n%            t = [1 i:i:n];%            p = length(t);%            j(m+(1:p)) = t;%            k(m+(1:p)) = i;%            m = m+p;%        end%        R = sparse(k,j,1,n,n);%    end%%% Computing Mertens% Here are five methods for computing the Mertens function.%%% #1% The first simply takes the determinant of the Redheffer matrix% in the |gallery|.%%    M = det(gallery('redheff',n))%%% #2% The sparse Gaussian elimination function |lu| with one% input and four sparse outputs is designed for solving sparse linear% systems.  Written primarily% by Tim Davis and included in his UMFPACK package, the function% uses an unsymmetric pattern multifrontal pivoting strategy % to reduce fill-in while maintaining numerical stability.% The determinant of the input matrix is the product of the four% determinants of the output matrices. Two them are triangular and two% are permutations, so it is easy, and quick, to compute their determinants.%%    R = spredheffer(n);%    [L,U,P,Q] = lu(R)%    M = det(L)*det(U)*det(P)*det(Q);%%% #3% Pat Quillen realized that by interchanging the first and last% columns, there would be little fill-in.  We need only one determinant.%%    R = spredheffer(n);%    R(:,[1 n]) = R(:,[n 1]);%    M = -det(R);%%% #4%% A thoughtful reader of the blog submitted a suggestion based on the% Schur complement.  Suppose |E| is a block matrix, %%    E = [A B%         C D]% % Schur's formula for the determinant of |E| is%%    det(E) = det(D)*det(A - B*(D\\C))%% Apply  this to |R(n)| with |A| the (1,1) entry, which is 1,% and |D| the lower (n-1)-by-(n-1) submatrix, which is upper triangular% with ones on the diagonal and determinant equal 1.  This leads to method% #4 which uses backslash with a sparse, unit, upper triangular matrix.% There is a Redheffer matrix, but no determinant.%%    S = spredheffer(n);%    e = ones(n-1,1);%    M = 1 - e'*(S(2:n,2:n)\\e);% %% #5% Once we have generated |R(n)| and computed |M(n)|, how do we get% |R(n+1)| and |M(n+1)|?  After several iterations of this approach,% I found myself without any matrices and only the original definitions% of Möbius and Mertens.%%    mu = mobius(n);%    M = cumsum([1 mu(2:n)]);%%% Performance% Let's summarize the five methods.  The first four generate% a single, isolated value of |M(n)|.  Method #5 generates% |M(n)| for all |n| from 1 to any specified maximum.%%          matrix     function    dets    M%%    #1    full       gallery       1     1%    #2    sparse     lu            4     1%    #3    sparse     swap          1     1%    #4    sparse     \\             0     1%    #5    none       factor        0    many%% Time in seconds to compute |M(n)| on my Lenovo T14 laptop% running Windows.%%      n    2e4      2e5      2e6     2e7%%    #1    28.652     -        -       - %    #2     0.344   21.77      -       - %    #3     0.086    1.29    16.4       %    #4     0.055    0.65     6.7    70.1%    #5     0.075    0.80    10.7   204.5##### SOURCE END ##### a7956cd39e4e4b2da601dae253a9ad13-->",
            "url": "https://hpc.social/commercial-blog/2024/m%C3%B6bius-mertens-and-redheffer/",
            
            
            
            
            
            "date_published": "2024-10-23T00:53:53-06:00",
            "date_modified": "2024-10-23T00:53:53-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/experience-with-chatbots-generating-matlab/",
            "title": "Experience With Chatbots Generating MATLAB",
            "summary": null,
            "content_text": "A friend is investigating the use of generative AI in his classes. I asked two different popular chatbots to write MATLAB programs for a mathematically nontrivial problem. Both chatbots understood my query and both wrote plausible MATLAB programs, but one of the programs was not correct. My recommendation for coursework: carefully read and test programs produced by generative AI and repair any incorrect ones.ContentsRedheffer, Mertens and AhaltProgram number oneProgram number twoProgram number threeHappy EndingRedheffer, Mertens and AhaltFrequent readers of this blog know about my recent obsession with Redheffer matrices and the Mertens conjecture. So, when my friend Stan Ahalt visited from North Carolina State a few days ago, and wanted to discuss the use of generative AI in the new Data Science curriculum, I suggested asking chatbots to write MATLAB programs that check the Mertens conjecture.We logged onto the web sites for two different AI companies. Our query was the same at both sites.Please write a MATLAB program to test the Mertens conjecture.I was pleasantly surprised when both systems knew about MATLAB and understood the query. One of the systems replied:Certainly! I'll create a MATLAB program to test the Mertensconjecture. First, let me briefly explain what the Mertensconjecture is, and then I'll provide the code.The Mertens conjecture states that the Mertens function M(n)is bounded by &radic;n for all positive integers n. Mathematically,it can be expressed as:|M(n)| &le; &radic;n for all n &gt; 1Where M(n) is the Mertens function, defined as the sum ofthe M&ouml;bius function μ(k) for all positive integers k up to n:M(n) = Σ μ(k) for k = 1 to nHere's a MATLAB program to test this conjecture.Program number oneThe program from one of the web sites begins:function M = test_Mertens(n)   % Function to test the Mertens conjecture for a given n   % Returns true if the conjecture holds for all values up to n, false otherwiseThis is followed by code to sum the M&ouml;bius function and verify that abs(M) &lt; sqrt(n). The crucial mobius is a straight-forward implementation of the definition. The code relies on MATLAB intrinsics, factor and unique.function mu = mobius(k)   % Function to calculate the M&ouml;bius function of k   % Factorize k   p = factor(k);   % Check for square factors   if length(p) ~= length(unique(p))      mu = 0;   else      mu = (-1)^length(p);   endendI was very pleased. The entire program is only 40 lines long, eminently readable, and correct.Program number twoThe program from the other web site is more sophisticated. It knows enough about MATLAB to use its cumulative summation.M = cumsum(mu);Here is the crucial mobius function. At first glance, it looks OK. Is it?function mu = mobius(n)   % Calculate M&ouml;bius function values up to n   mu = ones(1, n);   for i = 2:sqrt(n)      if mu(i) == 1         for j = i^2:i:n            if mod(j, i^2) == 0               mu(j) = 0;            else               mu(j) = -mu(j);            end         end      end   endendAs you have guessed, program number two is not correct. Even its own plot reveals that something is amiss.Program number threeLet's return to the second Web site and make a more specific query.Please write a MATLAB program that uses Redheffermatrices to test the Mertens conjecture.The resulting program generates a Redheffer matrix withR = zeros(n,n);for i = 1:n   for j = 1:n      if mod(i, j) == 0         R(i, j) = 1;      end   endendIt computes the determinant to obtain the Mertens value, M(n). It is able to confirm the conjecture for all the n in the given range.What's wrong now? Look at the plot. The computed M(n) is always equal to one. Why? Happy EndingProgram number three can be repaired by adding one line to the code that generates R. What is that line? Respond in the comments.Look at the good side. Instead of just using AI to do homework, we can challenge students to check the results carefully and repair any incorrect programs.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>A friend is investigating the use of generative AI in his classes. I asked two different popular chatbots to write MATLAB programs for a mathematically nontrivial problem. Both chatbots understood my query and both wrote plausible MATLAB programs, but one of the programs was not correct. My recommendation for coursework: carefully read and test programs produced by generative AI and repair any incorrect ones.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#0c48695a-3a4f-46a2-9d9c-23506fc3aae1\">Redheffer, Mertens and Ahalt</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#40ba61bb-33a4-43e5-9193-7a3889fb91f5\">Program number one</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8d0098c5-f272-4317-8eef-f58166e680af\">Program number two</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#a1a49807-f649-4010-af50-85a315d67540\">Program number three</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c38da925-a549-4542-bb35-198572a00c66\">Happy Ending</a></li></ul></div><h4>Redheffer, Mertens and Ahalt<a name=\"0c48695a-3a4f-46a2-9d9c-23506fc3aae1\"></a></h4><p>Frequent readers of this blog know about my recent obsession with Redheffer matrices and the Mertens conjecture. So, when my friend Stan Ahalt visited from North Carolina State a few days ago, and wanted to discuss the use of generative AI in the new Data Science curriculum, I suggested asking chatbots to write MATLAB programs that check the Mertens conjecture.</p><p>We logged onto the web sites for two different AI companies. Our query was the same at both sites.</p><pre>Please write a MATLAB program to test the Mertens conjecture.</pre><p>I was pleasantly surprised when both systems knew about MATLAB and understood the query. One of the systems replied:</p><pre>Certainly! I'll create a MATLAB program to test the Mertensconjecture. First, let me briefly explain what the Mertensconjecture is, and then I'll provide the code.The Mertens conjecture states that the Mertens function M(n)is bounded by &radic;n for all positive integers n. Mathematically,it can be expressed as:</pre><pre>|M(n)| &le; &radic;n for all n &gt; 1</pre><pre>Where M(n) is the Mertens function, defined as the sum ofthe M&ouml;bius function μ(k) for all positive integers k up to n:</pre><pre>M(n) = Σ μ(k) for k = 1 to n</pre><pre>Here's a MATLAB program to test this conjecture.</pre><h4>Program number one<a name=\"40ba61bb-33a4-43e5-9193-7a3889fb91f5\"></a></h4><p>The program from one of the web sites begins:</p><pre>function M = test_Mertens(n)   % Function to test the Mertens conjecture for a given n   % Returns true if the conjecture holds for all values up to n, false otherwise</pre><p>This is followed by code to sum the M&ouml;bius function and verify that <tt>abs(M) &lt; sqrt(n)</tt>. The crucial <tt>mobius</tt> is a straight-forward implementation of the definition. The code relies on MATLAB intrinsics, <tt>factor</tt> and <tt>unique</tt>.</p><pre>function mu = mobius(k)   % Function to calculate the M&ouml;bius function of k   % Factorize k   p = factor(k);   % Check for square factors   if length(p) ~= length(unique(p))      mu = 0;   else      mu = (-1)^length(p);   endend</pre><p>I was very pleased. The entire program is only 40 lines long, eminently readable, and correct.</p><h4>Program number two<a name=\"8d0098c5-f272-4317-8eef-f58166e680af\"></a></h4><p>The program from the other web site is more sophisticated. It knows enough about MATLAB to use its cumulative summation.</p><pre>M = cumsum(mu);</pre><p>Here is the crucial <tt>mobius</tt> function. At first glance, it looks OK. Is it?</p><pre>function mu = mobius(n)   % Calculate M&ouml;bius function values up to n   mu = ones(1, n);   for i = 2:sqrt(n)      if mu(i) == 1         for j = i^2:i:n            if mod(j, i^2) == 0               mu(j) = 0;            else               mu(j) = -mu(j);            end         end      end   endend</pre><p>As you have guessed, program number two is not correct. Even its own plot reveals that something is amiss.</p><h4>Program number three<a name=\"a1a49807-f649-4010-af50-85a315d67540\"></a></h4><p>Let's return to the second Web site and make a more specific query.</p><pre>Please write a MATLAB program that uses Redheffermatrices to test the Mertens conjecture.</pre><p>The resulting program generates a Redheffer matrix with</p><pre>R = zeros(n,n);for i = 1:n   for j = 1:n      if mod(i, j) == 0         R(i, j) = 1;      end   endend</pre><p>It computes the determinant to obtain the Mertens value, <tt>M(n)</tt>. It is able to confirm the conjecture for all the <tt>n</tt> in the given range.</p><p>What's wrong now? Look at the plot. The computed <tt>M(n)</tt> is always equal to one. Why?</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/program3.png\" vspace=\"5\" /> </p><h4>Happy Ending<a name=\"c38da925-a549-4542-bb35-198572a00c66\"></a></h4><p>Program number three can be repaired by adding one line to the code that generates <tt>R</tt>. What is that line? Respond in the comments.</p><p>Look at the good side. Instead of just using AI to do homework, we can challenge students to check the results carefully and repair any incorrect programs.</p><!--     function grabCode_b5785d3ceb4b4ff38b92ec4f957e13e3() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='b5785d3ceb4b4ff38b92ec4f957e13e3 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' b5785d3ceb4b4ff38b92ec4f957e13e3';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--b5785d3ceb4b4ff38b92ec4f957e13e3 ##### SOURCE BEGIN #####%% Experience With Chatbots Generating MATLAB% A friend is investigating the use of generative AI in his classes.% I asked two different popular chatbots to write% MATLAB programs for a mathematically nontrivial problem.% Both chatbots understood my query and both wrote plausible% MATLAB programs, but one of the programs was not correct.% My recommendation for coursework: carefully read and test % programs produced by generative AI and repair any incorrect ones.%% Redheffer, Mertens and Ahalt% Frequent readers of this blog know about my recent obsession% with Redheffer matrices and the Mertens conjecture.% So, when my friend Stan Ahalt visited from North Carolina State% a few days ago, and wanted to discuss the use of generative AI in% the new Data Science curriculum, I suggested asking chatbots% to write MATLAB programs that check the Mertens conjecture.%%% We logged onto the web sites for two different AI companies.% Our query was the same at both sites.% %  Please write a MATLAB program to test the Mertens conjecture.%% I was pleasantly surprised when both systems knew about MATLAB% and understood the query.% One of the systems replied:%%  Certainly! I'll create a MATLAB program to test the Mertens%  conjecture. First, let me briefly explain what the Mertens%  conjecture is, and then I'll provide the code.%  The Mertens conjecture states that the Mertens function M(n) %  is bounded by √n for all positive integers n. Mathematically, %  it can be expressed as:%%  |M(n)| ≤ √n for all n > 1%%  Where M(n) is the Mertens function, defined as the sum of %  the Möbius function μ(k) for all positive integers k up to n:%%  M(n) = Σ μ(k) for k = 1 to n%%  Here's a MATLAB program to test this conjecture.%%% Program number one% The program from one of the web sites begins:%%  function M = test_Mertens(n)%     % Function to test the Mertens conjecture for a given n%     % Returns true if the conjecture holds for all values up to n, false otherwise%% This is followed by code to sum the Möbius function and verify that  % |abs(M) < sqrt(n)|.% The crucial |mobius| is a straight-forward implementation% of the definition.   The code relies on MATLAB intrinsics, |factor|% and |unique|.%%  function mu = mobius(k)%     % Function to calculate the Möbius function of k%     % Factorize k%     p = factor(k);     %     % Check for square factors%     if length(p) ~= length(unique(p))%        mu = 0;%     else%        mu = (-1)^length(p);%     end%  end%%% I was very pleased.  The entire program is only 40 lines long,% eminently readable, and correct.%% Program number two% The program from the other web site is more sophisticated.% It knows enough about MATLAB to use its cumulative summation.%%  M = cumsum(mu);%% Here is the crucial |mobius| function.  At first glance, it looks OK.% Is it?%%  function mu = mobius(n)%     % Calculate Möbius function values up to n%     mu = ones(1, n);  %     for i = 2:sqrt(n)%        if mu(i) == 1%           for j = i^2:i:n%              if mod(j, i^2) == 0%                 mu(j) = 0;%              else%                 mu(j) = -mu(j);%              end%           end%        end%     end%  end%% As you have guessed, program number two is not correct.% Even its own plot reveals that something is amiss.%% Program number three% Let's return to the second Web site and make a more specific query.%%  Please write a MATLAB program that uses Redheffer%  matrices to test the Mertens conjecture.%% The resulting program generates a Redheffer matrix with%%  R = zeros(n,n);%  for i = 1:n%     for j = 1:n%        if mod(i, j) == 0%           R(i, j) = 1;%        end%     end%  end%% It computes the determinant to obtain the Mertens value, |M(n)|.% It is able to confirm the conjecture for all the |n|% in the given range.%% What's wrong now?  Look at the plot.  The computed |M(n)| is always% equal to one.  Why?%% <<program3.png>>%%% Happy Ending% Program number three can be repaired by adding one line to the code that% generates |R|.  What is that line?  Respond in the comments.%% Look at the good side.  Instead of just using AI% to do homework, we can% challenge students to check the results carefully% and repair any incorrect programs.##### SOURCE END ##### b5785d3ceb4b4ff38b92ec4f957e13e3-->",
            "url": "https://hpc.social/commercial-blog/2024/experience-with-chatbots-generating-matlab/",
            
            
            
            
            
            "date_published": "2024-10-07T14:31:38-06:00",
            "date_modified": "2024-10-07T14:31:38-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/redheffer-and-mertens-accelerated/",
            "title": "Redheffer and Mertens, Accelerated",
            "summary": null,
            "content_text": "Shortly after I published the second post about the Mertens conjecture, a reader's comment suggested a new approach to computing Redheffer determinants and the Mertens function. It is now possible to compute a half-million values of the Mertens function in about five hours.ContentsBlock matricesredmertInside redmertmertens_plotPostscriptBlock matricesThe comment references the Wikipedia article on block matrices.  You could also consider the matrix as a 2x2 block matrix and  use the formula for the determinant of a block matrix [1].      A = redheffer(n);      M = full(A(1,1) - A(1, 2:end) * (A(2:end,2:end) \\ A(2:end, 1)));  Since the (n-1)x(n-1) block is upper triangular, the solve becomes  a back-substitution.redmertMy new program is named redmert, an abbreviation of Redheffer-Mertens. It uses the fact that redheffer(n) is obtained from redheffer(n-1) by appending the last column.Let R(n) denote the upper or right-triangular part of redheffer(n).  R(n) = triu(redheffer(n))R(n) is sparse, upper triangular and has ones on the diagonal. The indices of the nonzeros in the last column of R(n) are the factors of n. For example, here is R(8).R8 = full(triu(redheffer(8)))R8 =     1     1     1     1     1     1     1     1     0     1     0     1     0     1     0     1     0     0     1     0     0     1     0     0     0     0     0     1     0     0     0     1     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1The idea behind redmert is to compute a sequence of Redheffer matrices, R, and associated values of the Mertens function, M.  [M,R] = redmert(p,R)The input is a scalar integer p, the desired sequence length, and a sparse matrix R, the upper triangle of a Redheffer matrix of some order, n. The output is an integer vector of values M(n+1:n+p) and the upper triangle of the Redheffer matrix of order n+p. This output R can then be used as the input R in another call to redmert.The sequence is started with an empty R.For example,[M,R] = redmert(8,[]);The output is mertens(n), n = 1:8, and R8 from the example above.MR8 = full(R)M =     1     0    -1    -1    -2    -1    -2    -2R8 =     1     1     1     1     1     1     1     1     0     1     0     1     0     1     0     1     0     0     1     0     0     1     0     0     0     0     0     1     0     0     0     1     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1Inside redmertThe entire code for redmert is twelve lines long. It manipulates sparse matrices and uses sparse backslash to solve a triangular system. Nothing else is required.Lines 7 and 8 generate the last column of R and lines 9 and 10 implement the new idea about block matrices.dbtype redmert1     function [M,R] = redmert(p,Rin)2         M = zeros(p,1);3         R = sparse(triu(Rin));4         n = size(R,1);5         for q = 1:p6             n = n+1;7             k = (mod(n,1:n) == 0);8             R(k,n) = 1;9             e = ones(n-1,1);10            M(q) = R(1,1) - e'*(R(2:n,2:n)\\e);11        end12    endmertens_plotIt takes about five hours for redmert to compute half a million values on my laptop.   n = 0.5e6;   p = 0.5e4;   R = sparse([]);   M = [];   for k = p:p:n       disp(k)       [Mout,R] = redmert(p,R);       M = [M; Mout];       mertens_plot(M)   endmertens_plot PostscriptI started this project by being surprised to find myself computing determinants. Now I am back to my long-time position disparaging determinants. They have been replaced by a good friend, backslash.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>Shortly after I published the second post about the <a href=\"https://blogs.mathworks.com/cleve/2024/09/27/redheffer-and-mertens-continued/\">Mertens conjecture</a>, a reader's comment suggested a new approach to computing Redheffer determinants and the Mertens function. It is now possible to compute a half-million values of the Mertens function in about five hours.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#7d362761-695e-4474-88df-0a49bd91d0a1\">Block matrices</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#3237700b-50f8-4cce-a2a4-ce2a67875d0f\"><tt>redmert</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c59e3dbe-0a74-4f7c-839b-a92e38cb63c3\">Inside <tt>redmert</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#6c005e64-ccd7-4f61-bab0-eec89c74cdd4\">mertens_plot</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#dc3123c4-88e4-4acc-87ef-5dce4750f795\">Postscript</a></li></ul></div><h4>Block matrices<a name=\"7d362761-695e-4474-88df-0a49bd91d0a1\"></a></h4><p>The comment references the <a href=\"https://en.wikipedia.org/wiki/Determinant#Block_matrices\">Wikipedia article</a> on block matrices.</p><pre>  You could also consider the matrix as a 2x2 block matrix and  use the formula for the determinant of a block matrix [1].      A = redheffer(n);      M = full(A(1,1) - A(1, 2:end) * (A(2:end,2:end) \\ A(2:end, 1)));  Since the (n-1)x(n-1) block is upper triangular, the solve becomes  a back-substitution.</pre><h4><tt>redmert</tt><a name=\"3237700b-50f8-4cce-a2a4-ce2a67875d0f\"></a></h4><p>My new program is named <tt>redmert</tt>, an abbreviation of Redheffer-Mertens. It uses the fact that <tt>redheffer(n)</tt> is obtained from <tt>redheffer(n-1)</tt> by appending the last column.</p><p>Let <tt>R(n)</tt> denote the upper or right-triangular part of <tt>redheffer(n)</tt>.</p><pre>  R(n) = triu(redheffer(n))</pre><p><tt>R(n)</tt> is sparse, upper triangular and has ones on the diagonal. The indices of the nonzeros in the last column of <tt>R(n)</tt> are the factors of <tt>n</tt>. For example, here is <tt>R(8)</tt>.</p><pre class=\"codeinput\">R8 = full(triu(redheffer(8)))</pre><pre class=\"codeoutput\">R8 =     1     1     1     1     1     1     1     1     0     1     0     1     0     1     0     1     0     0     1     0     0     1     0     0     0     0     0     1     0     0     0     1     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1</pre><p>The idea behind <tt>redmert</tt> is to compute a sequence of Redheffer matrices, <tt>R</tt>, and associated values of the Mertens function, <tt>M</tt>.</p><pre>  [M,R] = redmert(p,R)</pre><p>The input is a scalar integer <tt>p</tt>, the desired sequence length, and a sparse matrix <tt>R</tt>, the upper triangle of a Redheffer matrix of some order, <tt>n</tt>. The output is an integer vector of values <tt>M(n+1:n+p)</tt> and the upper triangle of the Redheffer matrix of order <tt>n+p</tt>. This output <tt>R</tt> can then be used as the input <tt>R</tt> in another call to <tt>redmert</tt>.</p><p>The sequence is started with an empty <tt>R</tt>.</p><p>For example,</p><pre class=\"codeinput\">[M,R] = redmert(8,[]);</pre><p>The output is <tt>mertens(n), n = 1:8</tt>, and <tt>R8</tt> from the example above.</p><pre class=\"codeinput\">MR8 = full(R)</pre><pre class=\"codeoutput\">M =     1     0    -1    -1    -2    -1    -2    -2R8 =     1     1     1     1     1     1     1     1     0     1     0     1     0     1     0     1     0     0     1     0     0     1     0     0     0     0     0     1     0     0     0     1     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1</pre><h4>Inside <tt>redmert</tt><a name=\"c59e3dbe-0a74-4f7c-839b-a92e38cb63c3\"></a></h4><p>The entire code for <tt>redmert</tt> is twelve lines long. It manipulates sparse matrices and uses sparse backslash to solve a triangular system. Nothing else is required.</p><p>Lines 7 and 8 generate the last column of <tt>R</tt> and lines 9 and 10 implement the new idea about block matrices.</p><pre class=\"codeinput\">dbtype <span class=\"string\">redmert</span></pre><pre class=\"codeoutput\">1     function [M,R] = redmert(p,Rin)2         M = zeros(p,1);3         R = sparse(triu(Rin));4         n = size(R,1);5         for q = 1:p6             n = n+1;7             k = (mod(n,1:n) == 0);8             R(k,n) = 1;9             e = ones(n-1,1);10            M(q) = R(1,1) - e'*(R(2:n,2:n)\\e);11        end12    end</pre><h4>mertens_plot<a name=\"6c005e64-ccd7-4f61-bab0-eec89c74cdd4\"></a></h4><p>It takes about five hours for <tt>redmert</tt> to compute half a million values on my laptop.</p><pre>   n = 0.5e6;   p = 0.5e4;   R = sparse([]);   M = [];   for k = p:p:n       disp(k)       [Mout,R] = redmert(p,R);       M = [M; Mout];       mertens_plot(M)   end</pre><pre class=\"codeinput\">mertens_plot</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/redmert_blog_01.png\" vspace=\"5\" /> <h4>Postscript<a name=\"dc3123c4-88e4-4acc-87ef-5dce4750f795\"></a></h4><p>I started this project by being surprised to find myself computing determinants. Now I am back to my long-time position disparaging determinants. They have been replaced by a good friend, backslash.</p><!--     function grabCode_3267a823a3ca4544ace75a24a1cc6636() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='3267a823a3ca4544ace75a24a1cc6636 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 3267a823a3ca4544ace75a24a1cc6636';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--3267a823a3ca4544ace75a24a1cc6636 ##### SOURCE BEGIN #####%% Redheffer and Mertens, Accelerated% Shortly after I published the second post about the% <https://blogs.mathworks.com/cleve/2024/09/27/redheffer-and-mertens-continued/% Mertens conjecture>,% a reader's comment suggested a new approach to% computing Redheffer determinants and the Mertens function.% It is now possible to compute a half-million values of the% Mertens function in about five hours.%% Block matrices% The comment references the% <https://en.wikipedia.org/wiki/Determinant#Block_matrices% Wikipedia article> on block matrices.%%    You could also consider the matrix as a 2x2 block matrix and%    use the formula for the determinant of a block matrix [1].%        A = redheffer(n);%        M = full(A(1,1) - A(1, 2:end) * (A(2:end,2:end) \\ A(2:end, 1)));%    Since the (n-1)x(n-1) block is upper triangular, the solve becomes%    a back-substitution.%% |redmert|% My new program is named |redmert|, an abbreviation of % Redheffer-Mertens.  It uses the fact that% |redheffer(n)| is obtained from |redheffer(n-1)| by appending% the last column.%% Let |R(n)| denote the upper or right-triangular% part of |redheffer(n)|.%%    R(n) = triu(redheffer(n))%   % |R(n)| is sparse, upper triangular and has ones on the% diagonal.  % The indices of the nonzeros in the last column of |R(n)|% are the factors of |n|.% For example, here is |R(8)|.    R8 = full(triu(redheffer(8)))%%% The idea behind |redmert| is to compute a sequence% of Redheffer matrices, |R|, and associated values of the% Mertens function, |M|.%%    [M,R] = redmert(p,R)%% The input is a scalar integer |p|, the desired sequence length,% and a sparse matrix |R|, the upper triangle of a Redheffer% matrix of some order, |n|.% The output is an integer vector of values |M(n+1:n+p)| and% the upper triangle of the Redheffer matrix of order |n+p|. % This output |R| can then be used as the input |R| in another% call to |redmert|.%% The sequence is started with an empty |R|.%% For example,%   [M,R] = redmert(8,[]);%%% The output is |mertens(n), n = 1:8|, and |R8| from the example% above.    M    R8 = full(R)%% Inside |redmert|% The entire code for |redmert| is twelve lines long.% It manipulates sparse matrices and uses sparse backslash% to solve a triangular system.  Nothing else is required.%% Lines 7 and 8 generate the last column of |R| and lines 9 and 10% implement the new idea about block matrices.      dbtype redmert%% mertens_plot% It takes about five hours for |redmert|% to compute half a million values on my laptop.% %     n = 0.5e6;%     p = 0.5e4;%     R = sparse([]);%     M = [];%     for k = p:p:n%         disp(k)%         [Mout,R] = redmert(p,R);%         M = [M; Mout];%         mertens_plot(M)%     end      mertens_plot%% Postscript% I started this project by being surprised to find% myself computing determinants.% Now I am back to my long-time position disparaging% determinants. They have been replaced by a good friend, backslash.##### SOURCE END ##### 3267a823a3ca4544ace75a24a1cc6636-->",
            "url": "https://hpc.social/commercial-blog/2024/redheffer-and-mertens-accelerated/",
            
            
            
            
            
            "date_published": "2024-09-30T14:28:40-06:00",
            "date_modified": "2024-09-30T14:28:40-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/redheffer-and-mertens-continued/",
            "title": "Redheffer and Mertens, Continued",
            "summary": null,
            "content_text": "Shortly after I posted Redheffer, Mertens and One-Million Dollars a few days ago, Mathworks' Pat Quillen made an important observation about computing the Mertens function.ContentsmertensMertens functionMertens computationMertens conjecturemertensThe elements in the first column of the Redheffer matrix, A = redheffer(n), are all equal to one. That dense column does not make MATLAB happy about computing det(A) . However, the last column of A has only a few nonzero elements and so Pat suggested interchanging the first and last columns before computing the determinant. This makes a world of difference. (Thanks, Pat.)typemertensfunction M = mertens(n)    if n &gt; 1        A = redheffer(n);        A(:,[1 n]) = A(:,[n 1]);        M = -round(det(A));    else        M = 1;    endendThe time required to compute det(A) varies with the sparsity of the last column, but it is only a little more than the time to compute redheffer(n) in the first place.mertens2_time Mertens functionPat's change makes it possible to take n up to a quarter of a million, and beyond. Here is a new plot of the Mertens function M(n) and the sqrt(n) bounds of the Mertens conjecture.mertens_plot There are a quarter of a million points in the data for this plot. Fortunately, the .PNG file used for the blog only needs to sample the data.Mertens computationThe job that I ran on my laptop to compute one-quarter of a million values of M(n) is still running. It currently is past 0.35 million and takes less than two seconds for each value. I may keep the job running over the weekend, just to see how far it gets.The task is embarrassingly parallel. If I had a pool with a million processors, I could have each processor compute one value. I would then just have to collect the results, but that doesn't involve any arithmetic.Mertens conjectureYou can see from the plot why late 19th- and early 20th-century mathematicians believed that the Mertens conjecture,   |M(n)| &lt; sqrt(n) for all n,might be true. It is hard to imagine that the plot of M(n) ever escapes sqrt(n).We now know that M(n) eventually does escape, but only barely and only briefly. We also know that all the computation we can do with determinants of Redheffer's matrix will never prove or disprove the conjecture or win that million-dollar prize.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>Shortly after I posted <a href=\"https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/\">Redheffer, Mertens and One-Million Dollars</a> a few days ago, Mathworks' Pat Quillen made an important observation about computing the Mertens function.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#f3fcd244-9ad3-4849-93ca-a831a5999c61\"><tt>mertens</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#22db8fd3-aa25-4f76-9360-af77b6b20726\">Mertens function</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#9ebbd5e7-4600-435d-8b80-56634f314af3\">Mertens computation</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#d25d727c-f7fb-41b5-a32e-eab8c9e0caae\">Mertens conjecture</a></li></ul></div><h4><tt>mertens</tt><a name=\"f3fcd244-9ad3-4849-93ca-a831a5999c61\"></a></h4><p>The elements in the first column of the Redheffer matrix, <tt>A = redheffer(n)</tt>, are all equal to one. That dense column does not make MATLAB happy about computing <tt>det(A)</tt> . However, the last column of <tt>A</tt> has only a few nonzero elements and so Pat suggested interchanging the first and last columns before computing the determinant. This makes a world of difference. (Thanks, Pat.)</p><pre class=\"codeinput\">type<span class=\"string\">mertens</span></pre><pre class=\"codeoutput\">function M = mertens(n)    if n &gt; 1        A = redheffer(n);        A(:,[1 n]) = A(:,[n 1]);        M = -round(det(A));    else        M = 1;    endend</pre><p>The time required to compute <tt>det(A)</tt> varies with the sparsity of the last column, but it is only a little more than the time to compute <tt>redheffer(n)</tt> in the first place.</p><pre class=\"codeinput\">mertens2_time</pre><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/mertens2_blog_01.png\" vspace=\"5\" /> <h4>Mertens function<a name=\"22db8fd3-aa25-4f76-9360-af77b6b20726\"></a></h4><p>Pat's change makes it possible to take <tt>n</tt> up to a quarter of a million, and beyond. Here is a new plot of the Mertens function <tt>M(n)</tt> and the <tt>sqrt(n)</tt> bounds of the Mertens conjecture.</p><pre class=\"codeinput\">mertens_plot</pre><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/mertens2_blog_02.png\" vspace=\"5\" /> <p>There are a quarter of a million points in the data for this plot. Fortunately, the .PNG file used for the blog only needs to sample the data.</p><h4>Mertens computation<a name=\"9ebbd5e7-4600-435d-8b80-56634f314af3\"></a></h4><p>The job that I ran on my laptop to compute one-quarter of a million values of <tt>M(n)</tt> is still running. It currently is past 0.35 million and takes less than two seconds for each value. I may keep the job running over the weekend, just to see how far it gets.</p><p>The task is embarrassingly parallel. If I had a pool with a million processors, I could have each processor compute one value. I would then just have to collect the results, but that doesn't involve any arithmetic.</p><h4>Mertens conjecture<a name=\"d25d727c-f7fb-41b5-a32e-eab8c9e0caae\"></a></h4><p>You can see from the plot why late 19th- and early 20th-century mathematicians believed that the Mertens conjecture,</p><pre>   |M(n)| &lt; sqrt(n) for all n,</pre><p>might be true. It is hard to imagine that the plot of <tt>M(n)</tt> ever escapes <tt>sqrt(n)</tt>.</p><p>We now know that <tt>M(n)</tt> eventually does escape, but only barely and only briefly. We also know that all the computation we can do with determinants of Redheffer's matrix will never prove or disprove the conjecture or win that million-dollar prize.</p><!--     function grabCode_1007044f00b340cd8467bc0b1324ad0e() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='1007044f00b340cd8467bc0b1324ad0e ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 1007044f00b340cd8467bc0b1324ad0e';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--1007044f00b340cd8467bc0b1324ad0e ##### SOURCE BEGIN #####%% Redheffer and Mertens, Continued% Shortly after I posted% <https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/% Redheffer, Mertens and One-Million Dollars>% a few days ago, Mathworks' Pat Quillen made an important observation% about computing the Mertens function.%% |mertens|% The elements in the first column of the Redheffer matrix,% |A = redheffer(n)|, are all equal to one.  That dense column % does not make MATLAB happy about computing |det(A)| .% However, the last column of |A| has only a few nonzero elements and so% Pat suggested interchanging the first and last columns% before computing the determinant.  This makes a world of difference.% (Thanks, Pat.)       type mertens%% % The time required to compute |det(A)| varies with the sparsity of% the last column, but it is only a little more than the time% to compute |redheffer(n)| in the first place.    mertens2_time%% Mertens function% Pat's change makes it possible to take |n| up to a quarter of a million,% and beyond.  Here is a new plot of the Mertens function |M(n)| and the% |sqrt(n)| bounds of the Mertens conjecture.   mertens_plot%% % There are a quarter of a million points in the data for this plot.% Fortunately, the .PNG file used for the blog only needs to sample% the data.%% Mertens computation% The job that I ran on my laptop to compute one-quarter of% a million values of |M(n)| is still running.  It currently% is past 0.35 million and takes less than two seconds for each value.% I may keep the job running over the weekend, just to see how% far it gets.%% The task is embarrassingly parallel.  If I had a pool with % a million processors, I could have each processor compute one% value.  I would then just have to collect the results, but that% doesn't involve any arithmetic.%% Mertens conjecture% You can see from the plot why late 19th- and early 20th-century% mathematicians believed that the Mertens conjecture,%%     |M(n)| < sqrt(n) for all n,%% might be true.% It is hard to imagine that the plot of |M(n)| ever escapes% |sqrt(n)|.  %% We now know that |M(n)| eventually does escape,% but only barely and only briefly.  We also know that all the% computation we can do with determinants of Redheffer's matrix% will never prove or disprove the conjecture or win that% million-dollar prize.##### SOURCE END ##### 1007044f00b340cd8467bc0b1324ad0e-->",
            "url": "https://hpc.social/commercial-blog/2024/redheffer-and-mertens-continued/",
            
            
            
            
            
            "date_published": "2024-09-27T12:28:39-06:00",
            "date_modified": "2024-09-27T12:28:39-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/redheffer-mertens-and-one-million-dollars/",
            "title": "Redheffer, Mertens and One-Million Dollars",
            "summary": null,
            "content_text": "I didn't know anything about these topics until a couple of weeks ago. Now I can't stop thinking about them.Redheffer's matrix has been in the MATLAB Gallery for a long time, but I have ignored it .Redheffer's matrix can be used to compute Mertens function and investigate the Mertens conjecture.A proof of the Mertens conjecture would also provide a proof of the Riemann hypothesis.For nearly a century, all the available computational evidence indicated that the Mertens conjecture was likely to be true.The Riemann hypothesis is the most important unsolved problem in mathematics and wins a Clay prize worth one-million dollars.MATLAB's sparse matrix functions turn out to be useful in an investigation of Redheffer's matrix and the Mertens conjecture.However, it has been known since 1985 that the Mertens conjecture is false.ContentsRedheffer's MatrixM&ouml;bius FunctionMertens FunctionMertens ConjectureMertens Meets RedhefferRedheffer SparsityredhefferSparse LUmertensMertens Conjecture Is FalsePostscriptsReferencesRedheffer's MatrixRaymond Redheffer (1921-2005) was an American mathematician, a professor at UCLA for 55 years, the author of several popular textbooks, the inventor of the electronic game Nim and, with Ray and Charles Eames, the creator of a four-meter long poster Men of Modern Mathematics.Redheffer's matrix is a matrix of zeros and ones. A(k,j) equals one if j is a divisor of k. In addition, the first column is all ones.  function A = redheffer(n)      k = 1:n;      j = k';      A = (mod(k,j) == 0);      A(:,1) = 1;  endOr  A = gallery('redheff',n)Here is the 10-by-10.    A = redheffer(10);    disp(full(A))     1     1     1     1     1     1     1     1     1     1     1     1     0     1     0     1     0     1     0     1     1     0     1     0     0     1     0     0     1     0     1     0     0     1     0     0     0     1     0     0     1     0     0     0     1     0     0     0     0     1     1     0     0     0     0     1     0     0     0     0     1     0     0     0     0     0     1     0     0     0     1     0     0     0     0     0     0     1     0     0     1     0     0     0     0     0     0     0     1     0     1     0     0     0     0     0     0     0     0     1And here is a spy plot of the 200-by-200.    A = redheffer(200);    spy(A)    title('redheffer(200)') M&ouml;bius FunctionThe M&ouml;bius function was introduced in 1832 by German mathematician August M&ouml;bius and is ubiquitous in the study of prime numbers. For positive integers n, μ(n) is0 if n has a squared prime factor,+1 if n is square-free and has an even number of prime factors,-1 if n is square-free and has an odd number of prime factors.Mertens FunctionFranz Mertens (1840-1927) was a Polish mathematician who spent most of his career in Austria at the University of Vienna. Here is a link to a biography of Mertens at the University of St. Andrews MacTutor project.The Mertens function is sum of values of the M&ouml;bius function. For a positive integer n, the Mertens function is   M(n) = sum(μ(1:n))So M(n) is the difference between the number of square-free integers with an even number of prime factors and those with an odd number.This graphic shows M(n) for n = 1:100000.    mertens_plot_2 Mertens ConjectureThe Mertens function M(n) fluctuates wildly and grows slowly with increasing n. The graphic shows that M(n) is easily bounded by of sqrt(n) and -sqrt(n), at least for n less than 100k. The Mertens conjecture is that this continues for larger n.  -sqrt(n) &lt; M(n) &lt; sqrt(n) for all nThe conjecture was included in a letter from Stieltjes to Hermite in 1895 and in a paper by Mertens in 1897. The result is important since a proof of the Mertens conjecture would imply the truth of the Riemann hypothesis.Mertens Meets RedhefferI became interested in all this when I learned that the determinant of the MATLAB Gallery matrix which I have ignored for years is related to the Riemann hypothesis and the million-dollar prize.  M(n) = det(gallery('redheff',n))I know very little about the distribution of prime numbers and computing values of the M&ouml;bius function. On the other hand, I know a lot about numerical linear algebra and computing determinants.In general, I am dead set against computing determinants. They are often used to check for singularity or to somehow compute eigenvalues. But here the determinant is an integer counter of modest size.Redheffer SparsityComputing M(n) directly with det(redheffer(n)) requires O(n^2) space and O(n^3) time and is not practical for large n.However, A = redheffer(n) is modestly sparse. Here is the fraction of nonzeros.  s = nnz(A)/n^2    disp(sparsity)       n         s        _____    ________    10000    0.001037    20000    0.000553    30000    0.000382    40000    0.000294    50000    0.000239    60000    0.000203    70000    0.000176    80000    0.000156    90000    0.000139    1e+05    0.000127Taking advantage of this sparsity and the MATLAB tools for sparse matrix computation provide linear space complexity and perhaps O(n^2) time complexity.redhefferHere is MATLAB code to generate a sparse redheffer(n) without creating any full intermediate matrices.type    redheffer    function A = redheffer(n)        j(1:n) = (1:n)';        k(1:n) = 1;        m = n;        for i = 2:n            t = [1 i:i:n]';            p = length(t);            j(m+(1:p)) = t;            k(m+(1:p)) = i;            m = m+p;        end        A = sparse(k,j,1,n,n);    endAs expected, we see that the execution time for redheffer(n) is a linear function of n. (The space required also grows linearly.)    redheffer_time Sparse LUThe MATLAB Gaussian elimination function lu with one sparse input and four sparse outputs is designed for solving sparse linear systems.  [L,U,P,Q] = lu(A)Written primarily by Tim Davis and included in his UMFPACK package, the function uses an unsymmetric pattern multifrontal pivoting strategy to find permutations P and Q so that L is lower triangular, U is upper triangular and  P*A*Q = L*UConsequently, the determinant of A is the product of four easily computed determinants.  det(A) = det(L)*det(U)*det(P)*det(Q)The pivoting strategy aims to reduce fill-in while maintaining numerical stability.For example, here are L and U for the Redheffer matrix in the spy plot near the top of this blog post.    close    A = redheffer(200);    [L,U,P,Q] = lu(A);    spy(L|U)    title('L|U') And here are the four determinants.    dets = [det(L),det(U),det(P),det(Q)];    disp(dets)    1    -8    -1    -1Finally, M(200) is    M_200 = det(L)*det(U)*det(P)*det(Q)    M_200 =        -8mertensMertens function can be computed with four lines of code.    type    mertens    function M = mertens(n)        der = @(x) full(round(prod(diag(x))));        A = redheffer(n);        [L,U,P,Q] = lu(A);        M = der(L)*der(U)*det(P)*det(Q);    endExecution time for mertens is dominated by the time in sparse lu. The time required to compute the four determinants is an order of magnitude smaller than the other two.Experimentally, we see that the time complexity of sparse lu is O(n^2), but we have no proof.    mertens_time Mertens Conjecture Is FalseThe Mertens conjecture stood for nearly 100 years before it was proved false in 1985 by Andrew Odlyzko and Herman te Riele. The authors present indirect proofs that  lim sup (n -&gt; inf) M(n)/sqrt(n) &gt; 1.06  lim inf (n -&gt; inf) M(n)/sqrt(n) &lt; -1.009Odlyzko and te Riele do not actually produce any value of n for which M(n) &gt; sqrt(x). They suspect that any Mertens conjecture counterexample requires n &gt; $10^{30}$, which is far beyond any computation possible today.Odlyzko and te Riele also describe several complete tabulations of M(n) for n as large as $7.8 \\cdot 10^{9}$ . These computations do not use Redheffer determinants.PostscriptsTo tell the truth, I did not really expect to find any Mertens or Riemann counterexamples. I did, however, enjoy computing determinants for the first time and discovering an unexpected use for sparse LU.Thanks a lot to Tim Davis for his help with this post.ReferencesA. M. Odlyzko and H. J. J. te Riele, \"Disproof of the Mertens conjecture\", Journal f&uuml;r die reine und angewandte Mathematik, Vol. 357 (1985), Pages138-160. https://eudml.org/doc/152712.Timothy A. Davis, \"A Column Pre-Ordering Strategy for the Unsymmetric-Pattern Multifrontal Method\", ACM Transactions on Mathematical Software, Vol. 30, No. 2, June 2004, Pages 165&ndash;195. https://dl.acm.org/doi/abs/10.1145/992200.992205.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>I didn't know anything about these topics until a couple of weeks ago. Now I can't stop thinking about them.</p><div><ul><li>Redheffer's matrix has been in the <a href=\"https://blogs.mathworks.com/cleve/2019/06/24/bohemian-matrices-in-the-matlab-gallery/\">MATLAB Gallery</a> for a long time, but I have ignored it .</li><li>Redheffer's matrix can be used to compute Mertens function and investigate the <a href=\"https://en.wikipedia.org/wiki/Mertens_conjecture\">Mertens conjecture</a>.</li><li>A proof of the Mertens conjecture would also provide a proof of the <a href=\"https://en.wikipedia.org/wiki/Riemann_hypothesis\">Riemann hypothesis</a>.</li><li>For nearly a century, all the available computational evidence indicated that the Mertens conjecture was likely to be true.</li><li>The Riemann hypothesis is the most important unsolved problem in mathematics and wins a Clay prize worth <a href=\"https://www.claymath.org/millennium/riemann-hypothesis\">one-million dollars</a>.</li><li>MATLAB's sparse matrix functions turn out to be useful in an investigation of Redheffer's matrix and the Mertens conjecture.</li><li>However, it has been known since 1985 that the Mertens conjecture is false.</li></ul></div><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#82c24739-64fc-4329-b610-b923ff740e51\">Redheffer's Matrix</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#fdc9a386-44e5-43bb-a9c1-8580cdb11520\">M&ouml;bius Function</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#ebef8c86-e7dd-4ca8-9f35-7da51c2313c4\">Mertens Function</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#36e351c3-4c49-43ab-8776-9f5f5e7011f6\">Mertens Conjecture</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4b56c506-95ad-4d6b-8f23-569f167616b7\">Mertens Meets Redheffer</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#f8ff3cc0-f3e0-4d4d-84f5-b3049b3af76f\">Redheffer Sparsity</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#3cf9c9a2-aba7-4a78-b8f2-96522c7fc05d\"><tt>redheffer</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#221d2a42-3916-44d9-b314-debfbcfbaced\">Sparse LU</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c293a71a-bd97-4107-8fc8-3063376e0ea7\"><tt>mertens</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#5dc1b513-cf9c-43c7-a3b7-06e75d99e97e\">Mertens Conjecture Is False</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4247c5bb-c39a-4a0a-88a9-4859dcc0e793\">Postscripts</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8b8af9b2-9248-420a-9072-b53f5d344050\">References</a></li></ul></div><h4>Redheffer's Matrix<a name=\"82c24739-64fc-4329-b610-b923ff740e51\"></a></h4><p><a href=\"https://en.wikipedia.org/wiki/Raymond_Redheffer\">Raymond Redheffer</a> (1921-2005) was an American mathematician, a professor at UCLA for 55 years, the author of several popular textbooks, the inventor of the electronic game <a href=\"https://en.wikipedia.org/wiki/Nim\">Nim</a> and, with Ray and Charles Eames, the creator of a four-meter long poster <a href=\"https://www.worthpoint.com/worthopedia/1966-ray-charles-eames-office-men-1724813663\">Men of Modern Mathematics</a>.</p><p>Redheffer's matrix is a matrix of zeros and ones. <tt>A(k,j)</tt> equals one if <tt>j</tt> is a divisor of <tt>k</tt>. In addition, the first column is all ones.</p><pre>  function A = redheffer(n)      k = 1:n;      j = k';      A = (mod(k,j) == 0);      A(:,1) = 1;  end</pre><p>Or</p><pre>  A = gallery('redheff',n)</pre><p>Here is the 10-by-10.</p><pre class=\"codeinput\">    A = redheffer(10);    disp(full(A))</pre><pre class=\"codeoutputpre><p>And here is a spy plot of the 200-by-200.</p><pre class=\"codeinput\">    A = redheffer(200);    spy(A)    title(<span class=\"string\">'redheffer(200)'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mertens_blog2_01.png\" vspace=\"5\" /> <h4>M&ouml;bius Function<a name=\"fdc9a386-44e5-43bb-a9c1-8580cdb11520\"></a></h4><p>The M&ouml;bius function was introduced in 1832 by German mathematician August M&ouml;bius and is ubiquitous in the study of prime numbers. For positive integers <tt>n</tt>, <tt>μ(n)</tt> is</p><div><ul><li><tt>0</tt> if <tt>n</tt> has a squared prime factor,</li><li><tt>+1</tt> if <tt>n</tt> is square-free and has an even number of prime factors,</li><li><tt>-1</tt> if <tt>n</tt> is square-free and has an odd number of prime factors.</li></ul></div><h4>Mertens Function<a name=\"ebef8c86-e7dd-4ca8-9f35-7da51c2313c4\"></a></h4><p><a href=\"https://en.wikipedia.org/wiki/Franz_Mertens\">Franz Mertens</a> (1840-1927) was a Polish mathematician who spent most of his career in Austria at the University of Vienna. Here is a <a href=\"https://mathshistory.st-andrews.ac.uk/Biographies/Mertens/\">link</a> to a biography of Mertens at the University of St. Andrews MacTutor project.</p><p>The Mertens function is sum of values of the M&ouml;bius function. For a positive integer <tt>n</tt>, the Mertens function is</p><pre>   M(n) = sum(μ(1:n))</pre><p>So <tt>M(n)</tt> is the difference between the number of square-free integers with an even number of prime factors and those with an odd number.</p><p>This graphic shows <tt>M(n)</tt> for <tt>n = 1:100000</tt>.</p><pre class=\"codeinput\">    mertens_plot_2</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mertens_blog2_02.png\" vspace=\"5\" /> <h4>Mertens Conjecture<a name=\"36e351c3-4c49-43ab-8776-9f5f5e7011f6\"></a></h4><p>The Mertens function <tt>M(n)</tt> fluctuates wildly and grows slowly with increasing <tt>n</tt>. The graphic shows that M(n) is easily bounded by of <tt>sqrt(n)</tt> and <tt>-sqrt(n)</tt>, at least for <tt>n</tt> less than <tt>100k</tt>. The Mertens conjecture is that this continues for larger <tt>n</tt>.</p><pre>  -sqrt(n) &lt; M(n) &lt; sqrt(n) for all n</pre><p>The conjecture was included in a letter from Stieltjes to Hermite in 1895 and in a paper by Mertens in 1897. The result is important since a proof of the Mertens conjecture would imply the truth of the Riemann hypothesis.</p><h4>Mertens Meets Redheffer<a name=\"4b56c506-95ad-4d6b-8f23-569f167616b7\"></a></h4><p>I became interested in all this when I learned that the determinant of the MATLAB Gallery matrix which I have ignored for years is related to the Riemann hypothesis and the million-dollar prize.</p><pre>  M(n) = det(gallery('redheff',n))</pre><p>I know very little about the distribution of prime numbers and computing values of the M&ouml;bius function. On the other hand, I know a lot about numerical linear algebra and computing determinants.</p><p>In general, I am dead set against computing determinants. They are often used to check for singularity or to somehow compute eigenvalues. But here the determinant is an integer counter of modest size.</p><h4>Redheffer Sparsity<a name=\"f8ff3cc0-f3e0-4d4d-84f5-b3049b3af76f\"></a></h4><p>Computing <tt>M(n)</tt> directly with <tt>det(redheffer(n))</tt> requires <tt>O(n^2)</tt> space and <tt>O(n^3)</tt> time and is not practical for large <tt>n</tt>.</p><p>However, <tt>A = redheffer(n)</tt> is modestly sparse. Here is the fraction of nonzeros.</p><pre>  s = nnz(A)/n^2</pre><pre class=\"codeinput\">    disp(sparsity)</pre><pre class=\"codeoutput\">       n         s        _____    ________    10000    0.001037    20000    0.000553    30000    0.000382    40000    0.000294    50000    0.000239    60000    0.000203    70000    0.000176    80000    0.000156    90000    0.000139    1e+05    0.000127</pre><p>Taking advantage of this sparsity and the MATLAB tools for sparse matrix computation provide linear space complexity and perhaps <tt>O(n^2)</tt> time complexity.</p><h4><tt>redheffer</tt><a name=\"3cf9c9a2-aba7-4a78-b8f2-96522c7fc05d\"></a></h4><p>Here is MATLAB code to generate a sparse <tt>redheffer(n)</tt> without creating any full intermediate matrices.</p><pre class=\"codeinput\">type<span class=\"string\">    redheffer</span></pre><pre class=\"codeoutput\">    function A = redheffer(n)        j(1:n) = (1:n)';        k(1:n) = 1;        m = n;        for i = 2:n            t = [1 i:i:n]';            p = length(t);            j(m+(1:p)) = t;            k(m+(1:p)) = i;            m = m+p;        end        A = sparse(k,j,1,n,n);    end</pre><p>As expected, we see that the execution time for <tt>redheffer(n)</tt> is a linear function of <tt>n</tt>. (The space required also grows linearly.)</p><pre class=\"codeinput\">    redheffer_time</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mertens_blog2_03.png\" vspace=\"5\" /> <h4>Sparse LU<a name=\"221d2a42-3916-44d9-b314-debfbcfbaced\"></a></h4><p>The MATLAB Gaussian elimination function <tt>lu</tt> with one sparse input and four sparse outputs is designed for solving sparse linear systems.</p><pre>  [L,U,P,Q] = lu(A)</pre><p>Written primarily by Tim Davis and included in his UMFPACK package, the function uses an unsymmetric pattern multifrontal pivoting strategy to find permutations <tt>P</tt> and <tt>Q</tt> so that <tt>L</tt> is lower triangular, <tt>U</tt> is upper triangular and</p><pre>  P*A*Q = L*U</pre><p>Consequently, the determinant of <tt>A</tt> is the product of four easily computed determinants.</p><pre>  det(A) = det(L)*det(U)*det(P)*det(Q)</pre><p>The pivoting strategy aims to reduce fill-in while maintaining numerical stability.</p><p>For example, here are <tt>L</tt> and <tt>U</tt> for the Redheffer matrix in the spy plot near the top of this blog post.</p><pre class=\"codeinput\">    close    A = redheffer(200);    [L,U,P,Q] = lu(A);    spy(L|U)    title(<span class=\"string\">'L|U'</span>)</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mertens_blog2_04.png\" vspace=\"5\" /> <p>And here are the four determinants.</p><pre class=\"codeinput\">    dets = [det(L),det(U),det(P),det(Q)];    disp(dets)</pre><pre class=\"codeoutput\">    1    -8    -1    -1</pre><p>Finally, <tt>M(200)</tt> is</p><pre class=\"codeinput\">    M_200 = det(L)*det(U)*det(P)*det(Q)</pre><pre class=\"codeoutput\">    M_200 =        -8</pre><h4><tt>mertens</tt><a name=\"c293a71a-bd97-4107-8fc8-3063376e0ea7\"></a></h4><p>Mertens function can be computed with four lines of code.</p><pre class=\"codeinput\">    type<span class=\"string\">    mertens</span></pre><pre class=\"codeoutput\">    function M = mertens(n)        der = @(x) full(round(prod(diag(x))));        A = redheffer(n);        [L,U,P,Q] = lu(A);        M = der(L)*der(U)*det(P)*det(Q);    end</pre><p>Execution time for <tt>mertens</tt> is dominated by the time in sparse <tt>lu</tt>. The time required to compute the four determinants is an order of magnitude smaller than the other two.</p><p>Experimentally, we see that the time complexity of sparse <tt>lu</tt> is <tt>O(n^2)</tt>, but we have no proof.</p><pre class=\"codeinput\">    mertens_time</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/mertens_blog2_05.png\" vspace=\"5\" /> <h4>Mertens Conjecture Is False<a name=\"5dc1b513-cf9c-43c7-a3b7-06e75d99e97e\"></a></h4><p>The Mertens conjecture stood for nearly 100 years before it was proved false in 1985 by Andrew Odlyzko and Herman te Riele. The authors present indirect proofs that</p><pre>  lim sup (n -&gt; inf) M(n)/sqrt(n) &gt; 1.06</pre><pre>  lim inf (n -&gt; inf) M(n)/sqrt(n) &lt; -1.009</pre><p>Odlyzko and te Riele do not actually produce any value of <tt>n</tt> for which <tt>M(n) &gt; sqrt(x)</tt>. They suspect that any Mertens conjecture counterexample requires <tt>n</tt> &gt; $10^{30}$, which is far beyond any computation possible today.</p><p>Odlyzko and te Riele also describe several complete tabulations of <tt>M(n)</tt> for <tt>n</tt> as large as $7.8 \\cdot 10^{9}$ . These computations do not use Redheffer determinants.</p><h4>Postscripts<a name=\"4247c5bb-c39a-4a0a-88a9-4859dcc0e793\"></a></h4><p>To tell the truth, I did not really expect to find any Mertens or Riemann counterexamples. I did, however, enjoy computing determinants for the first time and discovering an unexpected use for sparse LU.</p><p>Thanks a lot to Tim Davis for his help with this post.</p><h4>References<a name=\"8b8af9b2-9248-420a-9072-b53f5d344050\"></a></h4><p>A. M. Odlyzko and H. J. J. te Riele, \"Disproof of the Mertens conjecture\", <i>Journal f&uuml;r die reine und angewandte Mathematik</i>, Vol. 357 (1985), Pages138-160. <a href=\"https://eudml.org/doc/152712\">https://eudml.org/doc/152712</a>.</p><p>Timothy A. Davis, \"A Column Pre-Ordering Strategy for the Unsymmetric-Pattern Multifrontal Method\", <i>ACM Transactions on Mathematical Software</i>, Vol. 30, No. 2, June 2004, Pages 165&ndash;195. <a href=\"https://dl.acm.org/doi/abs/10.1145/992200.992205\">https://dl.acm.org/doi/abs/10.1145/992200.992205</a>.</p><!--     function grabCode_500e91acec4e4151a58ba494fb74b941() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='500e91acec4e4151a58ba494fb74b941 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 500e91acec4e4151a58ba494fb74b941';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--500e91acec4e4151a58ba494fb74b941 ##### SOURCE BEGIN #####%% Redheffer, Mertens, Riemann and $1M% I didn't know anything about these topics until a couple of% weeks ago. Now I can't stop thinking about them.%% * Redheffer's matrix has been in the % <https://blogs.mathworks.com/cleve/2019/06/24/bohemian-matrices-in-the-matlab-gallery/% MATLAB Gallery> for a long time, but I have ignored it        .% * Redheffer's matrix can be used to compute Mertens function and% investigate the% <https://en.wikipedia.org/wiki/Mertens_conjecture% Mertens conjecture>.% * A proof of the Mertens conjecture would also provide a proof of the% <https://en.wikipedia.org/wiki/Riemann_hypothesis Riemann hypothesis>.% * For nearly a century, all the available computational evidence% indicated that the Mertens conjecture was likely to be true.% * The Riemann hypothesis is the most important unsolved problem in% mathematics and wins a Clay prize worth % <https://www.claymath.org/millennium/riemann-hypothesis% one-million dollars>.% * MATLAB's sparse matrix functions turn out to be useful% in an investigation of Redheffer's matrix and the Mertens conjecture.% * However, it has been known since 1985 that the Mertens% conjecture is false.%% Redheffer's Matrix% <https://en.wikipedia.org/wiki/Raymond_Redheffer Raymond Redheffer>% (1921-2005) was an American mathematician, a professor at UCLA for% 55 years, the author of several popular textbooks, the inventor% of the electronic game <https://en.wikipedia.org/wiki/Nim Nim>   % and, with Ray and Charles Eames, the creator of a four-meter long poster% <https://www.worthpoint.com/worthopedia/1966-ray-charles-eames-office-men-1724813663% Men of Modern Mathematics>.%% Redheffer's matrix is a matrix of zeros and ones.% |A(k,j)| equals one if |j| is a divisor of |k|.% In addition, the first column is all ones.%%    function A = redheffer(n)%        k = 1:n;%        j = k';%        A = (mod(k,j) == 0);%        A(:,1) = 1;%    end%% Or%%    A = gallery('redheff',n)%% Here  is the 10-by-10.    A = redheffer(10);    disp(full(A))%%% And here is a spy plot of the 200-by-200.    A = redheffer(200);    spy(A)    title('redheffer(200)')%% Möbius Function% The Möbius function was introduced in 1832 by German mathematician% August Möbius and is ubiquitous in the study of prime numbers.% For positive integers |n|, |μ(n)| is%% * |0| if |n| has a squared prime factor,% * |+1| if |n| is square-free and has an even number of prime factors,% * |-1| if |n| is square-free and has an odd number of prime factors.%%% Mertens Function% <https://en.wikipedia.org/wiki/Franz_Mertens Franz Mertens>% (1840-1927) was a Polish mathematician who spent most of his% career in Austria at the University of Vienna.% Here is a% <https://mathshistory.st-andrews.ac.uk/Biographies/Mertens/% link> to a biography of Mertens at the University of St. Andrews% MacTutor project.%% The Mertens function is sum of values of the Möbius function.% For a positive integer |n|, the Mertens function is%%     M(n) = sum(μ(1:n))%% So |M(n)| is the difference between the number of square-free% integers with an even number of prime factors and those with an% odd number.%% This graphic shows |M(n)| for |n = 1:100000|.    mertens_plot_2%% Mertens Conjecture% The Mertens function |M(n)| fluctuates wildly and grows slowly with% increasing |n|.  The graphic shows that M(n) is easily bounded% by of |sqrt(n)| and |-sqrt(n)|, at least for |n| less than |100k|.% The Mertens conjecture is that this continues for larger |n|.% %    -sqrt(n) < M(n) < sqrt(n) for all n%% The conjecture was included in a letter from Stieltjes to% Hermite in 1895 and in a paper by Mertens in 1897.% The result is important since a proof of the Mertens conjecture% would imply the truth of the Riemann hypothesis.%% Mertens Meets Redheffer% I became interested in all this when I learned that% the determinant of the MATLAB Gallery matrix which I have% ignored for years is related to the Riemann hypothesis and% the million-dollar prize.%%    M(n) = det(gallery('redheff',n))%% I know very little about the distribution of prime numbers and% computing values of the Möbius function.  On the other hand,% I know a lot about numerical linear algebra and computing determinants.%% In general, I am dead set against computing determinants.% They are often used to check for singularity or to somehow% compute eigenvalues.  But here the determinant is an% integer counter of modest size.%% Redheffer Sparsity% Computing |M(n)| directly with |det(redheffer(n))| requires% |O(n^2)| space and |O(n^3)| time and is not practical for% large |n|.%% However, |A = redheffer(n)| is modestly sparse.% Here is the fraction of nonzeros.% %    s = nnz(A)/n^2          disp(sparsity)%% % Taking advantage of this sparsity and the MATLAB tools for% sparse matrix computation provide% linear space complexity and perhaps |O(n^2)| time complexity.%% |redheffer|% Here is MATLAB code to generate a sparse |redheffer(n)| without% creating any full intermediate matrices.    type redheffer%%% As expected, we see that the execution time for |redheffer(n)|% is a linear function of |n|.  (The space required also grows linearly.)    redheffer_time%% Sparse LU% The MATLAB Gaussian elimination function |lu| with one sparse% input and four sparse outputs% is designed for solving sparse linear systems.% %    [L,U,P,Q] = lu(A)%% Written primarily% by Tim Davis and included in his UMFPACK package, the function% uses an unsymmetric pattern multifrontal pivoting strategy to% find permutations |P| and |Q| so that |L| is lower triangular,% |U| is upper triangular and%%    P*A*Q = L*U%% Consequently, the determinant of |A| is the product of four easily% computed determinants.%%    det(A) = det(L)*det(U)*det(P)*det(Q)%% The pivoting strategy aims to reduce fill-in while maintaining% numerical stability.%%% For example, here are |L| and |U| for the Redheffer matrix% in the spy plot near the top of this blog post.    close    A = redheffer(200);    [L,U,P,Q] = lu(A);    spy(L|U)    title('L|U')    %%% And here are the four determinants.    dets = [det(L), det(U), det(P), det(Q)];    disp(dets)%%% Finally, |M(200)| is    M_200 = det(L)*det(U)*det(P)*det(Q)%% |mertens|% Mertens function can be computed with four lines of code.    type mertens%%% Execution time for |mertens| is dominated by the time in sparse |lu|.% The time required to compute the four determinants is an order of% magnitude smaller than the other two.  %% Experimentally, we see that the time complexity of sparse |lu| is% |O(n^2)|, but we have no proof.       mertens_time%% Mertens Conjecture Is False% The Mertens conjecture stood for nearly 100 years before it was % proved false in 1985 by Andrew Odlyzko and Herman te Riele.% The authors present indirect proofs that%%    lim sup (n -> inf) M(n)/sqrt(n) > 1.06%%    lim inf (n -> inf) M(n)/sqrt(n) < -1.009%% Odlyzko and te Riele do not actually produce any value of |n| for % which |M(n) > sqrt(x)|. They suspect that any Mertens conjecture% counterexample requires |n| > $10^{30}$, which is far beyond any% computation possible today.%% Odlyzko and te Riele also describe several complete tabulations of % |M(n)| for |n| as large as $7.8 \\cdot 10^{9}$ .  These computations% do not use Redheffer determinants.%% Postscripts% To tell the truth, I did not really expect to find any Mertens or% Riemann counterexamples.  I did, however, enjoy computing determinants% for the first time and discovering an unexpected use for sparse LU. %% Thanks a lot to Tim Davis for his help with this post.%% References% A. M. Odlyzko and H. J. J. te Riele,% \"Disproof of the Mertens conjecture\",% _Journal für die reine und angewandte Mathematik_,% Vol. 357 (1985), Pages138-160. <https://eudml.org/doc/152712>.%% Timothy A. Davis,% \"A Column Pre-Ordering Strategy for the Unsymmetric-Pattern Multifrontal% Method\",% _ACM Transactions on Mathematical Software_,% Vol. 30, No. 2, June 2004, Pages 165–195.% <https://dl.acm.org/doi/abs/10.1145/992200.992205>.% ##### SOURCE END ##### 500e91acec4e4151a58ba494fb74b941-->",
            "url": "https://hpc.social/commercial-blog/2024/redheffer-mertens-and-one-million-dollars/",
            
            
            
            
            
            "date_published": "2024-09-23T17:12:35-06:00",
            "date_modified": "2024-09-23T17:12:35-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/na-digest-and-na-net/",
            "title": "NA_Digest and NA_Net",
            "summary": null,
            "content_text": "The NA-Digest is an electronic newsletter for the numerical analysis and scientific software community. The NA-Digest is one of world's first examples of social networking. The Digest is one of the forces that makes our community a living, viable community.The Digest is part of NA-Net, which also includes Netlib, a collection of mathematical software, papers, and databases.For its first forty years, the NA-Digest has had only four editors. Now, we are adding two more. As we do that, I would like to take a personal look back at the history of the NA-Digest.ContentsGene and MarkJack and EricTammy and DannyDavid and AlexArchiveMembersImportant PostingsThanksReferencesGene and MarkLike many other developments in the numerical analysis world, the Digest began with Gene Golub. In the early 1980's, Golub was chair of Stanford's Computer Science Department. Email was a new thing and Gene maintained a list of email addresses for his many friends around the world. Email addresses came in many different formats; today's system of domain names was not yet in wide spread use.In 1984, Mark Kent, one of Gene's grad students, with help from Ray Tuminaro, Mark Crispin and Dan Kolkowitz, wrote software that used Gene's list in an email forwarding service. Mail sent tona.name@su-scorewould be forwarded to the person with that last name. And email sent tona@su-scorewould be forwarded to everyone on the list.Gene and Mark Kent began to gather contributions together and send the collection out periodically. By February 1987, this had evolved into a moderated weekly newsletter. Gene dubbed these email services the NA-Net.Nick Trefethen has this memory.  Early in the days of email, domain names were all over the place.  I think there was a period when Gene was using xxx.na for the  names of numerical analysts.  Then somebody decided addresses should  end with the country, giving us .uk and .fr and .ch and all  that.  For a period, we found that a lot of our numerical  analysis emails were being directed to Namibia!In 1987, Gene asked me to moderate NA-Digest temporarily while he went on a sabbatical. That temporary position ultimately lasted 18 years, until 2005.Jack and EricJack Dongarra began his career at Argonne National Laboratory. Jack's colleague, Eric Grosse, began his career at Bell Labs. In 1984, Jack and Eric created Netlib, a software repository and distribution service, and merged it with NA-Net. In 1989, Jack and the NA-Net system moved from Argonne to Oak Ridge National Lab and the University of Tennessee.Keith Moore, at the University of Tennessee, rewrote the NA-Net software and maintained the servers for many years.Gerald Ragghianti, the Technical Services Leader at Tennessee's Innovative Computer Lab, currently maintains the NA-Net software and servers.Tammy and DannyIn 2005, I asked Tammy Kolda, who was then at Sandia Labs in Livermore, to be the NA-Digest editor. Tammy's Wikipedia page reveals that her given name is \"Tamara\", but everybody calls her \"Tammy\". She left Sandia is 2021 and now has her own consulting company, MathSci.ai.In 2010, Tammy recommended that Danny Dunlavy, from Sandia Labs in Albuquerque, take over as editor. He has been the editor for 14 years. Danny's day job at Sandia's Center for Computing Research involves a wide range of fields including computer architecture, cognitive modeling and discrete mathematics. David and Alex Starting next week, NA-Digest and NA-Net will move lock, stock, and barrel to Cornell University. The new editors are David Bindell and Alex Townsend. Cornell's IT organization will be taking over the logistics.David, Alex and Anil Damle are also the hosts for Householder XXII, June 8-13, 2025.ArchiveEvery issue of NA-Digest since February 1987 is available at https://www.netlib.org/na-digest-html.MembersWhen I succeeded Gene as editor in 1987, there were about 800 names on the NA-Net mailing list. Today, in 2024, there are a little over 10,000. Discontinuities in the size of the list result when unused and illegitimate names are removed. Important PostingsI have made three personally important announcements in the Digest over the years.October 29, 1989In 1989 I was working at Ardent Computer, a startup in Silicon Valley. I announced in NA-Digest that MathWorks was looking for a numerical analyst. (Note the MathWorks telephone number near the end of this announcement.)  From: Cleve Moler &lt;na.moler@na-net.stanford.edu&gt;  Date: Sun Oct 29 10:39:38 PST 1989  Subject: Positions at The MathWorks  The MathWorks is the company which develops and markets MATLAB.  The company currently employs about 30 people and expects to  add three or four more soon. The company headquarters is in  East Natick, Massachusetts, which is about a half hour drive  west of Boston.  The background and interests expected for the various positions  available range from numerical linear algebra and matrix computation  to systems programming and graphics. Educational level and  experience expected range from inexperienced beginner willing  to learn to seasoned Ph.D. with a personal library of M-files.  For more information, send email to na.moler@na-net.stanford.edu  or phone me at 408-732-0400. Or, contact the MathWorks' president,  John Little, with email to jnl@mathworks.com, phone 508-653-1415,  or write to:  The MathWorks  21 Eliot Street  South Natick, MA 01760November 26, 1989Shortly after that announcement, Ardent imploded and I said that I was taking the job myself.  From: Cleve Moler &lt;moler@mathworks.com&gt;  Date: Sun Nov 26 09:16:32 PST 1989  Subject: Change of Address for Moler  A couple of weeks ago, I made an announcement here that  The MathWorks, the MATLAB company, was looking to fill several  positions, including one for a numerical analyst. Now, I've  decided to take that slot myself. I'm one of the founders of  MathWorks, and have always been a consultant to the company, but  now I'll be a full time employee. For a while at least, I'll  be working out of my home in California, even though MathWorks  headquarters is in Massachusetts. (There are already a couple  of other MathWorks developers in the Bay Area.)  . . .  My electronic address is \"moler@mathworks.com\". If your mailer  can't find the route via uunet to mathworks.com, you can still  use \"na.moler@na-net.stanford.edu\".November 16, 2007In November 2007 I was attending the Super Computing conference in Reno. I had rented a car and intended to drive to the Bay Area after the conference. But my wife called me and said, \"Hey Cleve, have you heard that Gene is in the hospital?\" I left SC immediately and drove to Palo Alto. Two days later we sent out a special issue of the Digest:  From: Cleve Moler &lt;Cleve.Moler@mathworks.com&gt;  Date: Fri, 16 Nov 2007 17:55:42 -0500  Subject: Gene Golub, 1932 - 2007  Gene Golub, founder of the NA Digest, passed away today, Friday, November 16,  at the Stanford University Hospital. He was 75 years old.  Gene returned home to Stanford recently from a trip to Hong Kong. He was  planning to leave again Tuesday on another trip, this one to Zurich where the  ETH was to honor him with a special degree. Instead, Sunday night he went to  the emergency room because he was \"feeling lousy\". On Tuesday, he was found  to have AML, acute myelogenous leukemia, a form of cancer that affects the  white blood cells. This is a potentially curable disease and he was expecting  to begin chemotherapy today. But serious complications developed suddenly  over night.  I was able to see Gene for an hour last night and he was in reasonably good  spirits. Mike Saunders was trying to get Gene's laptop to use dial-up over  the hospital's phone system because Gene said he was a couple of days behind  on his email. I was planning to get a wireless card for his machine today.  None of us had any idea how suddenly the situation would worsen.  The Stanford ICME students have created a memorial blog at  http://genehgolub.blogspot.com .  Our community has lost its foremost member. He was a valued colleague and  friend. Goodbye, Gene.  -- Cleve MolerThanksGene Golub and Mark Kent for creating NA-Digest and NA-Net.Tammy Kolda and Danny Dunlavy for editing the Digest for two decades.Jack Dongarra, Eric Grosse, Keith Moore and Geri Ragghianti for creating Netlib and for hosting the system for four decades.David Bindel and Alex Townsend for joining this team.ReferencesJack Dongarra, Gene Golub, Eric Grosse, Cleve Moler and Keith Moore. \"Netlib and NA-Net: Building a Scientific Computing Community\", IEEE Annals of the History of Computing, (Volume: 30, Issue: 2, April-June 2008). A PDF is available here.Mark Kent, The Numerical Analysis Net (NA-NET), Technical Report 85, ETH Zurich, Institut fuer Informatik, 1988.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>The <a href=\"https://www.netlib.org/na-digest-html/\">NA-Digest</a> is an electronic newsletter for the numerical analysis and scientific software community. The NA-Digest is one of world's first examples of social networking. The Digest is one of the forces that makes our community a living, viable community.</p><p>The Digest is part of NA-Net, which also includes <a href=\"https://www.netlib.org/\">Netlib</a>, a collection of mathematical software, papers, and databases.</p><p>For its first forty years, the NA-Digest has had only four editors. Now, we are <a href=\"https://www.netlib.org/na-digest-html/24/v24n11.html\">adding two more</a>. As we do that, I would like to take a personal look back at the history of the NA-Digest.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#42644b1c-8ee9-4edf-8399-1ffb5ba7f590\">Gene and Mark</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#22096a5c-5e18-461e-9393-60f6a3bbb50c\">Jack and Eric</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#1fd1e215-f726-417a-aa69-971302131b6f\">Tammy and Danny</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#7c1ce1c2-47b9-4c04-a89b-6f5b35367817\">David and Alex</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#a8dab39f-1171-4d72-8485-cc39142450cd\">Archive</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#319b8bc4-61b1-47d7-a372-6ea6ffd20197\">Members</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#82cfa35d-28ab-4312-984e-623267f106d4\">Important Postings</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#2e3065dc-2d44-4a9f-96fc-d8376c9b2490\">Thanks</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8f0306a7-58c2-424a-bae9-f87fb1ae7dc5\">References</a></li></ul></div><h4>Gene and Mark<a name=\"42644b1c-8ee9-4edf-8399-1ffb5ba7f590\"></a></h4><p>Like many other developments in the numerical analysis world, the Digest began with <a href=\"https://en.wikipedia.org/wiki/Gene_H._Golub\">Gene Golub</a>. In the early 1980's, Golub was chair of Stanford's Computer Science Department. Email was a new thing and Gene maintained a list of email addresses for his many friends around the world. Email addresses came in many different formats; today's system of domain names was not yet in wide spread use.</p><p>In 1984, Mark Kent, one of Gene's grad students, with help from Ray Tuminaro, Mark Crispin and Dan Kolkowitz, wrote software that used Gene's list in an email forwarding service. Mail sent to</p><p><tt>na.</tt><i>name</i><tt>@su-score</tt></p><p>would be forwarded to the person with that last name. And email sent to</p><p><tt>na@su-score</tt></p><p>would be forwarded to everyone on the list.</p><p>Gene and Mark Kent began to gather contributions together and send the collection out periodically. By February 1987, this had evolved into a moderated weekly newsletter. Gene dubbed these email services the <i>NA-Net</i>.</p><p>Nick Trefethen has this memory.</p><pre>  Early in the days of email, domain names were all over the place.  I think there was a period when Gene was using xxx.na for the  names of numerical analysts.  Then somebody decided addresses should  end with the country, giving us .uk and .fr and .ch and all  that.  For a period, we found that a lot of our numerical  analysis emails were being directed to Namibia!</pre><p>In 1987, Gene asked me to moderate NA-Digest temporarily while he went on a sabbatical. That temporary position ultimately lasted 18 years, until 2005.</p><h4>Jack and Eric<a name=\"22096a5c-5e18-461e-9393-60f6a3bbb50c\"></a></h4><p><a href=\"https://history.siam.org/oralhistories/dongarra.htm\">Jack Dongarra</a> began his career at Argonne National Laboratory. Jack's colleague, Eric Grosse, began his career at Bell Labs. In 1984, Jack and Eric created Netlib, a software repository and distribution service, and merged it with NA-Net. In 1989, Jack and the NA-Net system moved from Argonne to Oak Ridge National Lab and the University of Tennessee.</p><p>Keith Moore, at the University of Tennessee, rewrote the NA-Net software and maintained the servers for many years.</p><p>Gerald Ragghianti, the Technical Services Leader at Tennessee's Innovative Computer Lab, currently maintains the NA-Net software and servers.</p><h4>Tammy and Danny<a name=\"1fd1e215-f726-417a-aa69-971302131b6f\"></a></h4><p>In 2005, I asked Tammy Kolda, who was then at Sandia Labs in Livermore, to be the NA-Digest editor. Tammy's <a href=\"https://www.google.com/search?q=tamara+kolda\">Wikipedia page</a> reveals that her given name is \"Tamara\", but everybody calls her \"Tammy\". She left Sandia is 2021 and now has her own consulting company, <a href=\"https://www.mathsci.ai/\">MathSci.ai</a>.</p><p>In 2010, Tammy recommended that Danny Dunlavy, from Sandia Labs in Albuquerque, take over as editor. He has been the editor for 14 years. Danny's day job at Sandia's <a href=\"https://www.sandia.gov/ccr\">Center for Computing Research</a> involves a wide range of fields including computer architecture, cognitive modeling and discrete mathematics.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/OldEditors.png\" vspace=\"5\" /> </p><h4>David and Alex<a name=\"7c1ce1c2-47b9-4c04-a89b-6f5b35367817\"></a></h4><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/NewEditors.png\" vspace=\"5\" /> </p><p><a href=\"https://www.netlib.org/na-digest-html/24/v24n11.html\">Starting next week</a>, NA-Digest and NA-Net will move <a href=\"https://en.wikipedia.org/wiki/Lock,_stock,_and_barrel\">lock, stock, and barrel</a> to Cornell University. The new editors are <a href=\"https://www.cs.cornell.edu/~bindel/bio\">David Bindell</a> and <a href=\"https://pi.math.cornell.edu/~ajt/\">Alex Townsend</a>. Cornell's IT organization will be taking over the logistics.</p><p>David, Alex and <a href=\"https://www.cs.cornell.edu/~damle/#About\">Anil Damle</a> are also the hosts for <a href=\"https://householder-symposium.github.io\">Householder XXII</a>, June 8-13, 2025.</p><h4>Archive<a name=\"a8dab39f-1171-4d72-8485-cc39142450cd\"></a></h4><p>Every issue of NA-Digest since February 1987 is available at <a href=\"https://www.netlib.org/na-digest-html\">https://www.netlib.org/na-digest-html</a>.</p><h4>Members<a name=\"319b8bc4-61b1-47d7-a372-6ea6ffd20197\"></a></h4><p>When I succeeded Gene as editor in 1987, there were about 800 names on the NA-Net mailing list. Today, in 2024, there are a little over 10,000. Discontinuities in the size of the list result when unused and illegitimate names are removed.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/NA_Digs.png\" vspace=\"5\" /> </p><h4>Important Postings<a name=\"82cfa35d-28ab-4312-984e-623267f106d4\"></a></h4><p>I have made three personally important announcements in the Digest over the years.</p><p><b>October 29, 1989</b></p><p>In 1989 I was working at <a href=\"https://blogs.mathworks.com/cleve/2013/11/25/the-ardent-titan-part-1/\">Ardent Computer</a>, a startup in Silicon Valley. I announced in NA-Digest that MathWorks was looking for a numerical analyst. (Note the MathWorks telephone number near the end of this announcement.)</p><pre>  From: Cleve Moler &lt;na.moler@na-net.stanford.edu&gt;  Date: Sun Oct 29 10:39:38 PST 1989  Subject: Positions at The MathWorks</pre><pre>  The MathWorks is the company which develops and markets MATLAB.  The company currently employs about 30 people and expects to  add three or four more soon. The company headquarters is in  East Natick, Massachusetts, which is about a half hour drive  west of Boston.</pre><pre>  The background and interests expected for the various positions  available range from numerical linear algebra and matrix computation  to systems programming and graphics. Educational level and  experience expected range from inexperienced beginner willing  to learn to seasoned Ph.D. with a personal library of M-files.</pre><pre>  For more information, send email to na.moler@na-net.stanford.edu  or phone me at 408-732-0400. Or, contact the MathWorks' president,  John Little, with email to jnl@mathworks.com, phone 508-653-1415,  or write to:</pre><pre>  The MathWorks  21 Eliot Street  South Natick, MA 01760</pre><p><b>November 26, 1989</b></p><p>Shortly after that announcement, <a href=\"https://en.wikipedia.org/wiki/Stardent_Inc.\">Ardent imploded</a> and I said that I was taking the job myself.</p><pre>  From: Cleve Moler &lt;moler@mathworks.com&gt;  Date: Sun Nov 26 09:16:32 PST 1989  Subject: Change of Address for Moler</pre><pre>  A couple of weeks ago, I made an announcement here that  The MathWorks, the MATLAB company, was looking to fill several  positions, including one for a numerical analyst. Now, I've  decided to take that slot myself. I'm one of the founders of  MathWorks, and have always been a consultant to the company, but  now I'll be a full time employee. For a while at least, I'll  be working out of my home in California, even though MathWorks  headquarters is in Massachusetts. (There are already a couple  of other MathWorks developers in the Bay Area.)  . . .  My electronic address is \"moler@mathworks.com\". If your mailer  can't find the route via uunet to mathworks.com, you can still  use \"na.moler@na-net.stanford.edu\".</pre><p><b>November 16, 2007</b></p><p>In November 2007 I was attending the Super Computing conference in Reno. I had rented a car and intended to drive to the Bay Area after the conference. But my wife called me and said, \"Hey Cleve, have you heard that Gene is in the hospital?\" I left SC immediately and drove to Palo Alto. Two days later we sent out a special issue of the Digest:</p><pre>  From: Cleve Moler &lt;Cleve.Moler@mathworks.com&gt;  Date: Fri, 16 Nov 2007 17:55:42 -0500  Subject: Gene Golub, 1932 - 2007</pre><pre>  Gene Golub, founder of the NA Digest, passed away today, Friday, November 16,  at the Stanford University Hospital. He was 75 years old.</pre><pre>  Gene returned home to Stanford recently from a trip to Hong Kong. He was  planning to leave again Tuesday on another trip, this one to Zurich where the  ETH was to honor him with a special degree. Instead, Sunday night he went to  the emergency room because he was \"feeling lousy\". On Tuesday, he was found  to have AML, acute myelogenous leukemia, a form of cancer that affects the  white blood cells. This is a potentially curable disease and he was expecting  to begin chemotherapy today. But serious complications developed suddenly  over night.</pre><pre>  I was able to see Gene for an hour last night and he was in reasonably good  spirits. Mike Saunders was trying to get Gene's laptop to use dial-up over  the hospital's phone system because Gene said he was a couple of days behind  on his email. I was planning to get a wireless card for his machine today.  None of us had any idea how suddenly the situation would worsen.</pre><pre>  The Stanford ICME students have created a memorial blog at  http://genehgolub.blogspot.com .</pre><pre>  Our community has lost its foremost member. He was a valued colleague and  friend. Goodbye, Gene.</pre><pre>  -- Cleve Moler</pre><h4>Thanks<a name=\"2e3065dc-2d44-4a9f-96fc-d8376c9b2490\"></a></h4><div><ul><li>Gene Golub and Mark Kent for creating NA-Digest and NA-Net.</li><li>Tammy Kolda and Danny Dunlavy for editing the Digest for two decades.</li><li>Jack Dongarra, Eric Grosse, Keith Moore and Geri Ragghianti for creating Netlib and for hosting the system for four decades.</li><li>David Bindel and Alex Townsend for joining this team.</li></ul></div><h4>References<a name=\"8f0306a7-58c2-424a-bae9-f87fb1ae7dc5\"></a></h4><p>Jack Dongarra, Gene Golub, Eric Grosse, Cleve Moler and Keith Moore. \"Netlib and NA-Net: Building a Scientific Computing Community\", <a href=\"https://ieeexplore.ieee.org/document/4544554\"><i>IEEE Annals of the History of Computing</i></a>, (Volume: 30, Issue: 2, April-June 2008). <a href=\"https://blogs.mathworks.com/cleve/files/icl-utk-351-2008.pdf\">A PDF is available here</a>.</p><p>Mark Kent, <a href=\"https://www.research-collection.ethz.ch/handle/20.500.11850/68968\">The Numerical Analysis Net (NA-NET)</a>, Technical Report 85, ETH Zurich, Institut fuer Informatik, 1988.</p><!--     function grabCode_ad3526f9a6bc4fedb6f2b87f8bc0de10() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='ad3526f9a6bc4fedb6f2b87f8bc0de10 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' ad3526f9a6bc4fedb6f2b87f8bc0de10';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--ad3526f9a6bc4fedb6f2b87f8bc0de10 ##### SOURCE BEGIN #####%% NA_Digest and NA_Net% The <https://www.netlib.org/na-digest-html/  NA-Digest>% is an electronic newsletter for the numerical analysis and% scientific software community.% The NA-Digest is one of world's first examples of social networking.% The Digest is one of the forces that makes our community% a living, viable community.%% The Digest is part of NA-Net, which also includes % <https://www.netlib.org/ Netlib>, a collection of mathematical software,% papers, and databases.%% For its first forty years, the NA-Digest has had only four editors.% Now, we are% <https://www.netlib.org/na-digest-html/24/v24n11.html% adding two more>.% As we do that, I would like to take a personal look back at the% history of the NA-Digest.%% Gene and Mark% Like many other developments in the numerical analysis world,% the Digest began with <https://en.wikipedia.org/wiki/Gene_H._Golub% Gene Golub>. In the early 1980's, Golub was chair of Stanford's% Computer Science Department. Email was a new thing and Gene% maintained a list of email addresses for his many friends% around the world.  Email addresses came in many different formats;% today's system of domain names was not yet in wide spread use.%% In 1984, Mark Kent, one of Gene's grad students,% with help from Ray Tuminaro, Mark Crispin and Dan Kolkowitz,% wrote software that used Gene's list in an email% forwarding service.  Mail sent to%% |na.|_name_|@su-score|%% would be forwarded to the person with that last name. And email sent to%% |na@su-score| %% would be forwarded to everyone on the list.%% Gene and Mark Kent% began to gather contributions together% and send the collection out periodically.  By February 1987, this% had evolved into a moderated weekly newsletter.% Gene dubbed these email services the _NA-Net_.%% Nick Trefethen has this memory.%%    Early in the days of email, domain names were all over the place.%    I think there was a period when Gene was using xxx.na for the%    names of numerical analysts.  Then somebody decided addresses should%    end with the country, giving us .uk and .fr and .ch and all%    that.  For a period, we found that a lot of our numerical %    analysis emails were being directed to Namibia!%% In 1987, Gene asked me to moderate NA-Digest temporarily while he% went on a sabbatical.  That temporary position ultimately% lasted 18 years, until 2005.%%% Jack and Eric% <https://history.siam.org/oralhistories/dongarra.htm Jack Dongarra>% began his career at Argonne National Laboratory. Jack's colleague,% Eric Grosse, began his career at Bell Labs.% In 1984, Jack and Eric created Netlib, a software repository and% distribution service, and merged it with NA-Net.% In 1989, Jack and the NA-Net system moved from Argonne to % Oak Ridge National Lab and the University of Tennessee.%% Keith Moore, at the University of Tennessee,% rewrote the NA-Net software and maintained the servers for many years.%% Gerald Ragghianti, the Technical Services Leader at% Tennessee's Innovative Computer Lab, currently maintains the NA-Net% software and servers.%% Tammy and Danny% In 2005, I asked Tammy Kolda, who was then at Sandia Labs% in Livermore, to be the NA-Digest editor.% Tammy's <https://www.google.com/search?q=tamara+kolda Wikipedia page>% reveals that her given name is \"Tamara\", but everybody calls her \"Tammy\".  % She left Sandia is 2021 and now has her own consulting company,% <https://www.mathsci.ai/ MathSci.ai>. % % In 2010, Tammy recommended that Danny Dunlavy, from Sandia Labs in % Albuquerque, take over as editor.  He has been the editor for 14 years.% Danny's day job at Sandia's% <https://www.sandia.gov/ccr Center for Computing Research>% involves a wide range of fields including computer architecture,% cognitive modeling and discrete mathematics.%% <<OldEditors.png>>%%% David and Alex%% <<NewEditors.png>>%% <https://www.netlib.org/na-digest-html/24/v24n11.html% Starting next week>, NA-Digest and NA-Net will move% <https://en.wikipedia.org/wiki/Lock,_stock,_and_barrel% lock, stock, and barrel> to Cornell University.% The new editors are% <https://www.cs.cornell.edu/~bindel/bio David Bindell>% and% <https://pi.math.cornell.edu/~ajt/ Alex Townsend>.% Cornell's IT organization will be taking over the logistics.%% David, Alex and <https://www.cs.cornell.edu/~damle/#About Anil Damle>% are also the hosts for % <https://householder-symposium.github.io Householder XXII>,% June 8-13, 2025.%% Archive% Every issue of NA-Digest since February 1987% is available at% <https://www.netlib.org/na-digest-html>.%% Members% When I succeeded Gene as editor in 1987, there were about 800 names% on the NA-Net mailing list.  Today, in 2024, there are a little% over 10,000.% Discontinuities in the size of the list result when% unused and illegitimate names are removed.%% <<NA_Digs.png>>%% Important Postings% I have made three personally important announcements in the Digest over% the years. %% *October 29, 1989*%% In 1989 I was working at% <https://blogs.mathworks.com/cleve/2013/11/25/the-ardent-titan-part-1/% Ardent Computer>, a startup in Silicon Valley.% I announced in NA-Digest that MathWorks was looking for a numerical% analyst. (Note the MathWorks telephone number near the end of this% announcement.)%%    From: Cleve Moler <na.moler@na-net.stanford.edu>%    Date: Sun Oct 29 10:39:38 PST 1989%    Subject: Positions at The MathWorks%   %    The MathWorks is the company which develops and markets MATLAB.%    The company currently employs about 30 people and expects to%    add three or four more soon. The company headquarters is in%    East Natick, Massachusetts, which is about a half hour drive%    west of Boston.%   %    The background and interests expected for the various positions%    available range from numerical linear algebra and matrix computation%    to systems programming and graphics. Educational level and%    experience expected range from inexperienced beginner willing%    to learn to seasoned Ph.D. with a personal library of M-files.%%    For more information, send email to na.moler@na-net.stanford.edu%    or phone me at 408-732-0400. Or, contact the MathWorks' president,%    John Little, with email to jnl@mathworks.com, phone 508-653-1415,%    or write to:%%    The MathWorks%    21 Eliot Street%    South Natick, MA 01760%% *November 26, 1989*%% Shortly after that announcement, % <https://en.wikipedia.org/wiki/Stardent_Inc. Ardent imploded>% and I said that I was taking the job myself.%%    From: Cleve Moler <moler@mathworks.com>%    Date: Sun Nov 26 09:16:32 PST 1989%    Subject: Change of Address for Moler%    %    A couple of weeks ago, I made an announcement here that%    The MathWorks, the MATLAB company, was looking to fill several%    positions, including one for a numerical analyst. Now, I've%    decided to take that slot myself. I'm one of the founders of%    MathWorks, and have always been a consultant to the company, but%    now I'll be a full time employee. For a while at least, I'll    %    be working out of my home in California, even though MathWorks%    headquarters is in Massachusetts. (There are already a couple%    of other MathWorks developers in the Bay Area.)%    . . .%    My electronic address is \"moler@mathworks.com\". If your mailer%    can't find the route via uunet to mathworks.com, you can still%    use \"na.moler@na-net.stanford.edu\".%% *November 16, 2007*%% In November 2007 I was attending the Super Computing conference in% Reno.  I had rented a car and intended to drive to the Bay Area% after the conference.  But my wife called me and said,% \"Hey Cleve, have you heard that Gene is in the hospital?\"% I left SC immediately and drove to Palo Alto.  Two days later% we sent out a special issue of the Digest:%%    From: Cleve Moler <Cleve.Moler@mathworks.com>%    Date: Fri, 16 Nov 2007 17:55:42 -0500%    Subject: Gene Golub, 1932 - 2007%    %    Gene Golub, founder of the NA Digest, passed away today, Friday, November 16,%    at the Stanford University Hospital. He was 75 years old.%    %    Gene returned home to Stanford recently from a trip to Hong Kong. He was%    planning to leave again Tuesday on another trip, this one to Zurich where the%    ETH was to honor him with a special degree. Instead, Sunday night he went to%    the emergency room because he was \"feeling lousy\". On Tuesday, he was found%    to have AML, acute myelogenous leukemia, a form of cancer that affects the%    white blood cells. This is a potentially curable disease and he was expecting%    to begin chemotherapy today. But serious complications developed suddenly%    over night.%    %    I was able to see Gene for an hour last night and he was in reasonably good%    spirits. Mike Saunders was trying to get Gene's laptop to use dial-up over%    the hospital's phone system because Gene said he was a couple of days behind%    on his email. I was planning to get a wireless card for his machine today.%    None of us had any idea how suddenly the situation would worsen.%    %    The Stanford ICME students have created a memorial blog at%    http://genehgolub.blogspot.com .%    %    Our community has lost its foremost member. He was a valued colleague and%    friend. Goodbye, Gene.%    %    REPLACE_WITH_DASH_DASH Cleve Moler%% Thanks%% * Gene Golub and Mark Kent for creating NA-Digest and NA-Net.% * Tammy Kolda and Danny Dunlavy for editing the Digest for two decades.% * Jack Dongarra, Eric Grosse, Keith Moore and Geri Ragghianti for% creating Netlib and for hosting the system for four decades.% * David Bindel and Alex Townsend for joining this team.%% References%% Jack Dongarra, Gene Golub, Eric Grosse, Cleve Moler and Keith Moore.% \"Netlib and NA-Net: Building a Scientific Computing Community\",% <https://ieeexplore.ieee.org/document/4544554% _IEEE Annals of the History of Computing_>,% (Volume: 30, Issue: 2, April-June 2008).% <https://blogs.mathworks.com/cleve/files/icl-utk-351-2008.pdf% A PDF is available here>.%% Mark Kent,% <https://www.research-collection.ethz.ch/handle/20.500.11850/68968% The Numerical Analysis Net (NA-NET)>, Technical Report 85, ETH% Zurich, Institut fuer Informatik, 1988.##### SOURCE END ##### ad3526f9a6bc4fedb6f2b87f8bc0de10-->",
            "url": "https://hpc.social/commercial-blog/2024/na-digest-and-na-net/",
            
            
            
            
            
            "date_published": "2024-08-31T21:44:36-06:00",
            "date_modified": "2024-08-31T21:44:36-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/a-treacherous-svd/",
            "title": "A Treacherous SVD",
            "summary": null,
            "content_text": "A few days ago, a bug report from our office in Cambridge caught my attention. Computing the singular values and singular vectors of a particular matrix would sometimes cause MATLAB to crash.ContentsTwo ComputersMath LibrariesG3366394RankZero rowsFuzzFlipNow what?Two ComputersI use two different two computers regularly. The machine in my home office is a Lenovo ThinkPad&reg; model T14, loaded with two external monitors, several external disc drives, a sound bar and a dedicated internet connection. My traveling machine is a Lenovo ThinkPad X1 Nano with no external hardware.The report of a crash in the SVD became even more interesting when I found that it happens on my office computer, but not on the portable. A quick check revealed that the CPUs on the two machines come from different manufacturers. The office computer uses an AMD&reg; Ryzen Pro 5 while the traveling machine uses an Intel&reg; Core i7.Math LibrariesThe crash occurs several software layers deep in CGESVD, the LAPACK driver for single precision complex SVD. Various chip manufacturers provide math libraries that have been optimized for their CPUs. However, by default, MATLAB uses the reportedly faster Intel Math Kernel Library, MKL. It is possible to switch to other math libraries.We have experts at MathWorks who know far more about the details of these libraries than I do. They will soon sort this all out. In the meantime, here is what I have learned about the offending matrix.G3366394We refer to the matrix in the crash report by its case number in our bug tracking system. The matrix is of modest size but is otherwise unusual for several reasons. It is rectangular with fewer rows than columns, it is in single precision, and it is complex.  clear  load g3366394 X  whos  Name        Size              Bytes  Class     Attributes  X         219x384            672768  single    complexThe following code calling SVD with three outputs will crash MATLAB on my T14, but not on my X1.  trysvd = false  if trysvd      [U,S,V] = svd(X);      R = U*S*V' - X;      relres = norm(R)/norm(X)  end  trysvd =    logical      0RankComputing the singular values without the vectors can be done on either machine. The following code uses double precision and then plots the singular values on a logarithmic scale with a line at single precision roundoff level.  S = svd(X);  semilogy(S,'.-')  ep = eps('single');  line([0 230],[ep ep])  axis([0 230 1e-15 10])  legend({'singular values','eps(''single'')'}) We see that the matrix is far from full rank. About half of its singular values are negligible. This is confirmed by   xrank = rank(X)   xrank =      110Zero rowsThe cause of the low rank is easy to find. This surf plot reveals that almost half of the rows are flat zero. Let's remove the zero rows.  c = sum(abs(X),2)==0;  nnzc = nnz(c)  X(c&gt;0,:) = [];  nnzc =     109 The remaining matrix is full rank and it is safe to compute its singular vectors.  [U,S,V] = svd(X);  R = U*S*V' - X;  resnorm = norm(R)  resnorm =     2.8191e-06FuzzRemoving the zero rows was the first work-around that I tried. There are many others. You can replace the zeros with any nonzero \"fuzz\".  fuzz = 1.e-20;  [U,S,V] = svd(X + fuzz*randn(size(X)));  resnorm = norm(U*S*V'-X)  resnorm =     2.8222e-06FlipYou can reorder the matrix so that the zero rows are not at the beginning.  [U,S,V] = svd(flipud(X));  U = flipud(U);  resnorm = norm(U*S*V'-X)  resnorm =     2.3809e-06Now what?How to avoid the crash is not the most important question. What causes the crash with the original matrix? We will find out and get it fixed.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>A few days ago, a bug report from our office in Cambridge caught my attention. Computing the singular values and singular vectors of a particular matrix would sometimes cause MATLAB to crash.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#687983f8-4f5c-4ab6-8c9a-670d933db516\">Two Computers</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#bb7d2817-a6f9-4636-b9a4-ec93834d3c2f\">Math Libraries</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b76d6ed5-ea1c-4dc5-876b-9e32dd95c51e\">G3366394</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#66e487ba-0c85-4c88-a56d-87408f340dd4\">Rank</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#0848e46c-23e0-40b5-9f63-5d781d53d2d0\">Zero rows</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b08e8c96-055a-4909-8778-d590028d1cb3\">Fuzz</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#f72bffb3-25d4-4136-a01c-35ce3294dcc5\">Flip</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#0a7fccdf-a476-4cd7-b66e-e52d0349aa3b\">Now what?</a></li></ul></div><h4>Two Computers<a name=\"687983f8-4f5c-4ab6-8c9a-670d933db516\"></a></h4><p>I use two different two computers regularly. The machine in my home office is a Lenovo ThinkPad&reg; model T14, loaded with two external monitors, several external disc drives, a sound bar and a dedicated internet connection. My traveling machine is a Lenovo ThinkPad X1 Nano with no external hardware.</p><p>The report of a crash in the SVD became even more interesting when I found that it happens on my office computer, but not on the portable. A quick check revealed that the CPUs on the two machines come from different manufacturers. The office computer uses an AMD&reg; Ryzen Pro 5 while the traveling machine uses an Intel&reg; Core i7.</p><h4>Math Libraries<a name=\"bb7d2817-a6f9-4636-b9a4-ec93834d3c2f\"></a></h4><p>The crash occurs several software layers deep in <a href=\"https://netlib.org/lapack/explore-3.3.0-html/d5/d1f/cgesvd_8f_source.html\">CGESVD</a>, the LAPACK driver for single precision complex SVD. Various chip manufacturers provide math libraries that have been optimized for their CPUs. However, by default, MATLAB uses the reportedly faster Intel Math Kernel Library, MKL. It is possible to switch to other math libraries.</p><p>We have experts at MathWorks who know far more about the details of these libraries than I do. They will soon sort this all out. In the meantime, here is what I have learned about the offending matrix.</p><h4>G3366394<a name=\"b76d6ed5-ea1c-4dc5-876b-9e32dd95c51e\"></a></h4><p>We refer to the matrix in the crash report by its case number in our bug tracking system. The matrix is of modest size but is otherwise unusual for several reasons. It is rectangular with fewer rows than columns, it is in single precision, and it is complex.</p><pre>  clear  load g3366394 X  whos</pre><pre>  Name        Size              Bytes  Class     Attributes  X         219x384            672768  single    complex</pre><p>The following code calling SVD with three outputs will crash MATLAB on my T14, but not on my X1.</p><pre>  trysvd = false  if trysvd      [U,S,V] = svd(X);      R = U*S*V' - X;      relres = norm(R)/norm(X)  end</pre><pre>  trysvd =    logical      0</pre><h4>Rank<a name=\"66e487ba-0c85-4c88-a56d-87408f340dd4\"></a></h4><p>Computing the singular values without the vectors can be done on either machine. The following code uses double precision and then plots the singular values on a logarithmic scale with a line at single precision roundoff level.</p><pre>  S = svd(X);  semilogy(S,'.-')  ep = eps('single');  line([0 230],[ep ep])  axis([0 230 1e-15 10])  legend({'singular values','eps(''single'')'})</pre><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/semilogy.png\" vspace=\"5\" /> </p><p>We see that the matrix is far from full rank. About half of its singular values are negligible. This is confirmed by</p><pre>   xrank = rank(X)</pre><pre>   xrank =      110</pre><h4>Zero rows<a name=\"0848e46c-23e0-40b5-9f63-5d781d53d2d0\"></a></h4><p>The cause of the low rank is easy to find. This surf plot reveals that almost half of the rows are flat zero.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/full.png\" vspace=\"5\" /> </p><p>Let's remove the zero rows.</p><pre>  c = sum(abs(X),2)==0;  nnzc = nnz(c)  X(c&gt;0,:) = [];</pre><pre>  nnzc =     109</pre><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/reduced.png\" vspace=\"5\" /> </p><p>The remaining matrix is full rank and it is safe to compute its singular vectors.</p><pre>  [U,S,V] = svd(X);  R = U*S*V' - X;  resnorm = norm(R)</pre><pre>  resnorm =     2.8191e-06</pre><h4>Fuzz<a name=\"b08e8c96-055a-4909-8778-d590028d1cb3\"></a></h4><p>Removing the zero rows was the first work-around that I tried. There are many others. You can replace the zeros with any nonzero \"fuzz\".</p><pre>  fuzz = 1.e-20;  [U,S,V] = svd(X + fuzz*randn(size(X)));</pre><pre>  resnorm = norm(U*S*V'-X)</pre><pre>  resnorm =     2.8222e-06</pre><h4>Flip<a name=\"f72bffb3-25d4-4136-a01c-35ce3294dcc5\"></a></h4><p>You can reorder the matrix so that the zero rows are not at the beginning.</p><pre>  [U,S,V] = svd(flipud(X));  U = flipud(U);</pre><pre>  resnorm = norm(U*S*V'-X)</pre><pre>  resnorm =     2.3809e-06</pre><h4>Now what?<a name=\"0a7fccdf-a476-4cd7-b66e-e52d0349aa3b\"></a></h4><p>How to avoid the crash is not the most important question. What causes the crash with the original matrix? We will find out and get it fixed.</p><!--     function grabCode_e32dbb50b2604a45be30742645bd3bea() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='e32dbb50b2604a45be30742645bd3bea ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' e32dbb50b2604a45be30742645bd3bea';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--e32dbb50b2604a45be30742645bd3bea ##### SOURCE BEGIN #####%% A Treacherous SVD % A few days ago, a bug report from our office in Cambridge% caught my attention.  Computing the singular values and singular% vectors of a particular matrix would sometimes cause MATLAB to crash. %% Two Computers% I use two different two computers regularly.% The machine in my home office is a Lenovo ThinkPad(R)% model T14, loaded with two external monitors, several external% disc drives, a sound bar and a dedicated internet connection.% My traveling machine is a Lenovo ThinkPad X1 Nano with no external% hardware.%% The report of a crash in the SVD became even more interesting when% I found that it happens on my office computer, but not on the portable.% A quick check revealed that the CPUs on the two machines come from % different manufacturers.% The office computer uses an AMD(R) Ryzen Pro 5% while the traveling machine uses an Intel(R) Core i7.%%% Math Libraries% The crash occurs several software layers deep in% <https://netlib.org/lapack/explore-3.3.0-html/d5/d1f/cgesvd_8f_source.html% CGESVD>, the LAPACK driver for single precision complex SVD.% Various chip manufacturers provide math libraries that have been% optimized for their CPUs. However, by default, MATLAB uses % the reportedly faster Intel Math Kernel Library, MKL.% It is possible to switch to other  math libraries.%% We have experts at MathWorks who know far more about the details% of these libraries than I do.  They will soon sort this all out.% In the meantime, here is what I have learned about the offending% matrix.%% G3366394% We refer to the matrix in the crash report by its case% number in our bug tracking system.% The matrix is of modest size but% is otherwise unusual for several reasons.% It is rectangular with fewer rows than columns,% it is in single precision, and it is complex.%%    clear%    load g3366394 X%    whos%%    Name        Size              Bytes  Class     Attributes%    X         219x384            672768  single    complex   %%% The following code calling SVD with three outputs% will crash MATLAB on  my T14, but not on my X1.%%    trysvd = false%    if trysvd%        [U,S,V] = svd(X);%        R = U*S*V' - X;%        relres = norm(R)/norm(X)%    end%%    trysvd =%      logical%        0%% Rank% Computing the singular values without the vectors can be done% on either machine.  The following code uses double precision and% then plots the singular values on a logarithmic scale with a% line at single precision roundoff level.%%    S = svd(X);%    semilogy(S,'.-')%    ep = eps('single');%    line([0 230],[ep ep])%    axis([0 230 1e-15 10])%    legend({'singular values','eps(''single'')'})%% <<semilogy.png>> %%% We see that the matrix is far from full rank.% About half of its singular values are negligible.% This is confirmed by%%     xrank = rank(X)%%     xrank =%        110%%  Zero rows% The cause of the low rank is easy to find.  % This surf plot reveals that almost half of the rows are flat zero.%% <<full.png>>%%% % Let's remove the zero rows.%%    c = sum(abs(X),2)==0;%    nnzc = nnz(c)%    X(c>0,:) = [];%%    nnzc =%       109%%% <<reduced.png>>%%%% The remaining matrix is full rank and it is safe to compute its% singular vectors.%%    [U,S,V] = svd(X);%    R = U*S*V' - X;%    resnorm = norm(R)%%    resnorm =%       2.8191e-06%% Fuzz% Removing the zero rows was the first work-around that I tried.% There are many others.  You can replace the zeros with any% nonzero \"fuzz\".%%    fuzz = 1.e-20;%    [U,S,V] = svd(X + fuzz*randn(size(X)));%%    resnorm = norm(U*S*V'-X)%%    resnorm =%       2.8222e-06%% Flip% You can reorder the matrix so that the zero rows are not at the% beginning.%%    [U,S,V] = svd(flipud(X));%    U = flipud(U);%%    resnorm = norm(U*S*V'-X)%%    resnorm =%       2.3809e-06%% Now what?% How to avoid the crash is not the most important question.% What causes the crash with the original matrix?% We will find out and get it fixed.##### SOURCE END ##### e32dbb50b2604a45be30742645bd3bea-->",
            "url": "https://hpc.social/commercial-blog/2024/a-treacherous-svd/",
            
            
            
            
            
            "date_published": "2024-07-15T15:39:04-06:00",
            "date_modified": "2024-07-15T15:39:04-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/supersum-in-defense-of-floating-point-arithmetic/",
            "title": "SuperSum, In Defense of Floating Point Arithmetic",
            "summary": null,
            "content_text": "Floating point arithmetic doesn't get the respect it deserves. Many people consider it mysterious, fuzzy, unpredictable. These misgivings often occur in discussion of vector sums. Our provocatively named SuperSum is intended to calm these fears.ContentsLedgersChecksumsOrderSpeedThree SumsToy ExampleSecond TestConclusionLedgersA ledger is a list of transactions in an account. Auditing the ledger involves comparing the total of the items with the change in the account balance.If v is a vector of transaction amounts, then we need to computesum(v)If this sum is equal to the change in the balance, then it is reasonable to assume that the ledger is correct. If not, the ledger must be examined line-by-line.ChecksumsHave you ever used a checksum for a file transfer? One checksum is computed before the file is sent. After the file has been sent over a questionable channel, a second checksum is computed on the receiving end. If the two checksums agree, the transmission was probably okay. If not, the file must be sent again.OrderFloating point addition is not associative. This means(a + b) + cis not necessarily the same asa+(b+c).So the order of doing a computation is important.Computers are deterministic devices. If the same computation is done in the same order more than once, the results must be the same. If you get different sums from different runs on a fixed computer, then it must be because the order has been changed.SpeedIn recent years, we have made the built-in function sum(x) faster by parallelizing it. The input vector is broken into several pieces, the sum of each piece is computed separately and simultaneously, then the partial sums are combined to give the final result. If the number and size of the pieces varies from run to run, the order varies and consequently the computed sums may vary.Three SumsHere are three replacements for nansum(x), the version of sum(x) that skips over NaNs and infs.simplesumAvoid the effect of blocking in the built-in sum(x).function s = simplesum(x)     % simplesum.  s = simplesum(x), for vector(x).     % Force sequential order for sum(x).     % Skips NaNs and infs.     s = 0;     for k = 1:length(x)         if isfinite(x(k))             s = s + x(k);         end     endendKahanSumThis is the Kahan summation algorithm. The sum is accumulated in two words, the more significant s and the correction c. If you were able to form s + c exactly, it would be more accurate than s alone.function s = KahanSum(x)     % KahanSum.  s = KahanSum(x), for vector(x).     % More accurate, but slower, than sum(x).     % Skips NaNs and infs.     % https://en.wikipedia.org/wiki/Kahan_summation_algorithm.     s = 0;  % sum     c = 0;  % correction     for k = 1:length(x)         if isfinite(x(k))             y = x(k) - c;             t = s + y;             c = (t - s) - y;             s = t;         end     endendSuperSumI gave it a pretentious name to grab attention. Use extended precision, with enough digits to hold any MATLAB double.function s = SuperSum(x)     % SuperSum.  s = SuperSum(x), for vector(x).     % Symbolic Math Toolbox extended precision.     % Skips NaNs and infs.     %     % 632 decimal digits holds every IEEE-754 double.     % 632 = ceil(log10(realmax) - log10(eps*realmin));     %     din = digits(632);  % Remember current setting     s = double(sum(sym(x(isfinite(x)),'D')));     digits(din)         % RestoreendToy ExampleA test case here at MathWorks, known by a French-Canadian name that translates to \"toy example\", has a vector e2 of length 4243 and values that range from -3.3e7 to 6.8e9.When running tests involving floating point numbers it is a good idea to set the output format to hex so we can see every last bit.format hexload jeuTest e2x = e2;[nansum(x) simplesum(x) KahanSum(x) SuperSum(x)]ans =   423785e8206150e2   423785e8206150e0   423785e8206150e1   423785e8206150e1For jeuTest, Kahan summation gets the same result as SuperSum, while nansum and simplesum differ in the last bit or two.Second TestThe vector length is only three, but the third term completely cancels the first, and the second term rises from obscurity. In this situation, KahanSum is no more accurate than sum.format hexx = [1 1e-14 -1]'[nansum(x) simplesum(x) KahanSum(x) SuperSum(x)]x =   3ff0000000000000   3d06849b86a12b9b   bff0000000000000ans =   3d06800000000000   3d06800000000000   3d06800000000000   3d06849b86a12b9bConclusionI will leave careful timing for another day. Let's just say that in situations like jeuTest, KahanSum is probably all you need. It is usually more accurate than sum, and not much slower.However, for complete reliability, use SuperSum. There is no substitute for the right answer.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>Floating point arithmetic doesn't get the respect it deserves. Many people consider it mysterious, fuzzy, unpredictable. These misgivings often occur in discussion of vector sums. Our provocatively named <i>SuperSum</i> is intended to calm these fears.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#6cc58603-9b70-4a29-bc08-fae5fe3d5db0\">Ledgers</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#cc3635b6-5a76-4420-baeb-94c5b36a6573\">Checksums</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#71f16826-8ff1-4a14-bc85-146da594d56f\">Order</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#5356ff4e-b231-4d40-9404-17b0d0d882af\">Speed</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#52953716-f4f9-4698-9680-8a5d38254f1e\">Three Sums</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#f8a4c9a1-edd5-4ac3-9dca-bc7306b7de0f\">Toy Example</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8acba015-e19b-413e-8817-1e093e31ee2d\">Second Test</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e0e62ed1-a352-49ea-ac59-31107304d71e\">Conclusion</a></li></ul></div><h4>Ledgers<a name=\"6cc58603-9b70-4a29-bc08-fae5fe3d5db0\"></a></h4><p>A <i>ledger</i> is a list of transactions in an account. <i>Auditing</i> the ledger involves comparing the total of the items with the change in the account balance.</p><p>If <i>v</i> is a vector of transaction amounts, then we need to compute</p><pre>sum(v)</pre><p>If this sum is equal to the change in the balance, then it is reasonable to assume that the ledger is correct. If not, the ledger must be examined line-by-line.</p><h4>Checksums<a name=\"cc3635b6-5a76-4420-baeb-94c5b36a6573\"></a></h4><p>Have you ever used a checksum for a file transfer? One checksum is computed before the file is sent. After the file has been sent over a questionable channel, a second checksum is computed on the receiving end. If the two checksums agree, the transmission was probably okay. If not, the file must be sent again.</p><h4>Order<a name=\"71f16826-8ff1-4a14-bc85-146da594d56f\"></a></h4><p>Floating point addition is not <i>associative</i>. This means</p><pre>(a + b) + c</pre><p>is not necessarily the same as</p><pre class=\"language-matlab\">a+(b+c).</pre><p>So the <i>order</i> of doing a computation is important.</p><p>Computers are deterministic devices. If the same computation is done <i>in the same order</i> more than once, the results must be the same. If you get different sums from different runs on a fixed computer, then it must be because the order has been changed.</p><h4>Speed<a name=\"5356ff4e-b231-4d40-9404-17b0d0d882af\"></a></h4><p>In recent years, we have made the built-in function <tt>sum(x)</tt> faster by parallelizing it. The input vector is broken into several pieces, the sum of each piece is computed separately and simultaneously, then the partial sums are combined to give the final result. If the number and size of the pieces varies from run to run, the order varies and consequently the computed sums may vary.</p><h4>Three Sums<a name=\"52953716-f4f9-4698-9680-8a5d38254f1e\"></a></h4><p>Here are three replacements for <tt>nansum(x)</tt>, the version of <tt>sum(x)</tt> that skips over <tt>NaNs</tt> and <tt>infs</tt>.</p><p><b>simplesum</b></p><p>Avoid the effect of blocking in the built-in sum(x).</p><pre>function s = simplesum(x)     % simplesum.  s = simplesum(x), for vector(x).     % Force sequential order for sum(x).     % Skips NaNs and infs.</pre><pre>     s = 0;     for k = 1:length(x)         if isfinite(x(k))             s = s + x(k);         end     endend</pre><p><b>KahanSum</b></p><p>This is the Kahan summation algorithm. The sum is accumulated in two words, the more significant <tt>s</tt> and the correction <tt>c</tt>. If you were able to form <tt>s + c</tt> exactly, it would be more accurate than <tt>s</tt> alone.</p><pre>function s = KahanSum(x)     % KahanSum.  s = KahanSum(x), for vector(x).     % More accurate, but slower, than sum(x).     % Skips NaNs and infs.     % https://en.wikipedia.org/wiki/Kahan_summation_algorithm.</pre><pre>     s = 0;  % sum     c = 0;  % correction     for k = 1:length(x)         if isfinite(x(k))             y = x(k) - c;             t = s + y;             c = (t - s) - y;             s = t;         end     endend</pre><p><b>SuperSum</b></p><p>I gave it a pretentious name to grab attention. Use extended precision, with enough digits to hold any MATLAB double.</p><pre>function s = SuperSum(x)     % SuperSum.  s = SuperSum(x), for vector(x).     % Symbolic Math Toolbox extended precision.     % Skips NaNs and infs.     %     % 632 decimal digits holds every IEEE-754 double.     % 632 = ceil(log10(realmax) - log10(eps*realmin));     %     din = digits(632);  % Remember current setting     s = double(sum(sym(x(isfinite(x)),'D')));     digits(din)         % Restoreend</pre><h4>Toy Example<a name=\"f8a4c9a1-edd5-4ac3-9dca-bc7306b7de0f\"></a></h4><p>A test case here at MathWorks, known by a French-Canadian name that translates to \"toy example\", has a vector <tt>e2</tt> of length 4243 and values that range from -3.3e7 to 6.8e9.</p><p>When running tests involving floating point numbers it is a good idea to set the output format to <tt>hex</tt> so we can see every last bit.</p><pre>format hexload jeuTest e2x = e2;</pre><pre>[nansum(x) simplesum(x) KahanSum(x) SuperSum(x)]</pre><pre>ans =   423785e8206150e2   423785e8206150e0   423785e8206150e1   423785e8206150e1</pre><p>For <tt>jeuTest</tt>, Kahan summation gets the same result as <tt>SuperSum</tt>, while <tt>nansum</tt> and <tt>simplesum</tt> differ in the last bit or two.</p><h4>Second Test<a name=\"8acba015-e19b-413e-8817-1e093e31ee2d\"></a></h4><p>The vector length is only three, but the third term completely cancels the first, and the second term rises from obscurity. In this situation, <tt>KahanSum</tt> is no more accurate than <tt>sum</tt>.</p><pre>format hexx = [1 1e-14 -1]'</pre><pre>[nansum(x) simplesum(x) KahanSum(x) SuperSum(x)]</pre><pre>x =   3ff0000000000000   3d06849b86a12b9b   bff0000000000000</pre><pre>ans =   3d06800000000000   3d06800000000000   3d06800000000000   3d06849b86a12b9b</pre><h4>Conclusion<a name=\"e0e62ed1-a352-49ea-ac59-31107304d71e\"></a></h4><p>I will leave careful timing for another day. Let's just say that in situations like <tt>jeuTest</tt>, <tt>KahanSum</tt> is probably all you need. It is usually more accurate than <tt>sum</tt>, and not much slower.</p><p>However, for complete reliability, use <tt>SuperSum</tt>. There is no substitute for the right answer.</p><!--     function grabCode_7bd084f1e3e84c86b0c419e2b2dcd8b5() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='7bd084f1e3e84c86b0c419e2b2dcd8b5 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 7bd084f1e3e84c86b0c419e2b2dcd8b5';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--7bd084f1e3e84c86b0c419e2b2dcd8b5 ##### SOURCE BEGIN #####%% SuperSum, In Defense of Floating Point Arithmetic% Floating point arithmetic doesn't get the respect it deserves.% Many people consider it mysterious, fuzzy, unpredictable.% These misgivings often occur in% discussion of vector sums.  Our provocatively named% _SuperSum_ is intended to calm these fears.%% Ledgers% A _ledger_ is a list of transactions in an account.% _Auditing_ the ledger involves comparing the total of % the items with the change in the account balance.%% If _v_ is a vector of transaction amounts, then we% need to compute%%  sum(v)% % If this sum is equal to the change in the balance, then it is% reasonable to assume that the ledger is correct.% If not, the ledger must be examined line-by-line.%%% Checksums% Have you ever used a checksum for a file transfer?% One checksum is computed before the file is sent.  After the file% has been sent over a questionable channel, a second checksum is % computed on the receiving end.  If the two checksums agree,% the transmission was probably okay.  If not, the file must be% sent again.%% Order% Floating point addition is not _associative_.  This means%%  (a + b) + c%% is not necessarily the same as%%   a + (b + c).%% So the _order_ of doing a computation is important.%% Computers are deterministic devices.  If the same% computation is done _in the same order_ more than once,% the results must be the same.% If you get different sums from different runs on a fixed% computer, then it must be because the order has been % changed.%% Speed% In recent years, we have made the built-in function |sum(x)|% faster by parallelizing it.  The input vector is broken into% several pieces, the sum of each piece is computed separately% and simultaneously, then the partial sums are combined to give% the final result.  If the number and size of the pieces varies% from run to run, the order varies and consequently the computed% sums may vary.%% Three Sums% Here are three replacements for |nansum(x)|,% the version of |sum(x)| that skips over |NaNs| and |infs|.%% *simplesum*%% Avoid the effect of blocking in the built-in sum(x).%%  function s = simplesum(x)%       % simplesum.  s = simplesum(x), for vector(x).%       % Force sequential order for sum(x).%       % Skips NaNs and infs.%%       s = 0;%       for k = 1:length(x)%           if isfinite(x(k))%               s = s + x(k);%           end%       end%  end%% *KahanSum*%% This is the Kahan summation algorithm.% The sum is accumulated in two words, the more significant% |s| and the correction |c|.% If you were able to form |s + c| exactly, it would be more% accurate than |s| alone.%%  function s = KahanSum(x)%       % KahanSum.  s = KahanSum(x), for vector(x).%       % More accurate, but slower, than sum(x).%       % Skips NaNs and infs.%       % https://en.wikipedia.org/wiki/Kahan_summation_algorithm.%   %       s = 0;  % sum%       c = 0;  % correction%       for k = 1:length(x)%           if isfinite(x(k))%               y = x(k) - c;%               t = s + y;%               c = (t - s) - y;%               s = t;%           end%       end%  end%% *SuperSum*%% I gave it a pretentious name to grab attention.% Use extended precision, with enough digits to hold any MATLAB double.%%  function s = SuperSum(x) %       % SuperSum.  s = SuperSum(x), for vector(x).%       % Symbolic Math Toolbox extended precision.%       % Skips NaNs and infs.%       %%       % 632 decimal digits holds every IEEE-754 double.%       % 632 = ceil(log10(realmax) - log10(eps*realmin));%       %%       din = digits(632);  % Remember current setting%       s = double(sum(sym(x(isfinite(x)),'D')));%       digits(din)         % Restore%  end%% Toy Example% A test case here at MathWorks, known by a French-Canadian name that% translates to \"toy example\", has a vector |e2|% of length 4243 and values that range from -3.3e7 to 6.8e9.%% When running tests involving floating point numbers% it is a good idea to set the output format to |hex|% so we can see every last bit.%%  format hex%  load jeuTest e2%  x = e2;%%  [nansum(x)%   simplesum(x)%   KahanSum(x)%   SuperSum(x)]%%  ans =%     423785e8206150e2%     423785e8206150e0%     423785e8206150e1%     423785e8206150e1%% For |jeuTest|,  Kahan summation gets the same result as |SuperSum|,% while |nansum| and |simplesum| differ in the last bit or two.%%% Second Test% The vector length is only three, but the third term completely% cancels the first, and the second term rises from obscurity.% In this situation, |KahanSum| is no more accurate than |sum|.% %  format hex%  x = [1 1e-14 -1]'%%  [nansum(x)%   simplesum(x)%   KahanSum(x)%   SuperSum(x)]%%  x =%     3ff0000000000000%     3d06849b86a12b9b%     bff0000000000000%%  ans =%     3d06800000000000%     3d06800000000000%     3d06800000000000%     3d06849b86a12b9b%% Conclusion% I will leave careful timing for another day.  Let's just say that  % in situations like |jeuTest|, |KahanSum| is probably all you need.% It is usually more accurate than |sum|, and not much slower.%% However, for complete reliability, use |SuperSum|.  There is no% substitute for the right answer.##### SOURCE END ##### 7bd084f1e3e84c86b0c419e2b2dcd8b5-->",
            "url": "https://hpc.social/commercial-blog/2024/supersum-in-defense-of-floating-point-arithmetic/",
            
            
            
            
            
            "date_published": "2024-06-27T17:54:38-06:00",
            "date_modified": "2024-06-27T17:54:38-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/ibm-hexadecimal-floating-point/",
            "title": "IBM Hexadecimal Floating Point",
            "summary": null,
            "content_text": "Our technical support group recently received a request for a tool that would convert IBM System/360 hexadecimal floating point numbers to the IEEE-754 format. I am probably the only one left at MathWorks that actually used IBM mainframe computers. I thought we had seen the last of hexadecimal arithmetic years ago. But, it turns out that the hexadecimal floating point format is alive and well.ContentsIBM System/360FormatsDataHex_ieeeieee2ibmibm2ieeeExamplesComparisonSoftwareIBM System/360The System/360 is a family of mainframe computers that IBM introduced in 1965 and that dominated the computer industry until PCs came along twenty years later. They range in size from desk-sized to systems that fill a large room.Here is a photo of a mid-sized model. System/360, Model 60. Photo from Ken Shirrif's blog, IBM 360/System Summary.The System/360 architecture is byte-oriented, so it can handle business data processing as well as scientific and engineering computation. This leads to base-16, rather than base-2 or base-10, floating point arithmetic.* Binary      f*2^e    1/2&lt;=f&lt;1* Decimal     f*10^e   1/10&lt;=f&lt;1* Hexadecimal f*16^e   1/16&lt;=f&lt;1FormatsFloating point formats played an important role in technical computing in the early days. This table from FMM lists formats that were in use in the 1970s, before IEEE-754 was introduced in 1985. DataThe System/360 hexadecimal format is used in many industries for the preservation of data files.CREWES. Teaching exploration seismology. Comprehensive MATLAB toolbox for use with the textbook \"Numerical Methods of Exploration Seismology with algorithms in Matlab\" by Gary F. Margrave, a geoscience professor at the University of Calgary.Library of Congress. Government.NASA. Astronautics.SAS. Statistics and business analytics. SAS wrapers for C.Enthought. Python wrappers for C.Hex_ieee Hex_ieee. I have two twenty-line MATLAB functions, ieee2ibm and ibm2ieee, that convert IEEE-754 floating point to and from IBM hexadecimal format.Three statements in the middle of ieee2ibm are the key to the entire operation. The first statement is    [~,e] = log2(x)With two output arguments, log2 returns the mantissa and exponent of an IEEE-754 floating point number. The mantissa is not needed here.The second key statement    e = ceil(e/4)makes e divisible by 4. This turns e into the appropriate hexadecimal exponent so that the third statement    f = x.*16.^(-e)can produce the hexadecimal mantissa.ieee2ibmfunction z = ieee2ibm(x)   Convert IEEE-754 to IBM System 360 hexadecimal.   z = ieee2ibm(x)      Input x, real column vector.      Output z, length(x)-by-16 char.   Example: ieee2ibm(-118.625) = 'C276A00000000000'.      s = sign(x);                      % -1, 0, or 1      x = abs(x);      x(x &lt; 16^(-65)) = 0;              % Underflow      x(x &gt;= 16^63) = (1-eps/2)*16^63;  % Overflow      [~,e] = log2(x);                  % base 2 exponent      e = ceil(e/4)                     % base 16 exponent      f = x.*16.^(-e);                  % base 16 mantissa      E = uint64((e+64)*2^56);          % Assemb1e output      F = uint64(f*2^56);      S = uint64((1-s)*2^62);           % 1 or 0      z = dec2hex(S + E + F);           % z = 'ZZFFFFFFFFFFFFFF'endibm2ieeefunction x = ibm2ieee(z)   Convert IBM System 360 hexadecimal to IEEE-754.   x = ibm2ieee(z)      Input z, n-by-16 char.      Output x, n-by-1 double.   Example: ibm2ieee('C276A00000000000') = -118.625.      E = hex2dec(z(:,1:2));           % Disassemble input      F1 = hex2dec(z(:,3:8));          % &lt; 16^6      F2 = hex2dec(z(:,9:end));        % &lt; 16^8      s = sign(128-E);                 % -1 or 1      e = E-(s&gt;0)*64-(s&lt;0)*192;        % base 16 exponent      f = F1/16^6 + F2/16^14;          % base 16 mantissa      x = s.*f.*16.^e;endExamplesUnderflow. Anything &lt; 16^(-65) is too small and is flushed to zero. There are no denormals.Overflow. Anything &gt;= 16^63 is too large. There is no inf or NaN.* 1.0           4110000000000000* 0.1           401999999999999A* -pi           C13243F6A8885A30* 5.3976e-79    0010000000000000* 7.2370e+75    7FFFFFFFFFFFFFF8ComparisonS/360 hexadecimal has 7 exponent bits, while IEEE-754 has 11. Consequently, hexadecimal has a much smaller range, 5.4e-79 to 7.2e+75 versus 2.2e-308 to 1.8e+308.The base-16 normalization implies that hexadecimal effectively has between 53 and 56 mantissa bits. Counting the hidden bit, IEEE-754 also has 53. So, the accuracy of the two is pretty much the same.SoftwareMy functions ieee2ibm and ieee2ibm described above, modified to handle both single and double, plus hex_test, which does what its name implies, are available at Hex_ieee.Homework: What happens?ok = 0;for k = 1:10     x = single(k/10);     ok(k) = hex_test(x);endokGet       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>Our technical support group recently received a request for a tool that would convert IBM System/360 hexadecimal floating point numbers to the IEEE-754 format. I am probably the only one left at MathWorks that actually used IBM mainframe computers. I thought we had seen the last of hexadecimal arithmetic years ago. But, it turns out that the hexadecimal floating point format is alive and well.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#927291b6-bb83-4c85-937c-8f20844b3c74\">IBM System/360</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#43cbbb43-f2f5-4415-99df-f6a6c114c912\">Formats</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#5d482994-2d0d-42fa-86e2-c98bc728ebbe\">Data</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#099df223-ed1e-405e-917f-0cccd1d54a26\"><tt>Hex_ieee</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#126c1d80-75f5-4879-841f-de925f083fc1\"><tt>ieee2ibm</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#88d3bc9c-b626-4578-872e-b95f02057e43\"><tt>ibm2ieee</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#64f8c2ec-011c-40a2-a2f3-a2926ee929ac\">Examples</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#41ed0fce-64bf-4471-b2c3-e22645d184f5\">Comparison</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#9e4ce83f-58b7-498d-b480-9f17c5c1f6e0\">Software</a></li></ul></div><h4>IBM System/360<a name=\"927291b6-bb83-4c85-937c-8f20844b3c74\"></a></h4><p>The System/360 is a family of mainframe computers that IBM introduced in 1965 and that dominated the computer industry until PCs came along twenty years later. They range in size from desk-sized to systems that fill a large room.</p><p>Here is a photo of a mid-sized model.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/ibm-360-60.png\" vspace=\"5\" /> </p><p><i>System/360, Model 60.</i> <i>Photo from Ken Shirrif's blog, IBM 360/System Summary</i>.</p><p>The System/360 architecture is byte-oriented, so it can handle business data processing as well as scientific and engineering computation. This leads to base-16, rather than base-2 or base-10, floating point arithmetic.</p><pre>* Binary      f*2^e    1/2&lt;=f&lt;1* Decimal     f*10^e   1/10&lt;=f&lt;1* Hexadecimal f*16^e   1/16&lt;=f&lt;1</pre><h4>Formats<a name=\"43cbbb43-f2f5-4415-99df-f6a6c114c912\"></a></h4><p>Floating point formats played an important role in technical computing in the early days. This table from <a href=\"https://www.amazon.com/exec/obidos/ASIN/0131653326/acmorg-20\">FMM</a> lists formats that were in use in the 1970s, before IEEE-754 was introduced in 1985.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/fmm2.png\" vspace=\"5\" /> </p><h4>Data<a name=\"5d482994-2d0d-42fa-86e2-c98bc728ebbe\"></a></h4><p>The System/360 hexadecimal format is used in many industries for the preservation of data files.</p><p><a href=\"https://www.crewes.org/ResearchLinks/FreeSoftware\">CREWES</a>. Teaching exploration seismology. Comprehensive MATLAB toolbox for use with the textbook \"Numerical Methods of Exploration Seismology with algorithms in Matlab\" by Gary F. Margrave, a geoscience professor at the University of Calgary.</p><p><a href=\"https://www.loc.gov/preservation/digital/formats/fdd/fdd000464.shtml\">Library of Congress</a>. Government.</p><p><a href=\"https://nssdc.gsfc.nasa.gov/nssdc/formats/IBM_32-Bit.html\">NASA</a>. Astronautics.</p><p><a href=\"https://support.sas.com/content/dam/SAS/support/en/technical-papers/record-layout-of-a-sas-version-5-or-6-data-set-in-sas-transport-xport-format.pdf\">SAS</a>. Statistics and business analytics. SAS wrapers for C.</p><p><a href=\"https://github.com/enthought/ibm2ieee\">Enthought</a>. Python wrappers for C.</p><h4><tt>Hex_ieee</tt><a name=\"099df223-ed1e-405e-917f-0cccd1d54a26\"></a></h4><p> <a href=\"https://blogs.mathworks.com/cleve/files/Hex_ieee.m\"><tt>Hex_ieee</tt></a>. I have two twenty-line MATLAB functions, <tt>ieee2ibm</tt> and <tt>ibm2ieee</tt>, that convert IEEE-754 floating point to and from IBM hexadecimal format.</p><p>Three statements in the middle of <tt>ieee2ibm</tt> are the key to the entire operation. The first statement is</p><pre>    [~,e] = log2(x)</pre><p>With two output arguments, <tt>log2</tt> returns the mantissa and exponent of an IEEE-754 floating point number. The mantissa is not needed here.</p><p>The second key statement</p><pre>    e = ceil(e/4)</pre><p>makes <tt>e</tt> divisible by 4. This turns <tt>e</tt> into the appropriate hexadecimal exponent so that the third statement</p><pre>    f = x.*16.^(-e)</pre><p>can produce the hexadecimal mantissa.</p><h4><tt>ieee2ibm</tt><a name=\"126c1d80-75f5-4879-841f-de925f083fc1\"></a></h4><pre>function z = ieee2ibm(x)   Convert IEEE-754 to IBM System 360 hexadecimal.   z = ieee2ibm(x)      Input x, real column vector.      Output z, length(x)-by-16 char.   Example: ieee2ibm(-118.625) = 'C276A00000000000'.</pre><pre>      s = sign(x);                      % -1, 0, or 1      x = abs(x);      x(x &lt; 16^(-65)) = 0;              % Underflow      x(x &gt;= 16^63) = (1-eps/2)*16^63;  % Overflow</pre><pre>      [~,e] = log2(x);                  % base 2 exponent      e = ceil(e/4)                     % base 16 exponent      f = x.*16.^(-e);                  % base 16 mantissa</pre><pre>      E = uint64((e+64)*2^56);          % Assemb1e output      F = uint64(f*2^56);      S = uint64((1-s)*2^62);           % 1 or 0      z = dec2hex(S + E + F);           % z = 'ZZFFFFFFFFFFFFFF'end</pre><h4><tt>ibm2ieee</tt><a name=\"88d3bc9c-b626-4578-872e-b95f02057e43\"></a></h4><pre>function x = ibm2ieee(z)   Convert IBM System 360 hexadecimal to IEEE-754.   x = ibm2ieee(z)      Input z, n-by-16 char.      Output x, n-by-1 double.   Example: ibm2ieee('C276A00000000000') = -118.625.</pre><pre>      E = hex2dec(z(:,1:2));           % Disassemble input      F1 = hex2dec(z(:,3:8));          % &lt; 16^6      F2 = hex2dec(z(:,9:end));        % &lt; 16^8      s = sign(128-E);                 % -1 or 1</pre><pre>      e = E-(s&gt;0)*64-(s&lt;0)*192;        % base 16 exponent      f = F1/16^6 + F2/16^14;          % base 16 mantissa      x = s.*f.*16.^e;end</pre><h4>Examples<a name=\"64f8c2ec-011c-40a2-a2f3-a2926ee929ac\"></a></h4><p>Underflow. Anything <tt>&lt; 16^(-65)</tt> is too small and is flushed to zero. There are no denormals.</p><p>Overflow. Anything <tt>&gt;= 16^63</tt> is too large. There is no <tt>inf</tt> or <tt>NaN</tt>.</p><pre>* 1.0           4110000000000000* 0.1           401999999999999A* -pi           C13243F6A8885A30* 5.3976e-79    0010000000000000* 7.2370e+75    7FFFFFFFFFFFFFF8</pre><h4>Comparison<a name=\"41ed0fce-64bf-4471-b2c3-e22645d184f5\"></a></h4><p>S/360 hexadecimal has 7 exponent bits, while IEEE-754 has 11. Consequently, hexadecimal has a much smaller range, 5.4e-79 to 7.2e+75 versus 2.2e-308 to 1.8e+308.</p><p>The base-16 normalization implies that hexadecimal effectively has between 53 and 56 mantissa bits. Counting the hidden bit, IEEE-754 also has 53. So, the accuracy of the two is pretty much the same.</p><h4>Software<a name=\"9e4ce83f-58b7-498d-b480-9f17c5c1f6e0\"></a></h4><p>My functions <tt>ieee2ibm</tt> and <tt>ieee2ibm</tt> described above, modified to handle both single and double, plus <tt>hex_test</tt>, which does what its name implies, are available at <a href=\"https://blogs.mathworks.com/cleve/files/Hex_ieee.m\"><tt>Hex_ieee</tt></a>.</p><p>Homework: What happens?</p><pre>ok = 0;for k = 1:10     x = single(k/10);     ok(k) = hex_test(x);endok</pre><!--     function grabCode_54dd3908d741477c9a1ad45b553487d5() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='54dd3908d741477c9a1ad45b553487d5 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 54dd3908d741477c9a1ad45b553487d5';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--54dd3908d741477c9a1ad45b553487d5 ##### SOURCE BEGIN #####%% IBM Hexadecimal Floating Point% Our technical support group recently received a request% for a tool that would convert IBM System/360 hexadecimal% floating point numbers to the IEEE-754 format.% I am probably the only one left at MathWorks that actually used% IBM mainframe computers.% I thought we had seen the last of hexadecimal arithmetic years ago.% But, it turns out that the hexadecimal floating point format% is alive and well.%% IBM System/360% The System/360 is a family of mainframe computers that IBM% introduced in 1965 and that dominated the computer industry% until PCs came along twenty years later.  They range in size% from desk-sized to systems that fill a large room.%% Here is a photo of a mid-sized model.%% <<ibm-360-60.png>>%% _System/360, Model 60._% _Photo from Ken Shirrif's blog, IBM 360/System Summary_.%% The System/360 architecture is byte-oriented, so it can% handle business% data processing as well as scientific and engineering computation.% This leads to base-16, rather than base-2 or base-10,% floating point arithmetic.%%  * Binary      f*2^e    1/2<=f<1%  * Decimal     f*10^e   1/10<=f<1%  * Hexadecimal f*16^e   1/16<=f<1%% Formats% Floating point formats played an important role in% technical computing in the early days.% This table from% <https://www.amazon.com/exec/obidos/ASIN/0131653326/acmorg-20% FMM> lists formats that% were in use in the 1970s, before IEEE-754 was introduced in 1985.%% <<fmm2.png>>%%% Data% The System/360 hexadecimal format is used in many industries for the% preservation of data files.%% <https://www.crewes.org/ResearchLinks/FreeSoftware CREWES>.% Teaching exploration seismology.% Comprehensive MATLAB toolbox for use with the textbook% \"Numerical Methods of Exploration Seismology with algorithms in Matlab\" % by Gary F. Margrave, a geoscience professor at the University of Calgary.%% <https://www.loc.gov/preservation/digital/formats/fdd/fdd000464.shtml% Library of Congress>. Government.%% <https://nssdc.gsfc.nasa.gov/nssdc/formats/IBM_32-Bit.html NASA>.% Astronautics.%% <https://support.sas.com/content/dam/SAS/support/en/technical-papers/record-layout-of-a-sas-version-5-or-6-data-set-in-sas-transport-xport-format.pdf% SAS>.  % Statistics and business analytics.  SAS wrapers for C.%% <https://github.com/enthought/ibm2ieee Enthought>.  Python wrappers for C. %%% |Hex_ieee|% <https://blogs.mathworks.com/cleve/files/Hex_ieee.m |Hex_ieee|>.% I have two twenty-line MATLAB functions, |ieee2ibm| and |ibm2ieee|,% that convert IEEE-754 floating point to and from IBM hexadecimal format.%% Three statements in the middle of |ieee2ibm| are the key to% the entire operation. The first statement is%%      [~,e] = log2(x)% % With two output arguments, |log2| returns the mantissa% and exponent of an IEEE-754 floating point number.% The mantissa is not needed here.%% The second key statement%%      e = ceil(e/4) %% makes |e| divisible by 4. This turns |e| into the appropriate % hexadecimal exponent so that the third statement%%      f = x.*16.^(-e)% % can produce the hexadecimal mantissa.%   %% |ieee2ibm|%  function z = ieee2ibm(x)%     Convert IEEE-754 to IBM System 360 hexadecimal.%     z = ieee2ibm(x)%        Input x, real column vector.%        Output z, length(x)-by-16 char.%     Example: ieee2ibm(-118.625) = 'C276A00000000000'.%%        s = sign(x);                      % -1, 0, or 1%        x = abs(x);%        x(x < 16^(-65)) = 0;              % Underflow%        x(x >= 16^63) = (1-eps/2)*16^63;  % Overflow%%        [~,e] = log2(x);                  % base 2 exponent%        e = ceil(e/4)                     % base 16 exponent%        f = x.*16.^(-e);                  % base 16 mantissa%%        E = uint64((e+64)*2^56);          % Assemb1e output%        F = uint64(f*2^56);%        S = uint64((1-s)*2^62);           % 1 or 0%        z = dec2hex(S + E + F);           % z = 'ZZFFFFFFFFFFFFFF'% end%% |ibm2ieee|%  function x = ibm2ieee(z)%     Convert IBM System 360 hexadecimal to IEEE-754.%     x = ibm2ieee(z)%        Input z, n-by-16 char.%        Output x, n-by-1 double.%     Example: ibm2ieee('C276A00000000000') = -118.625.%%        E = hex2dec(z(:,1:2));           % Disassemble input%        F1 = hex2dec(z(:,3:8));          % < 16^6%        F2 = hex2dec(z(:,9:end));        % < 16^8%        s = sign(128-E);                 % -1 or 1%%        e = E-(s>0)*64-(s<0)*192;        % base 16 exponent%        f = F1/16^6 + F2/16^14;          % base 16 mantissa%        x = s.*f.*16.^e;%  end%% Examples% Underflow.  Anything |< 16^(-65)| is too small and is flushed to zero.% There are no denormals.%% Overflow.  Anything |>= 16^63| is too large.% There is no |inf| or |NaN|.%%  * 1.0           4110000000000000%  * 0.1           401999999999999A%  * -pi           C13243F6A8885A30%  * 5.3976e-79    0010000000000000%  * 7.2370e+75    7FFFFFFFFFFFFFF8%% Comparison% S/360 hexadecimal has 7 exponent bits, while IEEE-754 has 11.% Consequently, hexadecimal has a much smaller range, 5.4e-79 to 7.2e+75% versus 2.2e-308 to 1.8e+308.%% The base-16 normalization implies that hexadecimal effectively has% between 53 and 56 mantissa bits.  Counting the hidden bit,% IEEE-754 also has 53.  So, the accuracy of the two is pretty much the% same.%% Software% My functions |ieee2ibm| and |ieee2ibm| described above,% modified to handle both single and double,% plus |hex_test|, which does what its name implies, are available at% <https://blogs.mathworks.com/cleve/files/Hex_ieee.m |Hex_ieee|>.%% Homework: What happens?%%  ok = 0;%  for k = 1:10%       x = single(k/10);%       ok(k) = hex_test(x);%  end%  ok##### SOURCE END ##### 54dd3908d741477c9a1ad45b553487d5-->",
            "url": "https://hpc.social/commercial-blog/2024/ibm-hexadecimal-floating-point/",
            
            
            
            
            
            "date_published": "2024-05-25T15:51:21-06:00",
            "date_modified": "2024-05-25T15:51:21-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/a-sixty-year-old-program-for-predicting-the-future/",
            "title": "A Sixty-Year Old Program for Predicting the Future",
            "summary": null,
            "content_text": "The graphics in my post about R^2 were produced by an updated version of a sixty-year old program involving the U.S. census. Originally, the program was based on census data from 1900 to 1960 and sought to predict the population in 1970. The software back then was written in Fortran, the predominate technical programming language a half century ago. I have updated the MATLAB version of the program so that it now uses census data from 1900 to 2020.Contentscensusapp2024Risky BusinessSplinesExponentialsPredictionsConclusionBlogsFMMSoftwarecensusapp2024The latest version of the census application is now available at censusapp2024. Here are the data and the opening screenshot.[t,p]=UScensus;fprintf('%12d%12.3f\\n',[t,p]')        1900      75.995        1910      91.972        1920     105.711        1930     123.203        1940     131.669        1950     150.697        1960     179.323        1970     203.212        1980     226.505        1990     249.633        2000     281.422        2010     308.746        2020     331.449 Risky BusinessToday, MATLAB makes it easier to vary parameters and visualize results, but the underlying mathematical principles are unchanged:Using polynomials to predict the future by extrapolating data is a risky business.One new observation is added to the data every 10 years, when the United States does the decennial census. Originally there were only 7 observations; today there are 13. The program now allows you to fit the data exactly by interpolation with a polynomial of degree 12 or fit it approximately by polynomials of degree less than 12.Here are the least-squares fits with linear, cubic, and degree seven polynomials and the interpolating polynomial. As the polynomial degree increases, so does R^2, until R^2 reaches one with the exact fit.Do any of these fits look like they could be used to predict future population growth? SplinesIn addition to polynomials, you can choose interpolation by three different piecewise Hermite cubics.spline Continuous second derivate, \"not-a-knot\" end condition.pchip Continuous first derivative, strictly shape-preserving.makima Continuous first derivative, relaxed shape-preserving.Since these fits interpolate the data, all their R^2 values are one. But before 1900 and after 2020 these functions are cubic polynomials that are not designed for extrapolation. ExponentialsIt is also possible to do nonlinear least squares fits by an exponential, a logistic sigmoid, and an exponential of an exponetial known as the Gompertz model.exponential exp(b*t+c)logistic a./(1+exp(-b*(t-c)))gompertz a*exp(-b*exp(-c*t))An article by Kathleen and Even Tj&oslash;rve, from the Inland Norway University of Applied Sciences in Elverum, Norway, in the journal PLOS ONE has this to say about Gompertz. \"The Gompertz model has been in use as a growth model even longer than its better known relative, the logistic model. The model, referred to at the time as the Gompertz theoretical law of mortality, was first suggested and first applied by Mr. Benjamin Gompertz in 1825. He fitted it to the relationship between increasing death rate and age, what he referred to as 'the average exhaustions of a man&rsquo;s power to avoid death&rdquo; or the 'portion of his remaining power to oppose destruction.' \" PredictionsWhich fits are suitable for predicting future population size?Despite their large R^2 values, polynomials of any degree are not suitable because outside of the time interval they behave like polynomials and do not provide realistic predictions.Splines were never intended for extrapolation.That leaves the exponentials. The simple exponential model grows exponentially and is not suitable. The Gompertz fit does approach a finite asymptotic limit, but the value is an astronimical a = 2101, corresponding to 2.1 $\\times 10^9$ inhabitants. Hopefully, that is out of the question.The logistic fit has an asymptotic limit of a = 655.7. We recently passed the value of t where p(t) reaches a/2, namely c = 2018. So, the logistic model predicts that the long-term size of the U.S. population will be about twice its current value. Is that realistic? Probably not. ConclusionThe British statistician George Box once said, \"all models are wrong, some are useful.\" This is true of the models of the U. S. Census that I have discussed over the past sixty years.Here is censusapp2024 after all its buttons have been pushed. The extrapolation date is set to 2040. White noise has been added to the data. The model is a fourth-degree polynomial with an R^2 = 0.99. The R^2 value and the error estimates produced by errs account for errors in the data, but not in the model.This particular model does a lousy job of predicting even twenty years in the future. Some of the other models are better, many are worse. Hopefully, their study is worthwhile. BlogsI have made blog posts about the census before, in 2020 and in 2017.FMMPredicting population growth is featured in Computer Methods for Mathematical Computations, by George Forsythe, Mike Malcolm and myself, published by Prentice-Hall in 1977. That textbook is now available from an interesting smorgasbord of sources, including Google Scholar, Amazon, dizhasneatstuff, Abe Books, Internet Archive, PDAS, WorldCat (Chinese).Softwarecensusapp2024 is available at censusapp2024.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>The graphics in <a href=\"https://blogs.mathworks.com/cleve/2024/05/04/r-squared-is-bigger-better/\">my post about <tt>R^2</tt></a> were produced by an updated version of a sixty-year old program involving the U.S. census. Originally, the program was based on census data from 1900 to 1960 and sought to predict the population in 1970. The software back then was written in Fortran, the predominate technical programming language a half century ago. I have updated the MATLAB version of the program so that it now uses census data from 1900 to 2020.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e46c5c76-356a-4c77-aea9-20aae3e00d62\"><tt>censusapp2024</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#80c94327-eb2c-492a-8542-388485d68adc\">Risky Business</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#97d3b2b7-4a14-4003-85b6-c7f854fc8d56\">Splines</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c8daccba-8dbe-4dbf-a0c6-6bb0b66a1e38\">Exponentials</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b1af50c9-b8ea-4211-884b-79f28e12d34f\">Predictions</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#acb134fb-dc9a-43cb-840b-0e7934c63e24\">Conclusion</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#d945ac16-2ef7-4c75-a529-d64d03f50776\">Blogs</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#c7c11668-f0eb-404b-b951-52729c417b5c\">FMM</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#906b81f5-b694-47e8-9dee-fb0586a19671\">Software</a></li></ul></div><h4><tt>censusapp2024</tt><a name=\"e46c5c76-356a-4c77-aea9-20aae3e00d62\"></a></h4><p>The latest version of the census application is now available at <a href=\"https://blogs.mathworks.com/cleve/files/censusapp_2024.m\">censusapp2024</a>. Here are the data and the opening screenshot.</p><pre class=\"codeinput\">[t,p]=UScensus;fprintf(<span class=\"string\">'%12d%12.3f\\n'</span>,[t,p]')</pre><pre class=\"codeoutput\">        1900      75.995        1910      91.972        1920     105.711        1930     123.203        1940     131.669        1950     150.697        1960     179.323        1970     203.212        1980     226.505        1990     249.633        2000     281.422        2010     308.746        2020     331.449</pre><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/screenshot.png\" vspace=\"5\" /> </p><h4>Risky Business<a name=\"80c94327-eb2c-492a-8542-388485d68adc\"></a></h4><p>Today, MATLAB makes it easier to vary parameters and visualize results, but the underlying mathematical principles are unchanged:</p><div><ul><li>Using polynomials to predict the future by extrapolating data is a risky business.</li></ul></div><p>One new observation is added to the data every 10 years, when the United States does the decennial census. Originally there were only 7 observations; today there are 13. The program now allows you to fit the data exactly by interpolation with a polynomial of degree 12 or fit it approximately by polynomials of degree less than 12.</p><p>Here are the least-squares fits with linear, cubic, and degree seven polynomials and the interpolating polynomial. As the polynomial degree increases, so does <tt>R^2</tt>, until <tt>R^2</tt> reaches one with the exact fit.</p><p>Do any of these fits look like they could be used to predict future population growth?</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/polys.png\" vspace=\"5\" /> </p><h4>Splines<a name=\"97d3b2b7-4a14-4003-85b6-c7f854fc8d56\"></a></h4><p>In addition to polynomials, you can choose interpolation by three different <a href=\"https://blogs.mathworks.com/cleve/2019/04/29/makima-piecewise-cubic-interpolation/\">piecewise Hermite cubics</a>.</p><div><ul><li><tt>spline</tt> Continuous second derivate, \"not-a-knot\" end condition.</li><li><tt>pchip</tt> Continuous first derivative, strictly shape-preserving.</li><li><tt>makima</tt> Continuous first derivative, relaxed shape-preserving.</li></ul></div><p>Since these fits interpolate the data, all their <tt>R^2</tt> values are one. But before 1900 and after 2020 these functions are cubic polynomials that are not designed for extrapolation.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/splines.png\" vspace=\"5\" /> </p><h4>Exponentials<a name=\"c8daccba-8dbe-4dbf-a0c6-6bb0b66a1e38\"></a></h4><p>It is also possible to do nonlinear least squares fits by an exponential, a logistic sigmoid, and an exponential of an exponetial known as the Gompertz model.</p><div><ul><li><tt>exponential exp(b*t+c)</tt></li><li><tt>logistic a./(1+exp(-b*(t-c)))</tt></li><li><tt>gompertz a*exp(-b*exp(-c*t))</tt></li></ul></div><p>An article by Kathleen and Even Tj&oslash;rve, from the Inland Norway University of Applied Sciences in Elverum, Norway, in the journal <a href=\"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0178691\">PLOS ONE</a> has this to say about Gompertz. \"The Gompertz model has been in use as a growth model even longer than its better known relative, the logistic model. The model, referred to at the time as the Gompertz theoretical law of mortality, was first suggested and first applied by Mr. Benjamin Gompertz in 1825. He fitted it to the relationship between increasing death rate and age, what he referred to as 'the average exhaustions of a man&rsquo;s power to avoid death&rdquo; or the 'portion of his remaining power to oppose destruction.' \"</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/expos.png\" vspace=\"5\" /> </p><h4>Predictions<a name=\"b1af50c9-b8ea-4211-884b-79f28e12d34f\"></a></h4><p>Which fits are suitable for predicting future population size?</p><p>Despite their large R^2 values, polynomials of any degree are not suitable because outside of the time interval they behave like polynomials and do not provide realistic predictions.</p><p>Splines were never intended for extrapolation.</p><p>That leaves the exponentials. The simple exponential model grows exponentially and is not suitable. The Gompertz fit does approach a finite asymptotic limit, but the value is an astronimical <tt>a</tt> = 2101, corresponding to 2.1 $\\times 10^9$ inhabitants. Hopefully, that is out of the question.</p><p>The logistic fit has an asymptotic limit of <tt>a</tt> = 655.7. We recently passed the value of <tt>t</tt> where <tt>p(t)</tt> reaches <tt>a/2</tt>, namely <tt>c</tt> = 2018. So, the logistic model predicts that the long-term size of the U.S. population will be about twice its current value. Is that realistic? Probably not.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/expos_future.png\" vspace=\"5\" /> </p><h4>Conclusion<a name=\"acb134fb-dc9a-43cb-840b-0e7934c63e24\"></a></h4><p>The British statistician George Box once said, \"all models are wrong, some are useful.\" This is true of the models of the U. S. Census that I have discussed over the past sixty years.</p><p>Here is <tt>censusapp2024</tt> after all its buttons have been pushed. The extrapolation date is set to 2040. White noise has been added to the data. The model is a fourth-degree polynomial with an <tt>R^2</tt> = 0.99. The <tt>R^2</tt> value and the error estimates produced by <tt>errs</tt> account for errors in the data, but not in the model.</p><p>This particular model does a lousy job of predicting even twenty years in the future. Some of the other models are better, many are worse. Hopefully, their study is worthwhile.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/predict.png\" vspace=\"5\" /> </p><h4>Blogs<a name=\"d945ac16-2ef7-4c75-a529-d64d03f50776\"></a></h4><p>I have made blog posts about the census before, in <a href=\"https://blogs.mathworks.com/cleve/2020/11/06/anticipating-official-u-s-census-for-2020\">2020</a> and in <a href=\"https://blogs.mathworks.com/cleve/2017/01/05/fitting-and-extrapolating-us-census-data\">2017</a>.</p><h4>FMM<a name=\"c7c11668-f0eb-404b-b951-52729c417b5c\"></a></h4><p>Predicting population growth is featured in <i>Computer Methods for Mathematical Computations</i>, by George Forsythe, Mike Malcolm and myself, published by Prentice-Hall in 1977. That textbook is now available from an interesting smorgasbord of sources, including <a href=\"https://scholar.google.com/citations?view_op=view_citation&amp;hl=en&amp;user=rldfxOMAAAAJ&amp;citation_for_view=rldfxOMAAAAJ:buQ7SEKw-1sC\">Google Scholar</a>, <a href=\"https://www.amazon.com/exec/obidos/ASIN/0131653326/acmorg-20\">Amazon</a>, <a href=\"https://www.etsy.com/listing/1676520741/vintage-textbook-computer-methods-for\">dizhasneatstuff</a>, <a href=\"https://www.abebooks.com/servlet/BookDetailsPL?bi=22650690419\">Abe Books</a>, <a href=\"https://archive.org/details/computermethodsf00fors/page/18/mode/2up\">Internet Archive</a>, <a href=\"https://www.pdas.com/fmm.html\">PDAS</a>, <a href=\"https://search.worldcat.org/title/1150302502\">WorldCat (Chinese)</a>.</p><h4>Software<a name=\"906b81f5-b694-47e8-9dee-fb0586a19671\"></a></h4><p><tt>censusapp2024</tt> is available at <a href=\"https://blogs.mathworks.com/cleve/files/censusapp_2024.m\">censusapp2024</a>.</p><!--     function grabCode_02c7b1cd1f114211a874bb3dcae61323() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='02c7b1cd1f114211a874bb3dcae61323 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 02c7b1cd1f114211a874bb3dcae61323';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--02c7b1cd1f114211a874bb3dcae61323 ##### SOURCE BEGIN #####%% A Sixty-Year Old Program for Predicting the Future% The graphics in% <https://blogs.mathworks.com/cleve/2024/05/04/r-squared-is-bigger-better/% my post about |R^2|> were produced by an updated version of% a sixty-year old program involving the U.S. census.% Originally, the program was based on census data from 1900 to 1960% and sought to predict the population in 1970.% The software back then was written in Fortran, % the predominate technical programming language a half century ago. % I have updated the MATLAB version of the program% so that it now uses census data from 1900 to 2020.%% |censusapp2024|% The latest version of the census application is now available at% <https://blogs.mathworks.com/cleve/files/censusapp_2024.m% censusapp2024>.  Here are the data and the opening screenshot.   [t,p] = UScensus; fprintf('%12d%12.3f\\n',[t,p]')%%% <<screenshot.png>>%% Risky Business% Today, MATLAB makes it easier to  vary parameters and visualize% results, but the underlying mathematical principles are unchanged:%% * Using polynomials to predict%    the future by extrapolating data is a risky business.%% One new observation is added to the data % every 10 years, when the United States does the decennial census.  % Originally there were only 7 observations; today there are 13.% The program now allows you to fit the data exactly by interpolation with% a polynomial of degree 12 or fit it approximately by% polynomials of degree less than 12. %% Here are the least-squares fits with linear, cubic, and degree seven % polynomials and the interpolating polynomial.% As the polynomial degree increases, so does |R^2|, until |R^2| reaches% one with the exact fit.  %% Do any of these fits look like they could be used to predict future% population growth?%% <<polys.png>>%% Splines% In addition to polynomials, you can choose% interpolation by three different % <https://blogs.mathworks.com/cleve/2019/04/29/makima-piecewise-cubic-interpolation/% piecewise Hermite cubics>.%% * |spline|    Continuous second derivate, \"not-a-knot\" end condition.% * |pchip|     Continuous first derivative, strictly shape-preserving.% * |makima|    Continuous first derivative, relaxed shape-preserving.%% Since these fits interpolate the data, all their |R^2| values are one.% But before 1900 and after 2020 these functions are cubic polynomials% that are not designed for extrapolation.%% <<splines.png>>%% Exponentials% It is also possible to do nonlinear least squares fits by an exponential,% a logistic sigmoid, and an exponential of an exponetial known as the% Gompertz model.%% * |exponential   exp(b*t+c)|% * |logistic      a./(1+exp(-b*(t-c)))|% * |gompertz      a*exp(-b*exp(-c*t))|% % An article by Kathleen and Even Tjørve, from the % Inland Norway University of Applied Sciences in Elverum, Norway,% in the journal% <https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0178691% PLOS ONE> has this to say about Gompertz.% \"The Gompertz model has been in use as a growth model even longer% than its better known relative, the logistic model. The model, % referred to at the time as the Gompertz theoretical law of mortality, was % first suggested and first applied by Mr. Benjamin Gompertz in 1825. % He fitted it to the relationship between increasing death rate and age, % what he referred to as 'the average exhaustions of a man’s power to % avoid death” or the 'portion of his remaining power to oppose % destruction.' \"%% <<expos.png>>%% Predictions% Which fits are suitable for predicting future population size?%% Despite their large R^2 values, polynomials of any degree% are not suitable because outside of the time interval they behave% like polynomials and do not provide realistic predictions.%% Splines were never intended for extrapolation.%% That leaves the exponentials. The simple exponential model grows% exponentially and is not suitable. The Gompertz fit does approach% a finite asymptotic limit, but the value is an astronimical |a| = 2101,% corresponding to 2.1 $\\times 10^9$ inhabitants. Hopefully, that is% out of the question.%% The logistic fit has an asymptotic limit of |a| = 655.7.% We recently passed the value of |t| where |p(t)| reaches |a/2|,% namely |c| = 2018.  So, the logistic model predicts that% the long-term size of the U.S. population will be about twice its% current value.  Is that realistic?  Probably not.%% <<expos_future.png>>%%% Conclusion% The British statistician George Box once said, \"all models are wrong,% some are useful.\"  This is true of the models of the% U. S. Census that I have discussed over the past sixty years.%% Here is |censusapp2024| after all its buttons have been pushed.% The extrapolation date is set to 2040.% White noise has been added to the data.% The model is a fourth-degree polynomial with an |R^2| = 0.99.% The |R^2| value and the error estimates produced by |errs|% account for errors in the data, but not in the model.%% This particular model does a lousy job of predicting even twenty% years in the future.% Some of the other models are better, many are worse.% Hopefully, their study is worthwhile.%% <<predict.png>>%% Blogs% I have made blog posts about the census before, in% <https://blogs.mathworks.com/cleve/2020/11/06/anticipating-official-u-s-census-for-2020% 2020> and in% <https://blogs.mathworks.com/cleve/2017/01/05/fitting-and-extrapolating-us-census-data% 2017>.%% FMM% Predicting population growth is featured in% _Computer Methods for Mathematical Computations_, % by George Forsythe, Mike Malcolm and myself,% published by Prentice-Hall in 1977.% That textbook is now available from an interesting smorgasbord of % sources, including% <https://scholar.google.com/citations?view_op=view_citation&hl=en&user=rldfxOMAAAAJ&citation_for_view=rldfxOMAAAAJ:buQ7SEKw-1sC% Google Scholar>,% <https://www.amazon.com/exec/obidos/ASIN/0131653326/acmorg-20 Amazon>,% <https://www.etsy.com/listing/1676520741/vintage-textbook-computer-methods-for% dizhasneatstuff>,% <https://www.abebooks.com/servlet/BookDetailsPL?bi=22650690419% Abe  Books>,% <https://archive.org/details/computermethodsf00fors/page/18/mode/2up% Internet Archive>,% <https://www.pdas.com/fmm.html PDAS>,% <https://search.worldcat.org/title/1150302502 WorldCat (Chinese)>.%% Software% |censusapp2024| is available at% <https://blogs.mathworks.com/cleve/files/censusapp_2024.m% censusapp2024>.##### SOURCE END ##### 02c7b1cd1f114211a874bb3dcae61323-->",
            "url": "https://hpc.social/commercial-blog/2024/a-sixty-year-old-program-for-predicting-the-future/",
            
            
            
            
            
            "date_published": "2024-05-19T16:55:03-06:00",
            "date_modified": "2024-05-19T16:55:03-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/r-squared-is-bigger-better/",
            "title": "R-squared.  Is Bigger Better?",
            "summary": null,
            "content_text": "The coefficient of determination, R-squared or R^2, is a popular statistic that describes how well a regression model fits data. It measures the proportion of variation in data that is predicted by a model. However, that is all that R^2 measures. It is not appropriate for any other use. For example, it does not support extrapolation beyond the domain of the data. It does not suggest that one model is preferable to another.I recently watched high school students participate in the final round of a national mathematical modeling competition. The teams' presentations were excellent; they were well-prepared, mathematically sophisticated, and informative. Unfortunately, many of the presentations abused R^2. It was used to compare different fits, to justify extrapolation, and to recommend public policy.This was not the first time that I have seen abuses of R^2. As educators and authors of mathematical software, we must do more to expose its limitations. There are dozens of pages and videos on the web describing R^2, but few of them warn about possible misuse.R^2 is easily computed. If y is a vector of observations, f is a fit to the data and ybar = mean(y), then   R^2 = 1 - norm(y-f)^2/norm(y-ybar)^2If the data are centered, then ybar = 0 and R^2 is between zero and one.One of my favorite examples is the United States Census. Here is the population, in millions, every ten years since 1900.   t         p  ____    _______  1900     75.995  1910     91.972  1920    105.711  1930    123.203  1940    131.669  1950    150.697  1960    179.323  1970    203.212  1980    226.505  1990    249.633  2000    281.422  2010    308.746  2020    331.449There are 13 observations. So, we can do a least-squares fit by a polynomial of any degree less than 12 and can interpolate by a polynomial of degree 12. Here are four such fits and the corresponding R^2 values. As the degree increases, so does R^2. Interpolation fits the data exactly and earns a perfect core.Which fit would you choose to predict the population in 2030, or even to estimate the population between census years?R2_census Thanks to Peter Perkins and Tom Lane for help with this post.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p>The <i>coefficient of determination</i>, R-squared or <tt>R^2</tt>, is a popular statistic that describes how well a regression model fits data. It measures the proportion of variation in data that is predicted by a model. However, that is <i>all</i> that <tt>R^2</tt> measures. It is <i>not</i> appropriate for any other use. For example, it does not support extrapolation beyond the domain of the data. It does not suggest that one model is preferable to another.</p><p>I recently watched high school students participate in the final round of a national mathematical modeling competition. The teams' presentations were excellent; they were well-prepared, mathematically sophisticated, and informative. Unfortunately, many of the presentations abused <tt>R^2</tt>. It was used to compare different fits, to justify extrapolation, and to recommend public policy.</p><p>This was not the first time that I have seen abuses of <tt>R^2</tt>. As educators and authors of mathematical software, we must do more to expose its limitations. There are dozens of pages and videos on the web describing <tt>R^2</tt>, but few of them warn about possible misuse.</p><p><tt>R^2</tt> is easily computed. If <tt>y</tt> is a vector of observations, <tt>f</tt> is a fit to the data and <tt>ybar = mean(y)</tt>, then</p><pre>   R^2 = 1 - norm(y-f)^2/norm(y-ybar)^2</pre><p>If the data are centered, then <tt>ybar = 0</tt> and <tt>R^2</tt> is between zero and one.</p><!--/introduction--><p>One of my favorite examples is the United States Census. Here is the population, in millions, every ten years since 1900.</p><pre>   t         p  ____    _______  1900     75.995  1910     91.972  1920    105.711  1930    123.203  1940    131.669  1950    150.697  1960    179.323  1970    203.212  1980    226.505  1990    249.633  2000    281.422  2010    308.746  2020    331.449</pre><p>There are 13 observations. So, we can do a least-squares fit by a polynomial of any degree less than 12 and can interpolate by a polynomial of degree 12. Here are four such fits and the corresponding <tt>R^2</tt> values. As the degree increases, so does <tt>R^2</tt>. Interpolation fits the data exactly and earns a perfect core.</p><p>Which fit would you choose to predict the population in 2030, or even to estimate the population between census years?</p><pre class=\"codeinput\">R2_census</pre><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/R2_blog_01.png\" vspace=\"5\" /> <p>Thanks to Peter Perkins and Tom Lane for help with this post.</p><!--     function grabCode_c876d07b32bc454d8001573d08d2f7aa() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='c876d07b32bc454d8001573d08d2f7aa ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' c876d07b32bc454d8001573d08d2f7aa';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--c876d07b32bc454d8001573d08d2f7aa ##### SOURCE BEGIN #####%% R-squared.  Is Bigger Better?% The _coefficient of determination_, R-squared or |R^2|, is a popular% statistic that describes how well a regression model fits data.% It measures the proportion of variation in data that is% predicted by a model.  However, that is _all_ that |R^2|% measures.  It is _not_ appropriate for any other use.  For example,% it does not support extrapolation beyond the domain of the data.% It does not suggest that one model is preferable to% another.  %% I recently watched high school students participate in the% final round of a national mathematical modeling competition.% The teams' presentations were excellent; they were% well-prepared, mathematically sophisticated, and informative.% Unfortunately, many of the presentations abused |R^2|.  It was% used to compare different fits, to justify extrapolation,% and to recommend public policy.%% This was not the first time that I have seen abuses of |R^2|.% As educators and authors of mathematical software, we must% do more to expose its limitations.  There are dozens of pages% and videos on the web describing |R^2|, but few of them warn% about possible misuse.%% |R^2| is easily computed. % If |y| is a vector of observations, |f| is a fit to% the data and |ybar = mean(y)|, then% %     R^2 = 1 - norm(y-f)^2/norm(y-ybar)^2 %% If the data are centered, then |ybar = 0| and |R^2| is between% zero and one.%%% One of my favorite examples is the United States Census.% Here is the population, in millions, every ten years since 1900. %%     t         p   %    ____    _______%    1900     75.995%    1910     91.972%    1920    105.711%    1930    123.203%    1940    131.669%    1950    150.697%    1960    179.323%    1970    203.212%    1980    226.505%    1990    249.633%    2000    281.422%    2010    308.746%    2020    331.449%% There are 13 observations.  So, we can do a least-squares fit% by a polynomial of any degree less than 12 and can% interpolate by a polynomial of degree 12.  Here are four such% fits and the corresponding |R^2| values.  As the degree increases,% so does |R^2|.  Interpolation fits the data exactly and earns% a perfect core.%% Which fit would you choose to predict the population in 2030,% or even to estimate the population between census years?R2_census%%% Thanks to Peter Perkins and Tom Lane for help with this post.##### SOURCE END ##### c876d07b32bc454d8001573d08d2f7aa-->",
            "url": "https://hpc.social/commercial-blog/2024/r-squared-is-bigger-better/",
            
            
            
            
            
            "date_published": "2024-05-04T14:33:38-06:00",
            "date_modified": "2024-05-04T14:33:38-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/closest-pair-of-points-problem/",
            "title": "Closest Pair of Points Problem",
            "summary": null,
            "content_text": "The Closest Pair of Points problem is a standard topic in an algorithms course today, but when I taught such a course fifty years ago, the algorithm was not yet known.ContentsCalifornia DreamingClosest Pair of PointsPairsDivConCenterComplexityTimingSoftwareReferencesCalifornia DreamingImagine you are driving a car on the Harbor Freeway in southern California with typical Los Angeles traffic conditions. Among the many things you might want to know is which pair of vehicles is nearest each other.This is an instance of the Closest Pair of Points problem:Given the location of n points in the plane, which pair of points is closest to each other? Closest Pair of PointsIt is convenient to represent the points by a vector of complex values. The distance between points z(k) and z(j) is then  d = abs(z(k) - z(j))Here are a few points in the unit square.  The closest pair is highlighted. PairsThe first algorithm you might think of computes the distances between all possible pairs of points and finds the minimum.  This is a brute force approach that requires only a few lines of code.function d = Pairs(z)    % Pairs.    % d = Pairs(z) is the minimum distance between any two elements    % of the complex vector z.    n = length(z);    d = Inf;    for k = 1:n        for j = k+1:n            if abs(z(k) - z(j)) &lt; d                d = abs(z(k) - z(j));            end        end    endendDivConDivCon stands for Divide and Conquer.  In outline, the steps are:Divide the set of points into two halves.Recursively, find the closest pair in each half.Consider the case when the closest pair has one point in each half.Terminate the recursion with sets of two or three points.function d = DivCon(z,sorted)    % DivCon.    % d = DivCon(z) is the minimum distance between any two elements    % of the complex vector z.    %    % d = DivCon(z,true) is a recursive call with ascending real(z).    n = length(z);    if n &lt;= 3       d = Pairs(z);    else       if nargin &lt; 2 || ~sorted           [~,p] = sort(real(z));           z = z(p);       end       m = floor(n/2);       % Left half       dl = DivCon(z(1:m),true)       % Right half       dr = DivCon(z(m+1:end),true);       % Choose       d = min(dl,dr);       % Center strip       ds = Center(z,d);       d = min(ds,d);    endendCenterThe delicate case involves the strip of points near the center dividing line.  The width of the strip is the closest distance found in the recursion.  Any closer pair with one point in each half must be in this strip.function d = Center(z,d)    % Center(z,d) is used by DivCon to examine the    % strip of half-width d about the center point.    n = length(z)    m = floor(n/2);    xh = real(z(m));    [~,p] = sort(imag(z));    z = z(p);    s = [];    for i = 1:n        if abs(real(z(i)) - xh) &lt;  d            s = [s; z(i)];        end    end    ns = length(s);    for k = 1:ns        for j = k+1:ns            if (imag(s(j)) - imag(s(k))) &lt; d &amp;&amp; abs(s(k) - s(j)) &lt; d                d = abs(s(k) - s(j));            end        end    endendComplexityLet n be the number of points.  An asymptotic execution-time complexity analysis involves n approaching infinity.It is not hard to see that the complexity of the brute force algorithm implemented in Pairs is O(n^2).There are dozens of pages on the web devoted to showing that the complexity of the divide and conquer algorithm implemented in DivCon and Center is O(n*log(n)).  The best page that I have seen is the YouTube video by Ling Qi. The key to the analysis is showing that the inner loop in Center is executed at most 7 times for any n.TimingWe measured the execution time of Pairs(z) and DivCon(z) for n from 1,000 to 40,000 and computed the ratios of the two times. The complexity analysis predicts that this ratio is asymptotically  O(n/log(n))Here are the timing results and a least square fit by n/log(n). SoftwareA self-extracting MATLAB archive is available at https://blogs.mathworks.com/cleve/files/TestDivCon_mzip.mReferencesLing Qi, IDeer7, Closest Pair of Points (Divide and Conquer) Explained. https://www.youtube.com/watch?v=6u_hWxbOc7E.Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford. Introduction to Algorithms (4th ed.). MIT Press and McGraw-Hill. ISBN 0-262-04630-X. 1312 pp.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2023a",
            "content_html": "<div class=\"content\"><!--introduction--><p>The Closest Pair of Points problem is a standard topic in an algorithms course today, but when I taught such a course fifty years ago, the algorithm was not yet known.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#0f62a942-c8a3-4395-8f83-9509ed1dabd0\">California Dreaming</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#825b1d10-1532-4f6e-8927-6d9e45dbdb49\">Closest Pair of Points</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#92c53c07-0f81-494a-91a7-c364eb3132ea\"><tt>Pairs</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#05e723c3-e7a0-4091-bb97-463ac017b7e0\"><tt>DivCon</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#387c9a5e-eee6-47d0-be8a-6ea3d8d95f8f\"><tt>Center</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#53330f5c-f9a0-4060-ba34-e5e98e1c9ed4\">Complexity</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#5d10f4df-79d5-46b8-9375-01260abdba40\">Timing</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4de823af-8e67-4218-a471-d8def3204d38\">Software</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#0dc6f3e8-7d3a-4381-8d34-13514fb2cad1\">References</a></li></ul></div><h4>California Dreaming<a name=\"0f62a942-c8a3-4395-8f83-9509ed1dabd0\"></a></h4><p>Imagine you are driving a car on the Harbor Freeway in southern California with typical Los Angeles traffic conditions. Among the many things you might want to know is which pair of vehicles is nearest each other.</p><p>This is an instance of the Closest Pair of Points problem:</p><div><ul><li>Given the location of <tt>n</tt> points in the plane, which pair of points is closest to each other?</li></ul></div><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/traffic.png\" vspace=\"5\" /> </p><h4>Closest Pair of Points<a name=\"825b1d10-1532-4f6e-8927-6d9e45dbdb49\"></a></h4><p>It is convenient to represent the points by a vector of complex values. The distance between points <tt>z(k)</tt> and <tt>z(j)</tt> is then</p><pre>  d = abs(z(k) - z(j))</pre><p>Here are a few points in the unit square.  The closest pair is highlighted.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/pairs.png\" vspace=\"5\" /> </p><h4><tt>Pairs</tt><a name=\"92c53c07-0f81-494a-91a7-c364eb3132ea\"></a></h4><p>The first algorithm you might think of computes the distances between all possible pairs of points and finds the minimum.  This is a brute force approach that requires only a few lines of code.</p><pre>function d = Pairs(z)    % Pairs.    % d = Pairs(z) is the minimum distance between any two elements    % of the complex vector z.</pre><pre>    n = length(z);    d = Inf;    for k = 1:n        for j = k+1:n            if abs(z(k) - z(j)) &lt; d                d = abs(z(k) - z(j));            end        end    endend</pre><h4><tt>DivCon</tt><a name=\"05e723c3-e7a0-4091-bb97-463ac017b7e0\"></a></h4><p>DivCon stands for Divide and Conquer.  In outline, the steps are:</p><div><ul><li>Divide the set of points into two halves.</li></ul></div><div><ul><li>Recursively, find the closest pair in each half.</li></ul></div><div><ul><li>Consider the case when the closest pair has one point in each half.</li></ul></div><div><ul><li>Terminate the recursion with sets of two or three points.</li></ul></div><pre>function d = DivCon(z,sorted)    % DivCon.    % d = DivCon(z) is the minimum distance between any two elements    % of the complex vector z.    %    % d = DivCon(z,true) is a recursive call with ascending real(z).</pre><pre>    n = length(z);    if n &lt;= 3       d = Pairs(z);    else       if nargin &lt; 2 || ~sorted           [~,p] = sort(real(z));           z = z(p);       end       m = floor(n/2);</pre><pre>       % Left half       dl = DivCon(z(1:m),true)</pre><pre>       % Right half       dr = DivCon(z(m+1:end),true);</pre><pre>       % Choose       d = min(dl,dr);</pre><pre>       % Center strip       ds = Center(z,d);       d = min(ds,d);    endend</pre><h4><tt>Center</tt><a name=\"387c9a5e-eee6-47d0-be8a-6ea3d8d95f8f\"></a></h4><p>The delicate case involves the strip of points near the center dividing line.  The width of the strip is the closest distance found in the recursion.  Any closer pair with one point in each half must be in this strip.</p><pre>function d = Center(z,d)    % Center(z,d) is used by DivCon to examine the    % strip of half-width d about the center point.</pre><pre>    n = length(z)    m = floor(n/2);    xh = real(z(m));    [~,p] = sort(imag(z));    z = z(p);    s = [];    for i = 1:n        if abs(real(z(i)) - xh) &lt;  d            s = [s; z(i)];        end    end</pre><pre>    ns = length(s);    for k = 1:ns        for j = k+1:ns            if (imag(s(j)) - imag(s(k))) &lt; d &amp;&amp; abs(s(k) - s(j)) &lt; d                d = abs(s(k) - s(j));            end        end    endend</pre><h4>Complexity<a name=\"53330f5c-f9a0-4060-ba34-e5e98e1c9ed4\"></a></h4><p>Let <tt>n</tt> be the number of points.  An asymptotic execution-time complexity analysis involves <tt>n</tt> approaching infinity.</p><p>It is not hard to see that the complexity of the brute force algorithm implemented in <tt>Pairs</tt> is O(<tt>n</tt>^2).</p><p>There are <a href=\"https://www.google.com/search?q=closest+pair+of+points+(divide+and+conquer)\">dozens of pages on the web</a> devoted to showing that the complexity of the divide and conquer algorithm implemented in <tt>DivCon</tt> and <tt>Center</tt> is O(<tt>n</tt>*log(<tt>n</tt>)).  The best page that I have seen is the <a href=\"https://www.youtube.com/watch?v=6u_hWxbOc7E\">YouTube video by Ling Qi</a>. The key to the analysis is showing that the inner loop in <tt>Center</tt> is executed at most 7 times for any <tt>n</tt>.</p><h4>Timing<a name=\"5d10f4df-79d5-46b8-9375-01260abdba40\"></a></h4><p>We measured the execution time of <tt>Pairs(z)</tt> and <tt>DivCon(z)</tt> for <tt>n</tt> from 1,000 to 40,000 and computed the ratios of the two times. The complexity analysis predicts that this ratio is asymptotically</p><pre>  O(n/log(n))</pre><p>Here are the timing results and a least square fit by <tt>n</tt>/log(<tt>n</tt>).</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/fit.png\" vspace=\"5\" /> </p><h4>Software<a name=\"4de823af-8e67-4218-a471-d8def3204d38\"></a></h4><p>A self-extracting MATLAB archive is available at <a href=\"https://blogs.mathworks.com/cleve/files/TestDivCon_mzip.m\">https://blogs.mathworks.com/cleve/files/TestDivCon_mzip.m</a></p><h4>References<a name=\"0dc6f3e8-7d3a-4381-8d34-13514fb2cad1\"></a></h4><p>Ling Qi, IDeer7, <i>Closest Pair of Points (Divide and Conquer) Explained</i>. <a href=\"https://www.youtube.com/watch?v=6u_hWxbOc7E\">https://www.youtube.com/watch?v=6u_hWxbOc7E</a>.</p><p>Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford. <i>Introduction to Algorithms (4th ed.)</i>. MIT Press and McGraw-Hill. ISBN 0-262-04630-X. 1312 pp.</p><!--     function grabCode_fc0430dede624952a83439140fe547ff() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='fc0430dede624952a83439140fe547ff ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' fc0430dede624952a83439140fe547ff';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2023a<br /></p></div><!--fc0430dede624952a83439140fe547ff ##### SOURCE BEGIN #####%% The Closest Pair of Points Problem% The Closest Pair of Points problem is a standard topic in an% algorithms course today, but when I taught such % a course fifty years ago, the algorithm was not yet known.%% California Dreaming % Imagine you are driving a car on the Harbor Freeway in southern % California with typical Los Angeles traffic conditions.% Among the many things you might want to know is which pair of % vehicles is nearest each other.  %% This is an instance of the Closest Pair of Points problem:%% * Given the location of |n| points in the plane, which pair of points% is closest to each other?%% <<traffic.png>>%%% Closest Pair of Points% It is convenient to represent the points by a vector of complex values. % The distance between points |z(k)| and |z(j)| is then%%    d = abs(z(k) - z(j))%% Here are a few points in the unit square.  The closest pair is% highlighted.%% <<pairs.png>>%%% |Pairs|% The first algorithm you might think of computes the distance% between all possible pairs of points and finds the minimum.  This is% a brute force approach that requires only a few lines of code.%%  function d = Pairs(z)%      % Pairs. %      % d = Pairs(z) is the minimum distance between any two elements%      % of the complex vector z.  %%      n = length(z);%      d = Inf; %      for k = 1:n%          for j = k+1:n%              if abs(z(k) - z(j)) < d%                  d = abs(z(k) - z(j));%              end    %          end%      end%  end%% |DivCon|% DivCon stands for Divide and Conquer.  In outline, the steps are:%% * Divide the set of points into two halves.%% * Recursively, find the closest pair in each half.%% * Consider the case when the closest pair has one point in each half. %% * Terminate the recursion with sets of two or three points.%%  function d = DivCon(z,sorted)%      % DivCon. %      % d = DivCon(z) is the minimum distance between any two elements%      % of the complex vector z. %      %%      % d = DivCon(z,true) is a recursive call with ascending real(z).%%      n = length(z);%      if n <= 3%         d = Pairs(z);%      else%         if nargin < 2 || ~sorted%             [~,p] = sort(real(z));%             z = z(p);%         end%         m = floor(n/2);%   %         % Left half%         dl = DivCon(z(1:m),true)%   %         % Right half%         dr = DivCon(z(m+1:end),true);% %         % Choose%         d = min(dl,dr);%   %         % Center strip%         ds = Center(z,d);%         d = min(ds,d);%      end%  end%% |Center|% The delicate case involves the strip of points near the % center dividing line.  The width of the strip is the closest% distance found in the recursion.  Any closer pair with one point% in each half must be in this strip.%%  function d = Center(z,d)    %      % Center(z,d) is used by DivCon to examine the%      % strip of half-width d about the center point.%%      n = length(z) %      m = floor(n/2);%      xh = real(z(m));%      [~,p] = sort(imag(z));%      z = z(p);%      s = [];%      for i = 1:n%          if abs(real(z(i)) - xh) <  d%              s = [s; z(i)];%          end%      end%%      ns = length(s);%      for k = 1:ns%          for j = k+1:ns%              if (imag(s(j)) - imag(s(k))) < d && abs(s(k) - s(j)) < d%                  d = abs(s(k) - s(j));%              end%          end%      end%  end%% Complexity% Let |n| be the number of points.  An asymptotic execution-time % complexity analysis involves |n| approaching infinity.%% It is not hard to see that the complexity of the brute force algorithm% implemented in |Pairs| is O(|n|^2).  %% There are % <https://www.google.com/search?q=closest+pair+of+points+(divide+and+conquer)% dozens of pages on the web> devoted to showing that the complexity% of the divide and conquer algorithm implemented in |DivCon| and |Center|% is O(|n|*log(|n|)).  The best page that I have seen is the % <https://www.youtube.com/watch?v=6u_hWxbOc7E% YouTube video by Ling Qi>.% The key to the analysis is showing that the inner% loop in |Center| is executed at most 7 times for any |n|.  % %% Timing% We measured the execution time of |Pairs(z)| and |DivCon(z)| for% |n| from 1,000 to 40,000 and computed the ratios of the two times.% The complexity analysis predicts that this ratio is asymptotically%%    O(n/log(n))%% Here are the timing results and a least square fit by |n|/log(|n|).%% <<fit.png>>%% Software% A self-extracting MATLAB archive is available at% <https://blogs.mathworks.com/cleve/files/TestDivCon_mzip.m>%% References%% Ling Qi, IDeer7, _Closest Pair of Points (Divide and Conquer) Explained_.% <https://www.youtube.com/watch?v=6u_hWxbOc7E>.%% Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; % Stein, Clifford. _Introduction to Algorithms (4th ed.)_.% MIT Press and McGraw-Hill. ISBN 0-262-04630-X. 1312 pp.##### SOURCE END ##### fc0430dede624952a83439140fe547ff-->",
            "url": "https://hpc.social/commercial-blog/2024/closest-pair-of-points-problem/",
            
            
            
            
            
            "date_published": "2024-03-28T20:00:00-06:00",
            "date_modified": "2024-03-28T20:00:00-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/twenty-years-of-parallel-matlab/",
            "title": "Twenty Years of Parallel MATLAB",
            "summary": null,
            "content_text": "I have just returned from the MathWorks company meeting celebrating our 40th Anniversary. In one of the presentations, Jos Martin described how Parallel MATLAB was introduced almost twenty years ago.  Here are a few slides from Jos's talk.ContentsWhy There Wasn't Any Parallel MATLABTwenty-seven Parallel MATLABsDistributed Computing ToolboxSupercomputing ConferenceBill GatesNow There is a Parallel MATLABWhy There Wasn't Any Parallel MATLABIn MATLAB News and Notes for spring 1995, I wrote a one-page Cleve's Corner titled \"Why there isn't any parallel MATLAB.\" There were three reasons.Memory model.  MATLAB would generate a matrix on a host machine, split it into roughly equally sized submatrices, and distribute each submatrix to a node.  But it took far longer to distribute the data then it did to do the computation.  Any matrix that would fit into memory on the host was too small to make  effective use of the parallel computer itself.Granularity.  The amount of work involved in a single matrix computation is too little to be effectively parallelized.Business situation.  There are too few potential customers at this time (1995) to undertake fundamental changes in MATLAB's architecture.This one-page note turned out to be one of my most widely cited publications.. .Twenty-seven Parallel MATLABsA 2001 survey by Ron Choy at MIT found 27 different projects that were developing some way to run MATLAB in parallel. All of them involved a MATLAB-based host program calling a fixed library of parallel functions, written in some other language, on the workers. None of the systems were capable of running arbitrary MATLAB programs in parallel.  None of them were MathWorks products.Distributed Computing ToolboxMathWorks introduced the MATLAB Distributed Computing Toolbox in November 2004. We improvised this demo setup at our first Supercomputing Conference, SC2004 in Pittsburg, .Supercomputing ConferenceA year later, SC2005 was in Seattle and our booth featured four worker machines on a wire shelving unit purchased at a local Home Depot. .Bill GatesSince Seattle was his home town, Bill Gates gave the keynote talk at SC2005.  He announced that Microsoft was going into High Performance Computing and used the MathWorks Distributed Computing Toolbox in his demonstration. .Now There is a Parallel MATLABSo, a little more than ten years after the first Cleve's Corner about parallel computing, a second Cleve's Corner in News and Notes was able to reverse the situation.. Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2023a",
            "content_html": "<div class=\"content\"><!--introduction--><p>I have just returned from the MathWorks company meeting celebrating our 40th Anniversary. In one of the presentations, Jos Martin described how Parallel MATLAB was introduced almost twenty years ago.  Here are a few slides from Jos's talk.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#eb526631-dc7b-4d6f-b20d-0df539aebec4\">Why There Wasn't Any Parallel MATLAB</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#46778056-77d3-4a5c-b5fe-b52d97931018\">Twenty-seven Parallel MATLABs</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#3df2759d-d597-4b19-9c05-c9112532cadc\">Distributed Computing Toolbox</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#7c5caf72-f3b8-485b-8b12-1c06813855e0\">Supercomputing Conference</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#9266c227-5e9f-4e31-9d7d-a8d89fc7b2d1\">Bill Gates</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#85862059-8ccf-4c67-b17b-018619edab9f\">Now There is a Parallel MATLAB</a></li></ul></div><h4>Why There Wasn't Any Parallel MATLAB<a name=\"eb526631-dc7b-4d6f-b20d-0df539aebec4\"></a></h4><p>In <i>MATLAB News and Notes</i> for spring 1995, I wrote a one-page Cleve's Corner titled \"Why there isn't any parallel MATLAB.\" There were three reasons.</p><div><ul><li>Memory model.  MATLAB would generate a matrix on a host machine, split it into roughly equally sized submatrices, and distribute each submatrix to a node.  But it took far longer to distribute the data then it did to do the computation.  Any matrix that would fit into memory on the host was too small to make  effective use of the parallel computer itself.</li></ul></div><div><ul><li>Granularity.  The amount of work involved in a single matrix computation is too little to be effectively parallelized.</li></ul></div><div><ul><li>Business situation.  There are too few potential customers at this time (1995) to undertake fundamental changes in MATLAB's architecture.</li></ul></div><p>This one-page note turned out to be one of my most widely cited publications.</p><p>.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Picture3.png\" vspace=\"5\" /> </p><p>.</p><h4>Twenty-seven Parallel MATLABs<a name=\"46778056-77d3-4a5c-b5fe-b52d97931018\"></a></h4><p><a href=\"https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=0b90279927d97c5e4e2ae48a07f5a44f1abe7bac\">A 2001 survey by Ron Choy</a> at MIT found 27 different projects that were developing some way to run MATLAB in parallel. All of them involved a MATLAB-based host program calling a fixed library of parallel functions, written in some other language, on the workers. None of the systems were capable of running arbitrary MATLAB programs in parallel.  None of them were MathWorks products.</p><h4>Distributed Computing Toolbox<a name=\"3df2759d-d597-4b19-9c05-c9112532cadc\"></a></h4><p><a href=\"https://www.hpcwire.com/2004/11/09/mathworks-unveils-computing-toolbox-for-matlab-and-simulink/\">MathWorks introduced</a> the MATLAB Distributed Computing Toolbox in November 2004. We improvised this demo setup at our first Supercomputing Conference, SC2004 in Pittsburg,</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/SC2004.png\" vspace=\"5\" /> </p><p>.</p><h4>Supercomputing Conference<a name=\"7c5caf72-f3b8-485b-8b12-1c06813855e0\"></a></h4><p>A year later, SC2005 was in Seattle and our booth featured four worker machines on a wire shelving unit purchased at a local Home Depot.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/SC2005.png\" vspace=\"5\" /> </p><p>.</p><h4>Bill Gates<a name=\"9266c227-5e9f-4e31-9d7d-a8d89fc7b2d1\"></a></h4><p>Since Seattle was his home town, Bill Gates gave the keynote talk at SC2005.  He announced that Microsoft was going into High Performance Computing and used the MathWorks Distributed Computing Toolbox in his demonstration.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Gates.png\" vspace=\"5\" /> </p><p>.</p><h4>Now There is a Parallel MATLAB<a name=\"85862059-8ccf-4c67-b17b-018619edab9f\"></a></h4><p>So, a little more than ten years after the first Cleve's Corner about parallel computing, a second Cleve's Corner in <i>News and Notes</i> was able to reverse the situation.</p><p>.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Picture2.png\" vspace=\"5\" /> </p><!--     function grabCode_14a73fc939e74d6a9266b6fa2deda9a3() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='14a73fc939e74d6a9266b6fa2deda9a3 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 14a73fc939e74d6a9266b6fa2deda9a3';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2023a<br /></p></div><!--14a73fc939e74d6a9266b6fa2deda9a3 ##### SOURCE BEGIN #####%% Twenty Years of Parallel MATLAB% I have just returned from the MathWorks company meeting% celebrating our 40th Anniversary. In one of the presentations,% Jos Martin described how Parallel MATLAB was introduced % almost twenty years ago.  Here are a few slides% from Jos's talk.%% Why There Wasn't Any Parallel MATLAB% In _MATLAB News and Notes_ for spring 1995, I wrote a one-page% Cleve's Corner titled \"Why there isn't any parallel MATLAB.\"% There were three reasons.%% * Memory model.  MATLAB would generate a matrix on a host machine,% split it into roughly equally sized submatrices, and distribute% each submatrix to a node.  But it took far longer to distribute% the data then it did to do the computation.  Any matrix that would% fit into memory on the host was too small to make  effective use% of the parallel computer itself.%% * Granularity.  The amount of work involved in a single matrix % computation is too little to be effectively parallelized. %% * Business situation.  There are too few potential customers% at this time (1995) to undertake fundamental changes in % MATLAB's architecture.% % This one-page note turned out to be one of my most widely cited% publications.%% .% % <<Picture3.png>>%% .%%% Twenty-seven Parallel MATLABs% <https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=0b90279927d97c5e4e2ae48a07f5a44f1abe7bac% A 2001 survey by Ron Choy> at MIT found 27 different projects% that were developing some way to run MATLAB in parallel.  % All of them involved a MATLAB-based host program calling a fixed % library of parallel functions, written in some other language,% on the workers.% None of the systems were capable of running arbitrary MATLAB programs% in parallel.  None of them were MathWorks products.%%%% Distributed Computing Toolbox% <https://www.hpcwire.com/2004/11/09/mathworks-unveils-computing-toolbox-for-matlab-and-simulink/% MathWorks introduced>% the MATLAB Distributed Computing Toolbox in November 2004.% We improvised this demo setup at our first Supercomputing% Conference, SC2004 in Pittsburg,%% <<SC2004.png>>%% .%%% Supercomputing Conference% A year later, SC2005 was in Seattle and our booth featured four worker% machines on a wire shelving unit purchased at a local Home Depot.%% <<SC2005.png>>%% .%%% Bill Gates% Since Seattle was his home town, Bill Gates gave the keynote talk at% SC2005.  He announced that Microsoft was going into High Performance% Computing and used the MathWorks Distributed Computing Toolbox in% his demonstration.%% <<Gates.png>>%% .%%% Now There is a Parallel MATLAB% So, a little more than ten years after the first Cleve's Corner% about parallel computing, a second Cleve's Corner in _News and Notes_% was able to reverse the situation. %% .%% <<Picture2.png>>%##### SOURCE END ##### 14a73fc939e74d6a9266b6fa2deda9a3-->",
            "url": "https://hpc.social/commercial-blog/2024/twenty-years-of-parallel-matlab/",
            
            
            
            
            
            "date_published": "2024-03-15T18:05:58-06:00",
            "date_modified": "2024-03-15T18:05:58-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/chaotic-swinging-sticks/",
            "title": "Chaotic Swinging Sticks",
            "summary": null,
            "content_text": "The Swinging Sticks is a kinetic sculpture that exhibits chaotic motion. The device became very popular after it upstaged Tony Stark in Iron Man 2. My daughter Carolyn gave me a desktop version of Swinging Sticks for Christmas. I immediately set out to simulate it. ContentsChaotic MotionSwinging SticksSculptureCodeChaotic MotionChaotic motion appears random but isn't. Once the motion begins, the initial conditions together with Newton's law of motion, F = ma, determine subsequent behavior. There are no random forces. It may be difficult to predict positions, but they are well-determined, nonetheless.A classic example of chaotic motion is the double pendulum. One mass at end of a massless string swings about a fixed pivot, and a second mass is attached by a massless string to the first. My simulator of the classis double pendulum is available in Cleve's Lab, swinger, and a movie is available here pendulum movie.Swinging SticksThe swinging sticks are similar to the double pendulum. The sticks are two rods with uniformly distributed mass, different lengths and off-center pivots. The best way to view the motion is to download this code and run it in your own MATLAB. Otherwise, here in a short slow-motion animated GIF. And, here is a longer Swinging Sticks Video.The motion of the shorter of the two rods is chaotic. Here are the orbits traced by the ends of the short rod. SculptureSwinging Sticks sculptures are available in various sizes and colors. The Swinging Sticks.Our mathematical model is of a frictionless perpetual motion machine. The real sculptures have an ingenious electromagnetic controller in the base that is claimed to run for two years on four AA batteries. Mine has been running since Christmas. An excellent YouTube video by Wayne Schmidt describes the controller.Codehttps://blogs.mathworks.com/cleve/files/swinging_sticks.mGet       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2024a",
            "content_html": "<div class=\"content\"><!--introduction--><p><a href=\"https://swingingsticks.com\">The Swinging Sticks</a> is a kinetic sculpture that exhibits chaotic motion. The device became very popular after it upstaged Tony Stark in <a href=\"https://www.google.com/search?q=youtube+swinging+sticks+iron+man#fpstate=ive&amp;vld=cid:6a6186e3,vid:sbbjhNLiL3c,st:0\">Iron Man 2</a>. My daughter Carolyn gave me a desktop version of Swinging Sticks for Christmas. I immediately set out to simulate it.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sculpture.png\" vspace=\"5\" /> </p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#a9143ab6-8f3f-482e-92ee-35cf3f9190de\">Chaotic Motion</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#bf97f3ad-e2a5-4421-9892-a8466b18022a\">Swinging Sticks</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#3862e132-f69e-4702-85b6-6aeeb1406839\">Sculpture</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#dd331fb2-a5f9-42c6-a538-5b2cb8c9b486\">Code</a></li></ul></div><h4>Chaotic Motion<a name=\"a9143ab6-8f3f-482e-92ee-35cf3f9190de\"></a></h4><p>Chaotic motion appears random but isn't. Once the motion begins, the initial conditions together with Newton's law of motion, F = ma, determine subsequent behavior. There are no random forces. It may be difficult to predict positions, but they are well-determined, nonetheless.</p><p>A classic example of chaotic motion is the double pendulum. One mass at end of a massless string swings about a fixed pivot, and a second mass is attached by a massless string to the first. My simulator of the classis double pendulum is available in Cleve's Lab, <a href=\"https://blogs.mathworks.com/cleve/2016/10/31/introducing-cleves-laboratory\">swinger</a>, and a movie is available here <a href=\"https://blogs.mathworks.com/cleve/files/swinger.mp4\">pendulum movie</a>.</p><h4>Swinging Sticks<a name=\"bf97f3ad-e2a5-4421-9892-a8466b18022a\"></a></h4><p>The swinging sticks are similar to the double pendulum. The sticks are two rods with uniformly distributed mass, different lengths and off-center pivots. The best way to view the motion is to download <a href=\"https://blogs.mathworks.com/cleve/files/swinging_sticks.m\">this code</a> and run it in your own MATLAB. Otherwise, here in a short slow-motion animated GIF.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/sticks_gif.gif\" vspace=\"5\" /> </p><p>And, here is a longer <a href=\"https://blogs.mathworks.com/cleve/files/sticks.mp4\">Swinging Sticks Video</a>.</p><p>The motion of the shorter of the two rods is chaotic. Here are the orbits traced by the ends of the short rod.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/chaos.png\" vspace=\"5\" /> </p><h4>Sculpture<a name=\"3862e132-f69e-4702-85b6-6aeeb1406839\"></a></h4><p>Swinging Sticks sculptures are available in various sizes and colors. <a href=\"https://swingingsticks.com\">The Swinging Sticks</a>.</p><p>Our mathematical model is of a frictionless perpetual motion machine. The real sculptures have an ingenious electromagnetic controller in the base that is claimed to run for two years on four AA batteries. Mine has been running since Christmas. An excellent <a href=\"https://www.youtube.com/watch?v=PWg6TG2bkFU\">YouTube video</a> by Wayne Schmidt describes the controller.</p><h4>Code<a name=\"dd331fb2-a5f9-42c6-a538-5b2cb8c9b486\"></a></h4><p><a href=\"https://blogs.mathworks.com/cleve/files/swinging_sticks.m\">https://blogs.mathworks.com/cleve/files/swinging_sticks.m</a></p><!--     function grabCode_3007bf720ec7402cb273ace1e6e2d61e() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='3007bf720ec7402cb273ace1e6e2d61e ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 3007bf720ec7402cb273ace1e6e2d61e';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2024a<br /></p></div><!--3007bf720ec7402cb273ace1e6e2d61e ##### SOURCE BEGIN #####%% Chaotic Swinging Sticks% <https://swingingsticks.com  % The Swinging Sticks> is a kinetic sculpture that exhibits chaotic motion.% The device became very popular after it upstaged Tony Stark in% <https://www.google.com/search?q=youtube+swinging+sticks+iron+man#fpstate=ive&vld=cid:6a6186e3,vid:sbbjhNLiL3c,st:0% Iron Man 2>.% My daughter Carolyn gave me a desktop version of Swinging Sticks% for Christmas.  I immediately set out to simulate it.%% <<sculpture.png>>%% Chaotic Motion% Chaotic motion appears random but isn't. Once the motion begins, the% initial conditions together with Newton's law of motion, F = ma,% determine subsequent behavior.  There are no random forces.  It may be% difficult to predict positions, but they are well-determined,% nonetheless.%% A classic example of chaotic motion is the double pendulum.% One mass at end of a massless string swings about a fixed pivot, and% a second mass is attached by a massless string to the first.% My simulator of the classis double pendulum is available in Cleve's Lab,% <https://blogs.mathworks.com/cleve/2016/10/31/introducing-cleves-laboratory% swinger>, and a movie is available here% <https://blogs.mathworks.com/cleve/files/swinger.mp4 pendulum movie>.%% Swinging Sticks% The swinging sticks are similar to the double pendulum.% The sticks are two rods with uniformly distributed mass,% different lengths and off-center pivots.% The best way to view the motion is to download% <https://blogs.mathworks.com/cleve/files/swinging_sticks.m% this code> and run it in your own MATLAB.% Otherwise, here in a short slow-motion animated GIF.% % <<sticks_gif.gif>>%% And, here is a longer % <https://blogs.mathworks.com/cleve/files/sticks.mp4% Swinging Sticks Video>.%% The motion of the shorter of the two rods is chaotic.  Here are the% orbits traced by the ends of the short rod.%% <<chaos.png>>%% Sculpture% Swinging Sticks sculptures are available in various sizes and % colors. <https://swingingsticks.com  The Swinging Sticks>.%% Our mathematical model is of a frictionless perpetual motion machine.% The real sculptures have an ingenious electromagnetic controller in the% base that is claimed to run for two years on four AA batteries.% Mine has been running since Christmas.% An excellent <https://www.youtube.com/watch?v=PWg6TG2bkFU YouTube video>% by Wayne Schmidt describes the controller.%% Code% <https://blogs.mathworks.com/cleve/files/swinging_sticks.m>##### SOURCE END ##### 3007bf720ec7402cb273ace1e6e2d61e-->",
            "url": "https://hpc.social/commercial-blog/2024/chaotic-swinging-sticks/",
            
            
            
            
            
            "date_published": "2024-02-20T16:24:41-07:00",
            "date_modified": "2024-02-20T16:24:41-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/nick-higham-1961-2024/",
            "title": "Nick Higham (1961-2024)",
            "summary": null,
            "content_text": "Nick Higham passed away last Saturday. Nick was a close friend of mine and a great friend of MATLAB. I will leave it to others to describe his research and teaching, his many honors, and his service to our community, especially SIAM. I have just a few, more personal, comments. ContentsNA DigestBooksMATLABgalleryexpmGoodbyeNA DigestMonday's NA Digest led off with this from Nick's wife Francoise and his brother Des.Subject: Nick Higham (1961--2024)With great sadness we report that Nick Higham, Royal Society ResearchProfessor and Richardson Professor of Applied Mathematics at theUniversity of Manchester, passed away on January 20, 2024, at the ageof 62 after an 18 month struggle with a form of blood cancer. Anobituary describing Nick's research and leadership contributions willappear in SIAM News in due course.Francoise Tisseur and Des HighamBooksNick was an excellent writer, and an excellent writer about writing.Here are the covers of his six books. SIAM published five of these.  Two are surveys of Nick's research on the accuracy of numeric algorithms and the computation of matrix functions. Two more, one of them coauthored with Dennis Sherwood, are guides to mathematical exposition.MATLAB Guide, by Des and Nick Higham, is one of my favorite books about MATLAB. It is a succinct introduction for newcomers and a valuable refresher for old-timers. The third edition, published in 2017, includes chapters on object-oriented computing, parallel computing, the Symbolic Math Toolbox and other recent additions.  Be sure to check out the MATLAB Guide web site.The only non-SIAM book pictured above is The Princeton Companion to Applied Mathematics.  It is over 1,000 pages long and features nearly 200 sections written by an international team of experts. Nick is the editor-in-chief and wrote many of the sections himself.MATLABHere is a Word Cloud from Nick's home page.  It shows the frequency of the tags for his blog and confirms his interest in MATLAB. galleryAnyone interested in numerical linear algebra should also be interested in the gallery function, which is based on Nick's work.  Enter&gt;&gt; doc galleryScroll down to matrixname and investigate over 70 different test matrices.If you find gallery irresistible, take a look at anymatrix, an extensible matrix collection, by Nick and Mantas Mikaitis.expmThis is very personal for me. Thirty or forty years ago, Charlie Van Loan and I were regarded as authorities on computing the matrix exponential, $e^{A}$. The function expm has been in MATLAB since its very beginning. Around twenty years ago, we ceded the authority title to Nick and Awad Al-Mohy. Their code for matrix exponential is now the basis for expm.GoodbyeOur business has lost one of its superstars. I have lost a good friend, way too soon. Goodbye Nick.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2023a",
            "content_html": "<div class=\"content\"><!--introduction--><p>Nick Higham passed away last Saturday. Nick was a close friend of mine and a great friend of MATLAB. I will leave it to others to describe his research and teaching, his many honors, and his service to our community, especially SIAM. I have just a few, more personal, comments.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/nick.png\" vspace=\"5\" /> </p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#30541246-5968-4618-8d07-532c62fe2e2a\">NA Digest</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#10c6af44-05e5-4256-a91f-c92e2d648323\">Books</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b0e711ae-b3d7-419b-ae0e-150ac24e7133\">MATLAB</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#bc2af9b1-f993-4890-87ca-98922e77688e\"><tt>gallery</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#81a97ac0-cabd-445f-9a83-2791ffc04ac4\"><tt>expm</tt></a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#6b361048-1e6f-40a5-8b30-1b8f7361e4b8\">Goodbye</a></li></ul></div><h4>NA Digest<a name=\"30541246-5968-4618-8d07-532c62fe2e2a\"></a></h4><p>Monday's NA Digest led off with this from Nick's wife Francoise and his brother Des.</p><pre>Subject: Nick Higham (1961--2024)</pre><pre>With great sadness we report that Nick Higham, Royal Society ResearchProfessor and Richardson Professor of Applied Mathematics at theUniversity of Manchester, passed away on January 20, 2024, at the ageof 62 after an 18 month struggle with a form of blood cancer. Anobituary describing Nick's research and leadership contributions willappear in SIAM News in due course.</pre><pre>Francoise Tisseur and Des Higham</pre><h4>Books<a name=\"10c6af44-05e5-4256-a91f-c92e2d648323\"></a></h4><p>Nick was an excellent writer, and an excellent writer about writing.</p><p>Here are the covers of his six books.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/book_covers.png\" vspace=\"5\" /> </p><p>SIAM published five of these.  Two are surveys of Nick's research on the accuracy of numeric algorithms and the computation of matrix functions. Two more, one of them coauthored with Dennis Sherwood, are guides to mathematical exposition.</p><p><i>MATLAB Guide</i>, by Des and Nick Higham, is one of my favorite books about MATLAB. It is a succinct introduction for newcomers and a valuable refresher for old-timers. The third edition, published in 2017, includes chapters on object-oriented computing, parallel computing, the Symbolic Math Toolbox and other recent additions.  Be sure to check out the <a href=\"https://nhigham.com/matlab-guide/\"><i>MATLAB Guide</i> web site</a>.</p><p>The only non-SIAM book pictured above is <a href=\"https://nhigham.com/the-princeton-companion-to-applied-mathematics/\"><i>The Princeton Companion to Applied Mathematics</i></a>.  It is over 1,000 pages long and features nearly 200 sections written by an <a href=\"https://assets.press.princeton.edu/chapters/s1_10592.pdf\">international team of experts</a>. Nick is the editor-in-chief and wrote many of the sections himself.</p><h4>MATLAB<a name=\"b0e711ae-b3d7-419b-ae0e-150ac24e7133\"></a></h4><p>Here is a <a href=\"https://nhigham.com\">Word Cloud</a> from Nick's home page.  It shows the frequency of the tags for his blog and confirms his interest in MATLAB.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/word_cloud.png\" vspace=\"5\" /> </p><h4><tt>gallery</tt><a name=\"bc2af9b1-f993-4890-87ca-98922e77688e\"></a></h4><p>Anyone interested in numerical linear algebra should also be interested in the <tt>gallery</tt> function, which is based on Nick's work.  Enter</p><pre class=\"language-matlab\">&gt;&gt; doc gallery</pre><p>Scroll down to <tt>matrixname</tt> and investigate over 70 different test matrices.</p><p>If you find <tt>gallery</tt> irresistible, take a look at <a href=\"https://nhigham.com/2021/11/09/anymatrix/\"><tt>anymatrix</tt></a>, an extensible matrix collection, by Nick and Mantas Mikaitis.</p><h4><tt>expm</tt><a name=\"81a97ac0-cabd-445f-9a83-2791ffc04ac4\"></a></h4><p>This is very personal for me. Thirty or forty years ago, Charlie Van Loan and I were regarded as authorities on computing the matrix exponential, $e^{A}$. The function <tt>expm</tt> has been in MATLAB since its very beginning. Around twenty years ago, we ceded the authority title to Nick and Awad Al-Mohy. <a href=\"https://eprints.maths.manchester.ac.uk/1300/1/alhi09a.pdf\">Their code</a> for matrix exponential is now the basis for <tt>expm</tt>.</p><h4>Goodbye<a name=\"6b361048-1e6f-40a5-8b30-1b8f7361e4b8\"></a></h4><p>Our business has lost one of its superstars. I have lost a good friend, way too soon. Goodbye Nick.</p><!--     function grabCode_062397ce6659461698190fb5b2757714() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='062397ce6659461698190fb5b2757714 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 062397ce6659461698190fb5b2757714';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2023a<br /></p></div><!--062397ce6659461698190fb5b2757714 ##### SOURCE BEGIN #####%% Nick Higham (1961-2024)% Nick Higham passed away last Saturday. Nick was a close friend of mine% and a great friend of MATLAB. I will leave it to others to describe his% research and teaching, his many honors, and his service to our community,% especially SIAM. I have just a few, more personal, comments.%% <<nick.png>>%%% NA Digest%% Monday's NA Digest led off with this from% Nick's wife Francoise and his brother Des.%%  Subject: Nick Higham (1961REPLACE_WITH_DASH_DASH2024)%  %  With great sadness we report that Nick Higham, Royal Society Research%  Professor and Richardson Professor of Applied Mathematics at the%  University of Manchester, passed away on January 20, 2024, at the age%  of 62 after an 18 month struggle with a form of blood cancer. An%  obituary describing Nick's research and leadership contributions will%  appear in SIAM News in due course.%  %  Francoise Tisseur and Des Higham%%% Books% Nick was an excellent writer, and an excellent writer about writing.%% Here are the covers of his six books.%% <<book_covers.png>>%% SIAM published five of these.  Two are surveys of Nick's research% on the accuracy of numeric algorithms and% the computation of matrix functions.% Two more, one of them coauthored with Dennis Sherwood, are% guides to mathematical exposition.%% _MATLAB Guide_, by Des and Nick Higham, is one of my% favorite books about MATLAB.% It is a succinct introduction for newcomers% and a valuable refresher for old-timers.% The third edition, published in 2017, includes chapters on% object-oriented computing, parallel computing, the Symbolic Math% Toolbox and other recent additions.  Be sure to check out the% <https://nhigham.com/matlab-guide/ _MATLAB Guide_ web site>.%% The only non-SIAM book pictured above is% <https://nhigham.com/the-princeton-companion-to-applied-mathematics/% _The Princeton Companion to Applied Mathematics_>.  It is over 1,000 pages long and features% nearly 200 sections written by an % <https://assets.press.princeton.edu/chapters/s1_10592.pdf % international team of experts>.% Nick is the editor-in-chief and wrote many of the sections himself.%% MATLAB% Here is a <https://nhigham.com Word Cloud> from% Nick's home page.  It shows the frequency of the tags for his blog% and confirms his interest in MATLAB.%% <<word_cloud.png>>%%% |gallery|% Anyone interested in numerical linear algebra should also be interested% in the |gallery| function, which is based on Nick's work.  Enter%%   >> doc gallery%% Scroll down to |matrixname| and investigate over 70 different test% matrices. %% If you find |gallery| irresistible, take a look at% <https://nhigham.com/2021/11/09/anymatrix/ |anymatrix|>, % an extensible matrix collection, by Nick and Mantas Mikaitis.%% |expm|% This is very personal for me.% Thirty or forty years ago, Charlie Van Loan and I were regarded as% authorities on computing the matrix exponential, $e^{A}$.  % The function |expm| has been in MATLAB since its very beginning.% Around twenty years ago, we ceded the authority title to Nick and% Awad Al-Mohy.  % <https://eprints.maths.manchester.ac.uk/1300/1/alhi09a.pdf% Their code> for matrix exponential is now the basis for |expm|.%% Goodbye% Our business has lost one of its superstars.% I have lost a good friend, way too soon.% Goodbye Nick.##### SOURCE END ##### 062397ce6659461698190fb5b2757714-->",
            "url": "https://hpc.social/commercial-blog/2024/nick-higham-1961-2024/",
            
            
            
            
            
            "date_published": "2024-01-25T16:36:37-07:00",
            "date_modified": "2024-01-25T16:36:37-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2024/exponential-fitting-separable-least-squares-and-quahogs/",
            "title": "Exponential Fitting, Separable Least Squares, and Quahogs",
            "summary": null,
            "content_text": "We have been investigating a recent bug report about fitnlm, the Statistics and Machine Learning Toolbox function for robust fitting of nonlinear models.ContentsQuahogsAcidificationSeparable Least SquaresCentering DataExponential FittingResultsSoftwareThanksQuahogs The bug report comes from Greg Pelletier, an independent research scientist and biogeochemical modeler in Olympia, Washington. Greg has been studying the vulnerability of sensitive marine organisms to increases in ocean acidification.  One of the most important of these organisms is Mercenaria mercenaria, the hard clam.Especially here in New England, hard clams are known by their traditional Native American name, quahog. They have a well-deserved reputation for making excellent clam chowder.AcidificationWe are all aware of increasing levels of carbon dioxide in the earth's atmosphere.  We may not be as aware of the effect this increase has on the health of the earth's oceans.  According to NOAA, the ocean absorbs about 30% of the atmospheric carbon dioxide.A definitive and controversial 2009 paper by Justin Ries and colleagues, then at the Woods Hole Oceanographic Institution, is \"Marine calcifiers exhibit mixed responses to CO2-induced ocean acidification\", https://doi.org/10.1130/G30210A.1. The hard clam example in Greg's bug report comes from figure 1K in the Ries et al. paper.The independent variable in experiments is the ratio of alkalinity of sea water to the concentration of dissolved inorganic carbon. The dependent variable is the calcification rate, which compares how fast the organism builds its shells to how fast the shells are dissolving. Separable Least SquaresThe model chosen by Ries at al. is$$ y \\approx \\beta_1 + \\beta_2 e^{\\lambda t} $$where $t$ is the ratio of alkalinity to dissolved carbon and $y$ is the calcification rate. The data have only four distinct values of $t$, with several observations of $y$ at each value.The parameters $\\beta_1$, $\\beta_2$ and $\\lambda$ are determined by least squares curve fit.  This is a separable least squares problem. For any given value of $\\lambda$, the parameters $\\beta_1$ and $\\beta_2$ occur linearly and the least squares solution can be obtained by MATLAB's backslash.Gene Golub and Victor Pereyra described separable least squares in 1973 and proposed solving it by a variable projection algorithm. Since 1973 a number of people, including Pereyra, Linda Kaufman, Fred Krogh, John Bolstadt and David Gay, have contributed to the development of a series of Fortran programs named varpro. In 2011, Dianne O'Leary and Burt Rust created a MATLAB version of varpro.  Their report, https://www.cs.umd.edu/~oleary/software/varpro/, is a good background source, as well as documentation for varpro.m.I have a section on separable least squares, and an example, expfitdemo, in NCM, Numerical Computing with MATLAB. I have modified expfitdemo to work on Greg's quahogs problem.Centering DataIt turns out that the problem Greg encountered can be traced to the fact that the data are not centered.  The given values of $t$ are all positive.  This causes fitnlm to print a warning message and attempt to rectify the situation by changing the degrees of freedom from 22 to 23, but this only makes the situation worse. (We should take another look at the portion of fitnlm that adjusts the degrees of freedom.)It is always a good idea in curve fitting to center the data with something like  t = t - mean(t)The values of $y$ are already pretty well centered. Rescaling $y$ with  y = 10000*ymakes interpretation of results easier.Exponential FittingWith the data centered and scaled, we have three different ways of tackling Greg's problem.  All three methods agree on the results they compute.fitnlm. Treats all parameters as if they were nonlinear.      Computes statistical quantities such as R-squared and      RMS Error.varpro. Venerable software history.      Only one nonlinear parameter for the quahogs problem.      Delivers additional statistical quantities in Regression structure.quahogsfit. Textbook separable least squares code.      Modification for the quahogs problem of expfitdemo from NCM.      Only one nonlinear parameter.  No statistics.ResultsfitnlmNonlinear regression model:    y ~ param1 + param2*exp(param3*xval)Estimated Coefficients:              Estimate      SE        tStat       pValue              ________    _______    _______    __________    param1     0.69536     0.1657     4.1964    0.00037344    param2    -0.26482    0.19909    -1.3302       0.19709    param3     -22.218     8.1494    -2.7263      0.012327Number of observations: 25, Error degrees of freedom: 22Root Mean Squared Error: 0.307R-Squared: 0.828,  Adjusted R-Squared 0.813F-statistic vs. constant model: 53, p-value = 3.86e-09varproLinear Parameters:  0.695367   -0.264837Nonlinear Parameters: -22.217495Norm         of weighted residual  =   1.438935Norm         of data vector        =   3.545820Expected error of observations     =   0.306782Coefficient of determination       =   0.828145Regression.t_ratio    4.1962   -1.3301   -2.7264Regression.std_param    0.1657    0.1991    8.1490quahogsfitlambda =  -22.2180condX =    4.3882beta =    0.6954   -0.2648normres =    1.4389quahogsfit produces this plot, which can be compared with figure 1K from Ries et al, reproduced above. SoftwareThe codes for this post are available here quahogs_driver.m and here varpro.m.ThanksThanks to Greg Pelletier for the bug report and to Tom Lane for his statistical expertise.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2023a",
            "content_html": "<div class=\"content\"><!--introduction--><p>We have been investigating a recent bug report about <tt>fitnlm</tt>, the Statistics and Machine Learning Toolbox function for robust fitting of nonlinear models.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e8d5954f-4051-48dd-9888-3729cc8d6313\">Quahogs</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#1fd80451-cc63-4160-8fcc-b1a1448c7382\">Acidification</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#faab8af3-c8dd-48bf-8621-b7fa14ade2fb\">Separable Least Squares</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8afd06c3-7aca-4df8-b636-b7d660a3b6ca\">Centering Data</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b8434e53-14a6-412e-97d9-39485ad02c07\">Exponential Fitting</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e6bd554c-66fa-4ebc-b3d4-2cd14229bed0\">Results</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#dd10ff5a-44a4-4ad7-9ddb-7cb103a943eb\">Software</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#7e09ac26-71d6-47be-aa47-13da26bc9755\">Thanks</a></li></ul></div><h4>Quahogs<a name=\"e8d5954f-4051-48dd-9888-3729cc8d6313\"></a></h4><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/quahogs.png\" vspace=\"5\" /> </p><p>The bug report comes from Greg Pelletier, an independent research scientist and biogeochemical modeler in Olympia, Washington. Greg has been studying the vulnerability of sensitive marine organisms to increases in ocean acidification.  One of the most important of these organisms is <a href=\"https://en.wikipedia.org/wiki/Hard_clam\">Mercenaria mercenaria</a>, the hard clam.</p><p>Especially here in New England, hard clams are known by their traditional Native American name, <i>quahog</i>. They have a well-deserved reputation for making excellent clam chowder.</p><h4>Acidification<a name=\"1fd80451-cc63-4160-8fcc-b1a1448c7382\"></a></h4><p>We are all aware of increasing levels of carbon dioxide in the earth's atmosphere.  We may not be as aware of the effect this increase has on the health of the earth's oceans.  According to <a href=\"https://www.noaa.gov/education/resource-collections/ocean-coasts/ocean-acidification\">NOAA</a>, the ocean absorbs about 30% of the atmospheric carbon dioxide.</p><p>A definitive and controversial 2009 paper by Justin Ries and colleagues, then at the Woods Hole Oceanographic Institution, is \"Marine calcifiers exhibit mixed responses to CO2-induced ocean acidification\", <a href=\"https://doi.org/10.1130/G30210A.1\">https://doi.org/10.1130/G30210A.1</a>. The hard clam example in Greg's bug report comes from figure 1K in the Ries et al. paper.</p><p>The independent variable in experiments is the ratio of alkalinity of sea water to the concentration of dissolved inorganic carbon. The dependent variable is the calcification rate, which compares how fast the organism builds its shells to how fast the shells are dissolving.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Ries_et_al.png\" vspace=\"5\" /> </p><h4>Separable Least Squares<a name=\"faab8af3-c8dd-48bf-8621-b7fa14ade2fb\"></a></h4><p>The model chosen by Ries at al. is</p><p>$$ y \\approx \\beta_1 + \\beta_2 e^{\\lambda t} $$</p><p>where $t$ is the ratio of alkalinity to dissolved carbon and $y$ is the calcification rate. The data have only four distinct values of $t$, with several observations of $y$ at each value.</p><p>The parameters $\\beta_1$, $\\beta_2$ and $\\lambda$ are determined by least squares curve fit.  This is a <i>separable least squares</i> problem. For any given value of $\\lambda$, the parameters $\\beta_1$ and $\\beta_2$ occur linearly and the least squares solution can be obtained by MATLAB's backslash.</p><p>Gene Golub and Victor Pereyra described separable least squares in 1973 and proposed solving it by a <i>variable projection algorithm</i>. Since 1973 a number of people, including Pereyra, Linda Kaufman, Fred Krogh, John Bolstadt and David Gay, have contributed to the development of a series of Fortran programs named <tt>varpro</tt>. In 2011, Dianne O'Leary and Burt Rust created a MATLAB version of <tt>varpro</tt>.  Their report, <a href=\"https://www.cs.umd.edu/~oleary/software/varpro/\">https://www.cs.umd.edu/~oleary/software/varpro/</a>, is a good background source, as well as documentation for <tt>varpro.m</tt>.</p><p>I have a section on separable least squares, and an example, <tt>expfitdemo</tt>, in NCM, <a href=\"https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/leastsquares.pdf\">Numerical Computing with MATLAB</a>. I have modified <tt>expfitdemo</tt> to work on Greg's quahogs problem.</p><h4>Centering Data<a name=\"8afd06c3-7aca-4df8-b636-b7d660a3b6ca\"></a></h4><p>It turns out that the problem Greg encountered can be traced to the fact that the data are not centered.  The given values of $t$ are all positive.  This causes <tt>fitnlm</tt> to print a warning message and attempt to rectify the situation by changing the degrees of freedom from 22 to 23, but this only makes the situation worse. (We should take another look at the portion of <tt>fitnlm</tt> that adjusts the degrees of freedom.)</p><p>It is always a good idea in curve fitting to center the data with something like</p><pre>  t = t - mean(t)</pre><p>The values of $y$ are already pretty well centered. Rescaling $y$ with</p><pre>  y = 10000*y</pre><p>makes interpretation of results easier.</p><h4>Exponential Fitting<a name=\"b8434e53-14a6-412e-97d9-39485ad02c07\"></a></h4><p>With the data centered and scaled, we have three different ways of tackling Greg's problem.  All three methods agree on the results they compute.</p><div><ul><li><tt>fitnlm</tt>. Treats all parameters as if they were nonlinear.      Computes statistical quantities such as R-squared and      RMS Error.</li></ul></div><div><ul><li><tt>varpro</tt>. Venerable software history.      Only one nonlinear parameter for the quahogs problem.      Delivers additional statistical quantities in <tt>Regression</tt> structure.</li></ul></div><div><ul><li><tt>quahogsfit</tt>. Textbook separable least squares code.      Modification for the quahogs problem of <tt>expfitdemo</tt> from NCM.      Only one nonlinear parameter.  No statistics.</li></ul></div><h4>Results<a name=\"e6bd554c-66fa-4ebc-b3d4-2cd14229bed0\"></a></h4><div><ul><li><tt>fitnlm</tt></li></ul></div><pre>Nonlinear regression model:    y ~ param1 + param2*exp(param3*xval)</pre><pre>Estimated Coefficients:              Estimate      SE        tStat       pValue              ________    _______    _______    __________</pre><pre>    param1     0.69536     0.1657     4.1964    0.00037344    param2    -0.26482    0.19909    -1.3302       0.19709    param3     -22.218     8.1494    -2.7263      0.012327</pre><pre>Number of observations: 25, Error degrees of freedom: 22Root Mean Squared Error: 0.307R-Squared: 0.828,  Adjusted R-Squared 0.813F-statistic vs. constant model: 53, p-value = 3.86e-09</pre><div><ul><li><tt>varpro</tt></li></ul></div><pre>Linear Parameters:  0.695367   -0.264837Nonlinear Parameters: -22.217495</pre><pre>Norm         of weighted residual  =   1.438935Norm         of data vector        =   3.545820Expected error of observations     =   0.306782Coefficient of determination       =   0.828145</pre><pre>Regression.t_ratio    4.1962   -1.3301   -2.7264</pre><pre>Regression.std_param    0.1657    0.1991    8.1490</pre><div><ul><li><tt>quahogsfit</tt></li></ul></div><pre>lambda =  -22.2180condX =    4.3882beta =    0.6954   -0.2648normres =    1.4389</pre><p><tt>quahogsfit</tt> produces this plot, which can be compared with figure 1K from Ries et al, reproduced above.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/quahogsfit.png\" vspace=\"5\" /> </p><h4>Software<a name=\"dd10ff5a-44a4-4ad7-9ddb-7cb103a943eb\"></a></h4><p>The codes for this post are available here <a href=\"https://blogs.mathworks.com/cleve/files/quahogs_driver.m\">quahogs_driver.m</a> and here <a href=\"https://blogs.mathworks.com/cleve/files/varpro.m\">varpro.m</a>.</p><h4>Thanks<a name=\"7e09ac26-71d6-47be-aa47-13da26bc9755\"></a></h4><p>Thanks to Greg Pelletier for the bug report and to Tom Lane for his statistical expertise.</p><!--     function grabCode_0a292e90c48540ba9ef9da619b32e8e7() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='0a292e90c48540ba9ef9da619b32e8e7 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 0a292e90c48540ba9ef9da619b32e8e7';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2024 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2023a<br /></p></div><!--0a292e90c48540ba9ef9da619b32e8e7 ##### SOURCE BEGIN #####%% Exponential Fitting, Separable Least Squares, and Quahogs% We have been investigating a recent bug report about |fitnlm|,% the Statistics and Machine Learning Toolbox function% for robust fitting of nonlinear models.%% Quahogs% <<quahogs.png>>%% The bug report comes from Greg Pelletier, an independent research% scientist and biogeochemical modeler in Olympia, Washington.% Greg has been studying the % vulnerability of sensitive marine organisms to increases in ocean% acidification.  One of the most important of these organisms is% <https://en.wikipedia.org/wiki/Hard_clam Mercenaria mercenaria>,% the hard clam.% % Especially here in New England, hard clams are known% by their traditional Native American name, _quahog_.% They have a well-deserved reputation for making excellent% clam chowder.%% Acidification% We are all aware of increasing levels of carbon dioxide in the earth's% atmosphere.  We may not be as aware of the effect this increase has% on the health of the earth's oceans.  According to% <https://www.noaa.gov/education/resource-collections/ocean-coasts/ocean-acidification% NOAA>, the ocean absorbs about 30% of the atmospheric carbon dioxide. %% A definitive and controversial 2009 paper% by Justin Ries and colleagues,% then at the Woods Hole Oceanographic Institution, is% \"Marine calcifiers exhibit mixed responses to CO2-induced ocean% acidification\", <https://doi.org/10.1130/G30210A.1>.% The hard clam example in Greg's bug report comes from % figure 1K in the Ries et al. paper.%% The independent variable in experiments is the% ratio of alkalinity of sea water% to the concentration of dissolved inorganic carbon.% The dependent variable is the calcification rate, which compares% how fast the organism builds its shells % to how fast the shells are dissolving.%% <<Ries_et_al.png>>%%% Separable Least Squares% The model chosen by Ries at al. is%% $$ y \\approx \\beta_1 + \\beta_2 e^{\\lambda t} $$%% where $t$ is the ratio of alkalinity to dissolved carbon and $y$ is the % calcification rate. The data have only four distinct values of $t$, with % several observations of $y$ at each value.%% The parameters $\\beta_1$, $\\beta_2$ and $\\lambda$ are determined by% least squares curve fit.  This is a _separable least squares_ problem.% For any given value of $\\lambda$, the parameters $\\beta_1$ and $\\beta_2$% occur linearly and the least squares solution can be obtained by % MATLAB's backslash.% % Gene Golub and Victor Pereyra described separable least squares in 1973% and proposed solving it by a _variable projection algorithm_.% Since 1973 a number of people, including Pereyra, Linda Kaufman,% Fred Krogh, John Bolstadt and David Gay, have contributed to the% development of a series of Fortran programs named |varpro|.% In 2011, Dianne O'Leary and Burt Rust created a MATLAB version of% |varpro|.  Their report,% <https://www.cs.umd.edu/~oleary/software/varpro></https://www.cs.umd.edu/~oleary/software/varpro>, is a good background% source, as well as documentation for |varpro.m|.%% I have a section on separable least squares, and an example,% |expfitdemo|, in NCM,% <https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/leastsquares.pdf% Numerical Computing with MATLAB>. I have modified |expfitdemo| to% work on Greg's quahogs problem.%% Centering Data% It turns out that the problem Greg encountered can be traced to the % fact that the data are not centered.  The given values of $t$ are all% positive.  This causes |fitnlm| to print a warning message and attempt% to rectify the situation by changing the degrees of freedom  % from 22 to 23, but this only makes the situation worse.% (We should take another look at the portion of |fitnlm| that adjusts % the degrees of freedom.)%% It is always a good idea in curve fitting to center the % data with something like%%    t = t - mean(t)%% The values of $y$ are already pretty well centered.% Rescaling $y$ with%%    y = 10000*y%% makes interpretation of results easier.%% Exponential Fitting% With the data centered and scaled, we have three different % ways of tackling Greg's problem.  All three methods% agree on the results they compute.% % * |fitnlm|. Treats all parameters as if they were nonlinear.%      Computes statistical quantities such as R-squared and%      RMS Error.% % * |varpro|. Venerable software history.%      Only one nonlinear parameter for the quahogs problem.%      Delivers additional statistical quantities in |Regression| structure.%  % * |quahogsfit|. Textbook separable least squares code.%      Modification for the quahogs problem of |expfitdemo| from NCM.%      Only one nonlinear parameter.  No statistics.%%% Results% * |fitnlm| %%  Nonlinear regression model:%      y ~ param1 + param2*exp(param3*xval)%  %  Estimated Coefficients:%                Estimate      SE        tStat       pValue  %                ________    _______    _______    __________%  %      param1     0.69536     0.1657     4.1964    0.00037344%      param2    -0.26482    0.19909    -1.3302       0.19709%      param3     -22.218     8.1494    -2.7263      0.012327%  %  %  Number of observations: 25, Error degrees of freedom: 22%  Root Mean Squared Error: 0.307%  R-Squared: 0.828,  Adjusted R-Squared 0.813%  F-statistic vs. constant model: 53, p-value = 3.86e-09%% * |varpro|%   %  Linear Parameters:%    0.695367   -0.264837%  Nonlinear Parameters:%   -22.217495%   %  Norm         of weighted residual  =   1.438935%  Norm         of data vector        =   3.545820%  Expected error of observations     =   0.306782%  Coefficient of determination       =   0.828145%%  Regression.t_ratio%      4.1962%     -1.3301%     -2.7264%%  Regression.std_param%      0.1657%      0.1991%      8.1490%% * |quahogsfit|%%  lambda =%    -22.2180%  condX =%      4.3882%  beta =%      0.6954%     -0.2648%  normres =%      1.4389%% |quahogsfit| produces this plot, which can be compared with% figure 1K from Ries et al, reproduced above.%% <<quahogsfit.png>>%%% Software% The codes for this post are available here% <https://blogs.mathworks.com/cleve/files/quahogs_driver.m  quahogs_driver.m>% and here % <https://blogs.mathworks.com/cleve/files/varpro.m  varpro.m>.%% Thanks% Thanks to Greg Pelletier for the bug report and% to Tom Lane for his statistical expertise.##### SOURCE END ##### 0a292e90c48540ba9ef9da619b32e8e7-->",
            "url": "https://hpc.social/commercial-blog/2024/exponential-fitting-separable-least-squares-and-quahogs/",
            
            
            
            
            
            "date_published": "2024-01-12T16:35:32-07:00",
            "date_modified": "2024-01-12T16:35:32-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2023/season-s-greetings/",
            "title": "Season’s Greetings",
            "summary": null,
            "content_text": "Season's Greeings Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2023a",
            "content_html": "<div class=\"content\"><h3>Season's Greeings</h3><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/xmas.gif\" vspace=\"5\" /> </p><!--     function grabCode_79511e45062b40d2899d215fa871042a() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='79511e45062b40d2899d215fa871042a ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 79511e45062b40d2899d215fa871042a';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2023 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2023a<br /></p></div><!--79511e45062b40d2899d215fa871042a ##### SOURCE BEGIN #####%% Season's Greeings%% <<xmas.gif>>%##### SOURCE END ##### 79511e45062b40d2899d215fa871042a-->",
            "url": "https://hpc.social/commercial-blog/2023/season-s-greetings/",
            
            
            
            
            
            "date_published": "2023-12-20T14:13:20-07:00",
            "date_modified": "2023-12-20T14:13:20-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2023/blog-post-number-300-vibrating-logo/",
            "title": "Blog Post Number 300, Vibrating Logo",
            "summary": null,
            "content_text": "This is post number 300 of Cleve's Corner blog. The first post was on June 6, 2012, which is 600 weeks ago. So, I have averaged one post every two weeks for over a decade. The posts were more frequent in the early days and are less frequent today.ContentsVibrating LogoCodevibrating_logovibrating_logo_framefirst frameinit_figVibrating LogoFor my 300-th post, I want to take another look at our MathWorks logo. Here is a modified version of one of the animations that I entered in the recent MATLAB Flipbook Mini Hack.        Vibrating LogoThe MathWorks company logo is the solution to a partial differential equation that describes how a disturbance travels through matter.  I discussed the logo in a five-part blog post in 2014. Here are links to three of those posts.Why is it L-shaped?.The method of particular solutions.How the view has evolved..One of my most-liked blog posts is by ten-year old Eden Rajapakse.CodeThis code is available at vibrating_logo.vibrating_logofunction vibrating_logo    % MathWorks logo, vibrating L-shaped membrane.    % See Cleve's Corner, Dec. 13, 2023.    % https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo.    stop = init_fig;    fps = 6;    f = 0;    % Loop until stop is toggled.    while true        f = f + 1;        if stop.Value            return        end        vibrating_logo_frame(f)        pause(1/fps)    end vibrating_logo_frame    function vibrating_logo_frame(f)        %        % One frame of animation.        if f == 1            first_frame        end        fud = get(gcf,'UserData');        [mu,L,s] = deal(fud{:});        t = (f-1)/fps;        Z = cos(mu(1)*t)*L{1} + sin(mu(2)*t)*L{2} + sin(mu(3)*t)*L{3} +  ...            sin(mu(4)*t)*L{4} + sin(mu(5)*t)*L{5} + sin(mu(6)*t)*L{6};        s.ZData = Z;    endfirst frame    function first_frame        cla        axis off        % First six eigenvalues.        mu = sqrt([9.6397238445, 15.19725192, 2*pi^2, ...                   29.5214811, 31.9126360, 41.4745099]);        % First six eigenfunctions.        L{1} = 30*membrane(1,25);        L{2} = 2*membrane(2,25);        L{3} = -2*membrane(3,25);        L{4} = 5*membrane(4,25);        L{5} = -3*membrane(5,25);        L{6} = 4*membrane(6,25);        % Surf plot with custom lighting.        axes('CameraPosition', [-193.4013 -265.1546  220.4819],...             'CameraTarget',[26 26 10], ...             'CameraUpVector',[0 0 1], ...             'CameraViewAngle',9.5, ...             'DataAspectRatio', [1 1 .9],...             'Visible','off', ...             'XLim',[1 51], ...             'YLim',[1 51], ...             'ZLim',[-13 40]);        s = surface(zeros(size(L{1})), ...             'EdgeColor','none', ...             'FaceColor',[0.9 0.2 0.2], ...             'FaceLighting','phong', ...             'AmbientStrength',0.3, ...             'DiffuseStrength',0.6, ...             'Clipping','off',...             'BackFaceLighting','lit', ...             'SpecularStrength',1.0, ...             'SpecularColorReflectance',1, ...             'SpecularExponent',7);        light('Position',[40 100 20], ...             'Style','local', ...             'Color',[0 0.8 0.8]);        light('Position',[.5 -1 .4], ...             'Color',[0.8 0.8 0]);        set(gcf,'UserData',{mu,L,s})    endinit_fig    function stop = init_fig        % Initialize figure.        fig = gcf;        fig.Color = 'k';        fig.MenuBar = 'none';        fig.ToolBar = 'none';        fig.NumberTitle = 'off';        fig.Clipping = 'off';        stop = uicontrol;        stop.Style = 'togglebutton';        stop.String = 'X';        stop.FontSize = 12;        stop.FontWeight = 'bold';        stop.Units = 'normalized';        stop.Position = [.92 .92 .06 .06];        cla        shg    endendGet       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2023a",
            "content_html": "<div class=\"content\"><!--introduction--><p>This is post number 300 of <i>Cleve's Corner</i> blog. The first post was on June 6, 2012, which is 600 weeks ago. So, I have averaged one post every two weeks for over a decade. The posts were more frequent in the early days and are less frequent today.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#ccc2ebb6-1c1e-46a0-b19b-455cc4058635\">Vibrating Logo</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#71788969-1610-4111-83ec-1f91f974b786\">Code</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#407dbfb8-a326-471c-ac13-3f5c58b66121\">vibrating_logo</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#ea75a53d-1aaa-4128-b51b-46fd84380580\">vibrating_logo_frame</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#355fe3db-750d-4a82-b9d9-7de0df29ee65\">first frame</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#4329c90d-ee62-412f-aa5d-018a818cca4d\">init_fig</a></li></ul></div><h4>Vibrating Logo<a name=\"ccc2ebb6-1c1e-46a0-b19b-455cc4058635\"></a></h4><p>For my 300-th post, I want to take another look at our MathWorks logo. Here is a modified version of one of the animations that I entered in the recent <a href=\"https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries\">MATLAB Flipbook Mini Hack</a>.</p><p><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/vibrating_logo.gif\" vspace=\"5\" /> </p><pre>       Vibrating Logo</pre><p>The MathWorks company logo is the solution to a partial differential equation that describes how a disturbance travels through matter.  I discussed the logo in a five-part blog post in 2014. Here are links to three of those posts.</p><p><a href=\"https://blogs.mathworks.com/cleve/2014/10/13/mathworks-logo-part-one-why-is-it-l-shaped/\">Why is it L-shaped?</a>.</p><p><a href=\"https://blogs.mathworks.com/cleve/2014/11/17/mathworks-logo-part-four-method-of-particular-solutions-generates-the-logo/\">The method of particular solutions</a>.</p><p><a href=\"https://blogs.mathworks.com/cleve/2014/12/01/mathworks-logo-part-five-evolution-of-the-logo/\">How the view has evolved.</a>.</p><p>One of my most-liked blog posts is by ten-year old <a href=\"https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo/\">Eden Rajapakse</a>.</p><h4>Code<a name=\"71788969-1610-4111-83ec-1f91f974b786\"></a></h4><p>This code is available at <a href=\"https://blogs.mathworks.com/cleve/files/vibrating_logo.m\">vibrating_logo</a>.</p><h4>vibrating_logo<a name=\"407dbfb8-a326-471c-ac13-3f5c58b66121\"></a></h4><pre class=\"codeinput\"><span class=\"keyword\">function</span> vibrating_logo</pre><pre class=\"codeinput\">    <span class=\"comment\">% MathWorks logo, vibrating L-shaped membrane.</span>    <span class=\"comment\">% See Cleve's Corner, Dec. 13, 2023.</span>    <span class=\"comment\">% https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo.</span>    stop = init_fig;    fps = 6;    f = 0;    <span class=\"comment\">% Loop until stop is toggled.</span>    <span class=\"keyword\">while</span> true        f = f + 1;        <span class=\"keyword\">if</span> stop.Value            <span class=\"keyword\">return</span>        <span class=\"keyword\">end</span>        vibrating_logo_frame(f)        pause(1/fps)    <span class=\"keyword\">end</span></pre><img alt=\"\" hspace=\"5\" src=\"http://blogs.mathworks.com/cleve/files/vibes_blog_01.png\" vspace=\"5\" /> <h4>vibrating_logo_frame<a name=\"ea75a53d-1aaa-4128-b51b-46fd84380580\"></a></h4><pre class=\"codeinput\">    <span class=\"keyword\">function</span> vibrating_logo_frame(f)        <span class=\"comment\">%</span>        <span class=\"comment\">% One frame of animation.</span>        <span class=\"keyword\">if</span> f == 1            first_frame        <span class=\"keyword\">end</span>        fud = get(gcf,<span class=\"string\">'UserData'</span>);        [mu,L,s] = deal(fud{:});        t = (f-1)/fps;        Z = cos(mu(1)*t)*L{1} + sin(mu(2)*t)*L{2} + sin(mu(3)*t)*L{3} +  <span class=\"keyword\">...</span>            sin(mu(4)*t)*L{4} + sin(mu(5)*t)*L{5} + sin(mu(6)*t)*L{6};        s.ZData = Z;    <span class=\"keyword\">end</span></pre><h4>first frame<a name=\"355fe3db-750d-4a82-b9d9-7de0df29ee65\"></a></h4><pre class=\"codeinput\">    <span class=\"keyword\">function</span> first_frame        cla        axis <span class=\"string\">off</span>        <span class=\"comment\">% First six eigenvalues.</span>        mu = sqrt([9.6397238445, 15.19725192, 2*pi^2, <span class=\"keyword\">...</span>                   29.5214811, 31.9126360, 41.4745099]);        <span class=\"comment\">% First six eigenfunctions.</span>        L{1} = 30*membrane(1,25);        L{2} = 2*membrane(2,25);        L{3} = -2*membrane(3,25);        L{4} = 5*membrane(4,25);        L{5} = -3*membrane(5,25);        L{6} = 4*membrane(6,25);        <span class=\"comment\">% Surf plot with custom lighting.</span>        axes(<span class=\"string\">'CameraPosition'</span>, [-193.4013 -265.1546  220.4819],<span class=\"keyword\">...</span>             <span class=\"string\">'CameraTarget'</span>,[26 26 10], <span class=\"keyword\">...</span>             <span class=\"string\">'CameraUpVector'</span>,[0 0 1], <span class=\"keyword\">...</span>             <span class=\"string\">'CameraViewAngle'</span>,9.5, <span class=\"keyword\">...</span>             <span class=\"string\">'DataAspectRatio'</span>, [1 1 .9],<span class=\"keyword\">...</span>             <span class=\"string\">'Visible'</span>,<span class=\"string\">'off'</span>, <span class=\"keyword\">...</span>             <span class=\"string\">'XLim'</span>,[1 51], <span class=\"keyword\">...</span>             <span class=\"string\">'YLim'</span>,[1 51], <span class=\"keyword\">...</span>             <span class=\"string\">'ZLim'</span>,[-13 40]);        s = surface(zeros(size(L{1})), <span class=\"keyword\">...</span>             <span class=\"string\">'EdgeColor'</span>,<span class=\"string\">'none'</span>, <span class=\"keyword\">...</span>             <span class=\"string\">'FaceColor'</span>,[0.9 0.2 0.2], <span class=\"keyword\">...</span>             <span class=\"string\">'FaceLighting'</span>,<span class=\"string\">'phong'</span>, <span class=\"keyword\">...</span>             <span class=\"string\">'AmbientStrength'</span>,0.3, <span class=\"keyword\">...</span>             <span class=\"string\">'DiffuseStrength'</span>,0.6, <span class=\"keyword\">...</span>             <span class=\"string\">'Clipping'</span>,<span class=\"string\">'off'</span>,<span class=\"keyword\">...</span>             <span class=\"string\">'BackFaceLighting'</span>,<span class=\"string\">'lit'</span>, <span class=\"keyword\">...</span>             <span class=\"string\">'SpecularStrength'</span>,1.0, <span class=\"keyword\">...</span>             <span class=\"string\">'SpecularColorReflectance'</span>,1, <span class=\"keyword\">...</span>             <span class=\"string\">'SpecularExponent'</span>,7);        light(<span class=\"string\">'Position'</span>,[40 100 20], <span class=\"keyword\">...</span>             <span class=\"string\">'Style'</span>,<span class=\"string\">'local'</span>, <span class=\"keyword\">...</span>             <span class=\"string\">'Color'</span>,[0 0.8 0.8]);        light(<span class=\"string\">'Position'</span>,[.5 -1 .4], <span class=\"keyword\">...</span>             <span class=\"string\">'Color'</span>,[0.8 0.8 0]);        set(gcf,<span class=\"string\">'UserData'</span>,{mu,L,s})    <span class=\"keyword\">end</span></pre><h4>init_fig<a name=\"4329c90d-ee62-412f-aa5d-018a818cca4d\"></a></h4><pre class=\"codeinput\">    <span class=\"keyword\">function</span> stop = init_fig        <span class=\"comment\">% Initialize figure.</span>        fig = gcf;        fig.Color = <span class=\"string\">'k'</span>;        fig.MenuBar = <span class=\"string\">'none'</span>;        fig.ToolBar = <span class=\"string\">'none'</span>;        fig.NumberTitle = <span class=\"string\">'off'</span>;        fig.Clipping = <span class=\"string\">'off'</span>;        stop = uicontrol;        stop.Style = <span class=\"string\">'togglebutton'</span>;        stop.String = <span class=\"string\">'X'</span>;        stop.FontSize = 12;        stop.FontWeight = <span class=\"string\">'bold'</span>;        stop.Units = <span class=\"string\">'normalized'</span>;        stop.Position = [.92 .92 .06 .06];        cla        shg    <span class=\"keyword\">end</span></pre><pre class=\"codeinput\"><span class=\"keyword\">end</span></pre><!--     function grabCode_cfdea481005c456d8c4a25238f900460() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='cfdea481005c456d8c4a25238f900460 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' cfdea481005c456d8c4a25238f900460';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2023 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2023a<br /></p></div><!--cfdea481005c456d8c4a25238f900460 ##### SOURCE BEGIN #####%% Blog Post Number 300, Vibrating Logo% This is post number 300 of _Cleve's Corner_ blog.% The first post was on June 6, 2012, which is 600 weeks ago.% So, I have averaged one post every two weeks for over a decade.% The posts were more frequent in the early days and are less frequent% today.%% Vibrating Logo % For my 300-th post, I want to take another look at our MathWorks logo.% Here is a modified version of one of the animations that I entered in% the recent % <https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries% MATLAB Flipbook Mini Hack>.  %% <<vibrating_logo.gif>>%%         Vibrating Logo%%%% The MathWorks company logo is the solution to a % partial differential equation that describes how a disturbance travels% through matter.  I discussed the logo in a five-part blog post in 2014.% Here are links to three of those posts.%% <https://blogs.mathworks.com/cleve/2014/10/13/mathworks-logo-part-one-why-is-it-l-shaped/% Why is it L-shaped?>.%% <https://blogs.mathworks.com/cleve/2014/11/17/mathworks-logo-part-four-method-of-particular-solutions-generates-the-logo/% The method of particular solutions>.%% <https://blogs.mathworks.com/cleve/2014/12/01/mathworks-logo-part-five-evolution-of-the-logo/% How the view has evolved.>.%% One of my most-liked blog posts is by ten-year old% <https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo/% Eden Rajapakse>.%% Code% This code is available at % <https://blogs.mathworks.com/cleve/files/vibrating_logo.m% vibrating_logo>.%% vibrating_logofunction vibrating_logo    % MathWorks logo, vibrating L-shaped membrane.    % See Cleve's Corner, Dec. 13, 2023.    % https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo.        stop = init_fig;    fps = 6;    f = 0;    % Loop until stop is toggled.    while true        f = f + 1;        if stop.Value            return        end        vibrating_logo_frame(f)        pause(1/fps)    end%% vibrating_logo_frame    function vibrating_logo_frame(f)        %         % One frame of animation.        if f == 1            first_frame        end        fud = get(gcf,'UserData');        [mu,L,s] = deal(fud{:});        t = (f-1)/fps;        Z = cos(mu(1)*t)*L{1} + sin(mu(2)*t)*L{2} + sin(mu(3)*t)*L{3} +  ...            sin(mu(4)*t)*L{4} + sin(mu(5)*t)*L{5} + sin(mu(6)*t)*L{6};        s.ZData = Z;    end%% first frame    function first_frame        cla        axis off        % First six eigenvalues.        mu = sqrt([9.6397238445, 15.19725192, 2*pi^2, ...                   29.5214811, 31.9126360, 41.4745099]);        % First six eigenfunctions.        L{1} = 30*membrane(1,25);        L{2} = 2*membrane(2,25);        L{3} = -2*membrane(3,25);        L{4} = 5*membrane(4,25);        L{5} = -3*membrane(5,25);        L{6} = 4*membrane(6,25);        % Surf plot with custom lighting.        axes('CameraPosition', [-193.4013 -265.1546  220.4819],...             'CameraTarget',[26 26 10], ...             'CameraUpVector',[0 0 1], ...             'CameraViewAngle',9.5, ...             'DataAspectRatio', [1 1 .9],...             'Visible','off', ...             'XLim',[1 51], ...             'YLim',[1 51], ...             'ZLim',[-13 40]);        s = surface(zeros(size(L{1})), ...             'EdgeColor','none', ...             'FaceColor',[0.9 0.2 0.2], ...             'FaceLighting','phong', ...             'AmbientStrength',0.3, ...             'DiffuseStrength',0.6, ...              'Clipping','off',...             'BackFaceLighting','lit', ...             'SpecularStrength',1.0, ...             'SpecularColorReflectance',1, ...             'SpecularExponent',7);        light('Position',[40 100 20], ...             'Style','local', ...             'Color',[0 0.8 0.8]);        light('Position',[.5 -1 .4], ...             'Color',[0.8 0.8 0]);        set(gcf,'UserData',{mu,L,s})    end%% init_fig    function stop = init_fig        % Initialize figure.        fig = gcf;        fig.Color = 'k';        fig.MenuBar = 'none';        fig.ToolBar = 'none';        fig.NumberTitle = 'off';        fig.Clipping = 'off';        stop = uicontrol;        stop.Style = 'togglebutton';        stop.String = 'X';        stop.FontSize = 12;        stop.FontWeight = 'bold';        stop.Units = 'normalized';        stop.Position = [.92 .92 .06 .06];          cla        shg    endend##### SOURCE END ##### cfdea481005c456d8c4a25238f900460-->",
            "url": "https://hpc.social/commercial-blog/2023/blog-post-number-300-vibrating-logo/",
            
            
            
            
            
            "date_published": "2023-12-13T18:23:26-07:00",
            "date_modified": "2023-12-13T18:23:26-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2023/bouncing-bucky-ball-at-flipbook-mini-hack/",
            "title": "Bouncing Bucky Ball at Flipbook Mini Hack",
            "summary": null,
            "content_text": "The 2023 MATLAB Central Flipbook Mini Hack contest runs from November 6 until December 3.  Over 200 entries have been submitted in the first two weeks.ContentsNew RulesGalleryPersonal FavoritesBouncing Bucky BallSoftwareThanksNew RulesThis year's mini hack features short animations. The contest software runs the program you submit to make an animated GIF file with exactly 48 frames and an inner-frame delay time of 1/24 second.  So, your animation will run for two seconds, then continuously repeat. If you want periodic motion, you need to be back where you started by frame 48.In previous mini hacks, programs had to be Twitter length -- at most 255 characters long. Now, the new limit is 2,000 characters.  Comments and formatting blanks are not counted.  Remixes and reuse of other submissions is encouraged.Participants and other viewers vote on the submissions.  There are prizes like Amazon gift cards and T-shirts.  MathWorkers may participate, but not win prizes.GalleryTake a look at the Gallery.Personal FavoritesI find the results fascinating.  There are so many different creative styles, artistic talents and programming techniques. Here are a few of my personal favorites.Jenny BostenJenny Bosten is a familiar name on MATLAB Central. She is a Senior Lecturer in Psychology at the University of Sussex, where she is a \"visual neuroscientist specialising in colour vision.\" Her code for Time lapse of Lake view to the West shows she is also a wizard of coordinate systems and color maps. &#38534;&#20809; &#20013;&#26449;I don't know anything about this person.  All I see is this name, &#38534;&#20809; &#20013;&#26449;, and this ingenious code for Fireworks. Ned GulleyNed is the long-time MathWorker who is the architect of MATLAB Central, and who, this time, is also a prolific participant.  One of his more mathematical animations is Orbiting Roots. Eric Ludham'Eric is head of the MathWorks development team for Graphics and Charting. Contributions like this Blooming Rose demonstrate his artistic design talent. Bouncing Bucky BallMy own contributions are not nearly as attractive as these.The 2,000 character limit is a good idea. It forced me to look critically at some old code and rewrite it to be simpler and clearer.This program for a Bouncing Bucky Ball uses the hgtransform object to good effect. I also think it has a nice solution to the problem facing everybody of how to retain state from one frame to the next. SoftwareHere is a link to a slightly more complicated version with one togglebutton that provides a random restart capability. Bouncing_Bucky.mThanksChen Lin, David Wey and Vinay Ramesh are running the Mini Hack this year,Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2023a",
            "content_html": "<div class=\"content\"><!--introduction--><p>The 2023 <a href=\"https://www.mathworks.com/matlabcentral/contests/2023-matlab-mini-hack.html\">MATLAB Central Flipbook Mini Hack</a> contest runs from November 6 until December 3.  Over 200 entries have been submitted in the first two weeks.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#b522fbe2-47f9-4136-a6f2-1892f2cf0495\">New Rules</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#bfa6df5c-89fc-46be-b4f7-64f6a1fa7c33\">Gallery</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#3d0c7d73-a1e6-40a1-94ca-11bc9e0705fd\">Personal Favorites</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#56cf252d-30c5-4192-b1a9-ab40e17f29c7\">Bouncing Bucky Ball</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#046a72f3-6f55-49b9-8420-0a1cd4c8e5d0\">Software</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#8ea0a405-6fd5-4778-966c-4ff090808b5f\">Thanks</a></li></ul></div><h4>New Rules<a name=\"b522fbe2-47f9-4136-a6f2-1892f2cf0495\"></a></h4><p>This year's mini hack features short animations. The contest software runs the program you submit to make an animated GIF file with exactly 48 frames and an inner-frame delay time of 1/24 second.  So, your animation will run for two seconds, then continuously repeat. If you want periodic motion, you need to be back where you started by frame 48.</p><p>In previous mini hacks, programs had to be Twitter length -- at most 255 characters long. Now, the new limit is 2,000 characters.  Comments and formatting blanks are not counted.  Remixes and reuse of other submissions is encouraged.</p><p>Participants and other viewers vote on the submissions.  There are prizes like Amazon gift cards and T-shirts.  MathWorkers may participate, but not win prizes.</p><h4>Gallery<a name=\"bfa6df5c-89fc-46be-b4f7-64f6a1fa7c33\"></a></h4><p>Take a look at the <a href=\"https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries\">Gallery</a>.</p><h4>Personal Favorites<a name=\"3d0c7d73-a1e6-40a1-94ca-11bc9e0705fd\"></a></h4><p>I find the results fascinating.  There are so many different creative styles, artistic talents and programming techniques. Here are a few of my personal favorites.</p><p><b>Jenny Bosten</b></p><p><a href=\"https://blogs.mathworks.com/pick/2021/10/25/jenny-bostens-art-in-the-matlab-mini-hack\">Jenny Bosten</a> is a familiar name on MATLAB Central. She is a Senior Lecturer in Psychology at the University of Sussex, where she is a \"visual neuroscientist specialising in colour vision.\" Her code for <a href=\"https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13760\">Time lapse of Lake view to the West</a> shows she is also a wizard of coordinate systems and color maps.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/bosten.gif\" vspace=\"5\" /> </p><p><b>&#38534;&#20809; &#20013;&#26449;</b></p><p>I don't know anything about this person.  All I see is this name, &#38534;&#20809; &#20013;&#26449;, and this ingenious code for <a href=\"https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13092\">Fireworks</a>.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/fireworks.gif\" vspace=\"5\" /> </p><p><b>Ned Gulley</b></p><p>Ned is the long-time MathWorker who is the architect of MATLAB Central, and who, this time, is also a prolific participant.  One of his more mathematical animations is <a href=\"https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13840\">Orbiting Roots</a>.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/gulley.gif\" vspace=\"5\" /> </p><p><b>Eric Ludham</b>'</p><p>Eric is head of the MathWorks development team for Graphics and Charting. Contributions like this <a href=\"https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13857\">Blooming Rose</a> demonstrate his artistic design talent.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/ludham.gif\" vspace=\"5\" /> </p><h4>Bouncing Bucky Ball<a name=\"56cf252d-30c5-4192-b1a9-ab40e17f29c7\"></a></h4><p>My own contributions are not nearly as attractive as these.</p><p>The 2,000 character limit is a good idea. It forced me to look critically at some old code and rewrite it to be simpler and clearer.</p><p>This program for a <a href=\"https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/14102\">Bouncing Bucky Ball</a> uses the <tt>hgtransform</tt> object to good effect. I also think it has a nice solution to the problem facing everybody of how to retain state from one frame to the next.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/bouncing_bucky.gif\" vspace=\"5\" /> </p><h4>Software<a name=\"046a72f3-6f55-49b9-8420-0a1cd4c8e5d0\"></a></h4><p>Here is a link to a slightly more complicated version with one <tt>togglebutton</tt> that provides a random restart capability. <a href=\"https://blogs.mathworks.com/cleve/files/Bouncing_Bucky.m\">Bouncing_Bucky.m</a></p><h4>Thanks<a name=\"8ea0a405-6fd5-4778-966c-4ff090808b5f\"></a></h4><p>Chen Lin, David Wey and Vinay Ramesh are running the Mini Hack this year,</p><!--     function grabCode_65f76a589bbd4188bfa9698c4a4437a7() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='65f76a589bbd4188bfa9698c4a4437a7 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 65f76a589bbd4188bfa9698c4a4437a7';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2023 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2023a<br /></p></div><!--65f76a589bbd4188bfa9698c4a4437a7 ##### SOURCE BEGIN #####%% Bouncing Bucky Ball at Flipbook Mini Hack% The 2023% <https://www.mathworks.com/matlabcentral/contests/2023-matlab-mini-hack.html% MATLAB Central Flipbook Mini Hack> contest runs% from November 6 until December 3.  Over 200 entries have been submitted% in the first two weeks.%%% New Rules% This year's mini hack features short animations.% The contest software runs the program you submit to make an animated% GIF file with exactly 48 frames and an inner-frame delay time% of 1/24 second.  So, your animation will run for two seconds, then% continuously repeat. If you want periodic motion, you need% to be back where you started by frame 48.%% In previous mini hacks, programs had to be Twitter length REPLACE_WITH_DASH_DASH% at most 255 characters long.% Now, the new limit is 2,000 characters.  Comments and formatting% blanks are not counted.  Remixes and reuse of other submissions is% encouraged.%% Participants and other viewers vote on the submissions.  There are% prizes like Amazon gift cards and T-shirts.  MathWorkers may % participate, but not win prizes.%% Gallery% Take a look at the% <https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries% Gallery>.%% Personal Favorites% I find the results fascinating.  There are so many different creative% styles, artistic talents and programming techniques.% Here are a few of my personal favorites.%% *Jenny Bosten*%% <https://blogs.mathworks.com/pick/2021/10/25/jenny-bostens-art-in-the-matlab-mini-hack% Jenny Bosten> is a familiar name on MATLAB Central.% She is a Senior Lecturer in Psychology at the University of Sussex,% where she is a \"visual neuroscientist specialising in colour vision.\"% Her code for % <https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13760% Time lapse of Lake view to the West>% shows she is also a wizard of coordinate systems and color maps.%% <<bosten.gif>> %%% *隆光 中村*%% I don't know anything about this person.  All I see is this % name, 隆光 中村, and this ingenious code for% <https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13092% Fireworks>.%% <<fireworks.gif>>%%% *Ned Gulley*%% Ned is the long-time MathWorker who is the architect of MATLAB Central,% and who, this time, is also a prolific participant.  One of his more% mathematical animations is % <https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13840% Orbiting Roots>.%% <<gulley.gif>>%%% *Eric Ludham*'%% Eric is head of the MathWorks development team for Graphics and Charting.% Contributions like this% <https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13857% Blooming Rose> demonstrate his artistic design talent.%% <<ludham.gif>>%%%% Bouncing Bucky Ball% My own contributions are not nearly as attractive as these.%% The 2,000 character limit is a good idea. It forced me to look% critically at some old code and rewrite it to be simpler and clearer.%% This program for a% <https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/14102% Bouncing Bucky Ball> uses the |hgtransform| object to good effect.% I also think it has a nice solution to the problem facing everybody of% how to retain state from one frame to the next.%% <<bouncing_bucky.gif>>%%% Software% Here is a link to a slightly more complicated version with one % |togglebutton| that provides a random restart capability.  % <https://blogs.mathworks.com/cleve/files/Bouncing_Bucky.m% Bouncing_Bucky.m>%% Thanks% Chen Lin, David Wey and Vinay Ramesh are running the Mini Hack this year,##### SOURCE END ##### 65f76a589bbd4188bfa9698c4a4437a7-->",
            "url": "https://hpc.social/commercial-blog/2023/bouncing-bucky-ball-at-flipbook-mini-hack/",
            
            
            
            
            
            "date_published": "2023-11-16T23:01:49-07:00",
            "date_modified": "2023-11-16T23:01:49-07:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2023/exploring-matrices-exercises/",
            "title": "Exploring Matrices Exercises",
            "summary": null,
            "content_text": "Try your hand at a few exercises involving Exploring Matrices.ContentsQube SimplifiedExploring Matrices ExercisesMatrix MultiplicationRotations and ScalingComputer GraphicsMatrices and CubesQube Simplified I have simplified the Qube app by removing these four buttons.solve.  The &lt;== key now controls the unscrambling   operation.scramble.  The ==&gt; key now does six random rotations.order.  I never found a satisfactory reference for   the group theory of Rubik's cube.score.  I never found a use for the nuclear norm.Code for Qube dated 9/24/2023 is included in the Apps mzip archive.Exploring Matrices ExercisesHere are a few exercises for Exploring Matrices. The answers are available at ExMatAnswers.Matrix Multiplication1. Compute by rows, and by columns.$$  \\left(  \\begin{array}{rrr}     8 &amp; 1 &amp; 6 \\\\     3 &amp; 5 &amp; 7 \\\\     4 &amp; 9 &amp; 2  \\end{array}  \\right)  \\left(  \\begin{array}{r}     1  \\\\     1  \\\\     1  \\end{array}  \\right)$$2. Solve for $z$ using inner products of rows, and using linear combinations of columns.$$  \\left(  \\begin{array}{rrr}     1 &amp; 2 &amp; 3 \\\\     4 &amp; 5 &amp; 6 \\\\     7 &amp; 8 &amp; 9  \\end{array}  \\right)  \\left(  \\begin{array}{r}     1  \\\\     z  \\\\     1  \\end{array}  \\right)  \\ = \\  \\left(  \\begin{array}{r}     0  \\\\     0  \\\\     0  \\end{array}  \\right)$$3. What do the m, n and p buttons on the Multiply app do? What are the other buttons and what do they do?4. If A is n-by-n and x is n-by-1, how many multiplications are required to compute A x ?5. If A is m-by-n and B is n-by-p, how many multiplications are required to compute A B ?Rotations and Scaling1. What is R(30&ordm;)?$$R(\\theta) \\ = \\\\left(  \\begin{array}{rr}     \\cos{\\theta} &amp; \\sin{\\theta} \\\\    -\\sin{\\theta} &amp; \\cos{\\theta}  \\end{array}  \\right)$$2. Explain https://xkcd.com/184.3. What is the value of $\\theta$ ?$$R(\\theta) \\ = \\\\left(  \\begin{array}{rr}     0.8 &amp; 0.6 \\\\    -0.6 &amp; 0.8  \\end{array}  \\right)$$4. What is the value of $\\theta$ ? 5. Edit a copy of Rotate.m and replace the house with a hand.  You can use my hand or your own hand; see exercise 3.4 in Numerical Computing with MATLAB . Computer Graphics1. Show how homogeneous coordinates and matrix-vector multiplication by Tx, Ty or Tz produce translation.2. What is the range of the rotations used by the pitch, roll, and yaw buttons on the Grafix app?3. What color in the beacon on top of the plane? How would you change the beacon's color?4, What is the function of the resolution and offset sliders for the teapot?5, How many times does the bucky ball bounce off the sides of the plot window?Matrices and Cubes1. What is the color of central cubelet in the Color Cube?2. What do the \"&lt;=\" , \"&lt;==\" , \"=&gt;\" and  \"==&gt;\" buttons on Qube do?3. What is \"God's Number\" for a 3-by-3-by-3 Rubik's Cube? What are Q20 and Q26? See Cleve's Corner 2022/09/05.4. Can you restore the following scrambled cubes with fewer moves than &lt;==, the unscramble key?  Use the quarter-turn metric and reset the cube with start or by clicking on stack and Q0. You might also want to set speed to 30 or 45,LRUDFBLRL'R'FLLLRBQ26Reset the random number generator by entering  rng(r)  for some   small integer r in the command window and then generate six   random rotations with the   ==&gt; key.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2023a",
            "content_html": "<div class=\"content\"><!--introduction--><p>Try your hand at a few exercises involving <a href=\"https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices\">Exploring Matrices</a>.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#39c51606-0f1d-4f63-a836-a5b7b53bd13b\">Qube Simplified</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#7c52cde6-70d3-4ad5-b1a1-37c5ce6e87cc\">Exploring Matrices Exercises</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#72d1baf3-32a5-43fd-9ee9-d78b0756d365\">Matrix Multiplication</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#5866120b-8ad5-44c6-91d4-7599fdd930ad\">Rotations and Scaling</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#9ee4efdc-6cce-4067-b642-b70c3c75d2c6\">Computer Graphics</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#08826629-b0f9-4a97-a3e3-655f52742c85\">Matrices and Cubes</a></li></ul></div><h4>Qube Simplified<a name=\"39c51606-0f1d-4f63-a836-a5b7b53bd13b\"></a></h4><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Qube_simplified.png\" vspace=\"5\" /> </p><p>I have simplified the <tt>Qube</tt> app by removing these four buttons.</p><div><ul><li><tt>solve</tt>.  The &lt;== key now controls the unscrambling   operation.</li></ul></div><div><ul><li><tt>scramble</tt>.  The ==&gt; key now does six random rotations.</li></ul></div><div><ul><li><tt>order</tt>.  I never found a satisfactory reference for   the group theory of Rubik's cube.</li></ul></div><div><ul><li><tt>score</tt>.  I never found a use for the nuclear norm.</li></ul></div><p>Code for <tt>Qube</tt> dated 9/24/2023 is included in the <a href=\"https://blogs.mathworks.com/cleve/files/Apps_mzip.m\">Apps mzip archive</a>.</p><h4>Exploring Matrices Exercises<a name=\"7c52cde6-70d3-4ad5-b1a1-37c5ce6e87cc\"></a></h4><p>Here are a few exercises for <a href=\"https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices\">Exploring Matrices</a>. The answers are available at <a href=\"https://blogs.mathworks.com/cleve/files/ExMatAnswers.pdf\">ExMatAnswers</a>.</p><h4>Matrix Multiplication<a name=\"72d1baf3-32a5-43fd-9ee9-d78b0756d365\"></a></h4><p><b>1.</b> Compute by rows, and by columns.</p><p>$$  \\left(  \\begin{array}{rrr}     8 &amp; 1 &amp; 6 \\\\     3 &amp; 5 &amp; 7 \\\\     4 &amp; 9 &amp; 2  \\end{array}  \\right)  \\left(  \\begin{array}{r}     1  \\\\     1  \\\\     1  \\end{array}  \\right)$$</p><p><b>2.</b> Solve for $z$ using inner products of rows, and using linear combinations of columns.</p><p>$$  \\left(  \\begin{array}{rrr}     1 &amp; 2 &amp; 3 \\\\     4 &amp; 5 &amp; 6 \\\\     7 &amp; 8 &amp; 9  \\end{array}  \\right)  \\left(  \\begin{array}{r}     1  \\\\     z  \\\\     1  \\end{array}  \\right)  \\ = \\  \\left(  \\begin{array}{r}     0  \\\\     0  \\\\     0  \\end{array}  \\right)$$</p><p><b>3.</b> What do the <tt>m</tt>, <tt>n</tt> and <tt>p</tt> buttons on the <tt>Multiply</tt> app do? What are the other buttons and what do they do?</p><p><b>4.</b> If <i>A</i> is n-by-n and <i>x</i> is n-by-1, how many multiplications are required to compute <i>A x</i> ?</p><p><b>5.</b> If <i>A</i> is m-by-n and <i>B</i> is n-by-p, how many multiplications are required to compute <i>A B</i> ?</p><h4>Rotations and Scaling<a name=\"5866120b-8ad5-44c6-91d4-7599fdd930ad\"></a></h4><p><b>1.</b> What is <i>R</i>(30&ordm;)?</p><p>$$R(\\theta) \\ = \\\\left(  \\begin{array}{rr}     \\cos{\\theta} &amp; \\sin{\\theta} \\\\    -\\sin{\\theta} &amp; \\cos{\\theta}  \\end{array}  \\right)$$</p><p><b>2.</b> Explain <a href=\"https://xkcd.com/184\">https://xkcd.com/184</a>.</p><p><b>3.</b> What is the value of $\\theta$ ?</p><p>$$R(\\theta) \\ = \\\\left(  \\begin{array}{rr}     0.8 &amp; 0.6 \\\\    -0.6 &amp; 0.8  \\end{array}  \\right)$$</p><p><b>4.</b> What is the value of $\\theta$ ?</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/theta_exer.png\" vspace=\"5\" /> </p><p><b>5.</b> Edit a copy of <tt>Rotate.m</tt> and replace the house with a hand.  You can use <a href=\"https://mathworks-my.sharepoint.com/:u:/p/moler/EVREwZQo4ZBLkDggPTky6o4BNIfckvaLQoCDdX4ICjch9A?e=dGA2Y4\">my hand</a> or your own hand; see exercise 3.4 in <a href=\"https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/interp.pdf\">Numerical Computing with MATLAB</a> .</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/hand_exer.png\" vspace=\"5\" /> </p><h4>Computer Graphics<a name=\"9ee4efdc-6cce-4067-b642-b70c3c75d2c6\"></a></h4><p><b>1.</b> Show how homogeneous coordinates and matrix-vector multiplication by <tt>Tx</tt>, <tt>Ty</tt> or <tt>Tz</tt> produce translation.</p><p><b>2.</b> What is the range of the rotations used by the pitch, roll, and yaw buttons on the <tt>Grafix</tt> app?</p><p><b>3.</b> What color in the beacon on top of the plane? How would you change the beacon's color?</p><p><b>4,</b> What is the function of the resolution and offset sliders for the teapot?</p><p><b>5,</b> How many times does the bucky ball bounce off the sides of the plot window?</p><h4>Matrices and Cubes<a name=\"08826629-b0f9-4a97-a3e3-655f52742c85\"></a></h4><p><b>1.</b> What is the color of central cubelet in the Color Cube?</p><p><b>2.</b> What do the \"&lt;=\" , \"&lt;==\" , \"=&gt;\" and  \"==&gt;\" buttons on <tt>Qube</tt> do?</p><p><b>3.</b> What is \"God's Number\" for a 3-by-3-by-3 Rubik's Cube? What are <tt>Q20</tt> and <tt>Q26</tt>? See <a href=\"https://blogs.mathworks.com/cleve/2022/09/05/rubiks-cube-superflips-and-gods-number\">Cleve's Corner 2022/09/05</a>.</p><p><b>4.</b> Can you restore the following scrambled cubes with fewer moves than <tt>&lt;==</tt>, the unscramble key?  Use the quarter-turn metric and reset the cube with <tt>start</tt> or by clicking on <tt>stack</tt> and <tt>Q0</tt>. You might also want to set <tt>speed</tt> to 30 or 45,</p><div><ul><li><tt>LRUDFB</tt></li></ul></div><div><ul><li><tt>LRL'R'</tt></li></ul></div><div><ul><li><tt>FLLLRB</tt></li></ul></div><div><ul><li><tt>Q26</tt></li></ul></div><div><ul><li>Reset the random number generator by entering  <tt>rng(r)</tt>  for some   small integer <tt>r</tt> in the command window and then generate six   random rotations with the   <tt>==&gt;</tt> key.</li></ul></div><!--     function grabCode_661f86ea0d734810b8ca2514e6ba69c9() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='661f86ea0d734810b8ca2514e6ba69c9 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 661f86ea0d734810b8ca2514e6ba69c9';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2023 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2023a<br /></p></div><!--661f86ea0d734810b8ca2514e6ba69c9 ##### SOURCE BEGIN #####%% Exploring Matrices Exercises% Try your hand at a few exercises involving% <https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices% Exploring Matrices>.%% Qube Simplified%% <<Qube_simplified.png>>%% I have simplified the |Qube| app by removing these four buttons.% % * |solve|.  The <== key now controls the unscrambling%   operation.%% * |scramble|.  The ==> key now does six random rotations.%% * |order|.  I never found a satisfactory reference for  %   the group theory of Rubik's cube. %% * |score|.  I never found a use for the nuclear norm.%% Code for |Qube| dated 9/24/2023 is included in the% <https://blogs.mathworks.com/cleve/files/Apps_mzip.m% Apps mzip archive>.%% Exploring Matrices Exercises%% Here are a few exercises for % <https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices% Exploring Matrices>.% The answers are available at % <https://blogs.mathworks.com/cleve/files/ExMatAnswers.pdf% ExMatAnswers>.%% Matrix Multiplication%% *1.* % Compute by rows, and by columns.%% $$%   \\left(%   \\begin{array}{rrr}%      8 & 1 & 6 \\\\%      3 & 5 & 7 \\\\%      4 & 9 & 2%   \\end{array}%   \\right)     %   \\left(%   \\begin{array}{r}%      1  \\\\%      1  \\\\%      1%   \\end{array}%   \\right) % $$%%% *2.*% Solve for $z$ using inner products of rows, and% using linear combinations of columns.%% $$ %   \\left(%   \\begin{array}{rrr}%      1 & 2 & 3 \\\\%      4 & 5 & 6 \\\\%      7 & 8 & 9%   \\end{array}%   \\right) %   \\left(%   \\begin{array}{r}%      1  \\\\%      z  \\\\%      1%   \\end{array}%   \\right) %   \\ = \\%   \\left(%   \\begin{array}{r}%      0  \\\\%      0  \\\\%      0%   \\end{array}%   \\right) % $$%%% *3.*% What do the |m|, |n| and |p| buttons on the |Multiply| app do?% What are the other buttons and what do they do?%%% *4.* % If _A_ is n-by-n and _x_ is n-by-1,% how many multiplications are required to compute _A x_ ?%% *5.* % If _A_ is m-by-n and _B_ is n-by-p,% how many multiplications are required to compute _A B_ ?%% Rotations and Scaling%% *1.*% What is _R_(30º)?%% $$ % R(\\theta) \\ = \\% \\left(%   \\begin{array}{rr}%      \\cos{\\theta} & \\sin{\\theta} \\\\%     -\\sin{\\theta} & \\cos{\\theta}%   \\end{array}%   \\right)% $$%% *2.*% Explain <https://xkcd.com/184>.%% *3.*% What is the value of $\\theta$ ?%% $$ % R(\\theta) \\ = \\% \\left(%   \\begin{array}{rr}%      0.8 & 0.6 \\\\%     -0.6 & 0.8%   \\end{array}%   \\right) % $$%%% *4.*% What is the value of $\\theta$ ?%% <<theta_exer.png>>%%% *5.* % Edit a copy of |Rotate.m| and replace the house with a hand.  You can use% <https://mathworks-my.sharepoint.com/:u:/p/moler/EVREwZQo4ZBLkDggPTky6o4BNIfckvaLQoCDdX4ICjch9A?e=dGA2Y4  my hand>% or your own hand; see exercise 3.4 in% <https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/interp.pdf% Numerical Computing with MATLAB> .%% <<hand_exer.png>>%%% Computer Graphics%% *1.*% Show how homogeneous coordinates and matrix-vector multiplication by% |Tx|, |Ty| or |Tz| produce translation.%%% *2.*% What is the range of the rotations used by the pitch, roll, and yaw% buttons on the |Grafix| app?%% *3.*% What color in the beacon on top of the plane?% How would you change the beacon's color?%%% *4,*% What is the function of the resolution and offset sliders for the teapot?%%% *5,*% How many times does the bucky ball bounce off the sides of the plot% window?%%% Matrices and Cubes%% *1.*% What is the color of central cubelet in the Color Cube?%%% *2.*% What do the \"<=\" , \"<==\" , \"=>\" and  \"==>\" buttons on |Qube| do?%%% *3.* % What is \"God's Number\" for a 3-by-3-by-3 Rubik's Cube?% What are |Q20| and |Q26|?% See <https://blogs.mathworks.com/cleve/2022/09/05/rubiks-cube-superflips-and-gods-number% Cleve's Corner 2022/09/05>.%%% *4.*% Can you restore the following scrambled cubes with fewer moves than |<==|,% the unscramble key?  Use the quarter-turn metric and% reset the cube with |start| or by clicking on |stack| and |Q0|.% You might also want to set |speed| to 30 or 45,%% * |LRUDFB|% % * |LRL'R'|% % * |FLLLRB|% % * |Q26|%% * Reset the random number generator by entering  |rng(r)|  for some%   small integer |r| in the command window and then generate six %   random rotations with the   |==>| key.##### SOURCE END ##### 661f86ea0d734810b8ca2514e6ba69c9-->",
            "url": "https://hpc.social/commercial-blog/2023/exploring-matrices-exercises/",
            
            
            
            
            
            "date_published": "2023-09-25T17:57:28-06:00",
            "date_modified": "2023-09-25T17:57:28-06:00",
            
                "author": "MathWorks Blogs"
            
        },
    
        {
            "id": "https://hpc.social/commercial-blog/2023/exploring-matrices/",
            "title": "Exploring Matrices",
            "summary": null,
            "content_text": "I have spent much of my career working to bring abstract linear algebra and practical matrix computation closer together.  This project is my latest effort.ContentsAlibiExploring MatricesYouTube VideosMatrix MultiplicationRotation and ScalingComputer GraphicsMatrices and CubesSimulinkAI and GorillasSoftwareThanksDedicationAlibiOver sixty years ago, as a sophomore contemplating a major in mathematics, I took a course entitled Survey of Modern Algebra. We used a now-classic textbook by MacLane and Birkhoff that featured abstract theorems about groups, rings, fields, vector spaces and linear algebra. I remember the colorful terms alias and alibi had something to do with change  of basis and change of position, but I have never seen those terms again.The next year, I took Numerical Analysis.  We did some of the homework on a Burroughhs 205 Datatron and I wrote a machine language program to solve simultaneous linear equations.  I was hooked.But at the time I did not realize that the two courses were about the same magnificent object -- the matrix.Exploring MatricesExploring Matrices is a multi-media project that shows matrices in action.  Short videos, blog posts, interactive MATLAB software and self-study exercises investigate applications of matrices. The material is intended for studebts in an undergraduate course in linear algebra or computational science. However, anyone using matrices should find topics that interest them.The first release of Exploring Matrices has six modules. All of the modules feature animated MATLAB displays and four of the modules include interactive MATLAB \"apps\". The modules are:Matrix MultiplicationRotation and ScalingComputer GraphicsMatrices and CubesSimulinkAI and Gorillas %YouTube VideosAn introduction and six videos ranging in length from one to six minutes, are available on YouTube athttps://youtube.com/playlist?list=PLn8PRpmsu08oGNmtBfFOmgVC0TlXDaLDJ.The first four of these videos feature animations produced by our four MATLAB apps -- Multiply, Rotate, Grafix, and Qube. The other two videos describe two applications, simulation of control systems and neural networks for facial recognition (of gorillas).Matrix MultiplicationSome viewers may just be learning the mechanics of matrix multiplication. Other viewers will have encountered it years ago. The traditional algorithm for computing the product of two matrices involves inner products between the rows of the first matrix and the columns of the second.  A less familiar algorithm, which involves linear combinations of the columns of the first matrix, is often more efficient and informative.  The two approaches produce the same final result from intermediate terms in different orders.Here is one frame from the animation of these two algorithms generated by our Multiply app.  The highlighted element in the first matrix either moves across the rows or goes down the columns. Rotation and ScalingOur first matrices are 2-by-2.  We see how the matrix$$R \\ = \\\\left(  \\begin{array}{rr}     \\cos{\\theta} &amp; \\sin{\\theta} \\\\    -\\sin{\\theta} &amp; \\cos{\\theta}  \\end{array}  \\right)$$rotates points by the angle $\\theta$, measured in degrees.We also see how the matrix$$S \\ = \\\\left(  \\begin{array}{rr}     \\sigma &amp; 0 \\\\     0 &amp; \\sigma  \\end{array}  \\right)\\ \\ \\ \\ \\ \\ \\ \\$$makes objects larger and smaller.The two can be combined with matrix multiplication. For more operations in higher dimensions, matrix multiplication provides a unifying framework.Here is one frame from the animation of rotation and scaling generated by the Rotate app.  The first panel displays a 2-by-2 rotation matrix, the second panel displays a 2-by-2 diagonal scaling matrix, and the third panel displays their product. Computer GraphicsOperations with the 4-by-4 matrices that are at the heart of modern computer graphics employ a system known as \"homogeneous coordinates\". The leading 3-by-3 submatrix produces rotation and scaling in three dimensions.  The fourth column produces translations.Here is one frame from an animation of rotation about the x-axis generated by the Grafix app. This is often called \"pitch\".  Rotation about the y- and z-axes are \"roll\" and \"yaw\", Matrices and CubesRubik's Cube, named for its inventor, Ern&#337; Rubik, a Hungarian professor of architecture, is the greatest mathematical puzzle of all time. Our digital simulation of the puzzle, Qube, is powered by rotation matrices.The model consists of 27 identical copies of a single small cubelet whose sides are colored red, white, blue, yellow, orange and green. Initially, all cubelets have the same orientation. A move is the simultaneous rotation of the nine cubelets in one of the six faces, by 90&deg; or 180&deg;, clockwise or counterclockwise.  This leads to $4.3 \\times 10^{19}$ possible configurations for a scrambled cube.The object of the puzzle is to return a scrambled cube to the initial state.  Most people are interested in solving the puzzle rapidly, but I am more interested in the number of moves required.Qube offers animations of many mathematical properties of Rubik's cubes.  Here is a frame from one of them. SimulinkMATLAB's companion product, Simulink, is a block diagram programming environment used to design and simulate systems with multidomain models and to automatically generate the code required to operate embedded processors.Matrices are involved in dozens of different ways by Simulink, but most users rarely see operations at that detailed level. Our Simulink module shows a model of an automobile being driven on a test track and displays the pitch, roll and yaw recorded by the matrix connecting the coordinate system for the automobile to the coordinate system for the track. AI and GorillasThis is a personal story about a project in the early stages of development.My wife and I first visited gorillas in the Volcano National Park of Rwanda twelve years ago. An American primatologist named Dian Fossey had studied the gorillas between 1966 and her murder by poachers in 1985. Her book Gorillas in the Mist was very popular and was the basis for a critically acclaimed 1988 Hollywood movie starring Sigourney Weaver.We have become good friends with the people in the Gorilla Doctors organization. These African and American veterinarians attend to the health of the roughly 1,000 gorillas in the park.  Most of the gorillas have African names like \"Inkundwa\" and \"Maisha\".  We envision a gorilla facial recognition system that is available on cell phones and tablets so that new guides and doctors can learn the names of their patients.Inception-v3 is a convolutional neural network (CNN) that is widely used for image processing. We have a version of the network pretrained on more than a million images from the ImageNet database. This publicly available system knows nothing about gorillas. We must do additional training using photos of our unique subjects.This is where matrices are applied.  Training a CNN involves determining the values of thousands of weights and coefficients.  The digital photos, regarded as vectors, and repeatedly multiplied by circulant matrices where each row is a shifted copy of the other rows.  Importantly, a modern CNN also contains some nonlinear layers.Here is one photo from a small test collection.  Indundwa appears to have his own selfie stick. SoftwareA self-extracting MATLAB source archive of our four apps is available athttps://blogs.mathworks.com/cleve/files/Apps_mzip.mThanksThanks to Jackson Kustell, Josh Bethoney and Heather Gorr from MathWorks and Jan Ramer and Mike Cranfield from Gorilla Doctors.DedicationWe dedicate the Gorillas project to the memory of Mike Cranfield, DMV.  Mike was Executive Director of the Mountain Gorillas Veterinary Project in Rwanda from 1999 until 2014.  Before Rwanda, he held various positions at the Maryland Zoo in Baltimore.Three months ago, Mike sent us a disc drive containing over 14,000 photographs of gorillas he had taken in Rwanda.  We are now sorting and organizing the photos to provide  specialized training of the facial recognition neural net.A month ago, Mike was hospitalized from an apparent attack of West Nile Virus.  He passed away on August 27.  Ironically, after years of working safely in the mountain jungles of Central Africa, it is likely that he acquired the virus from a mosquito bite at his family's cabin in Canada.Get       the MATLAB code (requires JavaScript)      Published with MATLAB&reg; R2023a",
            "content_html": "<div class=\"content\"><!--introduction--><p>I have spent much of my career working to bring abstract linear algebra and practical matrix computation closer together.  This project is my latest effort.</p><!--/introduction--><h3>Contents</h3><div><ul><li><a href=\"https://feeds.feedburner.com/mathworks/moler#76e7f706-3666-4329-b846-6b0ab1b75468\">Alibi</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#6c62b301-b35d-4699-a60a-6dc8bd2f86c3\">Exploring Matrices</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#653e3c66-3977-46c8-aef6-8ae60d87baa9\">YouTube Videos</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#ea1683fd-3523-4939-8c2e-c581324ac557\">Matrix Multiplication</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#254c72ed-9b08-4442-b7a5-6d4f512351ef\">Rotation and Scaling</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#cef8c368-00e7-4ccb-9f05-f2435e94a403\">Computer Graphics</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#eec3c339-e1b1-466c-8361-62f63808b278\">Matrices and Cubes</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#873c693b-1541-41b8-b6c6-583b05562cd0\">Simulink</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#e6b8796b-c1b0-4132-9038-5e5cc92f9ec2\">AI and Gorillas</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#96f4d47e-9920-4215-bf7d-2bf2a3286ab9\">Software</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#29bbbdbc-5d65-4ac3-a74e-1aafe0388a95\">Thanks</a></li><li><a href=\"https://feeds.feedburner.com/mathworks/moler#6116cfa9-4ed1-4e87-b2ed-099f26839a77\">Dedication</a></li></ul></div><h4>Alibi<a name=\"76e7f706-3666-4329-b846-6b0ab1b75468\"></a></h4><p>Over sixty years ago, as a sophomore contemplating a major in mathematics, I took a course entitled Survey of Modern Algebra. We used a now-classic textbook by MacLane and Birkhoff that featured abstract theorems about groups, rings, fields, vector spaces and linear algebra. I remember the colorful terms <i>alias</i> and <i>alibi</i> had something to do with change  of basis and change of position, but I have never seen those terms again.</p><p>The next year, I took Numerical Analysis.  We did some of the homework on a Burroughhs 205 Datatron and I wrote a machine language program to solve simultaneous linear equations.  I was hooked.</p><p>But at the time I did not realize that the two courses were about the same magnificent object -- the <i>matrix</i>.</p><h4>Exploring Matrices<a name=\"6c62b301-b35d-4699-a60a-6dc8bd2f86c3\"></a></h4><p>Exploring Matrices is a multi-media project that shows matrices in action.  Short videos, blog posts, interactive MATLAB software and self-study exercises investigate applications of matrices. The material is intended for studebts in an undergraduate course in linear algebra or computational science. However, anyone using matrices should find topics that interest them.</p><p>The first release of Exploring Matrices has six modules. All of the modules feature animated MATLAB displays and four of the modules include interactive MATLAB \"apps\". The modules are:</p><div><ul><li>Matrix Multiplication</li><li>Rotation and Scaling</li><li>Computer Graphics</li><li>Matrices and Cubes</li><li>Simulink</li><li>AI and Gorillas %</li></ul></div><h4>YouTube Videos<a name=\"653e3c66-3977-46c8-aef6-8ae60d87baa9\"></a></h4><p>An introduction and six videos ranging in length from one to six minutes, are available on YouTube at</p><p><a href=\"https://youtube.com/playlist?list=PLn8PRpmsu08oGNmtBfFOmgVC0TlXDaLDJ\">https://youtube.com/playlist?list=PLn8PRpmsu08oGNmtBfFOmgVC0TlXDaLDJ</a>.</p><p>The first four of these videos feature animations produced by our four MATLAB apps -- <tt>Multiply</tt>, <tt>Rotate</tt>, <tt>Grafix</tt>, and <tt>Qube</tt>. The other two videos describe two applications, simulation of control systems and neural networks for facial recognition (of gorillas).</p><h4>Matrix Multiplication<a name=\"ea1683fd-3523-4939-8c2e-c581324ac557\"></a></h4><p>Some viewers may just be learning the mechanics of matrix multiplication. Other viewers will have encountered it years ago. The traditional algorithm for computing the product of two matrices involves inner products between the rows of the first matrix and the columns of the second.  A less familiar algorithm, which involves linear combinations of the columns of the first matrix, is often more efficient and informative.  The two approaches produce the same final result from intermediate terms in different orders.</p><p>Here is one frame from the animation of these two algorithms generated by our <tt>Multiply</tt> app.  The highlighted element in the first matrix either moves across the rows or goes down the columns.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Multy.png\" vspace=\"5\" /> </p><h4>Rotation and Scaling<a name=\"254c72ed-9b08-4442-b7a5-6d4f512351ef\"></a></h4><p>Our first matrices are 2-by-2.  We see how the matrix</p><p>$$R \\ = \\\\left(  \\begin{array}{rr}     \\cos{\\theta} &amp; \\sin{\\theta} \\\\    -\\sin{\\theta} &amp; \\cos{\\theta}  \\end{array}  \\right)$$</p><p>rotates points by the angle $\\theta$, measured in degrees.</p><p>We also see how the matrix</p><p>$$S \\ = \\\\left(  \\begin{array}{rr}     \\sigma &amp; 0 \\\\     0 &amp; \\sigma  \\end{array}  \\right)\\ \\ \\ \\ \\ \\ \\ \\$$</p><p>makes objects larger and smaller.</p><p>The two can be combined with matrix multiplication. For more operations in higher dimensions, matrix multiplication provides a unifying framework.</p><p>Here is one frame from the animation of rotation and scaling generated by the <tt>Rotate</tt> app.  The first panel displays a 2-by-2 rotation matrix, the second panel displays a 2-by-2 diagonal scaling matrix, and the third panel displays their product.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Rotate.png\" vspace=\"5\" /> </p><h4>Computer Graphics<a name=\"cef8c368-00e7-4ccb-9f05-f2435e94a403\"></a></h4><p>Operations with the 4-by-4 matrices that are at the heart of modern computer graphics employ a system known as \"homogeneous coordinates\". The leading 3-by-3 submatrix produces rotation and scaling in three dimensions.  The fourth column produces translations.</p><p>Here is one frame from an animation of rotation about the x-axis generated by the <tt>Grafix</tt> app. This is often called \"pitch\".  Rotation about the y- and z-axes are \"roll\" and \"yaw\",</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Graphics.png\" vspace=\"5\" /> </p><h4>Matrices and Cubes<a name=\"eec3c339-e1b1-466c-8361-62f63808b278\"></a></h4><p>Rubik's Cube, named for its inventor, Ern&#337; Rubik, a Hungarian professor of architecture, is the greatest mathematical puzzle of all time. Our digital simulation of the puzzle, <tt>Qube</tt>, is powered by rotation matrices.</p><p>The model consists of 27 identical copies of a single small <i>cubelet</i> whose sides are colored red, white, blue, yellow, orange and green. Initially, all cubelets have the same orientation. A <i>move</i> is the simultaneous rotation of the nine cubelets in one of the six faces, by 90&deg; or 180&deg;, clockwise or counterclockwise.  This leads to $4.3 \\times 10^{19}$ possible configurations for a scrambled cube.</p><p>The object of the puzzle is to return a scrambled cube to the initial state.  Most people are interested in solving the puzzle rapidly, but I am more interested in the number of moves required.</p><p><tt>Qube</tt> offers animations of many mathematical properties of Rubik's cubes.  Here is a frame from one of them.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Qube_frame.png\" vspace=\"5\" /> </p><h4>Simulink<a name=\"873c693b-1541-41b8-b6c6-583b05562cd0\"></a></h4><p>MATLAB's companion product, Simulink, is a block diagram programming environment used to design and simulate systems with multidomain models and to automatically generate the code required to operate embedded processors.</p><p>Matrices are involved in dozens of different ways by Simulink, but most users rarely see operations at that detailed level. Our Simulink module shows a model of an automobile being driven on a test track and displays the pitch, roll and yaw recorded by the matrix connecting the coordinate system for the automobile to the coordinate system for the track.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Simulink.png\" vspace=\"5\" /> </p><h4>AI and Gorillas<a name=\"e6b8796b-c1b0-4132-9038-5e5cc92f9ec2\"></a></h4><p>This is a personal story about a project in the early stages of development.</p><p>My wife and I first visited gorillas in the Volcano National Park of Rwanda twelve years ago. An American primatologist named Dian Fossey had studied the gorillas between 1966 and her murder by poachers in 1985. Her book <i>Gorillas in the Mist</i> was very popular and was the basis for a critically acclaimed 1988 Hollywood movie starring Sigourney Weaver.</p><p>We have become good friends with the people in the <a href=\"https://www.gorilladoctors.org/\">Gorilla Doctors</a> organization. These African and American veterinarians attend to the health of the roughly 1,000 gorillas in the park.  Most of the gorillas have African names like \"Inkundwa\" and \"Maisha\".  We envision a gorilla facial recognition system that is available on cell phones and tablets so that new guides and doctors can learn the names of their patients.</p><p>Inception-v3 is a convolutional neural network (CNN) that is widely used for image processing. We have a version of the network pretrained on more than a million images from the ImageNet database. This publicly available system knows nothing about gorillas. We must do additional training using photos of our unique subjects.</p><p>This is where matrices are applied.  Training a CNN involves determining the values of thousands of weights and coefficients.  The digital photos, regarded as vectors, and repeatedly multiplied by circulant matrices where each row is a shifted copy of the other rows.  Importantly, a modern CNN also contains some nonlinear layers.</p><p>Here is one photo from a small test collection.  Indundwa appears to have his own selfie stick.</p><p><img alt=\"\" hspace=\"5\" src=\"https://blogs.mathworks.com/cleve/files/Gorillas.png\" vspace=\"5\" /> </p><h4>Software<a name=\"96f4d47e-9920-4215-bf7d-2bf2a3286ab9\"></a></h4><p>A self-extracting MATLAB source archive of our four apps is available at</p><p><a href=\"https://blogs.mathworks.com/cleve/files/Apps_mzip.m\">https://blogs.mathworks.com/cleve/files/Apps_mzip.m</a></p><h4>Thanks<a name=\"29bbbdbc-5d65-4ac3-a74e-1aafe0388a95\"></a></h4><p>Thanks to Jackson Kustell, Josh Bethoney and Heather Gorr from MathWorks and Jan Ramer and Mike Cranfield from Gorilla Doctors.</p><h4>Dedication<a name=\"6116cfa9-4ed1-4e87-b2ed-099f26839a77\"></a></h4><p>We dedicate the Gorillas project to the memory of <a href=\"https://www.marylandzoo.org/news-and-updates/2023/08/mourning-the-loss-of-dr-mike-cranfield\">Mike Cranfield, DMV</a>.  Mike was Executive Director of the Mountain Gorillas Veterinary Project in Rwanda from 1999 until 2014.  Before Rwanda, he held various positions at the Maryland Zoo in Baltimore.</p><p>Three months ago, Mike sent us a disc drive containing over 14,000 photographs of gorillas he had taken in Rwanda.  We are now sorting and organizing the photos to provide  specialized training of the facial recognition neural net.</p><p>A month ago, Mike was hospitalized from an apparent attack of West Nile Virus.  He passed away on August 27.  Ironically, after years of working safely in the mountain jungles of Central Africa, it is likely that he acquired the virus from a mosquito bite at his family's cabin in Canada.</p><!--     function grabCode_77d29507140c40a1a497777d9fd035e6() {        // Remember the title so we can use it in the new page        title = document.title;        // Break up these strings so that their presence        // in the Javascript doesn't mess up the search for        // the MATLAB code.        t1='77d29507140c40a1a497777d9fd035e6 ' + '##### ' + 'SOURCE BEGIN' + ' #####';        t2='##### ' + 'SOURCE END' + ' #####' + ' 77d29507140c40a1a497777d9fd035e6';            b=document.getElementsByTagName('body')[0];        i1=b.innerHTML.indexOf(t1)+t1.length;        i2=b.innerHTML.indexOf(t2);         code_string = b.innerHTML.substring(i1, i2);        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,'--');        // Use /x3C/g instead of the less-than character to avoid errors         // in the XML parser.        // Use '\\x26#60;' instead of '<' so that the XML parser        // doesn't go ahead and substitute the less-than character.         code_string = code_string.replace(/\\x3C/g, '\\x26#60;');        copyright = 'Copyright 2023 The MathWorks, Inc.';        w = window.open();        d = w.document;        d.write('<pre>\\n');        d.write(code_string);        // Add copyright line at the bottom if specified.        if (copyright.length > 0) {            d.writeln('');            d.writeln('%%');            if (copyright.length > 0) {                d.writeln('% _' + copyright + '_');            }        }        d.write('</pre>\\n');        d.title = title + ' (MATLAB code)';        d.close();    }        --><p style=\"text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;\"><br /><a href=\"\"><span style=\"font-size: x-small; font-style: italic;\">Get       the MATLAB code <noscript>(requires JavaScript)</noscript></span></a><br /><br />      Published with MATLAB&reg; R2023a<br /></p></div><!--77d29507140c40a1a497777d9fd035e6 ##### SOURCE BEGIN #####%% Exploring Matrices% I have spent much of my career working to bring abstract linear % algebra and practical matrix computation closer together.  This project% is my latest effort.%% Alibi% Over sixty years ago, as a sophomore contemplating a major% in mathematics, I took a course entitled Survey of Modern Algebra.% We used a now-classic textbook by MacLane and Birkhoff that featured% abstract theorems about groups, rings, fields, vector spaces and% linear algebra.% I remember the colorful terms _alias_ and _alibi_ had something% to do with change  of basis and change of position, but I have never% seen those terms again.%% The next year, I took Numerical Analysis.  We did some of the homework% on a Burroughhs 205 Datatron and I wrote a machine language program to% solve simultaneous linear equations.  I was hooked.%% But at the time I did not realize that the two courses were about the% same magnificent object REPLACE_WITH_DASH_DASH the _matrix_. % %% Exploring Matrices% Exploring Matrices is a multi-media project that shows matrices% in action.  Short videos, blog posts,% interactive MATLAB software and self-study exercises investigate% applications of matrices. The material is intended for studebts in an% undergraduate course in linear algebra or computational science.% However, anyone using matrices should find topics that interest them.%% The first release of Exploring Matrices has six modules.% All of the modules feature animated MATLAB displays and% four of the modules include interactive MATLAB \"apps\".% The modules are:% % * Matrix Multiplication% * Rotation and Scaling% * Computer Graphics% * Matrices and Cubes% * Simulink% * AI and Gorillas% %%% YouTube Videos% An introduction and six videos ranging in length from one to % six minutes, are available on YouTube at%% <https://youtube.com/playlist?list=PLn8PRpmsu08oGNmtBfFOmgVC0TlXDaLDJ>.%% The first four of these videos feature animations produced by our four% MATLAB apps REPLACE_WITH_DASH_DASH |Multiply|, |Rotate|, |Grafix|, and |Qube|.% The other two videos describe two applications, simulation of control% systems and neural networks for facial recognition (of gorillas).%% Matrix Multiplication% Some viewers may just be learning the mechanics of matrix multiplication.% Other viewers will have encountered it years ago.% The traditional algorithm for computing the product of two% matrices involves inner products between the rows of the first matrix% and the columns of the second.  A less familiar algorithm, which% involves linear combinations of the columns of the first matrix,% is often more efficient and informative.  The two approaches produce% the same final result from intermediate terms in different orders.%% Here is one frame from the animation of these two algorithms generated% by our |Multiply| app.  The highlighted element in the first matrix% either moves across the rows or goes down the columns.%% <<Multy.png>>%% Rotation and Scaling% Our first matrices are 2-by-2.  We see how the matrix%% $$ % R \\ = \\% \\left(%   \\begin{array}{rr}%      \\cos{\\theta} & \\sin{\\theta} \\\\%     -\\sin{\\theta} & \\cos{\\theta}%   \\end{array}%   \\right) % $$%% rotates points by the angle $\\theta$, measured in degrees.%% We also see how the matrix%% $$ % S \\ = \\% \\left(%   \\begin{array}{rr}%      \\sigma & 0 \\\\%      0 & \\sigma%   \\end{array}%   \\right) % \\ \\ \\ \\ \\ \\ \\ \\% $$%% makes objects larger and smaller.%% The two can be combined with matrix multiplication.% For more operations in higher dimensions, matrix multiplication% provides a unifying framework.%% Here is one frame from the animation of rotation and scaling generated% by the |Rotate| app.  The first panel displays a 2-by-2 rotation % matrix, the second panel displays a 2-by-2 diagonal scaling matrix,% and the third panel displays their product.%% <<Rotate.png>>%%% Computer Graphics% Operations with the 4-by-4 matrices that are at the heart of modern % computer graphics employ a system known as \"homogeneous coordinates\".% The leading 3-by-3 submatrix produces rotation and scaling in % three dimensions.  The fourth column produces translations.%% Here is one frame from an animation of rotation about the x-axis% generated by the |Grafix| app.% This is often called \"pitch\".  Rotation about the y- and z-axes% are \"roll\" and \"yaw\",% % <<Graphics.png>>%%% Matrices and Cubes% Rubik's Cube, named for its inventor, Ernő Rubik, a Hungarian professor% of architecture, is the greatest mathematical puzzle of all time. Our% digital simulation of the puzzle, |Qube|, is powered by rotation % matrices.%% The model consists of 27 identical copies of a single small _cubelet_ % whose sides are colored red, white, blue, yellow, orange and green.% Initially, all cubelets have the same orientation.% A _move_ is the simultaneous rotation of the nine cubelets in one of % the six faces, by 90° or 180°, clockwise or counterclockwise.  This% leads to $4.3 \\times 10^{19}$ possible configurations for a scrambled% cube.  % % The object of the puzzle is to return a scrambled cube to the initial% state.  Most people are interested in solving the puzzle rapidly,% but I am more interested in the number of moves required.%% |Qube| offers animations of many mathematical properties% of Rubik's cubes.  Here is a frame from one of them.%% <<Qube_frame.png>>%% Simulink% MATLAB's companion product, Simulink, is a block diagram programming% environment used to design and simulate systems with multidomain % models and to automatically generate the code required to operate% embedded processors.%% Matrices are involved in dozens of different ways by Simulink,% but most users rarely see operations at that detailed level.% Our Simulink module shows a model of an automobile being driven% on a test track and displays the pitch, roll and yaw recorded by% the matrix connecting the coordinate system for the automobile to% the coordinate system for the track.%% <<Simulink.png>>%% AI and Gorillas% This is a personal story about a project in the early stages of % development.  % % My wife and I first visited gorillas% in the Volcano National Park of Rwanda twelve years ago.% An American primatologist named Dian Fossey had studied the gorillas% between 1966 and her murder by poachers in 1985.% Her book _Gorillas in the Mist_ was very popular and was the basis % for a critically acclaimed 1988 Hollywood movie starring% Sigourney Weaver.%% We have become good friends with the people in the% <https://www.gorilladoctors.org/ Gorilla Doctors> organization.% These African and American veterinarians attend to the health of the% roughly 1,000 gorillas in the park.  Most of the gorillas have% African names like \"Inkundwa\" and \"Maisha\".  We envision a% gorilla facial recognition system that is available on% cell phones and tablets so that new guides and doctors can learn% the names of their patients.%% Inception-v3 is a convolutional neural network (CNN) that is widely% used for image processing. We have a version of the network % pretrained on more than a million images from the ImageNet database. % This publicly available system knows nothing about gorillas.% We must do additional training using photos of our unique subjects.%% This is where matrices are applied.  Training a CNN involves determining% the values of thousands of weights and coefficients.  The digital photos,% regarded as vectors, and repeatedly multiplied by circulant matrices% where each row is a shifted copy of the other rows.  Importantly,% a modern CNN also contains some nonlinear layers.%% Here is one photo from a small test collection.  Indundwa appears% to have his own selfie stick. %% <<Gorillas.png>>%% Software% A self-extracting MATLAB source archive of our four apps is available at%% <https://blogs.mathworks.com/cleve/files/Apps_mzip.m>% %% Thanks% Thanks to Jackson Kustell, Josh Bethoney and Heather Gorr from MathWorks% and Jan Ramer and Mike Cranfield from Gorilla Doctors.%% Dedication  % We dedicate the Gorillas project to the memory of% <https://www.marylandzoo.org/news-and-updates/2023/08/mourning-the-loss-of-dr-mike-cranfield% Mike Cranfield, DMV>.  Mike was Executive Director of the Mountain Gorillas % Veterinary Project in Rwanda from 1999 until 2014.  Before Rwanda, % he held various positions at the Maryland Zoo in Baltimore.%% Three months ago, Mike sent us a disc drive containing over 14,000% photographs of gorillas he had taken in Rwanda.  We are now% sorting and organizing the photos to provide  specialized training% of the facial recognition neural net.%% A month ago, Mike was hospitalized from an apparent attack of West Nile% Virus.  He passed away on August 27.  Ironically, after years of working% safely in the mountain jungles of Central Africa, it is likely that% he acquired the virus from a mosquito bite at his family's cabin% in Canada.##### SOURCE END ##### 77d29507140c40a1a497777d9fd035e6-->",
            "url": "https://hpc.social/commercial-blog/2023/exploring-matrices/",
            
            
            
            
            
            "date_published": "2023-09-12T03:11:52-06:00",
            "date_modified": "2023-09-12T03:11:52-06:00",
            
                "author": "MathWorks Blogs"
            
        }
    
    ]
}
