<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>hpc.social - Aggregated Commercial Blog</title>
 <link href="https://hpc.social/atom.xml" rel="self"/>
 <link href="https://hpc.social/"/>
 <updated>2025-10-31T21:29:00-06:00</updated>
 <id>https://hpc.social</id>
 <author>
   <name>hpc.social</name>
   <email>info@hpc.social</email>
 </author>

 
 <entry>
   <title>Tangram Puzzles</title>
   <link href="https://hpc.social/2025/tangram-puzzles/"/>
   <updated>2025-10-23T15:43:47-06:00</updated>
   <id>https://hpc.social/2025/tangram-puzzles</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;The tangram is an ancient &lt;a href=&quot;https://en.wikipedia.org/wiki/Tangram&quot;&gt;Chinese puzzle&lt;/a&gt; with seven pieces.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/swan_2.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e3fac958-571e-4dfc-9943-c3e6250a779a&quot;&gt;Variety&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#23d91121-5eca-43bb-b9ef-587b28b6f440&quot;&gt;Schools&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#71e383f8-992a-444a-9334-aaa0af5bd8cf&quot;&gt;Figures&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3fe0b7fe-11b9-4809-962d-272da517b3ea&quot;&gt;Puzzle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#11e28fd4-f5c4-42a7-9c40-3350639dc0df&quot;&gt;Kitty&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#92e32c00-95f1-47b6-88d0-cba48c41904b&quot;&gt;Swan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#32ee23f9-f6d0-4f66-aa77-32538b980b92&quot;&gt;Square&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#33682566-0424-4870-9dcc-4617a477dc89&quot;&gt;Web&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Variety&lt;a name=&quot;e3fac958-571e-4dfc-9943-c3e6250a779a&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Tangram puzzles can be made with paper, plastic or wood.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/wooden_3.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Schools&lt;a name=&quot;23d91121-5eca-43bb-b9ef-587b28b6f440&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;School kids all over the world enjoy tangram puzzles.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/school.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Figures&lt;a name=&quot;71e383f8-992a-444a-9334-aaa0af5bd8cf&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Thousands of figures, like these animals, can be made.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/animals.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Puzzle&lt;a name=&quot;3fe0b7fe-11b9-4809-962d-272da517b3ea&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;My MATLAB code &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Tangram_mzip.m&quot;&gt;Tangram&lt;/a&gt; opens with a screen showing seven pieces, which are called &lt;i&gt;tans&lt;/i&gt;. There are two large triangles, one medium triangle, two small triangles, one square, and one parallelogram.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Tangram_screen.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;The puzzle is interactive. You can move the tans.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/open.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Kitty&lt;a name=&quot;11e28fd4-f5c4-42a7-9c40-3350639dc0df&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The kitty is a newcomer&apos;s favorite.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/kitty.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Swan&lt;a name=&quot;92e32c00-95f1-47b6-88d0-cba48c41904b&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The parallelogram is the only tans that does not have reflection symmetry. It needs to be reversed with the &lt;tt&gt;flipper&lt;/tt&gt; button when forming shapes like this swan. The swan at the top of this blog is looking in the opposite direction and does not need its parallelogram flipped.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/swan.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Square&lt;a name=&quot;32ee23f9-f6d0-4f66-aa77-32538b980b92&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here are the starting moves for making a square. You can finish the square yourself by downloading &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Tangram_mzip.m&quot;&gt;Tangram_mzip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or, if you are not in a do-it-yourself mood and just want the answer, see &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/square_3.gif&quot;&gt;square_3.gif&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/start.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Web&lt;a name=&quot;33682566-0424-4870-9dcc-4617a477dc89&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;There are hundreds of web sites about Tangrams. Here are two that I enjoyed.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://www.pinterest.com/ivahilator/tangram&quot;&gt;https://www.pinterest.com/ivahilator/tangram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://kubiyagames.com/products/tangram-puzzle-two-sets-with-65-challenge-cards&quot;&gt;https://kubiyagames.com/products/tangram-puzzle-two-sets-with-65-challenge-cards&lt;/a&gt;.&lt;/p&gt;

&lt;!-- 
    function grabCode_8d7a45faf5094d1d99b8164f5491dfdd() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;8d7a45faf5094d1d99b8164f5491dfdd &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 8d7a45faf5094d1d99b8164f5491dfdd&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
8d7a45faf5094d1d99b8164f5491dfdd ##### SOURCE BEGIN #####
%% Tangram Puzzle
% The tangram is an ancient 
% &lt;https://en.wikipedia.org/wiki/Tangram Chinese puzzle&gt;
% with seven pieces.
%
% &lt;&lt;swan_2.png&gt;&gt;

%% Variety
% Tangram puzzles can be made with paper, plastic or wood.
%
% &lt;&lt;wooden_3.jpg&gt;&gt;

%% Schools
% School kids all over the world enjoy tangram puzzles.
%
% &lt;&lt;school.png&gt;&gt;

%% Figures
% Thousands of figures, like these animals, can be made.
%
% &lt;&lt;animals.png&gt;&gt;


%% Puzzle
% My MATLAB code
% &lt;https://blogs.mathworks.com/cleve/files/Tangram_mzip.m
% Tangram&gt;
% opens with a screen showing seven pieces,
% which are called _tans_.
% There are
% two large triangles, one medium triangle, two small
% triangles, one square, and one parallelogram.
%
% &lt;&lt;Tangram_screen.png&gt;&gt;

%%
% The puzzle is interactive.  You can move the tans.
%
% &lt;&lt;open.gif&gt;&gt;

%% Kitty
% The kitty is a newcomer&apos;s favorite.
% 
% &lt;&lt;kitty.gif&gt;&gt;

%% Swan
% The parallelogram is the only tans that does not have reflection
% symmetry. It needs to be reversed with the |flipper| button when
% forming shapes like this swan.  The swan at the top of this blog
% is looking in the opposite direction and does not need its
% parallelogram flipped.
%
% &lt;&lt;swan.gif&gt;&gt;

%% Square
% Here are the starting moves for making a square.
% You can finish the square yourself by downloading 
% &lt;https://blogs.mathworks.com/cleve/files/Tangram_mzip.m
% Tangram_mzip&gt;.
%
% Or, if you are not in a do-it-yourself mood and just want the
% answer, see
% &lt;https://blogs.mathworks.com/cleve/files/square_3.gif square_3.gif&gt;.
% 
% &lt;&lt;start.gif&gt;&gt;
%

%% Web
% There are hundreds of web sites about Tangrams.
% Here are two that I enjoyed.
%
% &lt;https://www.pinterest.com/ivahilator/tangram&gt;.
%
% &lt;https://kubiyagames.com/products/tangram-puzzle-two-sets-with-65-challenge-cards&gt;.
% 
##### SOURCE END ##### 8d7a45faf5094d1d99b8164f5491dfdd
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Travel Report, JUIT, India</title>
   <link href="https://hpc.social/2025/travel-report-juit-india/"/>
   <updated>2025-10-11T18:44:22-06:00</updated>
   <id>https://hpc.social/2025/travel-report-juit-india</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;I was invited recently to give a virtual talk to the &lt;a href=&quot;https://siam-juit.github.io/website/&quot; target=&quot;_blank&quot;&gt;student chapter&lt;/a&gt; of SIAM at &lt;a href=&quot;https://www.juit.ac.in/&quot; target=&quot;_blank&quot;&gt;JUIT&lt;/a&gt;, the Jaycee Institute of Information Technology, in Wagnaghat, India.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9b7f4a3a-3f0e-416c-ae83-4dcd73e87c90&quot;&gt;Map&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#602cd942-67e2-4397-915a-87be911ecfdf&quot;&gt;Himalayas&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#cf79fec0-2288-4b69-ada9-e8418fd16bbe&quot;&gt;Campus&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#688035f2-a005-4994-8d1f-2a559158ecbf&quot;&gt;Hosts&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8bb57be7-694a-43d5-94f1-49104e59fb1c&quot;&gt;Students&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1e2c8a0f-10c7-454e-84d6-f310e6d35fbb&quot;&gt;Library&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#df4b70c0-34b9-49d9-af6d-147e6adca8eb&quot;&gt;Dorms&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#339c7e3e-a0cd-4427-a11e-55bc3861a50e&quot;&gt;Tube&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;pre class=&quot;codeinput&quot;&gt;imshow(&lt;span class=&quot;string&quot;&gt;&apos;icon.jpg&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Juit_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Map&lt;a name=&quot;9b7f4a3a-3f0e-416c-ae83-4dcd73e87c90&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;JUIT is in northern India between Nepal and Tibet to the east, and Pakistan and Afghanistan to the west.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;imshow(&lt;span class=&quot;string&quot;&gt;&apos;juit_map.png&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Juit_blog_02.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Himalayas&lt;a name=&quot;602cd942-67e2-4397-915a-87be911ecfdf&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The campus sits at an altitude of 10,000 feet in the foothills of the Himalayas.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;imshow(&lt;span class=&quot;string&quot;&gt;&apos;juit_foothills.jpg&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Juit_blog_03.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Campus&lt;a name=&quot;cf79fec0-2288-4b69-ada9-e8418fd16bbe&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The campus opened in 2002.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;imshow(&lt;span class=&quot;string&quot;&gt;&apos;banner2.png&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Juit_blog_04.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Hosts&lt;a name=&quot;688035f2-a005-4994-8d1f-2a559158ecbf&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here are my hosts -- Nandaya Vegad, Ritik Joshi and Omansh Sharma -- in the auditorium that will be used for my talk.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;imshow(&lt;span class=&quot;string&quot;&gt;&apos;hosts.png&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Juit_blog_05.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Students&lt;a name=&quot;8bb57be7-694a-43d5-94f1-49104e59fb1c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;JUIT is a private technical university with selective admissions.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;imshow(&lt;span class=&quot;string&quot;&gt;&apos;students.png&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Juit_blog_06.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Library&lt;a name=&quot;1e2c8a0f-10c7-454e-84d6-f310e6d35fbb&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The libraries are up to date.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;imshow(&lt;span class=&quot;string&quot;&gt;&apos;library.png&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Juit_blog_07.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Dorms&lt;a name=&quot;df4b70c0-34b9-49d9-af6d-147e6adca8eb&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Many of the offices and dorms have courtyards.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;imshow(&lt;span class=&quot;string&quot;&gt;&apos;dorms.png&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Juit_blog_08.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Tube&lt;a name=&quot;339c7e3e-a0cd-4427-a11e-55bc3861a50e&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I want to visit JUIT in person and walk though this tube.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;imshow(&lt;span class=&quot;string&quot;&gt;&apos;Tube.png&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Juit_blog_09.png&quot; vspace=&quot;5&quot; /&gt; &lt;!-- 
    function grabCode_a392cfdb259644ee8015ca5edfa30b0e() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;a392cfdb259644ee8015ca5edfa30b0e &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; a392cfdb259644ee8015ca5edfa30b0e&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
a392cfdb259644ee8015ca5edfa30b0e ##### SOURCE BEGIN #####
%% Virtual Travel Report, JUIT, India
% I was invited recently to give a virtual talk to the
% &lt;https://siam-juit.github.io/website/ student chapter&gt; of SIAM at
% &lt;https://www.juit.ac.in/ JUIT&gt;, 
% the Jaycee Institute of Information Technology,
% in Wagnaghat, India.
%%
    imshow(&apos;icon.jpg&apos;)

%% Map
% JUIT is in northern India between Nepal and Tibet 
% to the east, and Pakistan and Afghanistan to the west.

    imshow(&apos;juit_map.png&apos;)

%% Himalayas
% The campus sits at an altitude of 10,000 feet in the foothills
% of the Himalayas.

    imshow(&apos;juit_foothills.jpg&apos;)

%% Campus
% The campus opened in 2002.

    imshow(&apos;banner2.png&apos;)
    
%% Hosts
% Here are my hosts REPLACE_WITH_DASH_DASH Nandaya Vegad, Ritik Joshi and Omansh Sharma REPLACE_WITH_DASH_DASH
% in the auditorium that will be used for my talk.

    imshow(&apos;hosts.png&apos;)
 
%% Students
% JUIT is a private technical university with selective admissions.

    imshow(&apos;students.png&apos;)

%% Library
% The libraries are up to date.

    imshow(&apos;library.png&apos;)

%% Dorms
% Many of the offices and dorms have courtyards.

    imshow(&apos;dorms.png&apos;)

%% Tube
% I want to visit JUIT in person and walk though this tube.

    imshow(&apos;Tube.png&apos;)

##### SOURCE END ##### a392cfdb259644ee8015ca5edfa30b0e
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Wordler and I Fail on Puzzle 1497</title>
   <link href="https://hpc.social/2025/wordler-and-i-fail-on-puzzle-1497/"/>
   <updated>2025-07-29T19:44:54-06:00</updated>
   <id>https://hpc.social/2025/wordler-and-i-fail-on-puzzle-1497</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;Like millions of other folks, I play &lt;a href=&quot;https://www.nytimes.com/games/wordle&quot;&gt;&lt;i&gt;Wordle&lt;/i&gt;&lt;/a&gt; from the &lt;i&gt;New York Times&lt;/i&gt; almost every day. The &lt;i&gt;Times&lt;/i&gt; reports that &lt;i&gt;Wordle&lt;/i&gt; puzzle number 1497 on Friday, July 25, was especially difficult. The average puzzler required 5.7 attempts and many failed to get the answer in the six moves allowed. I have a MATLAB assistant that I call Wordler and, even with her help, I failed on number 1497. Here&apos;s why.&lt;/p&gt;

&lt;p&gt;(In 2022, &lt;i&gt;Wordle&lt;/i&gt; was the most-searched term on Google worldwide. For more interesting facts about &lt;i&gt;Wordle&lt;/i&gt;, see the &lt;a href=&quot;https://en.wikipedia.org/wiki/Wordle&quot;&gt;Wikipedia article&lt;/a&gt;.)&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6821f7b2-f8a0-477b-af1a-90e617842627&quot;&gt;Wordler&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b9e94f76-063d-490c-baa5-ac3dbd89860f&quot;&gt;Wordler&apos;s Vocabulary&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#d3faa9b1-8bcf-48d5-b799-d734e407e76c&quot;&gt;Word One&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e7c96b4b-26c7-4362-991f-f89625e418e4&quot;&gt;Word Two&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ecbedb8e-b368-424c-845c-13a8ffa38ca6&quot;&gt;Word Three&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4ae0c571-eeb1-4f98-a47c-b695cf181456&quot;&gt;Word Four&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#bb6699b4-4722-41fc-a429-cec8fa1ce44e&quot;&gt;Word Five&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f48e61e4-4b42-48a7-865f-a8de79008a6a&quot;&gt;Word Six&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ec08f35c-412c-40b0-aa08-ef088e160836&quot;&gt;Final Word&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#d2350965-9e73-48bc-a9a9-5745e964f356&quot;&gt;Software&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Wordler&lt;a name=&quot;6821f7b2-f8a0-477b-af1a-90e617842627&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Making a move in &lt;i&gt;Wordle&lt;/i&gt; involves two tasks. First, thinking of the words that can be played, and second, deciding which of them to play. I like to make all the key decisions myself, so my assistant does not actually play &lt;i&gt;Wordle&lt;/i&gt;. When I ask Wordler for help, she just lists all the words that could be played. It is up to me to choose one.&lt;/p&gt;

&lt;h4&gt;Wordler&apos;s Vocabulary&lt;a name=&quot;b9e94f76-063d-490c-baa5-ac3dbd89860f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Wordler&apos;s vocabulary is a hidden list of 2315 five-letter English words that are the possible solutions. The letter frequencies in this list are not the same as in English itself. For example, English has many five-letter words ending in S, but most of them are plural nouns and third-person singular verbs. The vocabulary does not have any of these. &lt;i&gt;Wordle&lt;/i&gt; words end in S less than 2% of the time, compared to 31% of the time with the full set of five-letter words.&lt;/p&gt;

&lt;p&gt;Here is a portion of the vocabulary.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;dbtype&lt;span class=&quot;string&quot;&gt;vocabulary&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;1:9&lt;/span&gt;dbtype&lt;span class=&quot;string&quot;&gt;vocabulary&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;291:295&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
1     function vocab = vocabulary(~)
2         % vocabulary is 2315 words that are targets.
3            
4        vocab = [ ... 
5         &quot;ABACK&quot; &quot;ABASE&quot; &quot;ABATE&quot; &quot;ABBEY&quot; &quot;ABBOT&quot; &quot;ABHOR&quot; &quot;ABIDE&quot; &quot;ABLED&quot; ...
6         &quot;ABODE&quot; &quot;ABORT&quot; &quot;ABOUT&quot; &quot;ABOVE&quot; &quot;ABUSE&quot; &quot;ABYSS&quot; &quot;ACORN&quot; &quot;ACRID&quot; ...
7         &quot;ACTOR&quot; &quot;ACUTE&quot; &quot;ADAGE&quot; &quot;ADAPT&quot; &quot;ADEPT&quot; &quot;ADMIN&quot; &quot;ADMIT&quot; &quot;ADOBE&quot; ...
8         &quot;ADOPT&quot; &quot;ADORE&quot; &quot;ADORN&quot; &quot;ADULT&quot; &quot;AFFIX&quot; &quot;AFIRE&quot; &quot;AFOOT&quot; &quot;AFOUL&quot; ...
9         &quot;AFTER&quot; &quot;AGAIN&quot; &quot;AGAPE&quot; &quot;AGATE&quot; &quot;AGENT&quot; &quot;AGILE&quot; &quot;AGING&quot; &quot;AGLOW&quot; ...

291       &quot;WORSE&quot; &quot;WORST&quot; &quot;WORTH&quot; &quot;WOULD&quot; &quot;WOUND&quot; &quot;WOVEN&quot; &quot;WRACK&quot; &quot;WRATH&quot; ...
292       &quot;WREAK&quot; &quot;WRECK&quot; &quot;WREST&quot; &quot;WRING&quot; &quot;WRIST&quot; &quot;WRITE&quot; &quot;WRONG&quot; &quot;WROTE&quot; ...
293       &quot;WRUNG&quot; &quot;WRYLY&quot; &quot;YACHT&quot; &quot;YEARN&quot; &quot;YEAST&quot; &quot;YIELD&quot; &quot;YOUNG&quot; &quot;YOUTH&quot; ...
294       &quot;ZEBRA&quot; &quot;ZESTY&quot; &quot;ZONAL&quot; ];
295   end
&lt;/pre&gt;
&lt;h4&gt;Word One&lt;a name=&quot;d3faa9b1-8bcf-48d5-b799-d734e407e76c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I always start with the word LEAST. It contains two popular vowels, and I like to use mathematical and other technical words. On July 25, a gold E from the &lt;i&gt;Times&lt;/i&gt; tells me that the answer has an E somewhere, but not in slot number 2. The remaining letters are black, so today&apos;s answer does not have any L, A, S or T.&lt;/p&gt;

&lt;p&gt;(If I were to ask Wordler for assistance with the first word, she would just reply with all 2315 words she knows.)&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Wordler01.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Word Two&lt;a name=&quot;e7c96b4b-26c7-4362-991f-f89625e418e4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;For the second word, I chose PHONE. It has the required E, as well as another popular vowel. It gets a gold O to go with the gold E.&lt;/p&gt;

&lt;p&gt;(Wordler&apos;s suggestion in this situation would have been the 268 words containing an E in any slot except the second. That&apos;s not much help.)&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Wordler02.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Word Three&lt;a name=&quot;ecbedb8e-b368-424c-845c-13a8ffa38ca6&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I know now that I am seeking a word with an E in any slot except 2 or 5, an O in any slot except 3, and no L, A, S, T, P, H or N. I decided to try COVER and am rewarded with three green letters.&lt;/p&gt;

&lt;p&gt;(Wordler knows 23 words meeting the requirements.)&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Wordler03.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Word Four&lt;a name=&quot;4ae0c571-eeb1-4f98-a47c-b695cf181456&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here, for the first time, I decided to ask Wordler. I press the &lt;tt&gt;Words&lt;/tt&gt; button and get some bad news. She tells me she knows seven possible words.&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;BOXER&lt;/li&gt;
&lt;li&gt;FOYER&lt;/li&gt;
&lt;li&gt;JOKER&lt;/li&gt;
&lt;li&gt;MOWER&lt;/li&gt;
&lt;li&gt;ROGER&lt;/li&gt;
&lt;li&gt;ROWER&lt;/li&gt;
&lt;li&gt;WOOER&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;I have only three guesses remaining. My odds of winning are less than 50-50. I chose MOWER because, if it is not correct, the three words containing W would be eliminated.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Wordler04.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Word Five&lt;a name=&quot;bb6699b4-4722-41fc-a429-cec8fa1ce44e&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Getting worried, I chose ROGER because it has two Rs. Again, not much luck.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Wordler05.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Word Six&lt;a name=&quot;f48e61e4-4b42-48a7-865f-a8de79008a6a&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;This is my last chance and there are still three words remaining.&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;BOXER&lt;/li&gt;
&lt;li&gt;FOYER&lt;/li&gt;
&lt;li&gt;JOKER&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Which would &lt;i&gt;you&lt;/i&gt; choose?&lt;/p&gt;

&lt;p&gt;I chose JOKER and strike out.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Wordler06.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Final Word&lt;a name=&quot;ec08f35c-412c-40b0-aa08-ef088e160836&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;If you happen to have played puzzle number 1497, you realize that Wordler is missing at least one word from her vocabulary. The word that tripped up so many last week is GOFER, which neither I nor my assistant thought of.&lt;/p&gt;

&lt;p&gt;(Ever-helpful Google informs us that a &lt;a href=&quot;https://www.google.com/search?q=gofer&quot;&gt;GOFER&lt;/a&gt; is &quot;a person who runs errands, especially on a movie set or in an office.&quot;)&lt;/p&gt;

&lt;h4&gt;Software&lt;a name=&quot;d2350965-9e73-48bc-a9a9-5745e964f356&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The current version of Wordler isn&apos;t ready for public consumption. As we have just seen, her vocabulary is incomplete. I also know of bugs when there are repeated letters. If you would like a copy anyway, send me an email.&lt;/p&gt;

&lt;!-- 
    function grabCode_cdfc5f3a37174fc19477d4e577edc688() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;cdfc5f3a37174fc19477d4e577edc688 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; cdfc5f3a37174fc19477d4e577edc688&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
cdfc5f3a37174fc19477d4e577edc688 ##### SOURCE BEGIN #####
%% Wordler and I Fail on Puzzle 1497
% Like millions of other folks, I play
% &lt;https://www.nytimes.com/games/wordle
% _Wordle_&gt; from the _New York Times_ almost every day.  
% The _Times_ reports that _Wordle_ puzzle number 1497
% on Friday, July 25,
% was especially difficult.  The average puzzler required 5.7 attempts
% and many failed to get the answer in the six moves allowed.
% I have a MATLAB assistant that I call Wordler and, even with her
% help, I failed on number 1497.
% Here&apos;s why.
%
% (In 2022, _Wordle_ was the most-searched term on Google worldwide.
% For more interesting facts about _Wordle_, see the
% &lt;https://en.wikipedia.org/wiki/Wordle
% Wikipedia article&gt;.)

%% Wordler
% Making a move in _Wordle_ involves two tasks.  First, thinking
% of the words that can be played, and second,
% deciding which of them to play.
% I like to make all the key decisions myself, so my assistant does not
% actually play _Wordle_.
% When I ask Wordler for help, she just lists all 
% the words that could be played.  It is up to me to choose one.

%% Wordler&apos;s Vocabulary
%
% Wordler&apos;s vocabulary is a hidden list of 2315 five-letter English words
% that are the possible solutions.  The letter frequencies in this list
% are not the same as in English itself.  For example, English has many 
% five-letter words ending in S, but most of them are plural nouns
% and third-person singular verbs.  The vocabulary does not
% have any of these. _Wordle_ words end in S less than 2% of the time, 
% compared to 31% of the time with the full set of five-letter words.
%
% Here is a portion of the vocabulary.

dbtype vocabulary 1:9
dbtype vocabulary 291:295

%% Word One
% I always start with the word LEAST.  It contains two popular
% vowels, and I like to use mathematical and  other technical words.
% On July 25, a gold E from the _Times_ tells me that the answer
% has an E somewhere, but not in slot number 2.  The remaining letters
% are black, so today&apos;s answer does not have any L, A, S or T.
%
% (If I were to ask Wordler for assistance with the first word, she
% would just reply with all 2315 words she knows.)
%
% &lt;&lt;Wordler01.png&gt;&gt;
%

%% Word Two
% For the second word, I chose PHONE.  It has the required E, as 
% well as another popular vowel.  It gets a gold O to go with 
% the gold E.
%
% (Wordler&apos;s suggestion in this situation would have been the 268 words
% containing an E in any slot except the second.  That&apos;s not much help.)
%
% &lt;&lt;Wordler02.png&gt;&gt;
%

%% Word Three
% I know now that I am seeking a word with an E in any slot except
% 2 or 5, an O in any slot except 3, and no L, A, S, T, P,
% H or N.  I decided to try COVER and am rewarded with three green
% letters.
%
% (Wordler knows 23 words meeting the requirements.)
%
% &lt;&lt;Wordler03.png&gt;&gt;
%

%%  Word Four
% Here, for the first time, I decided to ask Wordler.  I press the |Words|
% button and get some bad news.
% She tells me she knows seven possible words.
%
% * BOXER
% * FOYER
% * JOKER
% * MOWER
% * ROGER
% * ROWER
% * WOOER
%
% I have only three guesses remaining. 
% My odds of winning are less than 50-50.
% I chose MOWER because, if it is not correct, the three words
% containing W would be eliminated.
%
% &lt;&lt;Wordler04.png&gt;&gt;
%

%% Word Five
% Getting worried, I chose ROGER because it has two Rs.
% Again, not much luck.
%
% &lt;&lt;Wordler05.png&gt;&gt;
%

%% Word Six
% This is my last chance and there are still three words remaining.
%
% * BOXER
% * FOYER
% * JOKER
% 
% Which would _you_ choose?
%
% I chose JOKER and strike out.
%
% &lt;&lt;Wordler06.png&gt;&gt;
%

%% Final Word
% If you happen to have played puzzle number 1497, you realize that
% Wordler is missing at least one word from her vocabulary.  The word
% that tripped up so many last week is GOFER, which neither I nor 
% my assistant thought of.
% 
% (Ever-helpful Google informs us that a
% &lt;https://www.google.com/search?q=gofer GOFER&gt; is &quot;a person who runs 
% errands, especially on a movie set or in an office.&quot;)

%% Software
% The current version of Wordler isn&apos;t ready for public consumption.
% As we have just seen, her vocabulary is incomplete. I also know
% of bugs when there are repeated letters.  If you would like
% a copy anyway, send me an email.
##### SOURCE END ##### cdfc5f3a37174fc19477d4e577edc688
--&gt;
</content>
 </entry>
 
 <entry>
   <title>My Favorite MATLAB Demos</title>
   <link href="https://hpc.social/2025/my-favorite-matlab-demos/"/>
   <updated>2025-07-12T14:01:57-06:00</updated>
   <id>https://hpc.social/2025/my-favorite-matlab-demos</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;In 1988, while I was with Ardent Computer in Silicon Valley, I gave a talk that previewed MATLAB graphics. The title was &quot;Pictures of Matrices&quot;. At the time, a mathematician friend of mine asked.&lt;/p&gt;

&lt;pre&gt;  Why would anyone want pictures of matrices?&lt;/pre&gt;
&lt;p&gt;My response is the graphics demonstrations that we have done over the years. Here is a baker&apos;s dozen of my favorite examples.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1050b54b-03cc-4651-a92f-08b47bce1aba&quot;&gt;Vibes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#cca646f4-d29d-4f64-8b12-9c8d6868aa07&quot;&gt;Pitch, Roll and Yaw&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#523be0a1-ef64-4117-8827-aadab1aec717&quot;&gt;Rubiks Cube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6c148e13-491e-48c4-8a1f-17bd6e1208ab&quot;&gt;Eigenwalker&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5808e6ab-e3fa-4128-b43b-94218f7d6659&quot;&gt;Simulation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#37dae5b7-d02a-41e0-805c-11d11d1418f8&quot;&gt;Sponge&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9916dfbf-68eb-45a6-8e75-695014dcbc68&quot;&gt;Drums&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#744ce13d-9dbe-42d9-a2df-f3d6dc3c2548&quot;&gt;Jahnke and Emde&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#52de6435-9b73-4c4e-8402-401b64ad6571&quot;&gt;Penny&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3fe4f412-05a9-4faf-823f-321a39baeb80&quot;&gt;Jordan Form&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c90e69f0-d3f5-4e44-a23a-c7434bffc251&quot;&gt;Expshow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b73f8b6f-ac84-4b66-9b08-303afb8eaf13&quot;&gt;Eigshow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8cac3156-b0b3-47d7-abf4-653302fc719c&quot;&gt;Eden&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Vibes&lt;a name=&quot;1050b54b-03cc-4651-a92f-08b47bce1aba&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The vibrating L-shaped membrane.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo/&quot;&gt;https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/vibes.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Pitch, Roll and Yaw&lt;a name=&quot;cca646f4-d29d-4f64-8b12-9c8d6868aa07&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Studying rotations.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2023/02/10/grafix-users-guide/&quot;&gt;https://blogs.mathworks.com/cleve/2023/02/10/grafix-users-guide/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Graphics.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Rubiks Cube&lt;a name=&quot;523be0a1-ef64-4117-8827-aadab1aec717&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The world&apos;s greatest mathematical puzzle.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2022/04/04/digital-simulation-of-rubiks-cube/&quot;&gt;https://blogs.mathworks.com/cleve/2022/04/04/digital-simulation-of-rubiks-cube/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Qube_simplified.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Eigenwalker&lt;a name=&quot;6c148e13-491e-48c4-8a1f-17bd6e1208ab&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Principle component analysis of the human gait.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2016/04/11/the-eigenwalker-model-of-the-human-gait/&quot;&gt;https://blogs.mathworks.com/cleve/2016/04/11/the-eigenwalker-model-of-the-human-gait/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/walker.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Simulation&lt;a name=&quot;5808e6ab-e3fa-4128-b43b-94218f7d6659&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Simulink at the test track.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices/&quot;&gt;https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Simulink.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Sponge&lt;a name=&quot;37dae5b7-d02a-41e0-805c-11d11d1418f8&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The Menger sponge is a popular fractal that generalizes Cantor sets and Sierpinski triangles.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2021/12/06/the-menger-sponge-fractal/&quot;&gt;https://blogs.mathworks.com/cleve/2021/12/06/the-menger-sponge-fractal/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sponge2.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Drums&lt;a name=&quot;9916dfbf-68eb-45a6-8e75-695014dcbc68&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Contour plots of isospectral pairs.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2012/08/06/can-one-hear-the-shape-of-a-drum-part-1-eigenvalues/&quot;&gt;https://blogs.mathworks.com/cleve/2012/08/06/can-one-hear-the-shape-of-a-drum-part-1-eigenvalues/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/drums.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Jahnke and Emde&lt;a name=&quot;744ce13d-9dbe-42d9-a2df-f3d6dc3c2548&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Contour plot of the Hankel function, based on a hand drawing in a 1933 book by German mathematicians Eugene Jahnke and Fritz Emde.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2014/12/15/jahnke-and-emde-revisited/&quot;&gt;https://blogs.mathworks.com/cleve/2014/12/15/jahnke-and-emde-revisited/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/jahnke.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Penny&lt;a name=&quot;52de6435-9b73-4c4e-8402-401b64ad6571&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;High resolution measurements of the depth of the mold for the United States one cent coin.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2014/03/17/higher-resolution-penny/&quot;&gt;https://blogs.mathworks.com/cleve/2014/03/17/higher-resolution-penny/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/penny.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Jordan Form&lt;a name=&quot;3fe4f412-05a9-4faf-823f-321a39baeb80&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Jordan Canonical Form of the 64-by-64 Redheffer matrix from the &lt;a href=&quot;https://www.mathworks.com/help/releases/R2024b/matlab/ref/gallery.html&quot;&gt;MATLAB Gallery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix/&quot;&gt;https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/jcf64.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Expshow&lt;a name=&quot;c90e69f0-d3f5-4e44-a23a-c7434bffc251&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;An interactive graphical experiment lets you discover the value of one of the most important numerical quantities in mathematics.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2015/07/27/discover-e-with-a-graphical-experiment/&quot;&gt;https://blogs.mathworks.com/cleve/2015/07/27/discover-e-with-a-graphical-experiment/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/expshow.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Eigshow&lt;a name=&quot;b73f8b6f-ac84-4b66-9b08-303afb8eaf13&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;One of my all-time favorite MATLAB examples is eigshow.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2013/07/08/eigshow-week-1&quot;&gt;https://blogs.mathworks.com/cleve/2013/07/08/eigshow-week-1&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/eigshowp.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Eden&lt;a name=&quot;8cac3156-b0b3-47d7-abf4-653302fc719c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;This sketch of the MathWorks Logo was made by Eden Rajapakse when she was ten years old. Her blog post has received more &quot;likes&quot; than any other post.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo/&quot;&gt;https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Eden.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;!-- 
    function grabCode_2ccfc7657e20451c9a4b077ee478fbf0() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;2ccfc7657e20451c9a4b077ee478fbf0 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 2ccfc7657e20451c9a4b077ee478fbf0&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
2ccfc7657e20451c9a4b077ee478fbf0 ##### SOURCE BEGIN #####
%% My Favorite MATLAB Demos
% In 1988, while I was with Ardent Computer in Silicon Valley,
% I gave a talk that previewed MATLAB graphics.  The title was
% &quot;Pictures of Matrices&quot;.  At the time, a mathematician friend
% of mine asked.
%
%    Why would anyone want pictures of matrices?
%
% My response is the graphics demonstrations that we have done over the
% years.  Here is a baker&apos;s dozen of my favorite examples.

%% Vibes
% The vibrating L-shaped membrane.
%
% &lt;https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo&gt;&lt;/https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo&gt;.
%
% &lt;&lt;vibes.gif&gt;&gt;
%


%% Pitch, Roll and Yaw
% Studying rotations.
%
% &lt;https://blogs.mathworks.com/cleve/2023/02/10/grafix-users-guide&gt;&lt;/https://blogs.mathworks.com/cleve/2023/02/10/grafix-users-guide&gt;
%
% &lt;&lt;Graphics.png&gt;&gt;
%

%% Rubiks Cube
% The world&apos;s greatest mathematical puzzle.
%
% &lt;https://blogs.mathworks.com/cleve/2022/04/04/digital-simulation-of-rubiks-cube&gt;&lt;/https://blogs.mathworks.com/cleve/2022/04/04/digital-simulation-of-rubiks-cube&gt;
%
% &lt;&lt;Qube_simplified.png&gt;&gt;
%
  
%% Eigenwalker
% Principle component analysis of the human gait.
%
% &lt;https://blogs.mathworks.com/cleve/2016/04/11/the-eigenwalker-model-of-the-human-gait&gt;&lt;/https://blogs.mathworks.com/cleve/2016/04/11/the-eigenwalker-model-of-the-human-gait&gt;
%
% &lt;&lt;walker.gif&gt;&gt;
%

%% Simulation
% Simulink at the test track.
%
% &lt;https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices&gt;&lt;/https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices&gt;
%
% &lt;&lt;Simulink.png&gt;&gt;

%% Sponge
% The Menger sponge is a popular fractal that generalizes Cantor sets 
% and Sierpinski triangles. 
%
% &lt;https://blogs.mathworks.com/cleve/2021/12/06/the-menger-sponge-fractal&gt;&lt;/https://blogs.mathworks.com/cleve/2021/12/06/the-menger-sponge-fractal&gt;
%
% &lt;&lt;sponge2.png&gt;&gt;

%% Drums
% Contour plots of isospectral pairs.
%
% &lt;https://blogs.mathworks.com/cleve/2012/08/06/can-one-hear-the-shape-of-a-drum-part-1-eigenvalues&gt;&lt;/https://blogs.mathworks.com/cleve/2012/08/06/can-one-hear-the-shape-of-a-drum-part-1-eigenvalues&gt;
%
% &lt;&lt;drums.png&gt;&gt;

%% Jahnke and Emde
% Contour plot of the Hankel function,
% based on a hand drawing in a 1933 book by
% German mathematicians Eugene Jahnke and Fritz Emde.
%
% &lt;https://blogs.mathworks.com/cleve/2014/12/15/jahnke-and-emde-revisited&gt;&lt;/https://blogs.mathworks.com/cleve/2014/12/15/jahnke-and-emde-revisited&gt;
%
% &lt;&lt;jahnke.png&gt;&gt;

%% Penny
% High resolution measurements of the depth of the mold for the
% United States one cent coin.
%
% &lt;https://blogs.mathworks.com/cleve/2014/03/17/higher-resolution-penny&gt;&lt;/https://blogs.mathworks.com/cleve/2014/03/17/higher-resolution-penny&gt;
%
% &lt;&lt;penny.png&gt;&gt;

%% Jordan Form
% Jordan Canonical Form of the 64-by-64 Redheffer matrix
% from the 
% &lt;https://www.mathworks.com/help/releases/R2024b/matlab/ref/gallery.html
% MATLAB Gallery&gt;.
%
% &lt;https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix&gt;&lt;/https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix&gt;
%
% &lt;&lt;jcf64.png&gt;&gt;

%% Expshow
% An interactive graphical experiment lets you discover the value of one of the most important numerical quantities in mathematics.
%
% &lt;https://blogs.mathworks.com/cleve/2015/07/27/discover-e-with-a-graphical-experiment&gt;&lt;/https://blogs.mathworks.com/cleve/2015/07/27/discover-e-with-a-graphical-experiment&gt;
%
% &lt;&lt;expshow.gif&gt;&gt;

%% Eigshow
% One of my all-time favorite MATLAB examples is eigshow.
%
% &lt;https://blogs.mathworks.com/cleve/2013/07/08/eigshow-week-1&gt;
%
% &lt;&lt;eigshowp.gif&gt;&gt;
%
%% Eden
% This sketch of the MathWorks Logo was made by Eden Rajapakse when 
% she was ten years old.  Her blog post has received more &quot;likes&quot;
% than any other post.
%
% &lt;https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo&gt;&lt;/https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo&gt;
%
% &lt;&lt;Eden.png&gt;&gt;
%


##### SOURCE END ##### 2ccfc7657e20451c9a4b077ee478fbf0
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Trip Report, Householder XXII</title>
   <link href="https://hpc.social/2025/trip-report-householder-xxii/"/>
   <updated>2025-06-21T17:58:32-06:00</updated>
   <id>https://hpc.social/2025/trip-report-householder-xxii</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;The twenty-second Householder Symposium on Numerical Linear Algebra was held June 8 - June 13 at Cornell. The local organizers were Anil Damle, Alex Townsend and David Bindel. Anil served as host and cheerleader.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix/&quot;&gt;My talk&lt;/a&gt; was Wednesday morning. Here is the complete &lt;a href=&quot;https://householder-symposium.github.io/schedule.html&quot;&gt;schedule&lt;/a&gt;.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f402423b-cb81-4e90-93ab-76eebe7e3bff&quot;&gt;Group Selfie&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#900d99fc-07f7-4a8c-a630-0e6c7f347a8c&quot;&gt;Poster Session&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ef80a124-71d5-4978-82d7-cd69347d59c9&quot;&gt;Quantum Computing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#650df2ca-6b59-4e9d-b3b9-f02a4cf2bb10&quot;&gt;Householder Prizes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#af59e9bd-360d-4e8c-9096-dd5f227784ea&quot;&gt;Excursion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#928e34bb-faf3-4382-960a-704094ecbfe4&quot;&gt;Gr&amp;uuml;ezi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f6f32e88-3fc4-4287-93d4-17b877519b2b&quot;&gt;Thanks&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Group Selfie&lt;a name=&quot;f402423b-cb81-4e90-93ab-76eebe7e3bff&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Anil and Erik De Sturle orchestrated this group selfie. Can you find me? Do you recognize anyone else?&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/HXXII_selfie.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Poster Session&lt;a name=&quot;900d99fc-07f7-4a8c-a630-0e6c7f347a8c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The Tuesday evening poster session was a high point of the meeting. Over 50 posters were set up in the Statler Terrace. We mingled, drank beer, ate ice cream and discussed the posters with their authors. I was impressed by the number of young people doing exciting work.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Posters.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Quantum Computing&lt;a name=&quot;ef80a124-71d5-4978-82d7-cd69347d59c9&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A poster by Christine Tobler from MathWorks described the MATLAB Support Package for Quantum Computing. One model of a hypothetical quantum computer involves a state vector of probabilities and multiplication by unitary matrices.&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://www.mathworks.com/content/dam/mathworks/handout/quantum-computing-cheat-sheet.pdf&quot;&gt;https://www.mathworks.com/content/dam/mathworks/handout/quantum-computing-cheat-sheet.pdf&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Christine.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;A second poster by Sophia Keip, visiting Lawrence Berkeley National Laboratory from Fern Universit&amp;auml;t in Hagen, Germany, and a plenary talk by Roel Van Beeumen from LBL, described QCLAB, another MATLAB quantum toolbox&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/QuantumComputingLab/qclab&quot;&gt;https://github.com/QuantumComputingLab/qclab&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/QCLAB_poster.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Householder Prizes&lt;a name=&quot;650df2ca-6b59-4e9d-b3b9-f02a4cf2bb10&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The Alston S. Householder Prize is awarded to the author of the best dissertation in numerical linear algebra submitted over the previous three years. This time there were two prize-winning submissions described in a special plenary session on Thursday evening.&lt;/p&gt;

&lt;p&gt;Alice Cortinovis from the University of Pisa won the prize for a dissertation supervised by Daniel Kressner from the Swiss Federal Institute of Technology in Lausanne.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Alice.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;Jorge Garza-Vargas from Caltech and Jess Banks from U. C. Berkeley shared a second prize for a pair of dissertations supervised by Nikhil Srivastava from Berkeley. Jorge gave the talk.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Jorge.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Excursion&lt;a name=&quot;af59e9bd-360d-4e8c-9096-dd5f227784ea&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A tradition at the seminars is the Wednesday afternoon excursion. This year we had the choice of a serious hike, an easy walk, a visit to a nearby winery, or a nap at the hotel. The walk was on the Gorge trail in Taughannock Falls State Park and was fabulous.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Taughannock.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Gr&amp;uuml;ezi&lt;a name=&quot;928e34bb-faf3-4382-960a-704094ecbfe4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Gr&amp;uuml;ezi is Swiss German for Hello. Anyone planning to attend the Householder seminar in 2028 should learn how to pronounce Gr&amp;uuml;ezi. The seminar will be in Pontresina, Switzerland. Bart Vandereycken made the announcement.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Pontresina.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;Pontresina was also the site for the Householder seminar in 1996. The Wednesday excursion at that meeting was a hike down the Morteratsch glacier at Diavolezza.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Glacier.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Thanks&lt;a name=&quot;f6f32e88-3fc4-4287-93d4-17b877519b2b&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Thanks to Erik De Sturle for several of these photos.&lt;/p&gt;

&lt;!-- 
    function grabCode_3fc25520ada249c38d629067b3d5dc17() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;3fc25520ada249c38d629067b3d5dc17 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 3fc25520ada249c38d629067b3d5dc17&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
3fc25520ada249c38d629067b3d5dc17 ##### SOURCE BEGIN #####
%% Trip Report, Householder XXII
% The twenty-second
% Householder Symposium on Numerical Linear Algebra was 
% held June 8 - June 13 at Cornell.
% The local organizers were Anil Damle,
% Alex Townsend and David Bindel.  Anil served as host and
% cheerleader.  
%
% &lt;https://blogs.mathworks.com/cleve/2025/06/12/a-million-dollar-matrix/
% My talk&gt; was Wednesday morning.
% Here is the complete
% &lt;https://householder-symposium.github.io/schedule.html schedule&gt;.

%% Group Selfie
% Anil and Erik De Sturle orchestrated this group selfie.
% Can you find me?  Do you recognize anyone else?
%
% &lt;&lt;HXXII_selfie.png&gt;&gt;
%

%% Poster Session
% The Tuesday evening poster session was a high point of the meeting.
% Over 50 posters were set up in the Statler Terrace.
% We mingled, drank beer, ate ice cream and
% discussed the posters with their authors.
% I was impressed by the number of young people doing exciting work.
%
% &lt;&lt;Posters.png&gt;&gt;

%% Quantum Computing
% A poster by Christine Tobler from MathWorks described the 
% MATLAB Support Package for Quantum Computing.
% One model of a hypothetical quantum computer involves a
% state vector of probabilities and multiplication by unitary matrices.
%
% * &lt;https://www.mathworks.com/content/dam/mathworks/handout/quantum-computing-cheat-sheet.pdf&gt;.
%
% &lt;&lt;Christine.png&gt;&gt;
%
% A second poster by Sophia Keip, visiting
% Lawrence Berkeley National Laboratory from Fern Universität in
% Hagen, Germany, and a plenary talk by 
% Roel Van Beeumen from LBL, 
% described QCLAB, another MATLAB quantum toolbox
%
% * &lt;https://github.com/QuantumComputingLab/qclab&gt;.
%
% &lt;&lt;QCLAB_poster.jpg&gt;&gt;

%% Householder Prizes
% The Alston S. Householder Prize is awarded to the author of
% the best dissertation in numerical linear algebra 
% submitted over the previous three years.
% This time there were two prize-winning submissions
% described in a special plenary session on Thursday evening.
% 
% Alice Cortinovis from the University of Pisa
% won the prize for a dissertation
% supervised by Daniel Kressner from the
% Swiss Federal Institute of Technology in Lausanne.
%
% &lt;&lt;Alice.png&gt;&gt;
%
% Jorge Garza-Vargas from Caltech and 
% Jess Banks from U. C. Berkeley shared
% a second prize for a pair of dissertations
% supervised by Nikhil Srivastava from Berkeley.
% Jorge gave the talk.
%
% &lt;&lt;Jorge.png&gt;&gt;
%

%% Excursion
% A tradition at the seminars is the Wednesday afternoon excursion.
% This year we had the choice of a serious hike, an easy walk,
% a visit to a nearby winery, or a nap at the hotel.  The walk was on
% the Gorge trail in Taughannock Falls State Park and was fabulous.
%
% &lt;&lt;Taughannock.png&gt;&gt;

%% Grüezi
% Grüezi is Swiss German for Hello.  Anyone planning to attend
% the Householder seminar in 2028 should learn how to pronounce
% Grüezi.
% The seminar will be in Pontresina, Switzerland.
% Bart Vandereycken made the announcement.
%
% &lt;&lt;Pontresina.png&gt;&gt;
%
% Pontresina was also the site for the Householder seminar in 1996.
% The Wednesday excursion at that meeting was a hike down the Morteratsch
% glacier at Diavolezza.
% 
% &lt;&lt;Glacier.png&gt;&gt;
%

%% Thanks
% Thanks to Erik De Sturle for several of these photos.

##### SOURCE END ##### 3fc25520ada249c38d629067b3d5dc17
--&gt;
</content>
 </entry>
 
 <entry>
   <title>A Million Dollar Matrix</title>
   <link href="https://hpc.social/2025/a-million-dollar-matrix/"/>
   <updated>2025-06-12T20:32:59-06:00</updated>
   <id>https://hpc.social/2025/a-million-dollar-matrix</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;The twenty-second Householder Symposium on Numerical Linear Algebra is this week, June 8 - June 13, 2025 at Cornell. My talk on Wednesday had the provocative title &quot;A Million-Dollar Matrix&quot;. A PDF of the slides available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/HXXII.pdf&quot;&gt;link_1&lt;/a&gt;. The talk covers posts in the Cleve&apos;s Corner blog last fall. &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/&quot;&gt;link_2&lt;/a&gt;, &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/09/27/redheffer-and-mertens-continued/&quot;&gt;link_3&lt;/a&gt;, &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/09/30/redheffer-and-mertens-accelerated/&quot;&gt;link_4&lt;/a&gt;.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#25b2aace-84e9-4d9a-a27c-15d5539a37ad&quot;&gt;Redheffer Matrix&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#993f7c88-74fd-4966-9744-f4de4727cefb&quot;&gt;M&amp;ouml;bius Function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7d219b38-27c3-4b59-a878-b38207378b02&quot;&gt;Mertens Function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f3c157c6-623e-40a9-b49b-6875c174e6ee&quot;&gt;Redheffer = Mertens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c6cc0275-d896-4240-878d-0b4526b1469c&quot;&gt;Mertens Conjecture&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7dd4489a-97fd-4d39-8241-3fcea4971a9b&quot;&gt;Riemann Hypothesis&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#40745ff7-a37f-4842-86aa-25f0466f3025&quot;&gt;Riemann Computations&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4b7c91ee-a863-443f-9d89-949e74e4e76f&quot;&gt;$1M&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#13d73959-3607-481b-9f91-0aa84ef5374d&quot;&gt;Spoiler&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#48fabfd4-1898-452d-bf69-8ecad8633faf&quot;&gt;Redheffer Matrix&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a137a9e0-5a74-42e6-a581-2263656a7922&quot;&gt;Eigenvalues&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#961b7e39-1b1c-4228-8efc-b933a413c337&quot;&gt;Characteristic polynomial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#720a334a-f1dd-4bcb-b9f0-b4a90b8cc462&quot;&gt;Jordan Canonical Form&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#40944e0c-0e4d-40f7-af80-eb42f70047c0&quot;&gt;Code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#d3753176-600f-4555-8df8-79b0e1bd0041&quot;&gt;Sparse Redheffer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c399ff75-6de0-431a-a7cf-0123a6b76cd4&quot;&gt;Five Ways&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#d8f77259-0ebb-4c0f-83ba-045268e8f55e&quot;&gt;Complexity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#42aa9cf9-a26a-4397-87ea-76deefa34f22&quot;&gt;Timing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#484631b3-76b0-4785-8239-045c0efe4492&quot;&gt;References&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#33b645c0-16b0-4849-88e1-05e50cb538c2&quot;&gt;Thanks&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Redheffer Matrix&lt;a name=&quot;25b2aace-84e9-4d9a-a27c-15d5539a37ad&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Ray Redheffer (1921-2005) was a professor of mathematics at UCLA from 1950 until 2000. The Redheffer matrix, which he introduced in 1977, is n-by-n, with elements&lt;/p&gt;

&lt;pre&gt;   R(k,j) = 1, if j = 1 or k divides j,
          = 0, otherwise&lt;/pre&gt;
&lt;p&gt;Here is a &lt;tt&gt;spy&lt;/tt&gt; plot for n = 64. The nonzero elements lie in the first column and on diagonals with integer-valued slopes.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/redheffer.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;M&amp;ouml;bius Function&lt;a name=&quot;993f7c88-74fd-4966-9744-f4de4727cefb&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;August M&amp;ouml;bius (1790-1868) was an eminent 19th-century German mathematician. His M&amp;ouml;bius function is a fundamental tool in the study of prime numbers.&lt;/p&gt;

&lt;pre&gt;   mu(k) = 1 if k has an even number of distinct prime factors,
         = 0 if k has a repeated prime factor,
         = -1 if k has an odd number of distinct prime factors&lt;/pre&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/mobius.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Mertens Function&lt;a name=&quot;7d219b38-27c3-4b59-a878-b38207378b02&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Franz Mertens (1840-1927) was born in the Grand Duchy of Posen in the Kingdom of Prussia, which is now Poland. He lived much his life in Vienna, Austria. The Mertens function is the cumulative sum of the M&amp;ouml;bius function.&lt;/p&gt;

&lt;p&gt;$$ M(n) = \sum_{k = 1}^{n} \mu(k) $$&lt;/p&gt;

&lt;p&gt;M(n) is a running count of the integers that have an even number of prime factors, minus those with an odd number of prime factors.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/mertens.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Redheffer = Mertens&lt;a name=&quot;f3c157c6-623e-40a9-b49b-6875c174e6ee&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The determinant of the Redheffer matrix is equal to the Mertens function.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;det(R(n)) = M(n)&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;Plots of M(n) are also plots of det(R(n)).&lt;/p&gt;

&lt;h4&gt;Mertens Conjecture&lt;a name=&quot;c6cc0275-d896-4240-878d-0b4526b1469c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;How fast does M(n) grow as n increases? Here are plots of M(n) for n in powers of 10 from n = 10 to n = 10^8, together with plots of sqrt(n) and -sqrt(n).&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/mertens2x4.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;We see that, at least for n &amp;lt; 10^8,&lt;/p&gt;

&lt;pre&gt;   |M(n)| &amp;lt; &amp;radic;n&lt;/pre&gt;
&lt;p&gt;The Mertens conjecture is that this inequality holds for all n as n &amp;rarr; &amp;infin;. This conjecture is of interest because it implies the Riemann hypothesis.&lt;/p&gt;

&lt;h4&gt;Riemann Hypothesis&lt;a name=&quot;7dd4489a-97fd-4d39-8241-3fcea4971a9b&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The Riemann hypothesis has been called the &amp;ldquo;Most important unsolved problem in mathematics&quot;. Its resolution is the objective of a Clay Millenium Prize valued at one-million dollars. The hypothesis, proposed by G. F. Bernard Riemann in 1859, concerns the zeta function ζ(z) and the location of its zeros.&lt;/p&gt;

&lt;h4&gt;Riemann Computations&lt;a name=&quot;40745ff7-a37f-4842-86aa-25f0466f3025&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Computation of the first N non-trivial zeros of ζ(s).&lt;/p&gt;

&lt;pre&gt;                authors                    year                     N
   ____________________________________    ____    __________________
   Riemann                                 1854                     ?
   Gram                                    1903                    10
   Backlund                                1914                    79
   Hutchinson                              1925                   138
   Titchmarsh                              1936                 1,041
   Turing                                  1953                 1,104
   Lehmer                                  1956                25,000
   Meller                                  1958                35,337
   Lehman                                  1966               250,000
   Rosser, Yohe, Schoenfield               1969             3,502,500
   Brent                                   1977            40,000,000
   Brent                                   1979            81,000,001
   Brent, Van_de_Lune, Te_Riele, Winter    1982           200,000,001
   Van_de_Lune, Te_Riele, Winter           1986         1,500,000,001
   Van_de_Lune                             2001       100,000,000,000
   Wedeniwski                              2003       250,000,000,000
   Gourdon                                 2004    10,000,000,000,000&lt;/pre&gt;
&lt;h4&gt;$1M&lt;a name=&quot;4b7c91ee-a863-443f-9d89-949e74e4e76f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The Mertens conjecture&lt;/p&gt;

&lt;pre&gt;  |M(n)| &amp;lt; &amp;radic;n&lt;/pre&gt;
&lt;p&gt;implies the Riemann hypothesis and is worth $1M.&lt;/p&gt;

&lt;p&gt;So, a proof that&lt;/p&gt;

&lt;pre&gt;  |det(R(n)| &amp;lt; &amp;radic;n&lt;/pre&gt;
&lt;p&gt;would earn R the title &quot;Million-Dollar Matrix&quot;.&lt;/p&gt;

&lt;h4&gt;Spoiler&lt;a name=&quot;13d73959-3607-481b-9f91-0aa84ef5374d&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The Mertens conjecture is false.&lt;/p&gt;

&lt;p&gt;Andrew Odlyzko and Herman te Riele (1985) prove&lt;/p&gt;

&lt;pre&gt;  limsup n&amp;rarr;&amp;infin; M(n)/&amp;radic;n &amp;gt; 1.06&lt;/pre&gt;
&lt;p&gt;This proves the existence of infinitely many values of &lt;tt&gt;n&lt;/tt&gt; for which&lt;/p&gt;

&lt;pre&gt;  |det(R(n))| &amp;gt; 1.06 &amp;radic;n&lt;/pre&gt;
&lt;p&gt;The proof is indirect. Nobody knows an actual value of &lt;tt&gt;n&lt;/tt&gt;. Estimates are&lt;/p&gt;

&lt;pre&gt;  n &amp;gt;&amp;gt; 10^30&lt;/pre&gt;
&lt;h4&gt;Redheffer Matrix&lt;a name=&quot;48fabfd4-1898-452d-bf69-8ecad8633faf&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Even though it is not worth a million dollars, Nick Higham included the Redheffer matrix in the original MATLAB &lt;tt&gt;gallery&lt;/tt&gt;. The command&lt;/p&gt;

&lt;pre&gt;  help private/redheff&lt;/pre&gt;
&lt;p&gt;says&lt;/p&gt;

&lt;pre&gt;  A has N-FLOOR(LOG2(N))-1 eigenvalues equal to 1,
  a real eigenvalue approximately SQRT(N),
  a negative eigenvalue approximately -SQRT(N),
  and the remaining eigenvalues are provably &quot;small&quot;.&lt;/pre&gt;
&lt;p&gt;For n = 64, this becomes&lt;/p&gt;

&lt;pre&gt;  R(64) has 57 eigenvalues equal to 1,
  a real eigenvalue approximately 8.0,
  a negative eigenvalue approximately -8.0,
  and the remaining eigenvalues are provably &quot;small&quot;.&lt;/pre&gt;
&lt;h4&gt;Eigenvalues&lt;a name=&quot;a137a9e0-5a74-42e6-a581-2263656a7922&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The eigenvalues of R(64) are&lt;/p&gt;

&lt;pre&gt;   eig(redheffer(64))&lt;/pre&gt;
&lt;pre&gt;   10.0445 + 0.0000i
   -5.5442 + 0.0000i
    0.0726 + 0.0000i
    0.3213 + 0.4487i
    0.3213 - 0.4487i
    0.8923 + 0.1262i
    0.8923 - 0.1262i&lt;/pre&gt;
&lt;pre&gt;   followed by&lt;/pre&gt;
&lt;pre&gt;    1.0000 + 0.0000i&lt;/pre&gt;
&lt;pre&gt;   repeated 57 times.&lt;/pre&gt;
&lt;h4&gt;Characteristic polynomial&lt;a name=&quot;961b7e39-1b1c-4228-8efc-b933a413c337&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The characteristic polynomial of R(64) is&lt;/p&gt;

&lt;pre&gt;  p(z) * (z &amp;ndash; 1)^57&lt;/pre&gt;
&lt;p&gt;where&lt;/p&gt;

&lt;pre&gt;  p(z) = z^7 - 7^z^6 - 42*z^5 + 127*z^4 - 130*z^3 + 67*z^2 - 18*z + 1&lt;/pre&gt;
&lt;h4&gt;Jordan Canonical Form&lt;a name=&quot;720a334a-f1dd-4bcb-b9f0-b4a90b8cc462&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/jcf64.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Code&lt;a name=&quot;40944e0c-0e4d-40f7-af80-eb42f70047c0&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;pre class=&quot;codeinput&quot;&gt;type&lt;span class=&quot;string&quot;&gt;mobius.m&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
function mu = mobius(n)
    % mu = mobius(n)
    mu = ones(1,n);
    mu(1) = -1;
    for p = primes(n)
        mu(p^2:p^2:n) = 0;
        mu(p:p:n) = -mu(p:p:n);
    end
end
&lt;/pre&gt;
&lt;pre class=&quot;codeinput&quot;&gt;type&lt;span class=&quot;string&quot;&gt;mertens.m&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
function M = mertens(n)
    % M = mertens(n)
    mu = mobius(n);
    M = cumsum([1 mu(2:n)]);
end
&lt;/pre&gt;
&lt;pre class=&quot;codeinput&quot;&gt;type&lt;span class=&quot;string&quot;&gt;redheffer.m&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
function R = redheffer(n)
    % R = redheffer(n)
    k = 1:n;
    R = mod(k,k&apos;) == 0;
    R(:,1) = 1;
    R = double(R);
end
&lt;/pre&gt;
&lt;pre class=&quot;codeinput&quot;&gt;type&lt;span class=&quot;string&quot;&gt;sparse_redheffer.m&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
function S = sparse_redheffer(n)
    % S = sparse_redheffer(n)
    j(1:n) = (1:n)&apos;;
    k(1:n) = 1;
    m = n;
    for i = 2:n
        t = [1 i:i:n]&apos;;
        p = length(t);
        j(m+(1:p)) = t;
        k(m+(1:p)) = i;
        m = m+p;
    end
    S = sparse(k,j,1,n,n);
end
&lt;/pre&gt;
&lt;h4&gt;Sparse Redheffer&lt;a name=&quot;d3753176-600f-4555-8df8-79b0e1bd0041&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;pre&gt;     n    tictoc            bytes            nnz      sparsity      det    |det|/&amp;radic;n
  10^1     0.000              664             36     0.3600000       -1      0.316
  10^2     0.000           10,104            581     0.0581000        1      0.100
  10^3     0.003          137,096          8,068     0.0080680        2      0.063
  10^4     0.021        1,738,680        103,667     0.0010367      -23      0.230
  10^5     0.216       21,067,992      1,266,749     0.0001267      -48      0.152
  10^6     2.515      247,520,536     14,970,033     0.0000150      212      0.212
  10^7    32.429    2,843,605,816    172,725,363     0.0000017     1037      0.328&lt;/pre&gt;
&lt;h4&gt;Five Ways&lt;a name=&quot;c399ff75-6de0-431a-a7cf-0123a6b76cd4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;pre class=&quot;codeinput&quot;&gt;type&lt;span class=&quot;string&quot;&gt;fiveways&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
function M = fiveways(n)
    % Five Ways to Compute the Mertens/Redheffer Function 
    %1 
        R = redheffer(n);
        M(1) = det(R);
    %2 
        R =  sparse_redheffer(n);
        [L,U,P,Q] = lu(R);
        M(2) = det(L)*det(U)*det(P)*det(Q);
    %3
        R =  sparse_redheffer(n);
        R(:,[1 n]) = R(:,[n 1]);
        M(3) = -det(R);
    %4
        R =  sparse_redheffer(n);
        T = R(2:n,2:n);
        e = ones(1,n-1);
        M(4) = 1 - e*(T\e&apos;);
    %5 
        mu = mobius(n);
        cmu = cumsum([1 mu(2:end)]);
        M(5) = cmu(n);
end   
&lt;/pre&gt;
&lt;h4&gt;Complexity&lt;a name=&quot;d8f77259-0ebb-4c0f-83ba-045268e8f55e&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;pre&gt;     redheffer function  dets  complexity      M&lt;/pre&gt;
&lt;pre&gt;  #1 full      gallery     1   n^3             1
  #2 sparse    lu          4   n*log(n)^2      1
  #3 sparse    swap        1   n*log(n)^2      1
  #4 sparse    \           0   n*log(n)        1
  #5 none      primes      0   n*log(log(n))  many&lt;/pre&gt;
&lt;h4&gt;Timing&lt;a name=&quot;42aa9cf9-a26a-4397-87ea-76deefa34f22&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;pre&gt;         2e4     2e5     2e6     2e7&lt;/pre&gt;
&lt;pre&gt;   #1   26.33     -       -       -
   #2    0.36   21.53     -       -
   #3    0.08    1.29   16.71     -
   #4    0.05    0.57    6.32   70.85
   #5    0.01    0.03    0.27    3.18&lt;/pre&gt;
&lt;pre&gt;               Time (seconds)&lt;/pre&gt;
&lt;h4&gt;References&lt;a name=&quot;484631b3-76b0-4785-8239-045c0efe4492&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;M&amp;ouml;bius (1832), Journal f&amp;uuml;r die reine und angewandte Mathematik.9:105&amp;ndash;123.&lt;/li&gt;
&lt;li&gt;Riemann (1859), &quot;Ueber die Anzahl der Primzahlen unter einer gegebenen Gr&amp;ouml;sse&quot;, Monatsberichte der Berliner Akademie (1892).&lt;/li&gt;
&lt;li&gt;Mertens (1897), Akademie Wissenschaftlicher Wien Mathematik-Naturlich, IIA.106:761&amp;ndash;830.&lt;/li&gt;
&lt;li&gt;Redheffer (1977), Numerische Methoden bei Optimierungsaufgaben, Band 3: 213&amp;ndash;216.&lt;/li&gt;
&lt;li&gt;Odlyzko &amp;amp; te Riele (1985), Journal f&amp;uuml;r die reine und angewandte Mathematik 357: 138&amp;ndash;160.&lt;/li&gt;
&lt;li&gt;Barrett &amp;amp; Jarvis (1992), Linear Algebra and Its Applications: 162&amp;ndash;164.&lt;/li&gt;
&lt;li&gt;Borwein (2009), &lt;a href=&quot;https://www.cecm.sfu.ca/~pborwein/course/math08/lecture.pdf&quot;&gt;https://www.cecm.sfu.ca/~pborwein/course/math08/lecture.pdf&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Thanks&lt;a name=&quot;33b645c0-16b0-4849-88e1-05e50cb538c2&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Tim Davis&lt;/li&gt;
&lt;li&gt;John Gilbert&lt;/li&gt;
&lt;li&gt;Pat Quillen&lt;/li&gt;
&lt;li&gt;Steve Lord&lt;/li&gt;
&lt;li&gt;Jan van Lent&lt;/li&gt;
&lt;li&gt;Frank Stenger&lt;/li&gt;
&lt;li&gt;Claude&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;!-- 
    function grabCode_e40ab05a928f42b9956d24c156a2b00f() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;e40ab05a928f42b9956d24c156a2b00f &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; e40ab05a928f42b9956d24c156a2b00f&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
e40ab05a928f42b9956d24c156a2b00f ##### SOURCE BEGIN #####
    %% My Talk at Householder XXII
% The twenty-second Householder Symposium on 
% Numerical Linear Algebra is this week,
% June 8 - June 13, 2025 at Cornell.
% My talk on Wednesday had the provocative title
% &quot;A Million-Dollar Matrix&quot;.
% A PDF of the slides available at
% &lt;https://blogs.mathworks.com/cleve/files/HXXII.pdf
% link_1&gt;.
% The talk covers posts in the Cleve&apos;s Corner blog last fall.
% &lt;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/
% link_2&gt;,
% &lt;https://blogs.mathworks.com/cleve/2024/09/27/redheffer-and-mertens-continued/
% link_3&gt;,
% &lt;https://blogs.mathworks.com/cleve/2024/09/30/redheffer-and-mertens-accelerated/
% link_4&gt;.

%% Redheffer Matrix
% Ray Redheffer (1921-2005) was a professor of mathematics
% at UCLA from 1950 until 2000.  The Redheffer matrix, which
% he introduced in 1977, is n-by-n, with elements
%
%     R(k,j) = 1, if j = 1 or k divides j,
%            = 0, otherwise
%
% Here is a |spy| plot for n = 64.  The nonzero elements lie
% in the first column and on diagonals with integer-valued slopes.
% 
% &lt;&lt;redheffer.png&gt;&gt;
%

%% Möbius Function 
% August Möbius (1790-1868) was an eminent 19th-century German
% mathematician.  His Möbius function is a fundamental tool in
% the study of prime numbers.
% 
%     mu(k) = 1 if k has an even number of distinct prime factors,
%           = 0 if k has a repeated prime factor,
%           = -1 if k has an odd number of distinct prime factors
%
% &lt;&lt;mobius.png&gt;&gt;
%

%% Mertens Function
% Franz Mertens (1840-1927) was born in the Grand Duchy of Posen
% in the Kingdom of Prussia, which is now Poland.  He lived much
% his life in Vienna, Austria.  The Mertens function is the
% cumulative sum of the Möbius function.
%
% $$ M(n) = \sum_{k = 1}^{n} \mu(k) $$
%
% M(n) is a running count of the integers that have
% an even number of prime factors, minus those with
% an odd number of prime factors.
%
% &lt;&lt;mertens.png&gt;&gt;
%

%% Redheffer = Mertens
% The determinant of the Redheffer matrix is equal to the Mertens
% function.
%
% *det(R(n)) = M(n)*
%
% Plots of M(n) are also plots of det(R(n)).

%% Mertens Conjecture
% How  fast does M(n) grow as n increases?
% Here are plots of M(n) for n in powers of 10 from n = 10 to n = 10^8,
% together with plots of sqrt(n) and -sqrt(n). 
%
% &lt;&lt;mertens2x4.png&gt;&gt;
%

%%
% We see that, at least for n &lt; 10^8,
%
%     |M(n)| &lt; √n
%
% The Mertens conjecture is that this inequality holds for all n as n → ∞.
% This conjecture is of interest because it
% implies the Riemann hypothesis.

%% Riemann Hypothesis
% The Riemann hypothesis has been called the “Most important unsolved 
% problem in mathematics&quot;.  Its resolution is the objective of a
% Clay Millenium Prize valued at one-million dollars.
% The hypothesis, proposed by G. F. Bernard Riemann in 1859,
% concerns the zeta function ζ(z) and the location of its zeros.
%

%% Riemann Computations
% Computation of the first N non-trivial zeros of ζ(s).
%
%                  authors                    year                     N       
%     ____________________________________    ____    __________________
%     Riemann                                 1854                     ?
%     Gram                                    1903                    10
%     Backlund                                1914                    79
%     Hutchinson                              1925                   138
%     Titchmarsh                              1936                 1,041
%     Turing                                  1953                 1,104
%     Lehmer                                  1956                25,000
%     Meller                                  1958                35,337
%     Lehman                                  1966               250,000
%     Rosser, Yohe, Schoenfield               1969             3,502,500
%     Brent                                   1977            40,000,000
%     Brent                                   1979            81,000,001
%     Brent, Van_de_Lune, Te_Riele, Winter    1982           200,000,001
%     Van_de_Lune, Te_Riele, Winter           1986         1,500,000,001
%     Van_de_Lune                             2001       100,000,000,000
%     Wedeniwski                              2003       250,000,000,000
%     Gourdon                                 2004    10,000,000,000,000

%% $1M
% The Mertens conjecture
%
%    |M(n)| &lt; √n
%
% implies the Riemann hypothesis and is worth $1M. 
%
% So, a proof that
%
%    |det(R(n)| &lt; √n
%
% would earn R the title &quot;Million-Dollar Matrix&quot;.

%% Spoiler
% The Mertens conjecture is false.
%
% Andrew Odlyzko and Herman te Riele (1985) prove
%
%    limsup n→∞ M(n)/√n &gt; 1.06
%
% This proves the existence of infinitely many values
% of |n| for which
%
%    |det(R(n))| &gt; 1.06 √n
%
% The proof is indirect.  Nobody knows an actual value of |n|.
% Estimates are 
%
%    n &gt;&gt; 10^30
%

%% Redheffer Matrix
% Even though it is not worth a million dollars,
% Nick Higham included the Redheffer matrix in the original
% MATLAB |gallery|. The command
%
%    help private/redheff
% 
% says
%
%    A has N-FLOOR(LOG2(N))-1 eigenvalues equal to 1,
%    a real eigenvalue approximately SQRT(N),
%    a negative eigenvalue approximately -SQRT(N),
%    and the remaining eigenvalues are provably &quot;small&quot;.
%
% For n = 64, this becomes
%
%    R(64) has 57 eigenvalues equal to 1,
%    a real eigenvalue approximately 8.0,
%    a negative eigenvalue approximately -8.0,
%    and the remaining eigenvalues are provably &quot;small&quot;.
%

%% Eigenvalues
% The eigenvalues of R(64) are
%
%     eig(redheffer(64))
%   
%     10.0445 + 0.0000i
%     -5.5442 + 0.0000i
%      0.0726 + 0.0000i
%      0.3213 + 0.4487i
%      0.3213 - 0.4487i
%      0.8923 + 0.1262i
%      0.8923 - 0.1262i  
%
%     followed by
%
%      1.0000 + 0.0000i
%
%     repeated 57 times.
%

%% Characteristic polynomial
% The characteristic polynomial of R(64) is
% 
%    p(z) * (z – 1)^57
%
% where 
%
%    p(z) = z^7 - 7^z^6 - 42*z^5 + 127*z^4 - 130*z^3 + 67*z^2 - 18*z + 1
%

%% Jordan Canonical Form
%
% &lt;&lt;jcf64.png&gt;&gt;


%% Code
%
    type mobius.m

%%
%
    type mertens.m

%%
%
    type redheffer.m

%%
%
    type sparse_redheffer.m

%% Sparse Redheffer
%  
%       n    tictoc            bytes            nnz      sparsity      det    |det|/√n
%    10^1     0.000              664             36     0.3600000       -1      0.316
%    10^2     0.000           10,104            581     0.0581000        1      0.100
%    10^3     0.003          137,096          8,068     0.0080680        2      0.063
%    10^4     0.021        1,738,680        103,667     0.0010367      -23      0.230
%    10^5     0.216       21,067,992      1,266,749     0.0001267      -48      0.152
%    10^6     2.515      247,520,536     14,970,033     0.0000150      212      0.212
%    10^7    32.429    2,843,605,816    172,725,363     0.0000017     1037      0.328
%        

%% Five Ways
%
    type fiveways
  
%% Complexity

%%
%
%       redheffer function  dets  complexity      M
%
%    #1 full      gallery     1   n^3             1
%    #2 sparse    lu          4   n*log(n)^2      1
%    #3 sparse    swap        1   n*log(n)^2      1
%    #4 sparse    \           0   n*log(n)        1
%    #5 none      primes      0   n*log(log(n))  many

%% Timing

%%
%           2e4     2e5     2e6     2e7
%
%     #1   26.33     -       -       -
%     #2    0.36   21.53     -       -
%     #3    0.08    1.29   16.71     -
%     #4    0.05    0.57    6.32   70.85
%     #5    0.01    0.03    0.27    3.18
%
%                 Time (seconds)

%% References
%
% * Möbius (1832), Journal für die reine und angewandte Mathematik.9:105–123.
% * Riemann (1859), &quot;Ueber die Anzahl der Primzahlen unter einer gegebenen Grösse&quot;,
%   Monatsberichte der Berliner Akademie (1892).
% * Mertens (1897), Akademie Wissenschaftlicher Wien Mathematik-Naturlich, IIA.106:761–830.
% * Redheffer (1977), Numerische Methoden bei Optimierungsaufgaben, Band 3: 213–216.
% * Odlyzko &amp; te Riele (1985), Journal für die reine und angewandte Mathematik 357: 138–160.
% * Barrett &amp; Jarvis (1992), Linear Algebra and Its Applications: 162–164.
% * Borwein (2009), https://www.cecm.sfu.ca/~pborwein/course/math08/lecture.pdf

%% Thanks
% * Tim Davis
% * John Gilbert
% * Pat Quillen
% * Steve Lord
% * Jan van Lent
% * Frank Stenger
% * Claude
##### SOURCE END ##### e40ab05a928f42b9956d24c156a2b00f
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Revolving Century Puzzle and Magic Squares</title>
   <link href="https://hpc.social/2025/revolving-century-puzzle-and-magic-squares/"/>
   <updated>2025-05-11T14:53:11-06:00</updated>
   <id>https://hpc.social/2025/revolving-century-puzzle-and-magic-squares</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;The Revolving Century puzzle is a beautifully made wooden puzzle from &lt;a href=&quot;https://www.creativecrafthouse.com/&quot;&gt;Creative Crafthouse&lt;/a&gt; in Hudson, Florida.&lt;/p&gt;

&lt;p&gt;The sum of the numbers on each of the six rotating puzzle pieces is 100. The goal is to rotate the pieces so that the sum for each of the six columns is also 100. It is like a circular 6-by-6 magic square.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/start.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#370f5ced-4a82-475a-a76b-65fd1b2a7bb7&quot;&gt;Digital Version&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c1a4a056-9449-4e06-b815-9d6a39b356bb&quot;&gt;State&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#89c70e0c-1c00-487f-9231-5089993f00c4&quot;&gt;Move&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e7b4e63f-911d-498e-b8d5-7db3f9ebb8b7&quot;&gt;Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5bf0e80f-113f-44e0-8c18-fbd782201f99&quot;&gt;Magic&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a233dce1-c8e7-4952-9d4f-e1c668c44e38&quot;&gt;Solution&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c80f5fc6-c4ef-4d9f-b617-4d868c466333&quot;&gt;Software&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Digital Version&lt;a name=&quot;370f5ced-4a82-475a-a76b-65fd1b2a7bb7&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Our digital version of the Revolving Century puzzle uses 36 &lt;a href=&quot;https://blogs.mathworks.com/cleve/2022/08/21/polygons-polyshapes-and-puzzles/&quot;&gt;polyshapes&lt;/a&gt; like this one.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/piece19.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/m_start.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;The pieces are numbered with the integers from zero to 35, except the piece numbered 30 has been replaced by a second zero. This gives the desired &quot;century&quot; sum.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
   v = 0:35;
   v(v==30) = 0;
   c = sum(v)/6
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
   c =
      100
&lt;/pre&gt;
&lt;h4&gt;State&lt;a name=&quot;c1a4a056-9449-4e06-b815-9d6a39b356bb&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The state of the puzzle is described by a 6-by-6 matrix.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt; 
   A = start
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
   A =
        1     4    25    29     6    35
       18     5    34    33     0    10
       19    24     2    26     8    21
       28    13    32     0    11    16
       12    14    23     7    27    17
       15    20    22    31     3     9
&lt;/pre&gt;
&lt;p&gt;The row sums are all equal, but the column sums are not.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
   rows = sum(A&apos;)
   cols = sum(A)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
   rows =
      100   100   100   100   100   100
   cols =
       93    80   138   126    55   108
&lt;/pre&gt;
&lt;h4&gt;Move&lt;a name=&quot;89c70e0c-1c00-487f-9231-5089993f00c4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A puzzle move rotates one row of the state matrix, for example, the third row.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
   shift = [2:6 1];
   r = 3;
   A
   A(r,:) = A(r,shift)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
   A =
        1     4    25    29     6    35
       18     5    34    33     0    10
       19    24     2    26     8    21
       28    13    32     0    11    16
       12    14    23     7    27    17
       15    20    22    31     3     9
  A =
        1     4    25    29     6    35
       18     5    34    33     0    10
       24     2    26     8    21    19
       28    13    32     0    11    16
       12    14    23     7    27    17
       15    20    22    31     3     9
&lt;/pre&gt;
&lt;p&gt;Since we have a computer handy, we can also track the column sums.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/piece19.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Search&lt;a name=&quot;e7b4e63f-911d-498e-b8d5-7db3f9ebb8b7&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The only way to find a solution that I know of is an exhaustive search. There are only &lt;tt&gt;6^5 = 7776&lt;/tt&gt; possible states. It takes 4787 steps and less than a tenth of a second on my laptop to find the solution.&lt;/p&gt;

&lt;p&gt;Here are the last few steps of the exhaustive search for a solution.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/polypuzzle.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Magic&lt;a name=&quot;5bf0e80f-113f-44e0-8c18-fbd782201f99&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I could have used an actual magic square.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
   A = magic(6)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
   A =
       35     1     6    26    19    24
        3    32     7    21    23    25
       31     9     2    22    27    20
        8    28    33    17    10    15
       30     5    34    12    14    16
        4    36    29    13    18    11
&lt;/pre&gt;
&lt;p&gt;I would need to change the name of the puzzle to &quot;Revolution 111&quot;.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/magic6.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Solution&lt;a name=&quot;a233dce1-c8e7-4952-9d4f-e1c668c44e38&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here is the solution of the original Revolution Century puzzle.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
   A = solution
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
   A =
       25    29     6    35     1     4
       33     0    10    18     5    34
       21    19    24     2    26     8
       11    16    28    13    32     0
        7    27    17    12    14    23
        3     9    15    20    22    31
&lt;/pre&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/m_solution.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;I can transfer that to the analog puzzle.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/solution.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Software&lt;a name=&quot;c80f5fc6-c4ef-4d9f-b617-4d868c466333&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A self-extracting archive for &lt;tt&gt;polypuzzle&lt;/tt&gt; is available &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Puzzle_mzip.m&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!-- 
    function grabCode_f1d26faf2b644b55b95e3995bb8d7cdb() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;f1d26faf2b644b55b95e3995bb8d7cdb &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; f1d26faf2b644b55b95e3995bb8d7cdb&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
f1d26faf2b644b55b95e3995bb8d7cdb ##### SOURCE BEGIN #####
%% Revolving Century Puzzle and Magic Squares
% The Revolving Century puzzle is a beautifully made wooden puzzle
% from &lt;https://www.creativecrafthouse.com/ Creative Crafthouse&gt;
% in Hudson, Florida.
%
% The sum of the numbers on each of the six rotating puzzle
% pieces is 100.  The goal is to rotate the pieces so that
% the sum for each of the six columns is also 100.  It is like 
% a circular 6-by-6 magic square.
%
% &lt;&lt;start.png&gt;&gt;
%

%% Digital Version
% Our digital version of the Revolving Century puzzle uses 36  
% &lt;https://blogs.mathworks.com/cleve/2022/08/21/polygons-polyshapes-and-puzzles/
% polyshapes&gt; like this one.
%
% &lt;&lt;piece19.png&gt;&gt;
%
% &lt;&lt;m_start.png&gt;&gt;
%

%%
% The pieces are numbered with the integers from zero to 35, except
% the piece numbered 30 has been replaced by a second zero. 
% This gives the desired &quot;century&quot; sum. 
 
    v = 0:35;
    v(v==30) = 0; 
    c = sum(v)/6

%% State
% The state of the puzzle is described by a 6-by-6 matrix.

    A = start

%%
% The row sums are all equal, but the column sums are not.

    rows = sum(A&apos;)
    cols = sum(A)

%% Move
% A puzzle move rotates one row of the state matrix,
% for example, the third row.

    shift = [2:6 1];
    r = 3;
    A
    A(r,:) = A(r,shift)

%%
% Since we have a computer handy, we can also track the column sums.
%
% &lt;&lt;piece19.gif&gt;&gt;
%

%% Search
% The only way to find a solution that I know of is
% an exhaustive search.  There are only |6^5 = 7776|
% possible states.  
% It takes 4787 steps and less than a tenth of a second
% on my laptop to find the solution.
%
% Here are the last few steps of the exhaustive search
% for a solution.
% 
% &lt;&lt;polypuzzle.gif&gt;&gt;
%

%% Magic
% I could have used an actual magic square.

    A = magic(6)

%%
% I would need to change the name of the puzzle to &quot;Revolution 111&quot;.
%
% &lt;&lt;magic6.gif&gt;&gt;
%

%% Solution
% Here is the solution of the original Revolution Century puzzle.

    A = solution

%%
% &lt;&lt;m_solution.png&gt;&gt;
%
% I can transfer that to the analog puzzle.
%
% &lt;&lt;solution.png&gt;&gt;
%

%% Software
% A self-extracting archive for |polypuzzle| is available
% &lt;https://blogs.mathworks.com/cleve/files/Puzzle_mzip.m here&gt;.
##### SOURCE END ##### f1d26faf2b644b55b95e3995bb8d7cdb
--&gt;
</content>
 </entry>
 
 <entry>
   <title>L-systems, Plants, Fractal Curves, Turtles and Dragons</title>
   <link href="https://hpc.social/2025/l-systems-plants-fractal-curves-turtles-and-dragons/"/>
   <updated>2025-05-03T15:09:59-06:00</updated>
   <id>https://hpc.social/2025/l-systems-plants-fractal-curves-turtles-and-dragons</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;No, this is not the script for an episode of &quot;Game of Thrones&quot;. It is a blog post about Lindenmayer grammars, growing plants, space-filling fractals, turtle graphics and dragon curves.&lt;/p&gt;

&lt;p&gt;Here is the opening screen from our new program, MLogo.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/MLogo.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e4c73f18-5203-41ab-aae7-29dfc3c677bc&quot;&gt;L-systems&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2b729287-e100-42ba-9e7f-ceab5a7a41a4&quot;&gt;MLogo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#fb091433-870d-4ce0-82f6-4310e751f537&quot;&gt;Dragon Curve&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#984588f4-4cb8-4fa5-8978-ec6e07b244b2&quot;&gt;Hilbert Curve&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#27758267-deb0-4d68-9287-7f7af46ef0ec&quot;&gt;Gosper Fractal&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#164f12f3-6e87-42af-b4e5-b38dd5d03010&quot;&gt;Algorithmic Beauty of Plants&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b0adc2d3-245d-4aca-b9f1-6a19fc7af2f3&quot;&gt;Software&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;L-systems&lt;a name=&quot;e4c73f18-5203-41ab-aae7-29dfc3c677bc&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Aristid Lindenmayer (1925-1989) was a Hungarian biologist and botanist at the University of Utrecht. In 1968 he introduced a formal grammar for string rewrite rules that can describe living plants, artificial fractals, and especially, artificial fractals that model living plants.&lt;/p&gt;

&lt;p&gt;Lindenmayer&apos;s strings drive MLogo. A simple example is&lt;/p&gt;

&lt;pre&gt;  R = @(s) replace(s,&quot;A&quot;,&quot;A+A-A&quot;);&lt;/pre&gt;
&lt;p&gt;If you start with&lt;/p&gt;

&lt;pre&gt;  s = &quot;A&quot;&lt;/pre&gt;
&lt;p&gt;and repeat&lt;/p&gt;

&lt;pre&gt;  s = R(s)&lt;/pre&gt;
&lt;p&gt;three times, the result is&lt;/p&gt;

&lt;pre&gt;  A
  A+A-A
  A+A-A+A+A-A-A+A-A
  A+A-A+A+A-A-A+A-A+A+A-A+A+A-A-A+A-A-A+A-A+A+A-A-A+A-A&lt;/pre&gt;
&lt;h4&gt;MLogo&lt;a name=&quot;2b729287-e100-42ba-9e7f-ceab5a7a41a4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Logo_(programming_language)&quot;&gt;Logo&lt;/a&gt; is a programming language, aimed at young students, developed in 1967 by MIT professors Wally Feurzeig, Seymour Papert, and Cynthia Solomon. Logo has been very influential, spawning hundreds of implementations and successors. MLogo, short for MATLAB Logo, is another successor.&lt;/p&gt;

&lt;p&gt;A distinctive feature of Logo offprings is &quot;turtle graphics&quot;. Basic Logo commands like &lt;tt&gt;step&lt;/tt&gt;, &lt;tt&gt;turn&lt;/tt&gt;, and &lt;tt&gt;draw&lt;/tt&gt; drive a virtual tortoise, originally a motorized toy, and later a graphics cursor. Here is a sample with turtle driven by this Lindenmayer system.&lt;/p&gt;

&lt;pre&gt;A step forward
+ turn left 90 degrees
- turn right 90 degrees&lt;/pre&gt;
&lt;pre&gt;s = A+A-A-A+&lt;/pre&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Turtle-2.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Dragon Curve&lt;a name=&quot;fb091433-870d-4ce0-82f6-4310e751f537&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The dragon space-filling fractal curve was invented by NASA physicist John Heighway and his colleagues and featured in Martin Gardner&apos;s &lt;i&gt;Scientific American&lt;/i&gt; column in 1967. I made a &lt;a href=&quot;https://blogs.mathworks.com/cleve/2018/04/06/the-dragon-curve&quot;&gt;Cleve&apos;s Corner&lt;/a&gt; posting about the dragon curve in 2018.&lt;/p&gt;

&lt;p&gt;Here is MLogo&apos;s dragon.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Dragon-1.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;Here is a frame from &quot;Numberphile&quot; video where Brady Haran visits &lt;a href=&quot;https://www.youtube.com/watch?v=v678Em6qyzk&quot;&gt;Don Knuth&lt;/a&gt; and the unique ceramic tile dragon in his home.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Knuth.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Hilbert Curve&lt;a name=&quot;984588f4-4cb8-4fa5-8978-ec6e07b244b2&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/David_Hilbert&quot;&gt;David Hilbert&lt;/a&gt; (1862-1943), one of the most influential mathematicians of his era, introduced the space-filling fractal &lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert_curve&quot;&gt;Hilbert curve&lt;/a&gt; in 1891.&lt;/p&gt;

&lt;p&gt;Here is MLogo&apos;s Hilbert curve.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Hilbert.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;Here is a crazy application of the Hilbert curve, Randall Munroe&apos;s view of Internet addresses in 2006, &lt;a href=&quot;https://xkcd.com/195&quot;&gt;https://xkcd.com/195&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/xkcd.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://xkcd.com/195&quot;&gt;https://xkcd.com/195&lt;/a&gt;
&lt;/p&gt;

&lt;h4&gt;Gosper Fractal&lt;a name=&quot;27758267-deb0-4d68-9287-7f7af46ef0ec&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bill_Gosper&quot;&gt;Bill Gosper&lt;/a&gt;, one of the original MIT &quot;hackers&quot;, has made major contributions to Lisp and Macsyma, found the &quot;glider gun&quot; for Conway&apos;s Game of Life, and invented the Gosper fractal.&lt;/p&gt;

&lt;p&gt;Here is MLogo&apos;s rendition.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Gosper-1.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;Dragon Nerd creates jewelry from the Gosper curve and other fractals.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/DragonNerd.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://www.etsy.com/shop/DragonNerd&quot;&gt;https://www.etsy.com/shop/DragonNerd&lt;/a&gt;
&lt;/p&gt;

&lt;h4&gt;Algorithmic Beauty of Plants&lt;a name=&quot;164f12f3-6e87-42af-b4e5-b38dd5d03010&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;&quot;The Algorithmic Beauty of Plants&quot; is a beautiful book by Przemyslaw Prusinkiewicz and Aristid Lindenmayer, featuring over fifty color figures of computer-generated plants. The original book is available from &lt;a href=&quot;https://link.springer.com/book/10.1007/978-1-4613-8476-2&quot;&gt;Springer Nature&lt;/a&gt;. A PDF version is available from &lt;a href=&quot;https://algorithmicbotany.org/papers/#abop&quot;&gt;AlgormicBotany&lt;/a&gt; at the University of Calgary.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/abop.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;This is MLogo&apos;s rendition of one small example.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Plant-2.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Software&lt;a name=&quot;b0adc2d3-245d-4aca-b9f1-6a19fc7af2f3&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/MLogo.m&quot;&gt;https://blogs.mathworks.com/cleve/files/MLogo.m&lt;/a&gt;
&lt;/p&gt;

&lt;!-- 
    function grabCode_038066df016b4e6685a8571703c3f9db() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;038066df016b4e6685a8571703c3f9db &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 038066df016b4e6685a8571703c3f9db&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
038066df016b4e6685a8571703c3f9db ##### SOURCE BEGIN #####
%% L-systems, Plants, Fractal Curves, Turtles and Dragons
% No, this is not the script for an episode of &quot;Game of Thrones&quot;.
% It is a blog post about
% Lindenmayer grammars, growing plants, space-filling fractals,
% turtle graphics and dragon curves.
%
% Here is the opening screen from our new program, MLogo.
%
% &lt;&lt;MLogo.png&gt;&gt;
%

%% L-systems
% Aristid Lindenmayer (1925-1989) was a Hungarian biologist and
% botanist at the University of Utrecht.  In 1968 he introduced a
% formal grammar for string rewrite rules that can describe  
% living plants, artificial fractals, and especially, artificial
% fractals that model living plants. 
%
% Lindenmayer&apos;s strings drive MLogo.  A simple example is
%
%    R = @(s) replace(s,&quot;A&quot;,&quot;A+A-A&quot;);
%
% If you start with
%
%    s = &quot;A&quot;
%
% and repeat
%
%    s = R(s)
%
% three times, the result is
%
%    A
%    A+A-A
%    A+A-A+A+A-A-A+A-A
%    A+A-A+A+A-A-A+A-A+A+A-A+A+A-A-A+A-A-A+A-A+A+A-A-A+A-A
%

%% MLogo
% &lt;https://en.wikipedia.org/wiki/Logo_(programming_language)
% Logo&gt; is a programming language, aimed at young students,
% developed in 1967 by MIT professors Wally Feurzeig, Seymour Papert,
% and Cynthia Solomon.  Logo has been very influential, spawning
% hundreds of implementations and successors.  MLogo, short for
% MATLAB Logo, is another successor.
%
% A distinctive feature of Logo offprings is &quot;turtle graphics&quot;.
% Basic Logo commands like |step|, |turn|, and |draw| drive a
% virtual tortoise, originally a motorized toy, and later a graphics 
% cursor.  Here is a sample with turtle driven by this
% Lindenmayer system. 
%
%  A step forward
%  + turn left 90 degrees
%  - turn right 90 degrees
%
%  s = A+A-A-A+ 
%
% &lt;&lt;Turtle-2.gif&gt;&gt;
%

%% Dragon Curve
% The dragon space-filling fractal curve was invented by NASA
% physicist John Heighway and his colleagues and featured in 
% Martin Gardner&apos;s _Scientific American_ column in 1967. I made a
% &lt;https://blogs.mathworks.com/cleve/2018/04/06/the-dragon-curve
% Cleve&apos;s Corner&gt; posting about the dragon curve in 2018.
%
% Here is MLogo&apos;s dragon.
%
% &lt;&lt;Dragon-1.gif&gt;&gt;
%
% Here is a frame from &quot;Numberphile&quot; video where Brady Haran visits
% &lt;https://www.youtube.com/watch?v=v678Em6qyzk Don Knuth&gt;
% and the unique ceramic tile dragon in his home.
%
% &lt;&lt;Knuth.png&gt;&gt;

%% Hilbert Curve
% &lt;https://en.wikipedia.org/wiki/David_Hilbert David Hilbert&gt;
% (1862-1943), one of the most influential mathematicians
% of his era, introduced the space-filling fractal 
% &lt;https://en.wikipedia.org/wiki/Hilbert_curve Hilbert curve&gt;
% in 1891.
%
% Here is MLogo&apos;s Hilbert curve.
%
% &lt;&lt;Hilbert.gif&gt;&gt;
%
% Here is a crazy application of the Hilbert curve,
% Randall Munroe&apos;s view of Internet addresses in 2006,
% &lt;https://xkcd.com/195&gt;.
%
% &lt;&lt;xkcd.png&gt;&gt;
%
% &lt;https://xkcd.com/195&gt;
%
%% Gosper Fractal
% &lt;https://en.wikipedia.org/wiki/Bill_Gosper Bill Gosper&gt;,
% one of the original MIT &quot;hackers&quot;,
% has made major contributions to Lisp and Macsyma,
% found the &quot;glider gun&quot; for Conway&apos;s Game of Life,
% and invented the Gosper fractal.
%
% Here is MLogo&apos;s rendition.
%
% &lt;&lt;Gosper-1.gif&gt;&gt;
%
% Dragon Nerd creates jewelry from the Gosper curve and other fractals.
%
% &lt;&lt;DragonNerd.png&gt;&gt;
%
% &lt;https://www.etsy.com/shop/DragonNerd&gt;

%% Algorithmic Beauty of Plants
% &quot;The Algorithmic Beauty of Plants&quot; is a beautiful book by
% Przemyslaw Prusinkiewicz and Aristid Lindenmayer, featuring
% over fifty color figures of computer-generated plants.
% The original book is available from 
% &lt;https://link.springer.com/book/10.1007/978-1-4613-8476-2
% Springer Nature&gt;.  A PDF version is available from
% &lt;https://algorithmicbotany.org/papers/#abop
% AlgormicBotany&gt; at the University of Calgary.
%
% &lt;&lt;abop.png&gt;&gt;
%
% This is MLogo&apos;s rendition of one small example.
%
% &lt;&lt;Plant-2.gif&gt;&gt;
%

%% Software
%
% &lt;https://blogs.mathworks.com/cleve/files/MLogo.m&gt;

##### SOURCE END ##### 038066df016b4e6685a8571703c3f9db
--&gt;
</content>
 </entry>
 
 <entry>
   <title>The Hat, a Tridecagon Aperiordic Monotile</title>
   <link href="https://hpc.social/2025/the-hat-a-tridecagon-aperiordic-monotile/"/>
   <updated>2025-03-27T16:30:52-06:00</updated>
   <id>https://hpc.social/2025/the-hat-a-tridecagon-aperiordic-monotile</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;Two years ago, in March of 2023, an unlikely team of mathematical hobbyists announced the discovery of a remarkable 13-sided polygon that they nick-named the &quot;Hat&quot;. Today, a Google search for the Hat&apos;s more formal name, &quot;Aperiodic Monotile&quot;, yields dozens of links.&lt;/p&gt;

&lt;p&gt;This blog post is about the Hat and the resulting &lt;tt&gt;polyshape&lt;/tt&gt; object.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/hat.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#47b05df3-6f23-47ad-b33e-eeae5b4b2822&quot;&gt;An Aperiodic Monotile&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#19f4faeb-8f21-4d97-8f08-1531f4c826d5&quot;&gt;Tilings&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4ece77ab-9cf1-45f7-8a4b-63021b78316f&quot;&gt;Tridecagons&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a3c51c10-1d21-4888-a3b3-25da70fac536&quot;&gt;Penrose Tiling&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#50b6067c-f41a-4758-aa37-eaa346cbf0d9&quot;&gt;Reflections&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e6049ad0-8f8c-4c08-a097-eb440a0902a7&quot;&gt;Monotile Tiling&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7c35a5ad-2cde-45b0-9451-1276d5b7a8a9&quot;&gt;Polyshapes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4645d478-11a0-4e5a-8ea3-36bdda8c1e9c&quot;&gt;Level 0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#88ebca11-e5fd-4596-b7c8-543ba7261e66&quot;&gt;Level 1&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#cbe159ac-4696-42ed-8038-0aeb10f035ec&quot;&gt;Level 2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6d0246a4-496b-47ef-8e97-866a074ed1d0&quot;&gt;Level 3&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#42c85302-ca00-44af-a291-221be3893d76&quot;&gt;Numbers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#efb8c915-e026-43f2-ae98-4c375c0da12f&quot;&gt;Level Color&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#52bfd4a0-ab54-4291-bd8d-33faf7ad7dde&quot;&gt;Convex Hull&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;An Aperiodic Monotile&lt;a name=&quot;47b05df3-6f23-47ad-b33e-eeae5b4b2822&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The authors of the paper that announced the discovery of the Hat are &lt;a href=&quot;https://the-orangery.weebly.com&quot;&gt;David Smith&lt;/a&gt;, &lt;a href=&quot;https://www.polyomino.org.uk&quot;&gt;Joseph Samuel Myers&lt;/a&gt;, &lt;a href=&quot;https://cs.uwaterloo.ca/~csk/&quot;&gt;Craig S. Kaplan&lt;/a&gt; and &lt;a href=&quot;https://chaimgoodmanstrauss.com/&quot;&gt;Chaim Goodman-Strauss&lt;/a&gt;. The announcement was made in an &lt;tt&gt;archive&amp;gt;math&lt;/tt&gt; preprint with the title &lt;a href=&quot;https://arxiv.org/abs/2303.10798&quot;&gt;&quot;An Aperiodic Monotile&quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Within days of the announcement, articles like this one in &lt;a href=&quot;https://www.sciencenews.org/article/mathematicians-discovered-einstein-tile&quot;&gt;Science News&lt;/a&gt; appeared. Two months later, Florentin Waligorski created an &lt;a href=&quot;https://www.youtube.com/watch?v=BoAx-rLo5P0&quot;&gt;origami Hat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The official paper was published in June of 2024 in the journal &lt;i&gt;Combinatorial Theory&lt;/i&gt;. It was also titled &lt;a href=&quot;https://doi.org/10.5070/C64163843&quot;&gt;&quot;An Aperiodic Monotile&quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I first heard about the Hat is an article by Erica Klarreich in the magazine &lt;i&gt;Quanta&lt;/i&gt;, &lt;a href=&quot;https://www.quantamagazine.org/hobbyist-finds-maths-elusive-einstein-tile-20230404/&quot;&gt;Hobbyist Finds Math&amp;rsquo;s Elusive &amp;lsquo;Einstein&amp;rsquo; Tile&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Tilings&lt;a name=&quot;19f4faeb-8f21-4d97-8f08-1531f4c826d5&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Quoting &lt;a href=&quot;https://en.wikipedia.org/wiki/Tessellation&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;  A &quot;tessellation&quot; or &quot;tiling&quot; is the covering of a surface,
  often a plane, using one or more geometric shapes, called &quot;tiles&quot;
  with no overlaps and no gaps.&lt;/pre&gt;
&lt;pre&gt;  A &quot;periodic tiling&quot; has a repeating pattern. Some special kinds
  include regular tilings with regular polygonal tiles all of the
  same shape, and semiregular tilings with regular tiles of more
  than one shape and with every corner identically arranged.&lt;/pre&gt;
&lt;pre&gt;  A tiling that lacks a repeating pattern is called &quot;aperiodic&quot;.
  An aperiodic tiling uses a small set of tile shapes that
  cannot form a repeating pattern.&lt;/pre&gt;
&lt;h4&gt;Tridecagons&lt;a name=&quot;4ece77ab-9cf1-45f7-8a4b-63021b78316f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A &lt;i&gt;tridecagon&lt;/i&gt; is a polygon with 13 sides, like this gold coin from the Czech Republic. The sides of a &lt;i&gt;regular&lt;/i&gt; &lt;i&gt;tridecagon&lt;/i&gt; are all the same length. Any attempt to tile your floor with these coins inevitably has gaps. Regular tridecagons cannot tile the plane. The Hat is an &lt;i&gt;irregular&lt;/i&gt; tridecagon that can tile the plane.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/20_CZK.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Penrose Tiling&lt;a name=&quot;a3c51c10-1d21-4888-a3b3-25da70fac536&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Roger_Penrose&quot;&gt;Roger Penrose&lt;/a&gt; is a &lt;a href=&quot;https://www.google.com/search?q=Nobel+prize&quot;&gt;Nobel prize-winning&lt;/a&gt; mathematician and physicist. Among his many achievements are the &lt;a href=&quot;https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse&quot;&gt;Moore-Penrose pseudoinverse&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Penrose_tiling&quot;&gt;Penrose tiling&lt;/a&gt;. The Penrose tiling uses these regular quadrilateral tiles, the &quot;kite&quot; and the &quot;dart&quot;, to produce an aperiodic tiling with two tiles. The Hat generates an aperiodic tiling with a &lt;i&gt;single&lt;/i&gt; tile.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Kite_Dart.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://steveeddins.com/&quot;&gt;Steve Eddins&lt;/a&gt; is a &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/foc.txt&quot;&gt;FOC-winning&lt;/a&gt; French horn player. Among his many achievements is a &lt;a href=&quot;https://blogs.mathworks.com/cleve/2018/11/26/penrose-and-fourier-design-playing-cards/&quot;&gt;Cleve&apos;s Corner&lt;/a&gt; about this Penrose tiling.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Penrose.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Reflections&lt;a name=&quot;50b6067c-f41a-4758-aa37-eaa346cbf0d9&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;We say that the Hat on the left is reflected and the one on the right is not reflected.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/polarity.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Monotile Tiling&lt;a name=&quot;e6049ad0-8f8c-4c08-a097-eb440a0902a7&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here is (a finite piece of) an infinite, aperiodic tiling of the plane using only the Hat and its reflection. This figure is one half of figure 2.12 from the original preprint, &lt;a href=&quot;https://doi.org/10.5070/C64163843&quot;&gt;&quot;An Aperiodic Monotile&quot;&lt;/a&gt;. Each dark blue tile is surrounded by three light blue tiles. The white tiles appear alone or in pairs. If you look carefully, you can see the grey tiles form filaments. The filaments are more apparent in the other half of figure 2.12 on page 20 of the preprint.&lt;/p&gt;

&lt;p&gt;The dark tiles are not reflected; all of the other tiles are reflected.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/monotile_tiling.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Polyshapes&lt;a name=&quot;7c35a5ad-2cde-45b0-9451-1276d5b7a8a9&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Quoting the MATLAB documentation for the &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/polyshape.html&quot;&gt;&lt;tt&gt;polyshape object&lt;/tt&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;  The polyshape function creates polygon-like shapes from 2-D vertices.
  However, unlike polygons, a polyshape can have discontiguous regions
  and holes. The properties of a polyshape object describe its vertices,
  solid regions, and holes.&lt;/pre&gt;
&lt;p&gt;All of the figures after this point in the blog post were made with &lt;tt&gt;polyshape/plot&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;We begin with a pentagonal &lt;tt&gt;polyshape&lt;/tt&gt; made from a portion of a regular hexagon.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/polyhat0.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;The Hat itself is a &lt;tt&gt;polyshape&lt;/tt&gt; formed from the &lt;tt&gt;union&lt;/tt&gt; of four rotated and translated copies of the pentagon.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/polyhat1.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Level 0&lt;a name=&quot;4645d478-11a0-4e5a-8ea3-36bdda8c1e9c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;We have experimented with a tiling created by expanding rings of unreflected hats centered around a single reflected hat. We stop after three rings because additional reflected hats are needed to continue.&lt;/p&gt;

&lt;p&gt;The zeroth level is a single reflected hat.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/hats_0.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Level 1&lt;a name=&quot;88ebca11-e5fd-4596-b7c8-543ba7261e66&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The first level adds a ring of three hats.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/hats_1.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Level 2&lt;a name=&quot;cbe159ac-4696-42ed-8038-0aeb10f035ec&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The second ring has nine more hats.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/hats_2.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Level 3&lt;a name=&quot;6d0246a4-496b-47ef-8e97-866a074ed1d0&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The level 3 ring has 18 hats.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/hats_3.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Numbers&lt;a name=&quot;42c85302-ca00-44af-a291-221be3893d76&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Our &lt;tt&gt;Hats&lt;/tt&gt; program allows you to move a hat around the screen with your mouse. When you get close to another hat, numbers appear to guide your final approach. Here are vertices 8, 9 and 10 on hat number 6 near vertices 12, 11 and 10 on hat number 2.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/target.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;This crowded figure shows all the hat numbers and all the vertex indices at level 2.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/numbers.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Level Color&lt;a name=&quot;efb8c915-e026-43f2-ae98-4c375c0da12f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Each level has a single color.&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;0 Dark blue&lt;/li&gt;
&lt;li&gt;1 Light blue&lt;/li&gt;
&lt;li&gt;2 White&lt;/li&gt;
&lt;li&gt;3 Grey&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Compare this with the detail in figure 2.12 of &lt;a href=&quot;https://arxiv.org/abs/2303.10798&quot;&gt;&quot;An Aperiodic Monotile&quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/levelcolor.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Convex Hull&lt;a name=&quot;52bfd4a0-ab54-4291-bd8d-33faf7ad7dde&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Convex hull is one of many other methods available for &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/polyshape.html&quot;&gt;&lt;tt&gt;polyshape objects&lt;/tt&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/convhull.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;!-- 
    function grabCode_8d40a9f81f874076b9a0b40b3a48ce78() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;8d40a9f81f874076b9a0b40b3a48ce78 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 8d40a9f81f874076b9a0b40b3a48ce78&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
8d40a9f81f874076b9a0b40b3a48ce78 ##### SOURCE BEGIN #####
%% The Hat, a Remarkable Tridecagon
% Two years ago, in March of 2023, an unlikely team of
% mathematical hobbyists announced the discovery of a remarkable 
% 13-sided polygon that they nick-named the &quot;Hat&quot;.
% Today, a Google search for the Hat&apos;s more formal name,
% &quot;Aperiodic Monotile&quot;, yields dozens of links.
%
% This blog post is about the Hat and the resulting |polyshape| object.
% 
% &lt;&lt;hat.png&gt;&gt;
%

%% An Aperiodic Monotile
% The authors of the paper that announced the discovery of the Hat are
% &lt;https://the-orangery.weebly.com David Smith&gt;, 
% &lt;https://www.polyomino.org.uk Joseph Samuel Myers&gt;, 
% &lt;https://cs.uwaterloo.ca/~csk/ Craig S. Kaplan&gt; and 
% &lt;https://chaimgoodmanstrauss.com/ Chaim Goodman-Strauss&gt;.
% The announcement was made in an |archive&gt;math| preprint with the title
% &lt;https://arxiv.org/abs/2303.10798 &quot;An Aperiodic Monotile&quot;&gt;.
%
% Within days of the announcement, articles like this one in
% &lt;https://www.sciencenews.org/article/mathematicians-discovered-einstein-tile
% Science News&gt; appeared.
% Two months later, Florentin Waligorski created an
% &lt;https://www.youtube.com/watch?v=BoAx-rLo5P0 origami Hat&gt;.
%
% The official paper was published in June of 2024 in the journal
% _Combinatorial Theory_.  It was also titled 
% &lt;https://doi.org/10.5070/C64163843 &quot;An Aperiodic Monotile&quot;&gt;.
%
% I first heard about the Hat is an article by Erica Klarreich
% in the magazine _Quanta_,
% &lt;https://www.quantamagazine.org/hobbyist-finds-maths-elusive-einstein-tile-20230404/
% Hobbyist Finds Math’s Elusive ‘Einstein’ Tile&gt;.
%

%% Tilings
% Quoting &lt;https://en.wikipedia.org/wiki/Tessellation Wikipedia&gt;:
%
%    A &quot;tessellation&quot; or &quot;tiling&quot; is the covering of a surface, 
%    often a plane, using one or more geometric shapes, called &quot;tiles&quot;
%    with no overlaps and no gaps.
%
%    A &quot;periodic tiling&quot; has a repeating pattern. Some special kinds 
%    include regular tilings with regular polygonal tiles all of the 
%    same shape, and semiregular tilings with regular tiles of more
%    than one shape and with every corner identically arranged.
%
%    A tiling that lacks a repeating pattern is called &quot;aperiodic&quot;. 
%    An aperiodic tiling uses a small set of tile shapes that
%    cannot form a repeating pattern.

%% Tridecagons
% A _tridecagon_ is a polygon with 13 sides, like this gold coin from
% the Czech Republic. The sides of a _regular_ _tridecagon_ are all
% the same length.  Any attempt to tile your floor with these coins
% inevitably has gaps.  Regular tridecagons cannot tile the plane.
% The Hat is an _irregular_ tridecagon that can tile the plane. 
%
% &lt;&lt;20_CZK.png&gt;&gt;
%

%% Penrose Tiling
% &lt;https://en.wikipedia.org/wiki/Roger_Penrose Roger Penrose&gt; is a
% &lt;https://www.google.com/search?q=Nobel+prize Nobel prize-winning&gt;
% mathematician and physicist.
% Among his many achievements are the
% &lt;https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse
% Moore-Penrose pseudoinverse&gt; and the
% &lt;https://en.wikipedia.org/wiki/Penrose_tiling Penrose tiling&gt;.
% The Penrose tiling uses these regular quadrilateral tiles,
% the &quot;kite&quot; and the &quot;dart&quot;, to produce an aperiodic tiling with
% two tiles.
% The Hat generates an aperiodic tiling with a _single_ tile.
%
% &lt;&lt;Kite_Dart.png&gt;&gt;
%
% &lt;https://steveeddins.com/ Steve Eddins&gt; is a 
% &lt;https://blogs.mathworks.com/cleve/files/foc.txt FOC-winning&gt;
% French horn player.
% Among his many achievements is a 
% &lt;https://blogs.mathworks.com/cleve/2018/11/26/penrose-and-fourier-design-playing-cards/
% Cleve&apos;s Corner&gt; about this Penrose tiling.
%
% &lt;&lt;Penrose.png&gt;&gt;
% 

%% Reflections
% We say that the Hat on the left is reflected and the one on the right
% is not reflected.
%
% &lt;&lt;polarity.png&gt;&gt;
%

%% Monotile Tiling
% Here is (a finite piece of) an infinite, aperiodic tiling of the plane
% using only the Hat and its reflection.  
% This figure is one half of figure 2.12 from the original preprint,
% &lt;https://doi.org/10.5070/C64163843 &quot;An Aperiodic Monotile&quot;&gt;.
% Each dark blue tile is surrounded by three light blue tiles.
% The white tiles appear alone or in pairs.
% If you look carefully, you can see the grey tiles form filaments.
% The filaments are more apparent in the other half of figure 2.12
% on page 20 of the preprint.
%
% The dark tiles are not reflected; all of the other tiles are reflected.
%
% &lt;&lt;monotile_tiling.png&gt;&gt;
%

%% Polyshapes
% Quoting the MATLAB documentation for the
% &lt;https://www.mathworks.com/help/matlab/ref/polyshape.html
% |polyshape object|&gt;.
%
%    The polyshape function creates polygon-like shapes from 2-D vertices.
%    However, unlike polygons, a polyshape can have discontiguous regions
%    and holes. The properties of a polyshape object describe its vertices,
%    solid regions, and holes.

%%
% All of the figures after this point in the blog post were made with
% |polyshape/plot|.

%%
% We begin with a pentagonal |polyshape| made from a portion of a 
% regular hexagon.
%
% &lt;&lt;polyhat0.png&gt;&gt;
%

%%
% The Hat itself is a |polyshape| formed from the |union| of four rotated
% and translated copies of the pentagon.
%
%
% &lt;&lt;polyhat1.png&gt;&gt;
%

%% Level 0
% We have experimented with a tiling created by expanding rings of
% unreflected hats centered around a single reflected hat.
% We stop after three rings because additional reflected hats
% are needed to continue.

%%
% The zeroth level is a single reflected hat.
%
% &lt;&lt;hats_0.gif&gt;&gt;
%

%% Level 1
% The first level adds a ring of three hats.
%
% &lt;&lt;hats_1.gif&gt;&gt;
%

%% Level 2
% The second ring has nine more hats.
%
% &lt;&lt;hats_2.gif&gt;&gt;
%

%% Level 3
% The level 3 ring has 18 hats.
%
% &lt;&lt;hats_3.gif&gt;&gt;
%

%% Numbers
% Our |Hats| program allows you to move a hat around the screen with
% your mouse.  When you get close to another hat, numbers appear
% to guide your final approach.  Here are vertices 8, 9 and 10 on
% hat number 6 near vertices 12, 11 and 10 on hat number 2. 
%
% &lt;&lt;target.png&gt;&gt;

%%
% This crowded figure shows all the hat numbers and all the vertex
% indices at level 2.
%   
% &lt;&lt;numbers.png&gt;&gt;
%

%% Level Color
% Each level has a single color.
%
% * 0  Dark blue
% * 1  Light blue
% * 2  White
% * 3  Grey
%
% Compare this with the detail in figure 2.12 of
% &lt;https://arxiv.org/abs/2303.10798 &quot;An Aperiodic Monotile&quot;&gt;. 
%
% &lt;&lt;levelcolor.png&gt;&gt;
%

%% Convex Hull
% Convex hull is one of many other methods available for
% &lt;https://www.mathworks.com/help/matlab/ref/polyshape.html
% |polyshape objects|&gt;.
%
% &lt;&lt;convhull.png&gt;&gt;
%

##### SOURCE END ##### 8d40a9f81f874076b9a0b40b3a48ce78
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Matrices at an Exposition</title>
   <link href="https://hpc.social/2025/matrices-at-an-exposition/"/>
   <updated>2025-03-07T16:21:56-07:00</updated>
   <id>https://hpc.social/2025/matrices-at-an-exposition</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;A look at the structure, and the eigenvalues and singular values of interesting test matrices.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f44a3f1b-f808-41d4-a66f-f2cce10287dd&quot;&gt;Wilkinson&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#54f8e32a-b6c4-4bff-805c-2fcf4cc01309&quot;&gt;Parter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8d7ed044-57b1-4c74-9e0a-fa30ff9194d2&quot;&gt;Bucky&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#608e9f99-1ae9-4496-b7dc-cf082abb6f08&quot;&gt;Checkerboard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0a2419d6-28c5-4683-974d-abc97d2388dc&quot;&gt;Companion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#dfac2927-7f5b-4987-9dc3-3f8d41f6bb32&quot;&gt;Fiedler&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9de50834-140d-4fdc-b016-4882204d9272&quot;&gt;Redheffer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e7db7d8c-8230-4dfb-bab9-255dabcae02d&quot;&gt;Permutation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#99e3f6f0-feee-488c-9304-e95be2aa1486&quot;&gt;Random&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#791596eb-5f2d-415d-a61e-7c49a068db9c&quot;&gt;Software&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Wilkinson&lt;a name=&quot;f44a3f1b-f808-41d4-a66f-f2cce10287dd&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;J. H. Wilkinson&apos;s most famous examples are &lt;tt&gt;Wn+&lt;/tt&gt;, a family of symmetric, tridiagonal matrices with pairs of &quot;remarkably&quot; and &quot;pathologically&quot; close eigenvalues. The two largest eigenvalues of &lt;tt&gt;W20+&lt;/tt&gt;,&lt;/p&gt;

&lt;pre&gt;   10.246194182902979 and
   10.246194182903745,&lt;/pre&gt;
&lt;p&gt;agree to 12 decimal places.&lt;/p&gt;

&lt;p&gt;For more, see my blog post on &lt;a href=&quot;https://blogs.mathworks.com/cleve/2013/04/15/wilkinsons-matrices-2&quot;&gt;Wilkinson matrices&lt;/a&gt;. And see page 308 of Wilkinson&apos;s &lt;i&gt;The Algebraic Eigenvalue Problem&lt;/i&gt;.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    n = 20;
    m = (n-1)/2;
    D = diag(ones(n-1,1),1);
    A = diag(abs(-m:m)) + D + D&apos;;
    mat_expo(A,&apos;wilkinson&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mat_expo_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Parter&lt;a name=&quot;54f8e32a-b6c4-4bff-805c-2fcf4cc01309&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;One of my favorite test matrices is this nonsymmetric cousin of the Hilbert matrix. I was surprised when I discovered that most of its singular values are equal to &lt;tt&gt;pi&lt;/tt&gt;. Seymour Parter explained why. See &lt;a href=&quot;https://blogs.mathworks.com/cleve/2014/02/03/surprising-svd-square-waves-and-pi/&quot;&gt;Surprising SVD, Square Waves and Pi&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    j = 1:n;
    k = j&apos;;
    A = 1./(k-j+1/2);
    mat_expo(A,&apos;parter&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mat_expo_blog_02.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Bucky&lt;a name=&quot;8d7ed044-57b1-4c74-9e0a-fa30ff9194d2&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The leading 20-by-20 submatrix of the 60-by-60 Bucky Ball is symmetric, so its eigenvalues are real. But the matrix is not positive definite, so the eigenvalues do not equal the singular values. See &lt;a href=&quot;https://blogs.mathworks.com/cleve/2021/05/12/bringing-back-the-bucky-ball/&quot;&gt;Bringing Back the Bucky Ball&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    B = bucky;
    A = B(1:n,1:n);
    mat_expo(A,&apos;bucky&apos;)
    
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mat_expo_blog_03.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Checkerboard&lt;a name=&quot;608e9f99-1ae9-4496-b7dc-cf082abb6f08&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;We introduced the Checkerboard family just two weeks ago; see &lt;a href=&quot;https://blogs.mathworks.com/cleve/2025/02/23/two-flavors-of-svd&quot;&gt;Two Flavors of SVD&lt;/a&gt;. There are only two nonzero eigenvalues and singular values.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    A = checkerboard(n/4,2,2);
    mat_expo(A,&apos;checkerboard&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mat_expo_blog_04.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Companion&lt;a name=&quot;0a2419d6-28c5-4683-974d-abc97d2388dc&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Before 1965, the fact that the eigenvalues of a companion matrix are equal to the zeros of the polynomial with coefficients in the first row was often the basis of methods to compute matrix eigenvalues. But the discovery of modern QR methods allowed the first MATLAB to reverse this approach and compute polynomial zeros as matrix eigenvalues.&lt;/p&gt;

&lt;p&gt;In this example, the polynomial coefficients are 1:n+1 and the polynomial zeros lie on a nearly circular curve in the complex plane.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    c = 2:n+1;
    A = diag(ones(n-1,1),-1);
    A(1,:) = -c;
    mat_expo(A,&apos;companion&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mat_expo_blog_05.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Fiedler&lt;a name=&quot;dfac2927-7f5b-4987-9dc3-3f8d41f6bb32&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Fiedler companion matrix. Discovered by a contemporary Czech mathematician, Miroslav Fiedler, this matrix distributes the polynomial coefficients along the diagonals of an elegant pentadiagonal matrix whose eigenvalues are equal to the zeros of the polynomial. See &lt;a href=&quot;https://blogs.mathworks.com/cleve/2013/12/23/fiedler-companion-matrix&quot;&gt;Fiedler companion matrix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the same polynomial as the traditional companion matrix.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    A = fiedler(c);
    mat_expo(A,&apos;fiedler&apos;)
    
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mat_expo_blog_06.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Redheffer&lt;a name=&quot;9de50834-140d-4fdc-b016-4882204d9272&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The Redheffer matrix has been in the &lt;tt&gt;gallery&lt;/tt&gt; for a long time, but I ignored it until last September. Then I began a long series of blog posts. See &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/&quot;&gt;Redheffer and One Million Dollars&lt;/a&gt; and &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/10/22/mobius-mertens-and-redheffer&quot;&gt;M&amp;ouml;bius, Mertens and Redheffer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of the eigenvalues of the Redheffer matrix are equal to one. The product of all the eigenvalues, the determinant, is the Mertens function, which is related to the Riemann hypothesis.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    A = gallery(&apos;redheff&apos;,n);
    mat_expo(A,&apos;redheffer&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mat_expo_blog_07.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Permutation&lt;a name=&quot;e7db7d8c-8230-4dfb-bab9-255dabcae02d&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A permutation matrix has a single 1 in each row and column and 0&apos;s elsewhere. The matrix is orthogonal, so all the eigenvalues lie on the unit circle and all the singular values are equal to one.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    p = randperm(n);
    A = sparse(p,1:n,1);
    mat_expo(A,&apos;permutation&apos;)
    
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mat_expo_blog_08.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Random&lt;a name=&quot;99e3f6f0-feee-488c-9304-e95be2aa1486&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;This random matrix has about 1/3 of its elements equal to zero and the remaining elements normally distributed about zero. I have included such a matrix in this exposition to represent matrices in general that do not have particularly remarkable eigenvalues and singular values.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    A = sprandn(n,n,1/3);
    mat_expo(A,&apos;sprandn&apos;)
            
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mat_expo_blog_09.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Software&lt;a name=&quot;791596eb-5f2d-415d-a61e-7c49a068db9c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;You can &lt;tt&gt;publish&lt;/tt&gt; the source for this blog post if you also have the three functions in &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/MatExpo_mzip.m&quot;&gt;Mat_Expo_mzip&lt;/a&gt;.&lt;/p&gt;

&lt;!-- 
    function grabCode_3f61369346ec476aa19ed9e1ce542433() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;3f61369346ec476aa19ed9e1ce542433 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 3f61369346ec476aa19ed9e1ce542433&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
3f61369346ec476aa19ed9e1ce542433 ##### SOURCE BEGIN #####
%% Matrices at an Exposition
% A look at the structure, and the eigenvalues and singular values of
% interesting test matrices.
  
%% Wilkinson
% J. H. Wilkinson&apos;s most famous examples are |Wn+|, a family of symmetric, 
% tridiagonal matrices with pairs of &quot;remarkably&quot; and &quot;pathologically&quot; 
% close eigenvalues. The two largest eigenvalues of |W20+|,
%
%     10.246194182902979 and
%     10.246194182903745,
%
% agree to 12 decimal places.
%
% For more, see my blog post on 
% &lt;https://blogs.mathworks.com/cleve/2013/04/15/wilkinsons-matrices-2
% Wilkinson matrices&gt;.
% And see page 308 of Wilkinson&apos;s _The Algebraic Eigenvalue Problem_.

    n = 20;
    m = (n-1)/2;
    D = diag(ones(n-1,1),1);
    A = diag(abs(-m:m)) + D + D&apos;;
    mat_expo(A,&apos;wilkinson&apos;)

%% Parter
% One of my favorite test matrices is this nonsymmetric cousin of the
% Hilbert matrix.  I was surprised when I discovered that
% most of its singular values are equal to |pi|. 
% Seymour Parter explained why.  See
% &lt;https://blogs.mathworks.com/cleve/2014/02/03/surprising-svd-square-waves-and-pi/
% Surprising SVD, Square Waves and Pi&gt;. 

    j = 1:n;
    k = j&apos;;
    A = 1./(k-j+1/2);
    mat_expo(A,&apos;parter&apos;)

%% Bucky
% The leading 20-by-20 submatrix of the 60-by-60 Bucky Ball is symmetric,
% so its eigenvalues are real.  But the matrix is not positive definite,
% so the eigenvalues do not equal the singular values.  See
% &lt;https://blogs.mathworks.com/cleve/2021/05/12/bringing-back-the-bucky-ball/
% Bringing Back the Bucky Ball&gt;. 

    B = bucky;
    A = B(1:n,1:n);
    mat_expo(A,&apos;bucky&apos;)
    
%% Checkerboard
% We introduced the Checkerboard family just two weeks ago; see
% &lt;https://blogs.mathworks.com/cleve/2025/02/23/two-flavors-of-svd
% Two Flavors of SVD&gt;.  There are only two nonzero eigenvalues and
% singular values.

    A = checkerboard(n/4,2,2);
    mat_expo(A,&apos;checkerboard&apos;)

%% Companion
% Before 1965, the fact that the eigenvalues of a companion matrix are
% equal to the zeros of the polynomial with coefficients in the
% first row was often the basis of methods to compute matrix eigenvalues.
% But the discovery of modern QR methods allowed the first MATLAB to
% reverse this approach and compute polynomial zeros as matrix
% eigenvalues.
%
% In this example, the polynomial coefficients are 1:n+1 and the 
% polynomial zeros lie on a nearly circular curve in the complex plane.

    c = 2:n+1;
    A = diag(ones(n-1,1),-1);
    A(1,:) = -c;
    mat_expo(A,&apos;companion&apos;)

%% Fiedler
% Fiedler companion matrix.
% Discovered by a contemporary Czech mathematician, Miroslav Fiedler,
% this matrix distributes the polynomial coefficients along the
% diagonals of an elegant pentadiagonal matrix whose eigenvalues are 
% equal to the zeros of the polynomial.  See
% &lt;https://blogs.mathworks.com/cleve/2013/12/23/fiedler-companion-matrix
% Fiedler companion matrix&gt;.
%
% Here is the same polynomial as the traditional companion matrix.

    A = fiedler(c);
    mat_expo(A,&apos;fiedler&apos;)
    
%% Redheffer
% The Redheffer matrix has been in the |gallery| for a long time, but
% I ignored it until last September.  Then  I began a long series of
% blog posts.  See
% &lt;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/
% Redheffer and One Million Dollars&gt; and
% &lt;https://blogs.mathworks.com/cleve/2024/10/22/mobius-mertens-and-redheffer
% Möbius, Mertens and Redheffer&gt;.
%
% Most of the eigenvalues of the Redheffer matrix are equal to one.
% The  product of all the eigenvalues, the determinant, is the Mertens 
% function, which is related to the Riemann hypothesis.

    A = gallery(&apos;redheff&apos;,n);
    mat_expo(A,&apos;redheffer&apos;)

%% Permutation
% A permutation matrix has a single 1 in each row and column and 0&apos;s
% elsewhere.  The matrix is orthogonal, so all the eigenvalues lie on
% the unit circle and all the singular values are equal to one.

    p = randperm(n);
    A = sparse(p,1:n,1);
    mat_expo(A,&apos;permutation&apos;)
    
%% Random
% This random matrix has about 1/3 of its elements equal to zero
% and the remaining elements normally distributed about zero.
% I have included such a matrix in this exposition to represent matrices
% in general that do not have particularly remarkable eigenvalues and
% singular values.

    A = sprandn(n,n,1/3);
    mat_expo(A,&apos;sprandn&apos;)
            
%% Software
% You can |publish| the source for this blog post if you also have
% the three functions in
% &lt;https://blogs.mathworks.com/cleve/files/MatExpo_mzip.m
% Mat_Expo_mzip&gt;.
##### SOURCE END ##### 3f61369346ec476aa19ed9e1ce542433
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Two Flavors of SVD</title>
   <link href="https://hpc.social/2025/two-flavors-of-svd/"/>
   <updated>2025-02-23T21:27:51-07:00</updated>
   <id>https://hpc.social/2025/two-flavors-of-svd</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;MATLAB has two different ways to compute singular values. The easiest is to compute the singular values without the singular vectors. Use &lt;tt&gt;svd&lt;/tt&gt; with one output argument, s1.&lt;/p&gt;

&lt;pre&gt;  s1 = svd(A)&lt;/pre&gt;
&lt;p&gt;The alternative is to use &lt;tt&gt;svd&lt;/tt&gt; with three outputs. Ignore the first and third output and specify the second output to be a column vector, s2.&lt;/p&gt;

&lt;pre&gt;  [~,s2,~] = svd(A,&apos;vector&apos;)&lt;/pre&gt;
&lt;p&gt;The MathWorks technical support team receives calls from observant users who notice that the two approaches might produce different singular values. Which is more accurate, s1 or s2? Which is faster? Which should we use?&lt;/p&gt;

&lt;p&gt;I found myself asking the same questions.&lt;/p&gt;

&lt;p&gt;A key feature of all our experiments is the &lt;i&gt;rank&lt;/i&gt; of the matrix. Let&apos;s investigate three cases: a rank 2 matrix, a low rank matrix, and a full rank matrix.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#95ccb0c0-cd7a-41c9-a5b4-2fab6df73f18&quot;&gt;Checkerboard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#af38c7f7-7ab0-4c74-9327-f3253195cd70&quot;&gt;Low Rank&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c9b91229-31a6-44d1-b2a6-567d20246e0d&quot;&gt;Full Rank&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#50932af3-6dcd-4556-bfa5-6821e1a3e2a4&quot;&gt;Timing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a505363d-3df2-4fbe-9888-d7c67ce58af0&quot;&gt;Remarks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ba7766fd-745c-434c-9ac4-24950aa30394&quot;&gt;Software&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Checkerboard&lt;a name=&quot;95ccb0c0-cd7a-41c9-a5b4-2fab6df73f18&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The first example, motivated by a recent query, is an 80-by-80 matrix of zeros and ones derived from the &lt;tt&gt;checkerboard&lt;/tt&gt; function in the Image Processing Toolbox.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    A = double(checkerboard &amp;gt; 0);
&lt;/pre&gt;
&lt;p&gt;The rank of the checkerboard matrix is 2.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    r = rank(A)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;r =
     2
&lt;/pre&gt;
&lt;p&gt;The &lt;tt&gt;image&lt;/tt&gt; function provides the same portrait of A as its &lt;tt&gt;spy&lt;/tt&gt; plot.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    imagem(A)
    title(&apos;rank 2&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/checkerboard_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;Let&apos;s begin with the exact singular values. The two nonzero singular values are both equal to 40. The zero singular value has multiplicity 78.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    s = [40; 40; zeros(78,1)];
    disp(&apos;  s =&apos;)
    disp(s(1:5))
    disp(&apos;     :&apos;)
    disp(s(end-2:end))
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;  s =
    40
    40
     0
     0
     0
     :
     0
     0
     0
&lt;/pre&gt;
&lt;p&gt;A perfect plot of the singular values of a rank 2 matrix would look like this.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    plotem(s)
    title(&apos;rank 2&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/checkerboard_blog_02.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;What do we get when we actually compute the SVD of the checkerboard?&lt;/p&gt;

&lt;p&gt;The built-in SVD function uses Householder reflections to reduce the matrix to bidiagonal form. When the vectors are not required, a divide and conquer iteration then reduces the bidiagonal to diagonal. In all our examples, after divide and conquer has found the nonzero singular values, all that remains is roundoff error. Despite this fact, the iterations are continued in order to find all singular values &quot;to high relative error independent of their magnitudes.&quot; We have roundoff in roundoff, then roundoff in roundoff in roundoff, and so on.&lt;/p&gt;

&lt;p&gt;The following logarithmic plot of s1 for the checkerboard matrix shows the phenomenon that I like to call &quot;cascading roundoff&quot;. There are lines at &lt;tt&gt;norm(A)&lt;/tt&gt; and at&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    tol = eps(norm(A))
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;tol =
   7.1054e-15
&lt;/pre&gt;
&lt;p&gt;This is the tolerance initially involved in the convergence test. The steps in the plot are at powers of &lt;tt&gt;tol&lt;/tt&gt;.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    s1 = svd(A);
    plotem(s1,inf)
    title(&apos;rank 2&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/checkerboard_blog_03.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;If we specify three outputs, the iterative portion of the SVD function uses a traditional QR iteration with a more conservative convergence criterion instead of divide and conquer. There is no cascading roundoff. All the s2 singular values that would be zero with exact computation are of size &lt;tt&gt;tol&lt;/tt&gt;.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    [~,s2,~] = svd(A,&apos;vector&apos;);
    plotem(s1,s2,[-48,4])
    title(&apos;rank 2&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/checkerboard_blog_04.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;The plots of s1 and s2 are very different, and neither plot looks like the plot of the exact answer. However, all three plots agree about the double value at 40. And all the disagreements, including the cascading roundoff in s1, are below the line at &lt;tt&gt;tol&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The checkerboard example shows that s1 and s2 can be very different, but s1 and s2 are much closer to each other than either is to the right answer.&lt;/p&gt;

&lt;h4&gt;Low Rank&lt;a name=&quot;af38c7f7-7ab0-4c74-9327-f3253195cd70&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;For a matrix with rank between 2 and full order n, we can use the venerable Hilbert matrix. We have a row vector j and a column vector k in a singleton expansion.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    n = 80;
    j = 1:n;
    k = (1:n)&apos;;
    A = 1./(k+j-1);
&lt;/pre&gt;
&lt;p&gt;The effective rank turns out to be 17.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    r = rank(A)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;r =
    17
&lt;/pre&gt;
&lt;p&gt;The elements of this Hilbert matrix vary over three orders of magnitude, so a logarithmic image is appropriate.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    imagem(floor(log2(A)))
    title(&apos;low rank&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/checkerboard_blog_05.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;Compare the one-output and the three-output singular values,&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    s1 = svd(A);
    [~,s2,~] = svd(A,&apos;vector&apos;);
    plotem(s1,s2,[-22,3])
    title(&apos;low rank&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/checkerboard_blog_06.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;The results s1 and s2 agree about the first 17 values and all disagreements are below the line at &lt;tt&gt;tol&lt;/tt&gt;.&lt;/p&gt;

&lt;h4&gt;Full Rank&lt;a name=&quot;c9b91229-31a6-44d1-b2a6-567d20246e0d&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Using the same column vector k and row vector j in another example of single expansion produces a full rank matrix.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    A = min(k,j);
&lt;/pre&gt;
&lt;p&gt;Check that A has full rank.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    r = rank(A)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;r =
    80
&lt;/pre&gt;
&lt;p&gt;The logarithm is not needed for this image.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    imagem(A)
    title(&apos;full rank&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/checkerboard_blog_07.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;Compare the one-output and the three-output singular values,&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    s1 = svd(A);
    [~,s2,~] = svd(A,&apos;vector&apos;);
    plotem(s1,s2,[-2,4])
    title(&apos;full rank&apos;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/checkerboard_blog_08.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;With full rank, all values of s1 and s2 are essentially equal. Any line at &lt;tt&gt;tol&lt;/tt&gt; would be irrelevant.&lt;/p&gt;

&lt;h4&gt;Timing&lt;a name=&quot;50932af3-6dcd-4556-bfa5-6821e1a3e2a4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Which is faster, s1 or s2?&lt;/p&gt;

&lt;p&gt;One extensive timing experiment involves matrices with full rank and with orders&lt;/p&gt;

&lt;pre class=&quot;language-matlab&quot;&gt;
   n = 250:250:5000
&lt;/pre&gt;
&lt;p&gt;The times measured for computing s1 and s2 are shown by the o&apos;s in the following plot.&lt;/p&gt;

&lt;p&gt;Since the time complexity for computing SVD is O(n^3), we fit the data by cubic polynomials. For large n, the time required is dominated by the n^3 terms. The ratio of the coefficients of these dominate terms is&lt;/p&gt;

&lt;pre class=&quot;language-matlab&quot;&gt;
   ratio = 1.17
&lt;/pre&gt;
&lt;p&gt;In other words, for large problems s1 is about 17 percent faster than s2.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    timefit 
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/checkerboard_blog_09.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Remarks&lt;a name=&quot;a505363d-3df2-4fbe-9888-d7c67ce58af0&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I will admit to a personal preference for s2 over s1. I am more familiar with QR than I am with divide and conquer. As a result, I have more confidence in s2.&lt;/p&gt;

&lt;p&gt;I realize that the LAPACK divide and conquer driver DSVDD can achieve the stated goal of finding all singular values &quot;to high relative error independent of their magnitudes&quot; if the input A is bidiagonal and known exactly. But I don&apos;t see that in MATLAB with s1. I suspect that MATLAB does not make a special case for bidiagonal svd.&lt;/p&gt;

&lt;p&gt;I will be very happy to see any other examples. Please comment.&lt;/p&gt;

&lt;h4&gt;Software&lt;a name=&quot;ba7766fd-745c-434c-9ac4-24950aa30394&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;This blog post is executable. You can &lt;tt&gt;publish&lt;/tt&gt; it if you also have the three files in &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Checkerboard_mzip.m&quot;&gt;Checkerboard_mzip&lt;/a&gt;.&lt;/p&gt;

&lt;!-- 
    function grabCode_185f15c23b664f8f8895b024a48f0e70() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;185f15c23b664f8f8895b024a48f0e70 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 185f15c23b664f8f8895b024a48f0e70&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
185f15c23b664f8f8895b024a48f0e70 ##### SOURCE BEGIN #####
%% Two Flavors of SVD
% MATLAB has two different ways to compute singular values.
% The easiest is to compute the singular values without the singular
% vectors.  Use |svd| with one output argument, s1.
%
%    s1 = svd(A)
%
% The alternative is to use |svd| with three outputs.  Ignore the 
% first and third output and specify the second output to be a
% column vector, s2.
%
%    [~,s2,~] = svd(A,&apos;vector&apos;)
%
% The MathWorks technical support team receives calls from observant
% users who notice that the two approaches might produce different
% singular values.
% Which is more accurate, s1 or s2?
% Which is faster?
% Which should we use?
%
% I found myself asking the same questions.
%
% A key feature of all our experiments is the _rank_ of the matrix.
% Let&apos;s investigate three cases: a rank 2 matrix, a low rank matrix,
% and a full rank matrix.

%% Checkerboard
% The first example, motivated by a recent query,
% is an 80-by-80 matrix of zeros and ones
% derived from the |checkerboard| function in the
% Image Processing Toolbox.

    A = double(checkerboard &gt; 0);
 
%%
% The rank of the checkerboard matrix is 2.

      r = rank(A)

%%
% The |image| function provides the same portrait of A as its |spy| plot.

    imagem(A)
    title(&apos;rank 2&apos;)

%%
% Let&apos;s begin with the exact singular values.
% The two nonzero singular values are both equal to 40.
% The zero singular value has multiplicity 78.

    s = [40; 40; zeros(78,1)];
    disp(&apos;  s =&apos;)
    disp(s(1:5))
    disp(&apos;     :&apos;)
    disp(s(end-2:end))

%%
% A perfect plot of the singular values of a rank 2 matrix
% would look like this.

    plotem(s)
    title(&apos;rank 2&apos;)

%%
% What do we get when we actually compute the SVD of the checkerboard?
%
% The built-in SVD function uses Householder reflections to reduce
% the matrix to bidiagonal form.  When the vectors are not required,
% a divide and conquer iteration then reduces the bidiagonal to diagonal.
% In all our examples, after divide and conquer has found the nonzero
% singular values, all that remains is roundoff error.  Despite this
% fact, the iterations are continued in order to find all singular
% values &quot;to high relative error independent of their magnitudes.&quot;
% We have roundoff in roundoff, then roundoff in roundoff in roundoff,
% and so on. 
%
% The following logarithmic plot of s1 for the checkerboard matrix
% shows the phenomenon that I like
% to call &quot;cascading roundoff&quot;. There are lines at |norm(A)| and at

    tol = eps(norm(A))

%%
% This is the tolerance initially involved in the convergence test.
% The steps in the plot are at powers of |tol|.

    s1 = svd(A);
    plotem(s1,inf)
    title(&apos;rank 2&apos;)

%%
% If we specify three outputs, the iterative portion of the SVD function
% uses a traditional QR iteration with a more conservative convergence 
% criterion instead of divide and conquer.
% There is no cascading roundoff. All the s2 singular values
% that would be zero with exact computation are of size |tol|.

    [~,s2,~] = svd(A,&apos;vector&apos;);
    plotem(s1,s2,[-48,4])
    title(&apos;rank 2&apos;)

%%
% The plots of s1 and s2 are very different, and neither plot looks like
% the plot of the exact answer. However, all three plots agree about the
% double value at 40.  And all the disagreements, including the cascading
% roundoff in s1, are below the line at |tol|.
%
% The checkerboard example shows that s1 and s2 can be very different,
% but s1 and s2 are much closer to each other than either is to the 
% right answer.


%% Low Rank
% For a matrix with rank between 2 and full order n, we can use the
% venerable Hilbert matrix. We have a row vector j and a column vector k
% in a singleton expansion.

    n = 80;
    j = 1:n;
    k = (1:n)&apos;;
    A = 1./(k+j-1);

%%
% The effective rank turns out to be 17.

    r = rank(A)
   
%%
% The elements of this Hilbert matrix vary over three orders of
% magnitude, so a logarithmic image is appropriate.

    imagem(floor(log2(A)))
    title(&apos;low rank&apos;)

%%
% Compare the one-output and the three-output singular values,

    s1 = svd(A);
    [~,s2,~] = svd(A,&apos;vector&apos;);
    plotem(s1,s2,[-22,3])
    title(&apos;low rank&apos;)

%%
% The results s1 and s2 agree about the first 17 values and
% all disagreements are below the line 
% at |tol|.

%% Full Rank
% Using the same column vector k and row vector j in another
% example of single expansion produces a full rank matrix.

    A = min(k,j);

%%
% Check that A has full rank.

    r = rank(A)

%%
% The logarithm is not needed for this image.

    imagem(A)
    title(&apos;full rank&apos;)

%%
% Compare the one-output and the three-output singular values,

    s1 = svd(A);
    [~,s2,~] = svd(A,&apos;vector&apos;);
    plotem(s1,s2,[-2,4])
    title(&apos;full rank&apos;)

%%
% With full rank, all values of s1 and s2 are essentially equal.
% Any line at |tol| would be irrelevant.

%% Timing
% Which is faster, s1 or s2?
%
% One extensive timing experiment involves matrices with full rank
% and with orders
% 
%   n = 250:250:5000  
%
% The times measured for computing s1 and s2 are shown by the o&apos;s in
% the following plot.
%
% Since the time complexity for computing SVD is O(n^3),
% we fit the data by cubic polynomials.
% For large n, the time required is dominated by the n^3 terms.
% The ratio of the coefficients of these dominate terms is
%
%   ratio = 1.17
%
% In other words, for large problems s1 is about 17 percent faster 
% than s2.

    timefit 

%% Remarks
% I will admit to a personal preference for s2 over s1.
% I am more familiar with QR than I am with divide and conquer.
% As a result, I have more confidence in s2.
%
% I realize that the LAPACK divide and conquer driver DSVDD can achieve
% the stated goal of finding all singular values &quot;to high relative error
% independent of their magnitudes&quot; if the input A is bidiagonal and
% known exactly.  But I don&apos;t see that in MATLAB with s1.
% I suspect that MATLAB does not make a special case for bidiagonal svd.
%
% I will be very happy to see any other examples.
% Please comment.

%% Software
% This blog post is executable.  You can |publish| it
% if you also have the three files in
% &lt;https://blogs.mathworks.com/cleve/files/Checkerboard_mzip.m
% Checkerboard_mzip&gt;.
##### SOURCE END ##### 185f15c23b664f8f8895b024a48f0e70
--&gt;
</content>
 </entry>
 
 <entry>
   <title>LUTool, Animation of Gaussian Elimination</title>
   <link href="https://hpc.social/2025/lutool-animation-of-gaussian-elimination/"/>
   <updated>2025-02-09T02:45:38-07:00</updated>
   <id>https://hpc.social/2025/lutool-animation-of-gaussian-elimination</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;
&lt;tt&gt;LUTool&lt;/tt&gt; provides an interactive animation of Gaussian elimination, the most important algorithm in technical computing.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9a082e23-5f77-439b-87dc-27e094abd2ea&quot;&gt;LU Matrix Factorization&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#db10948f-e8f6-4220-9707-a33f965c2272&quot;&gt;&lt;tt&gt;LUTool&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6b4793de-6686-4da5-91ce-363fc58c068b&quot;&gt;Magic Squares&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b5f1a600-244e-4bff-823c-210673ec5273&quot;&gt;Positive Definite Matrices&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#84f5b49b-4243-477d-96d3-87c8d72c829d&quot;&gt;Redheffer Matrices&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5b2600ac-9536-457c-a935-7e35339edb57&quot;&gt;Singular Matrices&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ab040aa1-def2-4b72-b9a9-945da1a77b19&quot;&gt;Software&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;LU Matrix Factorization&lt;a name=&quot;9a082e23-5f77-439b-87dc-27e094abd2ea&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The triangular factorization of a square, n-by-n matrix &lt;tt&gt;A&lt;/tt&gt; is&lt;/p&gt;

&lt;pre&gt;  A(p,q) = L*U&lt;/pre&gt;
&lt;p&gt;where &lt;tt&gt;L&lt;/tt&gt; is a lower triangular matrix with ones on the diagonal, &lt;tt&gt;U&lt;/tt&gt; is an upper triangular matrix, and p and q are indices of row and column permutations.&lt;/p&gt;

&lt;p&gt;There are three kinds of pivoting.&lt;/p&gt;

&lt;pre&gt;* none. No interchanges.
* partial. Choose the largest element in the current pivot column.
* complete. Choose the largest element in the entire unreduced matrix.&lt;/pre&gt;
&lt;p&gt;In general, pivoting permutations are necessary for numerical stability by avoiding divisions by small pivots. However, some test matrices can be successfully factored without pivoting.&lt;/p&gt;

&lt;h4&gt;
&lt;tt&gt;LUTool&lt;/tt&gt;&lt;a name=&quot;db10948f-e8f6-4220-9707-a33f965c2272&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;tt&gt;LUTool&lt;/tt&gt; displays the lower portion of &lt;tt&gt;L&lt;/tt&gt; and the row indices &lt;tt&gt;p&lt;/tt&gt; in blue and the upper portion of &lt;tt&gt;U&lt;/tt&gt; and the column indices &lt;tt&gt;q&lt;/tt&gt; in lavender. The product of the pivot values on the diagonal of &lt;tt&gt;U&lt;/tt&gt; is the determinant of &lt;tt&gt;A&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;A popup menu lists the available test matrix families from &lt;tt&gt;gallery&lt;/tt&gt; and from the MATLAB path. &lt;tt&gt;info&lt;/tt&gt; and &lt;tt&gt;help&lt;/tt&gt; buttons display information about the selected family and about &lt;tt&gt;LUTool&lt;/tt&gt; itself.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/magic_3_static.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Magic Squares&lt;a name=&quot;6b4793de-6686-4da5-91ce-363fc58c068b&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here are the three pivoting options with the 5-by-5 magic square.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;complete&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/magic_5_complete.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;partial&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/magic_5_partial.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;none&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/magic_5_none.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Positive Definite Matrices&lt;a name=&quot;b5f1a600-244e-4bff-823c-210673ec5273&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Pascal matrices are positive definite and do not require pivoting. The same triangular factorization is computed by &lt;tt&gt;chol&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/pascal_6_none.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Redheffer Matrices&lt;a name=&quot;84f5b49b-4243-477d-96d3-87c8d72c829d&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Last fall, I made &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/&quot;&gt;a series of blog posts&lt;/a&gt; about Redheffer matrices and the Riemann hypothesis. Since the first column of a Redheffer matrix is all ones, the resulting lower triangular factor is nearly full.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/redheff_7_partial.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;Pat Quillen suggested interchanging the first and last columns, so there would be much less fill-in.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/redheff_3_7_partial.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Singular Matrices&lt;a name=&quot;5b2600ac-9536-457c-a935-7e35339edb57&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;It is widely believed that only nonsingular matrices have triangular factorizations. However, with proper pivoting, singular matrices also have LU factorizations. (The consequences of singularity or poor conditioning are realized when &lt;tt&gt;U&lt;/tt&gt; is subsequently used to solve a linear system.)&lt;/p&gt;

&lt;p&gt;For example, restart the random number generator with&lt;/p&gt;

&lt;pre&gt;  rng(1)&lt;/pre&gt;
&lt;p&gt;Then&lt;/p&gt;

&lt;pre&gt;  n = 6
  gallery(&apos;rando&apos;,n,0)&lt;/pre&gt;
&lt;p&gt;produces a singular matrix and&lt;/p&gt;

&lt;pre&gt;  [A,p,q,L,U] = LUTool(&apos;rando&apos;,n,&apos;partial&apos;,0.02)&lt;/pre&gt;
&lt;p&gt;encounters two zero pivots. Nevertheless, the output satisfies&lt;/p&gt;

&lt;pre&gt;  A(p,q) = L*U&lt;/pre&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/rando_6_partial.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;For my final example, the rank of the 8-by-8 magic square is only 3. &lt;tt&gt;LUTool&lt;/tt&gt; with partial pivoting encounters five negligible pivots. The first three columns of &lt;tt&gt;L&lt;/tt&gt; and the first three rows of &lt;tt&gt;U&lt;/tt&gt; are all that is required to reconstruct the original magic square.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/magic_8_partial.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Software&lt;a name=&quot;ab040aa1-def2-4b72-b9a9-945da1a77b19&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A self-extracting archive of &lt;tt&gt;LUTool&lt;/tt&gt; is available from &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/LUTool_mzip.m&quot;&gt;this link&lt;/a&gt;
&lt;/p&gt;

&lt;!-- 
    function grabCode_39dca6aaf7274169876a8296cc5c2505() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;39dca6aaf7274169876a8296cc5c2505 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 39dca6aaf7274169876a8296cc5c2505&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2025 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
39dca6aaf7274169876a8296cc5c2505 ##### SOURCE BEGIN #####
%% LUTool, Animation of Gaussian Elimination
% |LUTool| provides an interactive animation of Gaussian elimination,
% the most important algorithm in technical computing.

%% LU Matrix Factorization
% The triangular factorization of a square, n-by-n matrix |A| is
%
%    A(p,q) = L*U
%
% where |L| is a lower triangular matrix with ones on the diagonal,
% |U| is an upper triangular matrix, and p and q are indices of
% row and column permutations.
%
% There are three kinds of pivoting.
%
%  * none. No interchanges.
%  * partial. Choose the largest element in the current pivot column.
%  * complete. Choose the largest element in the entire unreduced matrix.
%
% In general, pivoting permutations are necessary for numerical stability
% by avoiding divisions by small pivots.  However, some test matrices
% can be successfully factored without pivoting.

%% |LUTool|
% |LUTool| displays the lower portion of |L| and the row indices |p|
% in blue and the upper portion of |U| and the column indices |q|
% in lavender.  The product of the pivot values on the diagonal of |U|
% is the determinant of |A|.
%
% A popup menu lists the available test matrix families from |gallery|
% and from the MATLAB path. |info| and |help| buttons display
% information about the selected family and about |LUTool| itself.
%
% &lt;&lt;magic_3_static.gif&gt;&gt;
%

%% Magic Squares
% Here are the three pivoting options with the 5-by-5 magic square.
%
% *complete*
% 
% &lt;&lt;magic_5_complete.gif&gt;&gt;
%
% *partial*
% 
% &lt;&lt;magic_5_partial.gif&gt;&gt;
%
% *none*
% 
% &lt;&lt;magic_5_none.gif&gt;&gt;

%% Positive Definite Matrices
% Pascal matrices are positive definite and do not require pivoting. 
% The same triangular factorization is computed by |chol|.
%
% &lt;&lt;pascal_6_none.gif&gt;&gt;
%

%% Redheffer Matrices
% Last fall, I made
% &lt;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/
% a series of blog posts&gt; about Redheffer matrices and the Riemann
% hypothesis.  Since the first column of a Redheffer matrix is all ones,
% the resulting lower triangular factor is nearly full.
%
% &lt;&lt;redheff_7_partial.gif&gt;&gt;
%
% Pat Quillen suggested interchanging the first and last columns, so
% there would be much less fill-in.
%
% &lt;&lt;redheff_3_7_partial.gif&gt;&gt;
%

%% Singular Matrices
% It is widely believed that only nonsingular matrices have triangular
% factorizations.  However, with proper pivoting, singular matrices also
% have LU factorizations.  (The consequences of singularity or poor
% conditioning are realized when |U| is subsequently used to solve
% a linear system.)
%
% For example, restart the random number generator with
% 
%    rng(1)
%
% Then
%
%    n = 6
%    gallery(&apos;rando&apos;,n,0)
%
% produces a singular matrix and
%
%    [A,p,q,L,U] = LUTool(&apos;rando&apos;,n,&apos;partial&apos;,0.02)
%
% encounters two zero pivots.  Nevertheless, the output satisfies
%
%    A(p,q) = L*U
%
% &lt;&lt;rando_6_partial.gif&gt;&gt;
%
%%
% For my final example, the rank of the 8-by-8 magic square is only 3.
% |LUTool| with partial pivoting encounters five negligible pivots.
% The first three columns of |L| and the first three rows of |U|
% are all that is required to reconstruct the original magic square.
%
% &lt;&lt;magic_8_partial.gif&gt;&gt;
%

%% Software
% A self-extracting archive of |LUTool| is available from
% &lt;https://blogs.mathworks.com/cleve/files/LUTool_mzip.m this link&gt;
##### SOURCE END ##### 39dca6aaf7274169876a8296cc5c2505
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Code for Sonic and Ten Sonic Movies</title>
   <link href="https://hpc.social/2024/code-for-sonic-and-ten-sonic-movies/"/>
   <updated>2024-12-18T15:13:08-07:00</updated>
   <id>https://hpc.social/2024/code-for-sonic-and-ten-sonic-movies</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;Two previous blog posts, &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/12/08/sonic-adds-sound-to-logo-recaman-chaos/&quot;&gt;Dec. 12, 2024&lt;/a&gt; and &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/11/16/lights-camera-action-and-sound/&quot;&gt;Nov. 16, 2024&lt;/a&gt;, introduced &quot;Sonic&quot;, my new tool for incorporating sound in videos. Today&apos;s blog post includes a link to the MATLAB source code for Sonic, as well as links to new versions of ten examples.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#430e1f71-5674-4dd0-9822-ecdf14267246&quot;&gt;Code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#261cb182-c13b-4b1e-9932-f52485ff1334&quot;&gt;Sonic&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c9a4823d-d0b6-48fd-a9f0-388f00ec93b3&quot;&gt;Ten Movies&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Code&lt;a name=&quot;430e1f71-5674-4dd0-9822-ecdf14267246&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The MATLAB code for Sonic and all the examples is available in this 11 MB &lt;tt&gt;zip&lt;/tt&gt; file.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Sonic.zip&quot;&gt;Sonic.zip&lt;/a&gt;
&lt;/p&gt;

&lt;h4&gt;Sonic&lt;a name=&quot;261cb182-c13b-4b1e-9932-f52485ff1334&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;There are two ways to generate the musical sounds. The three movies Warm-Up, TanSin and Blackjack use recordings of C-major scales played on three different pianos. All the other movies rely on &lt;a href=&quot;https://www.mathworks.com/help/signal/ref/resample.html&quot;&gt;resampling&lt;/a&gt; a single note from a trumpet, xylophone or piano.&lt;/p&gt;

&lt;p&gt;The function &lt;tt&gt;sonic_examples(kases,n)&lt;/tt&gt; is a driver for &lt;tt&gt;sonic&lt;/tt&gt;. The first parameter, &lt;tt&gt;kases&lt;/tt&gt;, is an integer vector of desired examples, 0 though 9. The second parameter, &lt;tt&gt;n&lt;/tt&gt;, is the number of desired samples.&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;n = 25 is very fast&lt;/li&gt;
&lt;li&gt;n = 100 is reasonable&lt;/li&gt;
&lt;li&gt;n = 200 is the default&lt;/li&gt;
&lt;li&gt;n = 300 is overkill&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Ten Movies&lt;a name=&quot;c9a4823d-d0b6-48fd-a9f0-388f00ec93b3&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here are links to new versions of the animated videos, and the final frames.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;0. Warm-Up&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_0.mp4&quot;&gt;sonic_examples_0.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_0.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;1. Lissajous&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_1.mp4&quot;&gt;sonic_examples_1.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_1.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;2. Mertens&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_2.mp4&quot;&gt;sonic_examples_2.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_2.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;3. TanSin&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_3.mp4&quot;&gt;sonic_examples_3.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_3.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;4. Van der Pol&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_4.mp4&quot;&gt;sonic_examples_4.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_4.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;5. VdP Derivative&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_5.mp4&quot;&gt;sonic_examples_5.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_5.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;6. Blackjack&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_6.mp4&quot;&gt;sonic_examples_6.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_6.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;7. Vibrating L-shaped Membrane&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_7.mp4&quot;&gt;sonic_examples_7.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_7.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;8. Recam&amp;aacute;n Sequence&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_8.mp4&quot;&gt;sonic_examples_8.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_8.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;b&gt;9. Swinging Sticks&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sonic_examples_9.mp4&quot;&gt;sonic_examples_9.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sonic_examples_9.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;!-- 
    function grabCode_6be05d5d2be34097bc51738847d9f5b6() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;6be05d5d2be34097bc51738847d9f5b6 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 6be05d5d2be34097bc51738847d9f5b6&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
6be05d5d2be34097bc51738847d9f5b6 ##### SOURCE BEGIN #####
%% Code for Sonic and Ten Sonic Movies
% Two previous blog posts,
% &lt;https://blogs.mathworks.com/cleve/2024/12/08/sonic-adds-sound-to-logo-recaman-chaos/
% Dec. 12, 2024&gt; and
% &lt;https://blogs.mathworks.com/cleve/2024/11/16/lights-camera-action-and-sound/
% Nov. 16, 2024&gt;,
% introduced &quot;Sonic&quot;, my new tool for incorporating sound in videos. 
% Today&apos;s blog post includes a link to the MATLAB source code for Sonic,
% as well as links to new versions of ten examples.

%% Code
% The MATLAB code for Sonic and all the examples is available in this
% 11 MB |zip| file.
%
% &lt;https://blogs.mathworks.com/cleve/files/Sonic.zip Sonic.zip&gt;
% 
%% Sonic
% There are two ways to generate the musical sounds.
% The three movies Warm-Up, TanSin and Blackjack use recordings
% of C-major scales played on three different pianos. 
% All the other movies rely on 
% &lt;https://www.mathworks.com/help/signal/ref/resample.html resampling&gt;
% a single note from a trumpet, xylophone or piano.
%
% The function |sonic_examples(kases,n)| is a driver for |sonic|.
% The first parameter, |kases|, is an integer vector of desired examples,
% 0 though 9.  The second parameter, |n|, is the number of desired samples.
%
% * n = 25 is very fast
% * n = 100 is reasonable 
% * n = 200 is the default
% * n = 300 is overkill

%% Ten Movies
% Here are links to new versions of the animated videos, and the final
% frames.
%
% *0. Warm-Up*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_0.mp4 sonic_examples_0.mp4&gt;
%
% &lt;&lt;sonic_examples_0.png&gt;&gt;
%

%%
% *1. Lissajous*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_1.mp4 sonic_examples_1.mp4&gt;
%
% &lt;&lt;sonic_examples_1.png&gt;&gt;

%%
% *2. Mertens*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_2.mp4 sonic_examples_2.mp4&gt;
%
% &lt;&lt;sonic_examples_2.png&gt;&gt;

%%
% *3. TanSin*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_3.mp4 sonic_examples_3.mp4&gt;
%
% &lt;&lt;sonic_examples_3.png&gt;&gt;

%% 
% *4. Van der Pol*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_4.mp4 sonic_examples_4.mp4&gt;
%
% &lt;&lt;sonic_examples_4.png&gt;&gt;

%% 
% *5. VdP Derivative*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_5.mp4 sonic_examples_5.mp4&gt;
%
% &lt;&lt;sonic_examples_5.png&gt;&gt;

%%
% *6. Blackjack*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_6.mp4 sonic_examples_6.mp4&gt;
%
% &lt;&lt;sonic_examples_6.png&gt;&gt;

%%
% *7. Vibrating L-shaped Membrane*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_7.mp4 sonic_examples_7.mp4&gt;
%
% &lt;&lt;sonic_examples_7.png&gt;&gt;

%%
% *8. Recamán Sequence*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_8.mp4 sonic_examples_8.mp4&gt;
%
% &lt;&lt;sonic_examples_8.png&gt;&gt;

%%
% *9. Swinging Sticks*
%
% &lt;https://blogs.mathworks.com/cleve/files/sonic_examples_9.mp4 sonic_examples_9.mp4&gt;
%
% &lt;&lt;sonic_examples_9.png&gt;&gt;
   
%%
   

##### SOURCE END ##### 6be05d5d2be34097bc51738847d9f5b6
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Sonic Adds Sound to Logo, Recamán, Chaos</title>
   <link href="https://hpc.social/2024/sonic-adds-sound-to-logo-recam%C3%A1n-chaos/"/>
   <updated>2024-12-08T11:51:55-07:00</updated>
   <id>https://hpc.social/2024/sonic-adds-sound-to-logo-recamán-chaos</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;I introduced Sonic in my &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/11/16/lights-camera-action-and-sound&quot;&gt;blog post&lt;/a&gt; last month. Today I will use Sonic to add sound to the graphics from three old posts, the vibrating L-shaped membrane, the Recam&amp;aacute;n sequence and the chaotic behavior of the Swinging Sticks.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8beb910f-b7ff-4f4a-957c-1af21319f187&quot;&gt;Vibrating L-shaped Membrane&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3e98e8b6-2291-4284-b4d0-c3b6da33bdc7&quot;&gt;Recam&amp;aacute;n&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#cf487494-235c-48ab-8849-b0e0d6a1099e&quot;&gt;Swinging Sticks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1f278f40-79e9-42e7-877e-dad57ee84e1f&quot;&gt;Triple feature&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Vibrating L-shaped Membrane&lt;a name=&quot;8beb910f-b7ff-4f4a-957c-1af21319f187&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;For almost fifty years, I have wanted to &lt;i&gt;hear&lt;/i&gt; the MathWorks logo. I have written about the L-shaped membrane many times, &lt;a href=&quot;https://www.mathworks.com/content/dam/mathworks/tag-team/Objects/t/72943_92021v00Cleve_L_Shaped_Membrane_Nov_2003.pdf&quot;&gt;link #1&lt;/a&gt;, &lt;a href=&quot;https://blogs.mathworks.com/cleve/2014/10/13/mathworks-logo-part-one-why-is-it-l-shaped/&quot;&gt;link #2&lt;/a&gt;, &lt;a href=&quot;https://blogs.mathworks.com/cleve/2014/11/17/mathworks-logo-part-four-method-of-particular-solutions-generates-the-logo/&quot;&gt;link #3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/L_membrane.mp4&quot;&gt;Click on this link&lt;/a&gt; and listen to the audio in a Sonic movie of the vibrating membrane. The sound is generated by resampling one tone from a xylophone.&lt;/p&gt;

&lt;p&gt;And here is one frame from the movie.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/L_membrane_png.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Recam&amp;aacute;n&lt;a name=&quot;3e98e8b6-2291-4284-b4d0-c3b6da33bdc7&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The inventor of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Recam%C3%A1n%27s_sequence&quot;&gt;Recam&amp;aacute;n sequence&lt;/a&gt; is a Columbian mathematician, Bernardo Recam&amp;aacute;n Santos. The sequence is &lt;a href=&quot;https://oeis.org/A005132&quot;&gt;A005132&lt;/a&gt; in the OEIS, the On-Line Encyclopedia of Integer Sequences. Here is &lt;a href=&quot;https://blogs.mathworks.com/cleve/2018/07/09/the-oeis-and-the-recaman-sequence&quot;&gt;my blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Recaman.mp4&quot;&gt;Click on this link&lt;/a&gt; and the listen to the audio in a Sonic movie of the Recam&amp;aacute;n sequence. The sound is generated by resampling the middle-C key of a piano.&lt;/p&gt;

&lt;p&gt;Here is one frame from the movie.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Recaman_png.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Swinging Sticks&lt;a name=&quot;cf487494-235c-48ab-8849-b0e0d6a1099e&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.the-swinging-sticks.com/en&quot;&gt;Swinging Sticks&lt;/a&gt; is a kinetic sculpture that exhibits chaotic behavior. I have added sound to my &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/02/20/chaotic-swinging-sticks/&quot;&gt;blog post&lt;/a&gt; about the sticks.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Sticks.mp4&quot;&gt;Here is the link&lt;/a&gt; to a Sonic movie of the Swinging Sticks. The audio is also generated by resampling one tone from a xylophone.&lt;/p&gt;

&lt;p&gt;And, here is one frame from the movie.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/sticks_png.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Triple feature&lt;a name=&quot;1f278f40-79e9-42e7-877e-dad57ee84e1f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Sonic2_all.mp4&quot;&gt;Click on this link&lt;/a&gt; to see -- and &lt;i&gt;hear&lt;/i&gt;-- all three movies.&lt;/p&gt;

&lt;!-- 
    function grabCode_91e688fef9a140df96e3d2ba28e351b3() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;91e688fef9a140df96e3d2ba28e351b3 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 91e688fef9a140df96e3d2ba28e351b3&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
91e688fef9a140df96e3d2ba28e351b3 ##### SOURCE BEGIN #####
%% Sonic Adds Sound to Logo, Recamán, Chaos
% I introduced Sonic in my
% &lt;https://blogs.mathworks.com/cleve/2024/11/16/lights-camera-action-and-sound
% blog post&gt; last month.  Today I will use Sonic to add sound to the 
% graphics from three old posts, the vibrating L-shaped membrane,
% the Recamán sequence and the chaotic behavior of the
% Swinging Sticks.
%
%% Vibrating L-shaped Membrane
% For almost fifty years, I have wanted to _hear_ the MathWorks logo.
% I have written about the L-shaped membrane many times,
% &lt;https://www.mathworks.com/content/dam/mathworks/tag-team/Objects/t/72943_92021v00Cleve_L_Shaped_Membrane_Nov_2003.pdf
% link #1&gt;,
% &lt;https://blogs.mathworks.com/cleve/2014/10/13/mathworks-logo-part-one-why-is-it-l-shaped/
% link #2&gt;,
% &lt;https://blogs.mathworks.com/cleve/2014/11/17/mathworks-logo-part-four-method-of-particular-solutions-generates-the-logo/
% link #3&gt;.
%
% &lt;https://blogs.mathworks.com/cleve/files/L_membrane.mp4
% Click on this link&gt; and
% listen to the audio in a Sonic movie of the vibrating membrane.
% The sound is generated by resampling one tone from a xylophone.
%
% And here is one frame from the movie.
%
% &lt;&lt;L_membrane_png.png&gt;&gt;
%

%% Recamán
% The inventor of the
% &lt;https://en.wikipedia.org/wiki/Recam%C3%A1n%27s_sequence
% Recamán sequence&gt; is a Columbian mathematician, Bernardo Recamán Santos.
% The sequence is &lt;https://oeis.org/A005132 A005132&gt; in the OEIS,
% the On-Line Encyclopedia of Integer Sequences.
% Here is
% &lt;https://blogs.mathworks.com/cleve/2018/07/09/the-oeis-and-the-recaman-sequence
% my blog post&gt;.
%
% &lt;https://blogs.mathworks.com/cleve/files/Recaman.mp4
% Click on this link&gt; and the 
% listen to the audio in a Sonic movie of the Recamán sequence.
% The sound  is generated by resampling
% the middle-C key of a piano.
%
% Here is one frame from the movie.
%
% &lt;&lt;Recaman_png.png&gt;&gt;
%

%% Swinging Sticks
% The &lt;https://www.the-swinging-sticks.com/en Swinging Sticks&gt;
% is a kinetic sculpture that exhibits chaotic behavior.
% I have added sound to my
% &lt;https://blogs.mathworks.com/cleve/2024/02/20/chaotic-swinging-sticks/
% blog post&gt; about the sticks.
%
% &lt;https://blogs.mathworks.com/cleve/files/Sticks.mp4
% Here is the link&gt; to a Sonic movie of the Swinging Sticks.
% The audio is also generated by resampling
% one tone from a xylophone.
%
%
% And, here is one frame from the movie.
%
% &lt;&lt;sticks_png.png&gt;&gt;

%% Triple feature
% &lt;https://blogs.mathworks.com/cleve/files/Sonic2_all.mp4
% Click on this link&gt; to see REPLACE_WITH_DASH_DASH and _hear_REPLACE_WITH_DASH_DASH
% all three movies. 

##### SOURCE END ##### 91e688fef9a140df96e3d2ba28e351b3
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Lights, Camera, Action — and Sound</title>
   <link href="https://hpc.social/2024/lights-camera-action-and-sound/"/>
   <updated>2024-11-16T06:03:58-07:00</updated>
   <id>https://hpc.social/2024/lights-camera-action-and-sound</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;I am very excited to incorporate sound in animations. This blog post has five examples with links to videos enclosed in &lt;tt&gt;&apos;+ + + +&apos;&lt;/tt&gt;.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#beb66eab-d057-4b35-b679-ceb8341bac55&quot;&gt;Mertens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#acc96bc1-84ad-4503-af62-3207c0cddc9d&quot;&gt;Lissajous&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c8bcb2e7-342f-4b58-a7ba-b3d7f7034476&quot;&gt;tansin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7e32cd92-b6a9-46ec-aa1c-980089ff6833&quot;&gt;Van der Pol&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e791b241-63f8-4987-a4d3-4451b5b8f39d&quot;&gt;Blackjack&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Mertens&lt;a name=&quot;beb66eab-d057-4b35-b679-ceb8341bac55&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I began making animations with sound while investigating the &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/&quot;&gt;Mertens Conjecture&lt;/a&gt;. The &lt;a href=&quot;https://oeis.org/A002321&quot;&gt;OEIS&lt;/a&gt; page offers an opportunity to listen to the Mertens sequence, but I wanted more control.&lt;/p&gt;

&lt;p&gt;The &lt;tt&gt;resample&lt;/tt&gt; function is the Signal Processing Toolbox resamples a signal at a fraction, &lt;tt&gt;p/q&lt;/tt&gt;, times the original sample rate. The sound in this Mertens example is generated from a recording of piano playing middle C that is resampled to simulate the other notes.&lt;/p&gt;

&lt;p&gt;Here is a link to a 40-second video of &lt;tt&gt;M(n)&lt;/tt&gt; and &lt;tt&gt;sqrt(n)&lt;/tt&gt; for &lt;tt&gt;n = 200&lt;/tt&gt;. (Homework: How long would the video last if &lt;tt&gt;n = 10^8&lt;/tt&gt;? Post your answers in the comments.)&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/mertens.mp4&quot;&gt;https://blogs.mathworks.com/cleve/files/mertens.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;Here is a static graphic, the last frame of the video.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mertens.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Lissajous&lt;a name=&quot;acc96bc1-84ad-4503-af62-3207c0cddc9d&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;You may well have seen &lt;a href=&quot;https://en.wikipedia.org/wiki/Lissajous_curve&quot;&gt;Lissajous curves&lt;/a&gt; before, but have you ever &lt;i&gt;listened&lt;/i&gt; to them? They were first studied extensively by &lt;a href=&quot;https://en.wikipedia.org/wiki/Jules_Antoine_Lissajous&quot;&gt;Jules Lissajous&lt;/a&gt;, a nineteenth-century French physicist. There are many Lissajous curves similar to the following, where the trajectory in the &lt;tt&gt;x-y&lt;/tt&gt; plane is described by two functions of a parameter &lt;tt&gt;t&lt;/tt&gt;.&lt;/p&gt;

&lt;pre class=&quot;language-matlab&quot;&gt;
n = 200;
t = 3*pi*(-1:2/n:1);
x = 5*cos(t)+3*cos(5/3*t);
y = 5*sin(t)-sin(5/3*t);
&lt;/pre&gt;
&lt;p&gt;This 40-second video employs sound produced by resampling a note from a xylophone.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/lissajous.mp4&quot;&gt;https://blogs.mathworks.com/cleve/files/lissajous.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;Here is the last frame.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/lissajous.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;tansin&lt;a name=&quot;c8bcb2e7-342f-4b58-a7ba-b3d7f7034476&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I have used variations of &lt;a href=&quot;https://blogs.mathworks.com/cleve/2012/09/24/supremum&quot;&gt;this function&lt;/a&gt; many times.&lt;/p&gt;

&lt;pre&gt;F = @(x) tan(sin(x))+sin(tan(x));&lt;/pre&gt;
&lt;p&gt;When &lt;tt&gt;x&lt;/tt&gt; approaches an integer multiple of &lt;tt&gt;pi&lt;/tt&gt;, both &lt;tt&gt;sin(x)&lt;/tt&gt; and &lt;tt&gt;tan(x)&lt;/tt&gt; approach zero, so &lt;tt&gt;F(x)&lt;/tt&gt; also approaches zero. But when &lt;tt&gt;x&lt;/tt&gt; approaches an odd multiple of &lt;tt&gt;pi/2&lt;/tt&gt;, &lt;tt&gt;tan(x)&lt;/tt&gt; becomes infinite, so both &lt;tt&gt;sin(tan(x))&lt;/tt&gt; and &lt;tt&gt;F(x)&lt;/tt&gt; oscillate infinitely often.&lt;/p&gt;

&lt;p&gt;Here is a link to a 45-second video of &lt;tt&gt;F(x)&lt;/tt&gt; for &lt;tt&gt;n = 200&lt;/tt&gt; evenly spaced values of &lt;tt&gt;x&lt;/tt&gt; between &lt;tt&gt;-2pi&lt;/tt&gt; and &lt;tt&gt;2pi&lt;/tt&gt;. If we increase &lt;tt&gt;n&lt;/tt&gt;, we would see more of the oscillations at the singularities. The sound comes from resampling a single note played by a trumpet.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/tansin.mp4&quot;&gt;https://blogs.mathworks.com/cleve/files/tansin.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/tansin.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Van der Pol&lt;a name=&quot;7e32cd92-b6a9-46ec-aa1c-980089ff6833&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Quoting &lt;a href=&quot;https://en.wikipedia.org/wiki/Van_der_Pol_oscillator&quot;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;  In the study of dynamical systems, the van der Pol oscillator
  (named for Dutch physicist Balthasar van der Pol) is a
  non-conservative, oscillating system with non-linear damping.&lt;/pre&gt;
&lt;p&gt;In this video, we see -- and hear -- the numerical solution, computed by &lt;tt&gt;ode45&lt;/tt&gt;, of the Van der Pol equation at &lt;tt&gt;n&lt;/tt&gt; points between &lt;tt&gt;t = 0&lt;/tt&gt; and &lt;tt&gt;t = 20&lt;/tt&gt;. The damping parameter is &lt;tt&gt;mu = 2&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The sound comes from a recording of a student practicing a piano. In this case we have scales spanning four octaves, so no resampling is required.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/vanderpol.mp4&quot;&gt;https://blogs.mathworks.com/cleve/files/vanderpol.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/vanderpol.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Blackjack&lt;a name=&quot;e791b241-63f8-4987-a4d3-4451b5b8f39d&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The card game Blackjack is another example that I use frequently; see &lt;a href=&quot;https://www.mathworks.com/company/technical-articles/simulating-blackjack-with-matlab.html&quot;&gt;&quot;Simulating Blackjack&quot;&lt;/a&gt; and &lt;a href=&quot;https://www.mathworks.com/matlabcentral/fileexchange/4404-blackjack&quot;&gt;MATLAB file exchange&lt;/a&gt;. The video shows a simulation of a few hundred hands, starting each hand with a $10 bet. The sound comes from a piano playing a C-major scale. Again, resampling is not necessary.&lt;/p&gt;

&lt;p&gt;The emerging histograms in the video, and the static outcome in the final frame, show the percentages observed for each of ten possible outcomes. The histograms can be compared with those in the &lt;a href=&quot;https://www.mathworks.com/company/technical-articles/simulating-blackjack-with-matlab.html&quot;&gt;&quot;Simulating Blackjack&quot;&lt;/a&gt; article that describes the use of the Parallel Computing Toolbox to play 10,000 hands with these results.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;bjpercent
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;    &quot;   Push, player and dealer have equal totals not exceeding 21             &quot;
    &quot;   Win, player&apos;s total is greater than dealer&apos;s and does not exceed 21    &quot;
    &quot;   Lose, dealer&apos;s total is greater than player&apos;s and does not exceed 21   &quot;
    &quot;   Blackjack, player has 21 with two cards, dealer does not               &quot;
    &quot;                                                                          &quot;
    &quot;   $-40     0.03     Split and double, lose both                          &quot;
    &quot;   $-30     0.17     Split and double, lose one                           &quot;
    &quot;   $-20     4.71     Split or double, lose                                &quot;
    &quot;   $-10    42.94     Lose                                                 &quot;
    &quot;   $  0     9.06     Push                                                 &quot;
    &quot;   $+10    32.13     Win                                                  &quot;
    &quot;   $+15     4.44     Blackjack                                            &quot;
    &quot;   $+20     6.19     Split or double, win                                 &quot;
    &quot;   $+30     0.28     Split and double, win one                            &quot;
    &quot;   $+40     0.06     Split and double, win both                           &quot;
&lt;/pre&gt;
&lt;p&gt;(Homework. This simulation happens to have three hands with the very rare swings of more than $20. Find the hand numbers where such rare events occur. Post your answers in the comments. Hint: watch the emerging histograms.)&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/blackjack.mp4&quot;&gt;https://blogs.mathworks.com/cleve/files/blackjack.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;+ + + + + + + + + + + + + + + + + + + + + + + + + + + +&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/blackjack.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/bj100K.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;!-- 
    function grabCode_ef605386b1c14b589860f69f1d2032a2() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;ef605386b1c14b589860f69f1d2032a2 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; ef605386b1c14b589860f69f1d2032a2&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024b&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
ef605386b1c14b589860f69f1d2032a2 ##### SOURCE BEGIN #####
%% Lights, Camera, Action REPLACE_WITH_DASH_DASH and Sound
% I am very excited to incorporate sound in animations.
% This blog post has five examples with
% links to videos enclosed in |&apos;+ + + +&apos;|.

%% Mertens
% I began making animations with sound while investigating the
% &lt;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/
% Mertens Conjecture&gt;.
% The &lt;https://oeis.org/A002321 OEIS&gt; page 
% offers an opportunity to listen to the Mertens sequence, but
% I wanted more control.
%
% The |resample| function is the Signal Processing Toolbox
% resamples a signal at a fraction, |p/q|, times the original sample rate.
% The sound in this Mertens example is generated from a recording of piano
% playing middle C that is resampled to simulate the other notes.
%
% Here is a link to a 40-second video of |M(n)| and |sqrt(n)|
% for |n = 200|. 
% (Homework: How long would the video last if |n = 10^8|?
% Post your answers in the comments.)
%
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% &lt;https://blogs.mathworks.com/cleve/files/mertens.mp4&gt;
%
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% Here is a static graphic, the last frame of the video.
%
% &lt;&lt;mertens.png&gt;&gt;
%

%% Lissajous
% You may well have seen &lt;https://en.wikipedia.org/wiki/Lissajous_curve 
% Lissajous curves&gt; before, but have you ever
% _listened_ to them?
% They were first studied extensively by 
% &lt;https://en.wikipedia.org/wiki/Jules_Antoine_Lissajous Jules Lissajous&gt;,
% a nineteenth-century French physicist.
% There are many Lissajous curves similar to the following, where 
% the trajectory in the |x-y| plane is described by two functions of 
% a parameter |t|.
%
%   n = 200;
%   t = 3*pi*(-1:2/n:1);
%   x = 5*cos(t) + 3*cos(5/3*t);
%   y = 5*sin(t) - sin(5/3*t);
%
% This 40-second video employs sound produced by resampling a note
% from a xylophone.
%
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% &lt;https://blogs.mathworks.com/cleve/files/lissajous.mp4&gt;
%
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% Here is the last frame.
%
% &lt;&lt;lissajous.png&gt;&gt;
%

%% tansin
% I have used variations of
% &lt;https://blogs.mathworks.com/cleve/2012/09/24/supremum this function&gt;
% many times.
%
%  F = @(x) tan(sin(x))+sin(tan(x));
%
% When |x| approaches an integer multiple of |pi|, both |sin(x)| and |tan(x)|
% approach zero, so |F(x)| also approaches zero.  But when |x| approaches
% an odd multiple of |pi/2|, |tan(x)| becomes infinite, so both |sin(tan(x))| 
% and |F(x)| oscillate infinitely often.
% 
% Here is a link to a 45-second video
% of |F(x)| for |n = 200| evenly spaced values of |x| between |-2pi| and
% |2pi|.
% If we increase |n|, we would see more of the oscillations at the 
% singularities.  The sound comes from resampling a single note
% played by a trumpet.
%
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% &lt;https://blogs.mathworks.com/cleve/files/tansin.mp4&gt;
%
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% &lt;&lt;tansin.png&gt;&gt;
%

%% Van der Pol
% Quoting 
% &lt;https://en.wikipedia.org/wiki/Van_der_Pol_oscillator Wikipedia&gt;.
%
%    In the study of dynamical systems, the van der Pol oscillator
%    (named for Dutch physicist Balthasar van der Pol) is a 
%    non-conservative, oscillating system with non-linear damping.
% 
% In this video, we see REPLACE_WITH_DASH_DASH and hear REPLACE_WITH_DASH_DASH the numerical solution, computed
% by |ode45|, of the Van der Pol equation at |n| points between
% |t = 0| and |t = 20|.  The damping parameter is |mu = 2|.
%
% The sound comes from a recording of a student practicing a piano.
% In this case we have scales spanning four octaves, so no resampling
% is required.
%    
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% &lt;https://blogs.mathworks.com/cleve/files/vanderpol.mp4&gt;
%
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% &lt;&lt;vanderpol.png&gt;&gt;
%

%% Blackjack
% The card game Blackjack is another example that I use frequently; see 
% &lt;https://www.mathworks.com/company/technical-articles/simulating-blackjack-with-matlab.html
% &quot;Simulating Blackjack&quot;&gt; and
% &lt;https://www.mathworks.com/matlabcentral/fileexchange/4404-blackjack
% MATLAB file exchange&gt;.
% The video shows a simulation of a few hundred hands,
% starting each hand with a $10 bet.
% The sound comes from a piano playing a C-major scale.
% Again, resampling is not necessary.
%
% The emerging histograms in the video, and the static outcome in
% the final frame, show the percentages observed for each
% of ten possible outcomes.
% The histograms can be compared with those in the
% &lt;https://www.mathworks.com/company/technical-articles/simulating-blackjack-with-matlab.html
% &quot;Simulating Blackjack&quot;&gt;
% article that describes the use of the  Parallel Computing Toolbox
% to play 10,000 hands with these results.

   bjpercent
%%
% (Homework.  This simulation happens to have three hands  with
% the very rare swings of more than $20.  Find the hand numbers
% where such rare events occur.  Post your answers in the comments.
% Hint: watch the emerging histograms.)

%%
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% &lt;https://blogs.mathworks.com/cleve/files/blackjack.mp4&gt;
%
% *+ + + + + + + + + + + + + + + + + + + + + + + + + + + +* 
%
% &lt;&lt;blackjack.png&gt;&gt;
%
% &lt;&lt;bj100K.png&gt;&gt;
%
##### SOURCE END ##### ef605386b1c14b589860f69f1d2032a2
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Möbius, Mertens and Redheffer</title>
   <link href="https://hpc.social/2024/m%C3%B6bius-mertens-and-redheffer/"/>
   <updated>2024-10-23T00:53:53-06:00</updated>
   <id>https://hpc.social/2024/möbius-mertens-and-redheffer</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;Recently, I have made &lt;a href=&quot;https://blogs.mathworks.com/cleve/&quot;&gt;a series of blog posts&lt;/a&gt; about Redheffer matrices and the Mertens conjecture. After each of the posts, readers and colleagues offered suggestions to speed up the calculations. Here is a summary of what I have learned.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#32215cb4-c6e7-4c82-a09c-be2a0e403218&quot;&gt;M&amp;ouml;bius Function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2421ff74-677d-4dda-9728-8ad0f481f610&quot;&gt;Mertens Function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#fbbf8ec1-839c-4bd7-9416-f48ae24df402&quot;&gt;Redheffer Matrices&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2c3c2db6-e1d2-41c4-8a2b-d1efbabe86e7&quot;&gt;OEIS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a6e6f284-1b69-42f0-a04f-f9e20891cdbc&quot;&gt;Ten Million&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#888c9931-3060-4b47-8405-ed484be2f796&quot;&gt;Mertens Conjecture&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#21f44074-f0af-4aa2-b6a3-adb1a2756ea2&quot;&gt;Conjecture is False&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e485344f-bda2-4d4d-9fd0-e7102df79117&quot;&gt;Matrices&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5ffa1b4e-3fe8-4908-a32c-b41a2d162cd6&quot;&gt;Sparsity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#39aa4540-d55c-47d1-882b-33b04368d495&quot;&gt;Computing Mertens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#25c55aa9-7b26-4eb8-ae66-fbfbefea38b1&quot;&gt;#1&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4c32719f-3698-4320-a518-3b9d554916f9&quot;&gt;#2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1d535f36-08d5-4044-87d1-b3aa7094574a&quot;&gt;#3&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4b32160d-f00c-46f0-861a-4fe8cf231394&quot;&gt;#4&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e624ea53-1063-4c25-a75f-c186f877d82c&quot;&gt;#5&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#75297d30-41f2-45ca-ad62-8e710261ee95&quot;&gt;Performance&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;M&amp;ouml;bius Function&lt;a name=&quot;32215cb4-c6e7-4c82-a09c-be2a0e403218&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Mobius.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;The function named after the mid-nineteenth century German mathematician &lt;a href=&quot;https://en.wikipedia.org/wiki/August_Ferdinand_M%C3%B6bius&quot;&gt;August M&amp;ouml;bius&lt;/a&gt; is fundamental to the study of prime numbers. The M&amp;ouml;bius function maps the positive integers onto -1,0 and +1.&lt;/p&gt;

&lt;pre&gt;  mu(n) = 0 if n has a repeated prime factor,
        = (-1)^(number prime factors) if the factors of n are not repeated&lt;/pre&gt;
&lt;p&gt;Here is my code for the M&amp;ouml;bius function. It relies on &lt;tt&gt;factor(n)&lt;/tt&gt; which uses a sieve to find the prime factors of &lt;tt&gt;n&lt;/tt&gt;.&lt;/p&gt;

&lt;pre&gt;  function mu = mobius(n)
     % mu = mobius(n) returns mu(1:n).
     mu = -eye(1,n);
     for k = 2:n
         f = factor(k);
         d = diff([1 f]);
         if any(d == 0)
             mu(k) = 0;
         else
             mu(k) = (-1)^length(f);
         end
     end
  end&lt;/pre&gt;
&lt;p&gt;Here is a graph of &lt;tt&gt;mu(n)&lt;/tt&gt; for &lt;tt&gt;n&lt;/tt&gt; = 1:40. For example, &lt;tt&gt;mu(29:31)&lt;/tt&gt; are all -1 because 29 and 31 are both prime and 30 has an odd number of prime factors, 2, 3 and 5.&lt;/p&gt;

&lt;pre class=&quot;language-matlab&quot;&gt;
    mu = moebius(40);
    plot(1:40,mu,&lt;span class=&quot;string&quot;&gt;&apos;.-&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;linewidth&apos;&lt;/span&gt;,1.5,&lt;span class=&quot;string&quot;&gt;&apos;markersize&apos;&lt;/span&gt;,16)
    axis([-242-1.51.5])
    title(&lt;span class=&quot;string&quot;&gt;&apos;M&amp;ouml;bius function&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Mertens_finale_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Mertens Function&lt;a name=&quot;2421ff74-677d-4dda-9728-8ad0f481f610&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Mertens.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;The Mertens function is named after the late-nineteenth century Polish mathematician &lt;a href=&quot;https://en.wikipedia.org/wiki/Franz_Mertens&quot;&gt;Franz Mertens&lt;/a&gt;. The function, which we denote by &lt;tt&gt;M(n)&lt;/tt&gt;, is simply the partial sums of the M&amp;ouml;bius function. The MATLAB code is very short.&lt;/p&gt;

&lt;pre&gt;  function M = mertens(n)
     % M = mertens(n) returns Mertens(1:n).
     mu = moebius(n);
     M = cumsum([1 mu(2:n)]);
  end&lt;/pre&gt;
&lt;p&gt;Here is a graph of &lt;tt&gt;M(n)&lt;/tt&gt; for &lt;tt&gt;n&lt;/tt&gt; = 1:40.&lt;/p&gt;

&lt;pre class=&quot;language-matlab&quot;&gt;
    M = mertens(40);
    plot(1:40,M,&lt;span class=&quot;string&quot;&gt;&apos;.-&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;linewidth&apos;&lt;/span&gt;,1.5,&lt;span class=&quot;string&quot;&gt;&apos;markersize&apos;&lt;/span&gt;,16)
    axis([-242-4.51.5])
    title(&lt;span class=&quot;string&quot;&gt;&apos;Mertens function&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Mertens_finale_blog_02.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Redheffer Matrices&lt;a name=&quot;fbbf8ec1-839c-4bd7-9416-f48ae24df402&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Redheffer.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;The twentieth-century American mathematician &lt;a href=&quot;https://en.wikipedia.org/wiki/Raymond_Redheffer&quot;&gt;Ray Redheffer&lt;/a&gt;, who was a professor at UCLA for 55 years, had a wide range of interests. He was the author of several popular textbooks, the inventor of the electronic game &lt;a href=&quot;https://en.wikipedia.org/wiki/Nim&quot;&gt;Nim&lt;/a&gt; and, with Ray and Charles Eames, the creator of a four-meter long poster &lt;a href=&quot;https://www.worthpoint.com/worthopedia/1966-ray-charles-eames-office-men-1724813663&quot;&gt;Men of Modern Mathematics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The n-by-n Redheffer&apos;s matrix &lt;tt&gt;R(n)&lt;/tt&gt; is a matrix of zeros and ones. For &lt;tt&gt;j &amp;gt; 1&lt;/tt&gt;, the element &lt;tt&gt;R(k,j)&lt;/tt&gt; equals one if &lt;tt&gt;j&lt;/tt&gt; is a divisor of &lt;tt&gt;k&lt;/tt&gt;. And importantly, for &lt;tt&gt;j = 1&lt;/tt&gt;, the first column &lt;tt&gt;R(:,1)&lt;/tt&gt; is all ones.&lt;/p&gt;

&lt;pre&gt;  function R = redheffer(n)
     k = 1:n;
     j = k&apos;;
     R = (mod(k,j) == 0);
     R(:,1) = 1;
  end&lt;/pre&gt;
&lt;p&gt;Nick Higham put Redheffer&apos;s matrix in the &lt;a href=&quot;https://blogs.mathworks.com/cleve/2019/06/24/bohemian-matrices-in-the-matlab-gallery/&quot;&gt;MATLAB Gallery&lt;/a&gt; several years ago. Here is a spy plot of the 200-by-200.&lt;/p&gt;

&lt;pre class=&quot;language-matlab&quot;&gt;
    R = gallery(&lt;span class=&quot;string&quot;&gt;&apos;redheff&apos;&lt;/span&gt;,200);
    spy(R)
    title(&lt;span class=&quot;string&quot;&gt;&apos;Redheffer&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Mertens_finale_blog_03.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;OEIS&lt;a name=&quot;2c3c2db6-e1d2-41c4-8a2b-d1efbabe86e7&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;In the Online Encyclopedia of Integer Sequences, the Mertens function is &lt;a href=&quot;http://oeis.org/A002321&quot;&gt;OEIS/A002321&lt;/a&gt;. One of the many cool features of the OEIS is &quot;listen&quot;, which generates music driven by the sequences. Take a look -- and a listen -- to my 63 second movie about A002321.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/mertens_plot.mp4&quot;&gt;https://blogs.mathworks.com/cleve/files/mertens_plot.mp4&lt;/a&gt;
&lt;/p&gt;

&lt;h4&gt;Ten Million&lt;a name=&quot;a6e6f284-1b69-42f0-a04f-f9e20891cdbc&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here are plots of &lt;tt&gt;M(1:n)&lt;/tt&gt; with &lt;tt&gt;n&lt;/tt&gt; ranging from 100 to 10 million. Each plot after the first also shows the range of the previous plot. I will discuss the red lines in the next section&lt;/p&gt;

&lt;pre class=&quot;language-matlab&quot;&gt;
    load&lt;span class=&quot;string&quot;&gt; mertens&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; M&lt;/span&gt;
    tiledlayout(2,3)
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n = 10.^(2:7)
        nexttile
        mertens_plot(M(1:n))
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Mertens_finale_blog_04.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Mertens Conjecture&lt;a name=&quot;888c9931-3060-4b47-8405-ed484be2f796&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The red lines above are plots of &lt;tt&gt;&amp;plusmn;sqrt(n)&lt;/tt&gt;. They clearly bound &lt;tt&gt;M(n)&lt;/tt&gt; for &lt;tt&gt;n&lt;/tt&gt; up to 10 million. The Mertens Conjecture is that this holds for all &lt;tt&gt;n&lt;/tt&gt;.&lt;/p&gt;

&lt;pre&gt;  |M(n)| &amp;lt; sqrt(n) for all n &amp;gt; 0&lt;/pre&gt;
&lt;p&gt;The conjecture appears in a 1885 letter from Thomas Stieltjes to Charles Hermite and in a 1897 paper by Mertens.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Mertens_conjecture&quot;&gt;Wikipedia&lt;/a&gt; says&lt;/p&gt;

&lt;pre&gt;  It is a striking example of a mathematical conjecture proven false
  despite a large amount of computational evidence in its favor.&lt;/pre&gt;
&lt;h4&gt;Conjecture is False&lt;a name=&quot;21f44074-f0af-4aa2-b6a3-adb1a2756ea2&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;In 1985, 100 years after the Stieltjes letter, Andrew Odlyzko and Herman te Riele proved that the conjecture is false. Their proof is indirect. They prove the existence of infinitely many &lt;tt&gt;n&lt;/tt&gt; for which&lt;/p&gt;

&lt;pre&gt;  |M(n)|/sqrt(n) &amp;gt; 1.06&lt;/pre&gt;
&lt;p&gt;But they do not know the value of any particular &lt;tt&gt;n&lt;/tt&gt;. They informally estimate that such an &lt;tt&gt;n&lt;/tt&gt; would be greater than 10^30 and probably much larger.&lt;/p&gt;

&lt;h4&gt;Matrices&lt;a name=&quot;e485344f-bda2-4d4d-9fd0-e7102df79117&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Let&apos;s get back to the world of matrices. It is not obvious, but is true, that the determinants of Redheffer matrices are equal to the Mertens function.&lt;/p&gt;

&lt;pre&gt;  det(R(n)) = M(n)&lt;/pre&gt;
&lt;p&gt;So, if I could have proved that&lt;/p&gt;

&lt;pre&gt;  |det(R(n))| &amp;lt; sqrt(n) for all n &amp;gt; 0&lt;/pre&gt;
&lt;p&gt;I would have had a proof of the Riemann Hypothesis.&lt;/p&gt;

&lt;p&gt;It might appear that I am out of the clutches of number theory and safely back to matrix computation. But that illusion does not last for long.&lt;/p&gt;

&lt;h4&gt;Sparsity&lt;a name=&quot;5ffa1b4e-3fe8-4908-a32c-b41a2d162cd6&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;0(n^3)&lt;/tt&gt; memory required by the Redheffer matrix from the gallery runs out of steam quickly. We need to take advantage of sparsity. This function generates the sparse representation of a Redheffer matrix directly.&lt;/p&gt;

&lt;pre&gt;  function R = spredheffer(n)
      j = (1:n)&apos;;
      k = ones(n,1);
      m = n;
      for i = 2:n
          t = [1 i:i:n];
          p = length(t);
          j(m+(1:p)) = t;
          k(m+(1:p)) = i;
          m = m+p;
      end
      R = sparse(k,j,1,n,n);
  end&lt;/pre&gt;
&lt;h4&gt;Computing Mertens&lt;a name=&quot;39aa4540-d55c-47d1-882b-33b04368d495&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here are five methods for computing the Mertens function.&lt;/p&gt;

&lt;h4&gt;#1&lt;a name=&quot;25c55aa9-7b26-4eb8-ae66-fbfbefea38b1&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The first simply takes the determinant of the Redheffer matrix in the &lt;tt&gt;gallery&lt;/tt&gt;.&lt;/p&gt;

&lt;pre&gt;  M = det(gallery(&apos;redheff&apos;,n))&lt;/pre&gt;
&lt;h4&gt;#2&lt;a name=&quot;4c32719f-3698-4320-a518-3b9d554916f9&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The sparse Gaussian elimination function &lt;tt&gt;lu&lt;/tt&gt; with one input and four sparse outputs is designed for solving sparse linear systems. Written primarily by Tim Davis and included in his UMFPACK package, the function uses an unsymmetric pattern multifrontal pivoting strategy to reduce fill-in while maintaining numerical stability. The determinant of the input matrix is the product of the four determinants of the output matrices. Two them are triangular and two are permutations, so it is easy, and quick, to compute their determinants.&lt;/p&gt;

&lt;pre&gt;  R = spredheffer(n);
  [L,U,P,Q] = lu(R)
  M = det(L)*det(U)*det(P)*det(Q);&lt;/pre&gt;
&lt;h4&gt;#3&lt;a name=&quot;1d535f36-08d5-4044-87d1-b3aa7094574a&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Pat Quillen realized that by interchanging the first and last columns, there would be little fill-in. We need only one determinant.&lt;/p&gt;

&lt;pre&gt;  R = spredheffer(n);
  R(:,[1 n]) = R(:,[n 1]);
  M = -det(R);&lt;/pre&gt;
&lt;h4&gt;#4&lt;a name=&quot;4b32160d-f00c-46f0-861a-4fe8cf231394&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A thoughtful reader of the blog submitted a suggestion based on the Schur complement. Suppose &lt;tt&gt;E&lt;/tt&gt; is a block matrix,&lt;/p&gt;

&lt;pre&gt;  E = [A B
       C D]&lt;/pre&gt;
&lt;p&gt;Schur&apos;s formula for the determinant of &lt;tt&gt;E&lt;/tt&gt; is&lt;/p&gt;

&lt;pre&gt;  det(E) = det(D)*det(A - B*(D\C))&lt;/pre&gt;
&lt;p&gt;Apply this to &lt;tt&gt;R(n)&lt;/tt&gt; with &lt;tt&gt;A&lt;/tt&gt; the (1,1) entry, which is 1, and &lt;tt&gt;D&lt;/tt&gt; the lower (n-1)-by-(n-1) submatrix, which is upper triangular with ones on the diagonal and determinant equal 1. This leads to method #4 which uses backslash with a sparse, unit, upper triangular matrix. There is a Redheffer matrix, but no determinant.&lt;/p&gt;

&lt;pre&gt;  S = spredheffer(n);
  e = ones(n-1,1);
  M = 1 - e&apos;*(S(2:n,2:n)\e);&lt;/pre&gt;
&lt;h4&gt;#5&lt;a name=&quot;e624ea53-1063-4c25-a75f-c186f877d82c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Once we have generated &lt;tt&gt;R(n)&lt;/tt&gt; and computed &lt;tt&gt;M(n)&lt;/tt&gt;, how do we get &lt;tt&gt;R(n+1)&lt;/tt&gt; and &lt;tt&gt;M(n+1)&lt;/tt&gt;? After several iterations of this approach, I found myself without any matrices and only the original definitions of M&amp;ouml;bius and Mertens.&lt;/p&gt;

&lt;pre&gt;  mu = mobius(n);
  M = cumsum([1 mu(2:n)]);&lt;/pre&gt;
&lt;h4&gt;Performance&lt;a name=&quot;75297d30-41f2-45ca-ad62-8e710261ee95&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Let&apos;s summarize the five methods. The first four generate a single, isolated value of &lt;tt&gt;M(n)&lt;/tt&gt;. Method #5 generates &lt;tt&gt;M(n)&lt;/tt&gt; for all &lt;tt&gt;n&lt;/tt&gt; from 1 to any specified maximum.&lt;/p&gt;

&lt;pre&gt;        matrix     function    dets    M&lt;/pre&gt;
&lt;pre&gt;  #1    full       gallery       1     1
  #2    sparse     lu            4     1
  #3    sparse     swap          1     1
  #4    sparse     \             0     1
  #5    none       factor        0    many&lt;/pre&gt;
&lt;p&gt;Time in seconds to compute &lt;tt&gt;M(n)&lt;/tt&gt; on my Lenovo T14 laptop running Windows.&lt;/p&gt;

&lt;pre&gt;    n    2e4      2e5      2e6     2e7&lt;/pre&gt;
&lt;pre&gt;  #1    28.652     -        -       -
  #2     0.344   21.77      -       -
  #3     0.086    1.29    16.4
  #4     0.055    0.65     6.7    70.1
  #5     0.075    0.80    10.7   204.5&lt;/pre&gt;
&lt;!-- 
    function grabCode_a7956cd39e4e4b2da601dae253a9ad13() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;a7956cd39e4e4b2da601dae253a9ad13 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; a7956cd39e4e4b2da601dae253a9ad13&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
a7956cd39e4e4b2da601dae253a9ad13 ##### SOURCE BEGIN #####
%% Möbius, Mertens and Redheffer
% Recently, I have made
% &lt;https://blogs.mathworks.com/cleve/ a series of blog posts&gt;
% about Redheffer matrices and the Mertens conjecture.
% After each of the posts, readers and colleagues
% offered suggestions to speed up the calculations. 
% Here is a summary of what I have learned.

%% Möbius Function
%
% &lt;&lt;Mobius.jpg&gt;&gt;
%
% The function named after the mid-nineteenth century German
% mathematician
% &lt;https://en.wikipedia.org/wiki/August_Ferdinand_M%C3%B6bius
% August Möbius&gt;
% is fundamental to the study of prime numbers.
% The Möbius function maps the positive integers onto -1,0 and +1.
%
%    mu(n) = 0 if n has a repeated prime factor,
%          = (-1)^(number prime factors) if the factors of n are not repeated
%
% Here is my code for the Möbius function.  It relies on |factor(n)|
% which uses a sieve to find the prime factors of |n|.
%
%    function mu = mobius(n)
%       % mu = mobius(n) returns mu(1:n). 
%       mu = -eye(1,n);
%       for k = 2:n
%           f = factor(k);
%           d = diff([1 f]);
%           if any(d == 0)
%               mu(k) = 0;
%           else
%               mu(k) = (-1)^length(f);
%           end
%       end
%    end
%
% Here is a graph of |mu(n)| for |n| = 1:40.  For example,
% |mu(29:31)| are all -1 because 29 and 31 are both prime
% and 30 has an odd number of prime factors, 2, 3 and 5.
%
     mu = moebius(40);
     plot(1:40,mu,&apos;.-&apos;,&apos;linewidth&apos;,1.5,&apos;markersize&apos;,16)
     axis([-2 42 -1.5 1.5])
     title(&apos;Möbius function&apos;)

%% Mertens Function
%
% &lt;&lt;Mertens.jpg&gt;&gt;
%
% The Mertens function is named after the late-nineteenth century Polish
% mathematician
% &lt;https://en.wikipedia.org/wiki/Franz_Mertens Franz Mertens&gt;.
% The function, which we denote by |M(n)|, is simply the partial sums
% of the Möbius function.  The MATLAB code is very short.
%
%    function M = mertens(n)
%       % M = mertens(n) returns Mertens(1:n).
%       mu = moebius(n);
%       M = cumsum([1 mu(2:n)]);
%    end
%
% Here is a graph of |M(n)| for |n| = 1:40.  
%
    M = mertens(40);
    plot(1:40,M,&apos;.-&apos;,&apos;linewidth&apos;,1.5,&apos;markersize&apos;,16)
    axis([-2 42 -4.5 1.5])
    title(&apos;Mertens function&apos;)

%% Redheffer Matrices
%
% &lt;&lt;Redheffer.jpg&gt;&gt;
%
% The twentieth-century American mathematician
% &lt;https://en.wikipedia.org/wiki/Raymond_Redheffer Ray Redheffer&gt;,
% who was a professor at UCLA for 55 years,
% had a wide range of interests.
% He was the author of several popular textbooks, the inventor
% of the electronic game &lt;https://en.wikipedia.org/wiki/Nim Nim&gt;   
% and, with Ray and Charles Eames, the creator of a four-meter long poster
% &lt;https://www.worthpoint.com/worthopedia/1966-ray-charles-eames-office-men-1724813663
% Men of Modern Mathematics&gt;.
%
% The n-by-n Redheffer&apos;s matrix |R(n)| is a matrix of zeros and ones.
% For |j &gt; 1|, the element |R(k,j)| equals one if |j| is a divisor of |k|.
% And importantly, for |j = 1|, the first column |R(:,1)| is all ones.
% 
%    function R = redheffer(n)
%       k = 1:n;
%       j = k&apos;;
%       R = (mod(k,j) == 0);
%       R(:,1) = 1;
%    end
%
% Nick Higham put Redheffer&apos;s matrix in the 
% &lt;https://blogs.mathworks.com/cleve/2019/06/24/bohemian-matrices-in-the-matlab-gallery/
% MATLAB Gallery&gt; several years ago.  
% Here is a spy plot of the 200-by-200.
%  
     R = gallery(&apos;redheff&apos;,200);
     spy(R)
     title(&apos;Redheffer&apos;)
    
%% OEIS
% In the Online Encyclopedia of Integer Sequences, the Mertens function
% is &lt;http://oeis.org/A002321 OEIS/A002321&gt;.  One of the many cool
% features of the OEIS is &quot;listen&quot;, which generates music driven by 
% the sequences.
% Take a look REPLACE_WITH_DASH_DASH and a listen REPLACE_WITH_DASH_DASH to my 63 second movie about A002321.
%
% &lt;https://blogs.mathworks.com/cleve/files/mertens_plot.mp4&gt;

%% Ten Million
% Here are plots of |M(1:n)| with |n| ranging from 100 to 10 million.
% Each plot after the first also shows the range of the previous plot.
% I will discuss the red lines in the next section
%
    load mertens M
    tiledlayout(2,3)
    for n = 10.^(2:7)
        nexttile
        mertens_plot(M(1:n))
    end

%% Mertens Conjecture
% The red lines above are plots of |±sqrt(n)|.
% They clearly bound |M(n)| for |n| up to 10 million.
% The Mertens Conjecture is that this holds for all |n|.
%
%    |M(n)| &lt; sqrt(n) for all n &gt; 0
%
% The conjecture appears in a 1885 letter from Thomas Stieltjes to
% Charles Hermite and in a 1897 paper by Mertens.
%
% &lt;https://en.wikipedia.org/wiki/Mertens_conjecture Wikipedia&gt; says
% 
%    It is a striking example of a mathematical conjecture proven false
%    despite a large amount of computational evidence in its favor.

%% Conjecture is False
% In 1985, 100 years after the Stieltjes letter, Andrew Odlyzko
% and Herman te Riele proved that the conjecture is false.
% Their proof is indirect.  They prove the existence of
% infinitely many |n| for which
%
%    |M(n)|/sqrt(n) &gt; 1.06
%
% But they do not know the value of any particular |n|.  They informally
% estimate that such an |n| would be greater than 10^30 and probably
% much larger.

%% Matrices
% Let&apos;s get back to the world of matrices.  It is not obvious,
% but is true, that the determinants of Redheffer matrices
% are equal to the Mertens function.
% 
%    det(R(n)) = M(n)
%
% So, if I could have proved that 
%
%    |det(R(n))| &lt; sqrt(n) for all n &gt; 0
%
% I would have had a proof of the Riemann Hypothesis.
%
% It might appear that I am out of the clutches of number theory
% and safely back to matrix computation.  But that illusion does
% not last for long.

%% Sparsity
% The |0(n^3)| memory required by the Redheffer matrix 
% from the gallery runs out of steam quickly.
% We need to take advantage of sparsity.
% This function generates the sparse representation of 
% a Redheffer matrix directly.
%
%    function R = spredheffer(n)
%        j = (1:n)&apos;;
%        k = ones(n,1);
%        m = n;
%        for i = 2:n
%            t = [1 i:i:n];
%            p = length(t);
%            j(m+(1:p)) = t;
%            k(m+(1:p)) = i;
%            m = m+p;
%        end
%        R = sparse(k,j,1,n,n);
%    end
%
%% Computing Mertens
% Here are five methods for computing the Mertens function.
%

%% #1
% The first simply takes the determinant of the Redheffer matrix
% in the |gallery|.
%
%    M = det(gallery(&apos;redheff&apos;,n))
%

%% #2
% The sparse Gaussian elimination function |lu| with one
% input and four sparse outputs is designed for solving sparse linear
% systems.  Written primarily
% by Tim Davis and included in his UMFPACK package, the function
% uses an unsymmetric pattern multifrontal pivoting strategy 
% to reduce fill-in while maintaining numerical stability.
% The determinant of the input matrix is the product of the four
% determinants of the output matrices. Two them are triangular and two
% are permutations, so it is easy, and quick, to compute their determinants.
%
%    R = spredheffer(n);
%    [L,U,P,Q] = lu(R)
%    M = det(L)*det(U)*det(P)*det(Q);
%

%% #3
% Pat Quillen realized that by interchanging the first and last
% columns, there would be little fill-in.  We need only one determinant.
%
%    R = spredheffer(n);
%    R(:,[1 n]) = R(:,[n 1]);
%    M = -det(R);
%

%% #4
%
% A thoughtful reader of the blog submitted a suggestion based on the
% Schur complement.  Suppose |E| is a block matrix, 
%
%    E = [A B
%         C D]
% 
% Schur&apos;s formula for the determinant of |E| is
%
%    det(E) = det(D)*det(A - B*(D\C))
%
% Apply  this to |R(n)| with |A| the (1,1) entry, which is 1,
% and |D| the lower (n-1)-by-(n-1) submatrix, which is upper triangular
% with ones on the diagonal and determinant equal 1.  This leads to method
% #4 which uses backslash with a sparse, unit, upper triangular matrix.
% There is a Redheffer matrix, but no determinant.
%
%    S = spredheffer(n);
%    e = ones(n-1,1);
%    M = 1 - e&apos;*(S(2:n,2:n)\e);
%
 
%% #5
% Once we have generated |R(n)| and computed |M(n)|, how do we get
% |R(n+1)| and |M(n+1)|?  After several iterations of this approach,
% I found myself without any matrices and only the original definitions
% of Möbius and Mertens.
%
%    mu = mobius(n);
%    M = cumsum([1 mu(2:n)]);
%

%% Performance
% Let&apos;s summarize the five methods.  The first four generate
% a single, isolated value of |M(n)|.  Method #5 generates
% |M(n)| for all |n| from 1 to any specified maximum.
%
%          matrix     function    dets    M
%
%    #1    full       gallery       1     1
%    #2    sparse     lu            4     1
%    #3    sparse     swap          1     1
%    #4    sparse     \             0     1
%    #5    none       factor        0    many
%
% Time in seconds to compute |M(n)| on my Lenovo T14 laptop
% running Windows.
%
%      n    2e4      2e5      2e6     2e7
%
%    #1    28.652     -        -       - 
%    #2     0.344   21.77      -       - 
%    #3     0.086    1.29    16.4       
%    #4     0.055    0.65     6.7    70.1
%    #5     0.075    0.80    10.7   204.5


##### SOURCE END ##### a7956cd39e4e4b2da601dae253a9ad13
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Experience With Chatbots Generating MATLAB</title>
   <link href="https://hpc.social/2024/experience-with-chatbots-generating-matlab/"/>
   <updated>2024-10-07T14:31:38-06:00</updated>
   <id>https://hpc.social/2024/experience-with-chatbots-generating-matlab</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;A friend is investigating the use of generative AI in his classes. I asked two different popular chatbots to write MATLAB programs for a mathematically nontrivial problem. Both chatbots understood my query and both wrote plausible MATLAB programs, but one of the programs was not correct. My recommendation for coursework: carefully read and test programs produced by generative AI and repair any incorrect ones.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0c48695a-3a4f-46a2-9d9c-23506fc3aae1&quot;&gt;Redheffer, Mertens and Ahalt&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#40ba61bb-33a4-43e5-9193-7a3889fb91f5&quot;&gt;Program number one&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8d0098c5-f272-4317-8eef-f58166e680af&quot;&gt;Program number two&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a1a49807-f649-4010-af50-85a315d67540&quot;&gt;Program number three&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c38da925-a549-4542-bb35-198572a00c66&quot;&gt;Happy Ending&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Redheffer, Mertens and Ahalt&lt;a name=&quot;0c48695a-3a4f-46a2-9d9c-23506fc3aae1&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Frequent readers of this blog know about my recent obsession with Redheffer matrices and the Mertens conjecture. So, when my friend Stan Ahalt visited from North Carolina State a few days ago, and wanted to discuss the use of generative AI in the new Data Science curriculum, I suggested asking chatbots to write MATLAB programs that check the Mertens conjecture.&lt;/p&gt;

&lt;p&gt;We logged onto the web sites for two different AI companies. Our query was the same at both sites.&lt;/p&gt;

&lt;pre&gt;Please write a MATLAB program to test the Mertens conjecture.&lt;/pre&gt;
&lt;p&gt;I was pleasantly surprised when both systems knew about MATLAB and understood the query. One of the systems replied:&lt;/p&gt;

&lt;pre&gt;Certainly! I&apos;ll create a MATLAB program to test the Mertens
conjecture. First, let me briefly explain what the Mertens
conjecture is, and then I&apos;ll provide the code.
The Mertens conjecture states that the Mertens function M(n)
is bounded by &amp;radic;n for all positive integers n. Mathematically,
it can be expressed as:&lt;/pre&gt;
&lt;pre&gt;|M(n)| &amp;le; &amp;radic;n for all n &amp;gt; 1&lt;/pre&gt;
&lt;pre&gt;Where M(n) is the Mertens function, defined as the sum of
the M&amp;ouml;bius function μ(k) for all positive integers k up to n:&lt;/pre&gt;
&lt;pre&gt;M(n) = Σ μ(k) for k = 1 to n&lt;/pre&gt;
&lt;pre&gt;Here&apos;s a MATLAB program to test this conjecture.&lt;/pre&gt;
&lt;h4&gt;Program number one&lt;a name=&quot;40ba61bb-33a4-43e5-9193-7a3889fb91f5&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The program from one of the web sites begins:&lt;/p&gt;

&lt;pre&gt;function M = test_Mertens(n)
   % Function to test the Mertens conjecture for a given n
   % Returns true if the conjecture holds for all values up to n, false otherwise&lt;/pre&gt;
&lt;p&gt;This is followed by code to sum the M&amp;ouml;bius function and verify that &lt;tt&gt;abs(M) &amp;lt; sqrt(n)&lt;/tt&gt;. The crucial &lt;tt&gt;mobius&lt;/tt&gt; is a straight-forward implementation of the definition. The code relies on MATLAB intrinsics, &lt;tt&gt;factor&lt;/tt&gt; and &lt;tt&gt;unique&lt;/tt&gt;.&lt;/p&gt;

&lt;pre&gt;function mu = mobius(k)
   % Function to calculate the M&amp;ouml;bius function of k
   % Factorize k
   p = factor(k);
   % Check for square factors
   if length(p) ~= length(unique(p))
      mu = 0;
   else
      mu = (-1)^length(p);
   end
end&lt;/pre&gt;
&lt;p&gt;I was very pleased. The entire program is only 40 lines long, eminently readable, and correct.&lt;/p&gt;

&lt;h4&gt;Program number two&lt;a name=&quot;8d0098c5-f272-4317-8eef-f58166e680af&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The program from the other web site is more sophisticated. It knows enough about MATLAB to use its cumulative summation.&lt;/p&gt;

&lt;pre&gt;M = cumsum(mu);&lt;/pre&gt;
&lt;p&gt;Here is the crucial &lt;tt&gt;mobius&lt;/tt&gt; function. At first glance, it looks OK. Is it?&lt;/p&gt;

&lt;pre&gt;function mu = mobius(n)
   % Calculate M&amp;ouml;bius function values up to n
   mu = ones(1, n);
   for i = 2:sqrt(n)
      if mu(i) == 1
         for j = i^2:i:n
            if mod(j, i^2) == 0
               mu(j) = 0;
            else
               mu(j) = -mu(j);
            end
         end
      end
   end
end&lt;/pre&gt;
&lt;p&gt;As you have guessed, program number two is not correct. Even its own plot reveals that something is amiss.&lt;/p&gt;

&lt;h4&gt;Program number three&lt;a name=&quot;a1a49807-f649-4010-af50-85a315d67540&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Let&apos;s return to the second Web site and make a more specific query.&lt;/p&gt;

&lt;pre&gt;Please write a MATLAB program that uses Redheffer
matrices to test the Mertens conjecture.&lt;/pre&gt;
&lt;p&gt;The resulting program generates a Redheffer matrix with&lt;/p&gt;

&lt;pre&gt;R = zeros(n,n);
for i = 1:n
   for j = 1:n
      if mod(i, j) == 0
         R(i, j) = 1;
      end
   end
end&lt;/pre&gt;
&lt;p&gt;It computes the determinant to obtain the Mertens value, &lt;tt&gt;M(n)&lt;/tt&gt;. It is able to confirm the conjecture for all the &lt;tt&gt;n&lt;/tt&gt; in the given range.&lt;/p&gt;

&lt;p&gt;What&apos;s wrong now? Look at the plot. The computed &lt;tt&gt;M(n)&lt;/tt&gt; is always equal to one. Why?&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/program3.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Happy Ending&lt;a name=&quot;c38da925-a549-4542-bb35-198572a00c66&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Program number three can be repaired by adding one line to the code that generates &lt;tt&gt;R&lt;/tt&gt;. What is that line? Respond in the comments.&lt;/p&gt;

&lt;p&gt;Look at the good side. Instead of just using AI to do homework, we can challenge students to check the results carefully and repair any incorrect programs.&lt;/p&gt;

&lt;!-- 
    function grabCode_b5785d3ceb4b4ff38b92ec4f957e13e3() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;b5785d3ceb4b4ff38b92ec4f957e13e3 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; b5785d3ceb4b4ff38b92ec4f957e13e3&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
b5785d3ceb4b4ff38b92ec4f957e13e3 ##### SOURCE BEGIN #####
%% Experience With Chatbots Generating MATLAB
% A friend is investigating the use of generative AI in his classes.
% I asked two different popular chatbots to write
% MATLAB programs for a mathematically nontrivial problem.
% Both chatbots understood my query and both wrote plausible
% MATLAB programs, but one of the programs was not correct.
% My recommendation for coursework: carefully read and test 
% programs produced by generative AI and repair any incorrect ones.

%% Redheffer, Mertens and Ahalt
% Frequent readers of this blog know about my recent obsession
% with Redheffer matrices and the Mertens conjecture.
% So, when my friend Stan Ahalt visited from North Carolina State
% a few days ago, and wanted to discuss the use of generative AI in
% the new Data Science curriculum, I suggested asking chatbots
% to write MATLAB programs that check the Mertens conjecture.

%%
% We logged onto the web sites for two different AI companies.
% Our query was the same at both sites.
% 
%  Please write a MATLAB program to test the Mertens conjecture.
%
% I was pleasantly surprised when both systems knew about MATLAB
% and understood the query.
% One of the systems replied:
%
%  Certainly! I&apos;ll create a MATLAB program to test the Mertens
%  conjecture. First, let me briefly explain what the Mertens
%  conjecture is, and then I&apos;ll provide the code.
%  The Mertens conjecture states that the Mertens function M(n) 
%  is bounded by √n for all positive integers n. Mathematically, 
%  it can be expressed as:
%
%  |M(n)| ≤ √n for all n &gt; 1
%
%  Where M(n) is the Mertens function, defined as the sum of 
%  the Möbius function μ(k) for all positive integers k up to n:
%
%  M(n) = Σ μ(k) for k = 1 to n
%
%  Here&apos;s a MATLAB program to test this conjecture.
%

%% Program number one
% The program from one of the web sites begins:
%
%  function M = test_Mertens(n)
%     % Function to test the Mertens conjecture for a given n
%     % Returns true if the conjecture holds for all values up to n, false otherwise
%
% This is followed by code to sum the Möbius function and verify that  
% |abs(M) &lt; sqrt(n)|.
% The crucial |mobius| is a straight-forward implementation
% of the definition.   The code relies on MATLAB intrinsics, |factor|
% and |unique|.
%
%  function mu = mobius(k)
%     % Function to calculate the Möbius function of k
%     % Factorize k
%     p = factor(k);     
%     % Check for square factors
%     if length(p) ~= length(unique(p))
%        mu = 0;
%     else
%        mu = (-1)^length(p);
%     end
%  end

%%
% I was very pleased.  The entire program is only 40 lines long,
% eminently readable, and correct.

%% Program number two
% The program from the other web site is more sophisticated.
% It knows enough about MATLAB to use its cumulative summation.
%
%  M = cumsum(mu);
%
% Here is the crucial |mobius| function.  At first glance, it looks OK.
% Is it?
%
%  function mu = mobius(n)
%     % Calculate Möbius function values up to n
%     mu = ones(1, n);  
%     for i = 2:sqrt(n)
%        if mu(i) == 1
%           for j = i^2:i:n
%              if mod(j, i^2) == 0
%                 mu(j) = 0;
%              else
%                 mu(j) = -mu(j);
%              end
%           end
%        end
%     end
%  end
%
% As you have guessed, program number two is not correct.
% Even its own plot reveals that something is amiss.

%% Program number three
% Let&apos;s return to the second Web site and make a more specific query.
%
%  Please write a MATLAB program that uses Redheffer
%  matrices to test the Mertens conjecture.
%
% The resulting program generates a Redheffer matrix with
%
%  R = zeros(n,n);
%  for i = 1:n
%     for j = 1:n
%        if mod(i, j) == 0
%           R(i, j) = 1;
%        end
%     end
%  end
%
% It computes the determinant to obtain the Mertens value, |M(n)|.
% It is able to confirm the conjecture for all the |n|
% in the given range.
%
% What&apos;s wrong now?  Look at the plot.  The computed |M(n)| is always
% equal to one.  Why?
%
% &lt;&lt;program3.png&gt;&gt;
%

%% Happy Ending
% Program number three can be repaired by adding one line to the code that
% generates |R|.  What is that line?  Respond in the comments.
%
% Look at the good side.  Instead of just using AI
% to do homework, we can
% challenge students to check the results carefully
% and repair any incorrect programs.
##### SOURCE END ##### b5785d3ceb4b4ff38b92ec4f957e13e3
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Redheffer and Mertens, Accelerated</title>
   <link href="https://hpc.social/2024/redheffer-and-mertens-accelerated/"/>
   <updated>2024-09-30T14:28:40-06:00</updated>
   <id>https://hpc.social/2024/redheffer-and-mertens-accelerated</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;Shortly after I published the second post about the &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/09/27/redheffer-and-mertens-continued/&quot;&gt;Mertens conjecture&lt;/a&gt;, a reader&apos;s comment suggested a new approach to computing Redheffer determinants and the Mertens function. It is now possible to compute a half-million values of the Mertens function in about five hours.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7d362761-695e-4474-88df-0a49bd91d0a1&quot;&gt;Block matrices&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3237700b-50f8-4cce-a2a4-ce2a67875d0f&quot;&gt;&lt;tt&gt;redmert&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c59e3dbe-0a74-4f7c-839b-a92e38cb63c3&quot;&gt;Inside &lt;tt&gt;redmert&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6c005e64-ccd7-4f61-bab0-eec89c74cdd4&quot;&gt;mertens_plot&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#dc3123c4-88e4-4acc-87ef-5dce4750f795&quot;&gt;Postscript&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Block matrices&lt;a name=&quot;7d362761-695e-4474-88df-0a49bd91d0a1&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The comment references the &lt;a href=&quot;https://en.wikipedia.org/wiki/Determinant#Block_matrices&quot;&gt;Wikipedia article&lt;/a&gt; on block matrices.&lt;/p&gt;

&lt;pre&gt;  You could also consider the matrix as a 2x2 block matrix and
  use the formula for the determinant of a block matrix [1].
      A = redheffer(n);
      M = full(A(1,1) - A(1, 2:end) * (A(2:end,2:end) \ A(2:end, 1)));
  Since the (n-1)x(n-1) block is upper triangular, the solve becomes
  a back-substitution.&lt;/pre&gt;
&lt;h4&gt;
&lt;tt&gt;redmert&lt;/tt&gt;&lt;a name=&quot;3237700b-50f8-4cce-a2a4-ce2a67875d0f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;My new program is named &lt;tt&gt;redmert&lt;/tt&gt;, an abbreviation of Redheffer-Mertens. It uses the fact that &lt;tt&gt;redheffer(n)&lt;/tt&gt; is obtained from &lt;tt&gt;redheffer(n-1)&lt;/tt&gt; by appending the last column.&lt;/p&gt;

&lt;p&gt;Let &lt;tt&gt;R(n)&lt;/tt&gt; denote the upper or right-triangular part of &lt;tt&gt;redheffer(n)&lt;/tt&gt;.&lt;/p&gt;

&lt;pre&gt;  R(n) = triu(redheffer(n))&lt;/pre&gt;
&lt;p&gt;
&lt;tt&gt;R(n)&lt;/tt&gt; is sparse, upper triangular and has ones on the diagonal. The indices of the nonzeros in the last column of &lt;tt&gt;R(n)&lt;/tt&gt; are the factors of &lt;tt&gt;n&lt;/tt&gt;. For example, here is &lt;tt&gt;R(8)&lt;/tt&gt;.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
R8 = full(triu(redheffer(8)))
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;R8 =
     1     1     1     1     1     1     1     1
     0     1     0     1     0     1     0     1
     0     0     1     0     0     1     0     0
     0     0     0     1     0     0     0     1
     0     0     0     0     1     0     0     0
     0     0     0     0     0     1     0     0
     0     0     0     0     0     0     1     0
     0     0     0     0     0     0     0     1
&lt;/pre&gt;
&lt;p&gt;The idea behind &lt;tt&gt;redmert&lt;/tt&gt; is to compute a sequence of Redheffer matrices, &lt;tt&gt;R&lt;/tt&gt;, and associated values of the Mertens function, &lt;tt&gt;M&lt;/tt&gt;.&lt;/p&gt;

&lt;pre&gt;  [M,R] = redmert(p,R)&lt;/pre&gt;
&lt;p&gt;The input is a scalar integer &lt;tt&gt;p&lt;/tt&gt;, the desired sequence length, and a sparse matrix &lt;tt&gt;R&lt;/tt&gt;, the upper triangle of a Redheffer matrix of some order, &lt;tt&gt;n&lt;/tt&gt;. The output is an integer vector of values &lt;tt&gt;M(n+1:n+p)&lt;/tt&gt; and the upper triangle of the Redheffer matrix of order &lt;tt&gt;n+p&lt;/tt&gt;. This output &lt;tt&gt;R&lt;/tt&gt; can then be used as the input &lt;tt&gt;R&lt;/tt&gt; in another call to &lt;tt&gt;redmert&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The sequence is started with an empty &lt;tt&gt;R&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
[M,R] = redmert(8,[]);
&lt;/pre&gt;
&lt;p&gt;The output is &lt;tt&gt;mertens(n), n = 1:8&lt;/tt&gt;, and &lt;tt&gt;R8&lt;/tt&gt; from the example above.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
MR8 = full(R)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
M =
     1
     0
    -1
    -1
    -2
    -1
    -2
    -2
R8 =
     1     1     1     1     1     1     1     1
     0     1     0     1     0     1     0     1
     0     0     1     0     0     1     0     0
     0     0     0     1     0     0     0     1
     0     0     0     0     1     0     0     0
     0     0     0     0     0     1     0     0
     0     0     0     0     0     0     1     0
     0     0     0     0     0     0     0     1
&lt;/pre&gt;
&lt;h4&gt;Inside &lt;tt&gt;redmert&lt;/tt&gt;&lt;a name=&quot;c59e3dbe-0a74-4f7c-839b-a92e38cb63c3&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The entire code for &lt;tt&gt;redmert&lt;/tt&gt; is twelve lines long. It manipulates sparse matrices and uses sparse backslash to solve a triangular system. Nothing else is required.&lt;/p&gt;

&lt;p&gt;Lines 7 and 8 generate the last column of &lt;tt&gt;R&lt;/tt&gt; and lines 9 and 10 implement the new idea about block matrices.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
dbtype &lt;span class=&quot;string&quot;&gt;redmert&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
1     function [M,R] = redmert(p,Rin)
2         M = zeros(p,1);
3         R = sparse(triu(Rin));
4         n = size(R,1);
5         for q = 1:p
6             n = n+1;
7             k = (mod(n,1:n) == 0);
8             R(k,n) = 1;
9             e = ones(n-1,1);
10            M(q) = R(1,1) - e&apos;*(R(2:n,2:n)\e);
11        end
12    end
&lt;/pre&gt;
&lt;h4&gt;mertens_plot&lt;a name=&quot;6c005e64-ccd7-4f61-bab0-eec89c74cdd4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;It takes about five hours for &lt;tt&gt;redmert&lt;/tt&gt; to compute half a million values on my laptop.&lt;/p&gt;

&lt;pre&gt;   n = 0.5e6;
   p = 0.5e4;
   R = sparse([]);
   M = [];
   for k = p:p:n
       disp(k)
       [Mout,R] = redmert(p,R);
       M = [M; Mout];
       mertens_plot(M)
   end&lt;/pre&gt;
&lt;pre class=&quot;codeinput&quot;&gt;
mertens_plot
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/redmert_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Postscript&lt;a name=&quot;dc3123c4-88e4-4acc-87ef-5dce4750f795&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I started this project by being surprised to find myself computing determinants. Now I am back to my long-time position disparaging determinants. They have been replaced by a good friend, backslash.&lt;/p&gt;

&lt;!-- 
    function grabCode_3267a823a3ca4544ace75a24a1cc6636() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;3267a823a3ca4544ace75a24a1cc6636 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 3267a823a3ca4544ace75a24a1cc6636&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
3267a823a3ca4544ace75a24a1cc6636 ##### SOURCE BEGIN #####
%% Redheffer and Mertens, Accelerated
% Shortly after I published the second post about the
% &lt;https://blogs.mathworks.com/cleve/2024/09/27/redheffer-and-mertens-continued/
% Mertens conjecture&gt;,
% a reader&apos;s comment suggested a new approach to
% computing Redheffer determinants and the Mertens function.
% It is now possible to compute a half-million values of the
% Mertens function in about five hours.

%% Block matrices
% The comment references the
% &lt;https://en.wikipedia.org/wiki/Determinant#Block_matrices
% Wikipedia article&gt; on block matrices.
%
%    You could also consider the matrix as a 2x2 block matrix and
%    use the formula for the determinant of a block matrix [1].
%        A = redheffer(n);
%        M = full(A(1,1) - A(1, 2:end) * (A(2:end,2:end) \ A(2:end, 1)));
%    Since the (n-1)x(n-1) block is upper triangular, the solve becomes
%    a back-substitution.

%% |redmert|
% My new program is named |redmert|, an abbreviation of 
% Redheffer-Mertens.  It uses the fact that
% |redheffer(n)| is obtained from |redheffer(n-1)| by appending
% the last column.
%
% Let |R(n)| denote the upper or right-triangular
% part of |redheffer(n)|.
%
%    R(n) = triu(redheffer(n))
%   
% |R(n)| is sparse, upper triangular and has ones on the
% diagonal.  
% The indices of the nonzeros in the last column of |R(n)|
% are the factors of |n|.
% For example, here is |R(8)|.

    R8 = full(triu(redheffer(8)))

%%
% The idea behind |redmert| is to compute a sequence
% of Redheffer matrices, |R|, and associated values of the
% Mertens function, |M|.
%
%    [M,R] = redmert(p,R)
%
% The input is a scalar integer |p|, the desired sequence length,
% and a sparse matrix |R|, the upper triangle of a Redheffer
% matrix of some order, |n|.
% The output is an integer vector of values |M(n+1:n+p)| and
% the upper triangle of the Redheffer matrix of order |n+p|. 
% This output |R| can then be used as the input |R| in another
% call to |redmert|.
%
% The sequence is started with an empty |R|.
%
% For example,
%
   [M,R] = redmert(8,[]);

%%
% The output is |mertens(n), n = 1:8|, and |R8| from the example
% above.

    M
    R8 = full(R)

%% Inside |redmert|
% The entire code for |redmert| is twelve lines long.
% It manipulates sparse matrices and uses sparse backslash
% to solve a triangular system.  Nothing else is required.
%
% Lines 7 and 8 generate the last column of |R| and lines 9 and 10
% implement the new idea about block matrices.

      dbtype redmert

%% mertens_plot
% It takes about five hours for |redmert|
% to compute half a million values on my laptop.
% 
%     n = 0.5e6;
%     p = 0.5e4;
%     R = sparse([]);
%     M = [];
%     for k = p:p:n
%         disp(k)
%         [Mout,R] = redmert(p,R);
%         M = [M; Mout];
%         mertens_plot(M)
%     end

      mertens_plot

%% Postscript
% I started this project by being surprised to find
% myself computing determinants.
% Now I am back to my long-time position disparaging
% determinants. They have been replaced by a good friend, backslash.

##### SOURCE END ##### 3267a823a3ca4544ace75a24a1cc6636
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Redheffer and Mertens, Continued</title>
   <link href="https://hpc.social/2024/redheffer-and-mertens-continued/"/>
   <updated>2024-09-27T12:28:39-06:00</updated>
   <id>https://hpc.social/2024/redheffer-and-mertens-continued</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;Shortly after I posted &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/&quot;&gt;Redheffer, Mertens and One-Million Dollars&lt;/a&gt; a few days ago, Mathworks&apos; Pat Quillen made an important observation about computing the Mertens function.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f3fcd244-9ad3-4849-93ca-a831a5999c61&quot;&gt;&lt;tt&gt;mertens&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#22db8fd3-aa25-4f76-9360-af77b6b20726&quot;&gt;Mertens function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9ebbd5e7-4600-435d-8b80-56634f314af3&quot;&gt;Mertens computation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#d25d727c-f7fb-41b5-a32e-eab8c9e0caae&quot;&gt;Mertens conjecture&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;
&lt;tt&gt;mertens&lt;/tt&gt;&lt;a name=&quot;f3fcd244-9ad3-4849-93ca-a831a5999c61&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The elements in the first column of the Redheffer matrix, &lt;tt&gt;A = redheffer(n)&lt;/tt&gt;, are all equal to one. That dense column does not make MATLAB happy about computing &lt;tt&gt;det(A)&lt;/tt&gt; . However, the last column of &lt;tt&gt;A&lt;/tt&gt; has only a few nonzero elements and so Pat suggested interchanging the first and last columns before computing the determinant. This makes a world of difference. (Thanks, Pat.)&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;type&lt;span class=&quot;string&quot;&gt;mertens&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
function M = mertens(n)
    if n &amp;gt; 1
        A = redheffer(n);
        A(:,[1 n]) = A(:,[n 1]);
        M = -round(det(A));
    else
        M = 1;
    end
end
&lt;/pre&gt;
&lt;p&gt;The time required to compute &lt;tt&gt;det(A)&lt;/tt&gt; varies with the sparsity of the last column, but it is only a little more than the time to compute &lt;tt&gt;redheffer(n)&lt;/tt&gt; in the first place.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;mertens2_time
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/mertens2_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Mertens function&lt;a name=&quot;22db8fd3-aa25-4f76-9360-af77b6b20726&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Pat&apos;s change makes it possible to take &lt;tt&gt;n&lt;/tt&gt; up to a quarter of a million, and beyond. Here is a new plot of the Mertens function &lt;tt&gt;M(n)&lt;/tt&gt; and the &lt;tt&gt;sqrt(n)&lt;/tt&gt; bounds of the Mertens conjecture.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;mertens_plot
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/mertens2_blog_02.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;There are a quarter of a million points in the data for this plot. Fortunately, the .PNG file used for the blog only needs to sample the data.&lt;/p&gt;

&lt;h4&gt;Mertens computation&lt;a name=&quot;9ebbd5e7-4600-435d-8b80-56634f314af3&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The job that I ran on my laptop to compute one-quarter of a million values of &lt;tt&gt;M(n)&lt;/tt&gt; is still running. It currently is past 0.35 million and takes less than two seconds for each value. I may keep the job running over the weekend, just to see how far it gets.&lt;/p&gt;

&lt;p&gt;The task is embarrassingly parallel. If I had a pool with a million processors, I could have each processor compute one value. I would then just have to collect the results, but that doesn&apos;t involve any arithmetic.&lt;/p&gt;

&lt;h4&gt;Mertens conjecture&lt;a name=&quot;d25d727c-f7fb-41b5-a32e-eab8c9e0caae&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;You can see from the plot why late 19th- and early 20th-century mathematicians believed that the Mertens conjecture,&lt;/p&gt;

&lt;pre&gt;   |M(n)| &amp;lt; sqrt(n) for all n,&lt;/pre&gt;
&lt;p&gt;might be true. It is hard to imagine that the plot of &lt;tt&gt;M(n)&lt;/tt&gt; ever escapes &lt;tt&gt;sqrt(n)&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;We now know that &lt;tt&gt;M(n)&lt;/tt&gt; eventually does escape, but only barely and only briefly. We also know that all the computation we can do with determinants of Redheffer&apos;s matrix will never prove or disprove the conjecture or win that million-dollar prize.&lt;/p&gt;

&lt;!-- 
    function grabCode_1007044f00b340cd8467bc0b1324ad0e() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;1007044f00b340cd8467bc0b1324ad0e &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 1007044f00b340cd8467bc0b1324ad0e&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
1007044f00b340cd8467bc0b1324ad0e ##### SOURCE BEGIN #####
%% Redheffer and Mertens, Continued
% Shortly after I posted
% &lt;https://blogs.mathworks.com/cleve/2024/09/23/redheffer-mertens-and-one-million-dollars/
% Redheffer, Mertens and One-Million Dollars&gt;
% a few days ago, Mathworks&apos; Pat Quillen made an important observation
% about computing the Mertens function.

%% |mertens|
% The elements in the first column of the Redheffer matrix,
% |A = redheffer(n)|, are all equal to one.  That dense column 
% does not make MATLAB happy about computing |det(A)| .
% However, the last column of |A| has only a few nonzero elements and so
% Pat suggested interchanging the first and last columns
% before computing the determinant.  This makes a world of difference.
% (Thanks, Pat.)

       type mertens

%% 
% The time required to compute |det(A)| varies with the sparsity of
% the last column, but it is only a little more than the time
% to compute |redheffer(n)| in the first place. 

   mertens2_time

%% Mertens function
% Pat&apos;s change makes it possible to take |n| up to a quarter of a million,
% and beyond.  Here is a new plot of the Mertens function |M(n)| and the
% |sqrt(n)| bounds of the Mertens conjecture.

   mertens_plot

%% 
% There are a quarter of a million points in the data for this plot.
% Fortunately, the .PNG file used for the blog only needs to sample
% the data.

%% Mertens computation
% The job that I ran on my laptop to compute one-quarter of
% a million values of |M(n)| is still running.  It currently
% is past 0.35 million and takes less than two seconds for each value.
% I may keep the job running over the weekend, just to see how
% far it gets.
%
% The task is embarrassingly parallel.  If I had a pool with 
% a million processors, I could have each processor compute one
% value.  I would then just have to collect the results, but that
% doesn&apos;t involve any arithmetic.

%% Mertens conjecture
% You can see from the plot why late 19th- and early 20th-century
% mathematicians believed that the Mertens conjecture,
%
%     |M(n)| &lt; sqrt(n) for all n,
%
% might be true.
% It is hard to imagine that the plot of |M(n)| ever escapes
% |sqrt(n)|.  
%
% We now know that |M(n)| eventually does escape,
% but only barely and only briefly.  We also know that all the
% computation we can do with determinants of Redheffer&apos;s matrix
% will never prove or disprove the conjecture or win that
% million-dollar prize.

##### SOURCE END ##### 1007044f00b340cd8467bc0b1324ad0e
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Redheffer, Mertens and One-Million Dollars</title>
   <link href="https://hpc.social/2024/redheffer-mertens-and-one-million-dollars/"/>
   <updated>2024-09-23T17:12:35-06:00</updated>
   <id>https://hpc.social/2024/redheffer-mertens-and-one-million-dollars</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;I didn&apos;t know anything about these topics until a couple of weeks ago. Now I can&apos;t stop thinking about them.&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Redheffer&apos;s matrix has been in the &lt;a href=&quot;https://blogs.mathworks.com/cleve/2019/06/24/bohemian-matrices-in-the-matlab-gallery/&quot;&gt;MATLAB Gallery&lt;/a&gt; for a long time, but I have ignored it .&lt;/li&gt;
&lt;li&gt;Redheffer&apos;s matrix can be used to compute Mertens function and investigate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mertens_conjecture&quot;&gt;Mertens conjecture&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A proof of the Mertens conjecture would also provide a proof of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Riemann_hypothesis&quot;&gt;Riemann hypothesis&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For nearly a century, all the available computational evidence indicated that the Mertens conjecture was likely to be true.&lt;/li&gt;
&lt;li&gt;The Riemann hypothesis is the most important unsolved problem in mathematics and wins a Clay prize worth &lt;a href=&quot;https://www.claymath.org/millennium/riemann-hypothesis&quot;&gt;one-million dollars&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;MATLAB&apos;s sparse matrix functions turn out to be useful in an investigation of Redheffer&apos;s matrix and the Mertens conjecture.&lt;/li&gt;
&lt;li&gt;However, it has been known since 1985 that the Mertens conjecture is false.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#82c24739-64fc-4329-b610-b923ff740e51&quot;&gt;Redheffer&apos;s Matrix&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#fdc9a386-44e5-43bb-a9c1-8580cdb11520&quot;&gt;M&amp;ouml;bius Function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ebef8c86-e7dd-4ca8-9f35-7da51c2313c4&quot;&gt;Mertens Function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#36e351c3-4c49-43ab-8776-9f5f5e7011f6&quot;&gt;Mertens Conjecture&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4b56c506-95ad-4d6b-8f23-569f167616b7&quot;&gt;Mertens Meets Redheffer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f8ff3cc0-f3e0-4d4d-84f5-b3049b3af76f&quot;&gt;Redheffer Sparsity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3cf9c9a2-aba7-4a78-b8f2-96522c7fc05d&quot;&gt;&lt;tt&gt;redheffer&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#221d2a42-3916-44d9-b314-debfbcfbaced&quot;&gt;Sparse LU&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c293a71a-bd97-4107-8fc8-3063376e0ea7&quot;&gt;&lt;tt&gt;mertens&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5dc1b513-cf9c-43c7-a3b7-06e75d99e97e&quot;&gt;Mertens Conjecture Is False&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4247c5bb-c39a-4a0a-88a9-4859dcc0e793&quot;&gt;Postscripts&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8b8af9b2-9248-420a-9072-b53f5d344050&quot;&gt;References&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Redheffer&apos;s Matrix&lt;a name=&quot;82c24739-64fc-4329-b610-b923ff740e51&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Raymond_Redheffer&quot;&gt;Raymond Redheffer&lt;/a&gt; (1921-2005) was an American mathematician, a professor at UCLA for 55 years, the author of several popular textbooks, the inventor of the electronic game &lt;a href=&quot;https://en.wikipedia.org/wiki/Nim&quot;&gt;Nim&lt;/a&gt; and, with Ray and Charles Eames, the creator of a four-meter long poster &lt;a href=&quot;https://www.worthpoint.com/worthopedia/1966-ray-charles-eames-office-men-1724813663&quot;&gt;Men of Modern Mathematics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redheffer&apos;s matrix is a matrix of zeros and ones. &lt;tt&gt;A(k,j)&lt;/tt&gt; equals one if &lt;tt&gt;j&lt;/tt&gt; is a divisor of &lt;tt&gt;k&lt;/tt&gt;. In addition, the first column is all ones.&lt;/p&gt;

&lt;pre&gt;  function A = redheffer(n)
      k = 1:n;
      j = k&apos;;
      A = (mod(k,j) == 0);
      A(:,1) = 1;
  end&lt;/pre&gt;
&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;  A = gallery(&apos;redheff&apos;,n)&lt;/pre&gt;
&lt;p&gt;Here is the 10-by-10.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    A = redheffer(10);
    disp(full(A))
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
     1     1     1     1     1     1     1     1     1     1
     1     1     0     1     0     1     0     1     0     1
     1     0     1     0     0     1     0     0     1     0
     1     0     0     1     0     0     0     1     0     0
     1     0     0     0     1     0     0     0     0     1
     1     0     0     0     0     1     0     0     0     0
     1     0     0     0     0     0     1     0     0     0
     1     0     0     0     0     0     0     1     0     0
     1     0     0     0     0     0     0     0     1     0
     1     0     0     0     0     0     0     0     0     1
&lt;/pre&gt;
&lt;p&gt;And here is a spy plot of the 200-by-200.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    A = redheffer(200);
    spy(A)
    title(&lt;span class=&quot;string&quot;&gt;&apos;redheffer(200)&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mertens_blog2_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;M&amp;ouml;bius Function&lt;a name=&quot;fdc9a386-44e5-43bb-a9c1-8580cdb11520&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The M&amp;ouml;bius function was introduced in 1832 by German mathematician August M&amp;ouml;bius and is ubiquitous in the study of prime numbers. For positive integers &lt;tt&gt;n&lt;/tt&gt;, &lt;tt&gt;μ(n)&lt;/tt&gt; is&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;tt&gt;0&lt;/tt&gt; if &lt;tt&gt;n&lt;/tt&gt; has a squared prime factor,&lt;/li&gt;
&lt;li&gt;
&lt;tt&gt;+1&lt;/tt&gt; if &lt;tt&gt;n&lt;/tt&gt; is square-free and has an even number of prime factors,&lt;/li&gt;
&lt;li&gt;
&lt;tt&gt;-1&lt;/tt&gt; if &lt;tt&gt;n&lt;/tt&gt; is square-free and has an odd number of prime factors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Mertens Function&lt;a name=&quot;ebef8c86-e7dd-4ca8-9f35-7da51c2313c4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Franz_Mertens&quot;&gt;Franz Mertens&lt;/a&gt; (1840-1927) was a Polish mathematician who spent most of his career in Austria at the University of Vienna. Here is a &lt;a href=&quot;https://mathshistory.st-andrews.ac.uk/Biographies/Mertens/&quot;&gt;link&lt;/a&gt; to a biography of Mertens at the University of St. Andrews MacTutor project.&lt;/p&gt;

&lt;p&gt;The Mertens function is sum of values of the M&amp;ouml;bius function. For a positive integer &lt;tt&gt;n&lt;/tt&gt;, the Mertens function is&lt;/p&gt;

&lt;pre&gt;   M(n) = sum(μ(1:n))&lt;/pre&gt;
&lt;p&gt;So &lt;tt&gt;M(n)&lt;/tt&gt; is the difference between the number of square-free integers with an even number of prime factors and those with an odd number.&lt;/p&gt;

&lt;p&gt;This graphic shows &lt;tt&gt;M(n)&lt;/tt&gt; for &lt;tt&gt;n = 1:100000&lt;/tt&gt;.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    mertens_plot_2
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mertens_blog2_02.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Mertens Conjecture&lt;a name=&quot;36e351c3-4c49-43ab-8776-9f5f5e7011f6&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The Mertens function &lt;tt&gt;M(n)&lt;/tt&gt; fluctuates wildly and grows slowly with increasing &lt;tt&gt;n&lt;/tt&gt;. The graphic shows that M(n) is easily bounded by of &lt;tt&gt;sqrt(n)&lt;/tt&gt; and &lt;tt&gt;-sqrt(n)&lt;/tt&gt;, at least for &lt;tt&gt;n&lt;/tt&gt; less than &lt;tt&gt;100k&lt;/tt&gt;. The Mertens conjecture is that this continues for larger &lt;tt&gt;n&lt;/tt&gt;.&lt;/p&gt;

&lt;pre&gt;  -sqrt(n) &amp;lt; M(n) &amp;lt; sqrt(n) for all n&lt;/pre&gt;
&lt;p&gt;The conjecture was included in a letter from Stieltjes to Hermite in 1895 and in a paper by Mertens in 1897. The result is important since a proof of the Mertens conjecture would imply the truth of the Riemann hypothesis.&lt;/p&gt;

&lt;h4&gt;Mertens Meets Redheffer&lt;a name=&quot;4b56c506-95ad-4d6b-8f23-569f167616b7&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I became interested in all this when I learned that the determinant of the MATLAB Gallery matrix which I have ignored for years is related to the Riemann hypothesis and the million-dollar prize.&lt;/p&gt;

&lt;pre&gt;  M(n) = det(gallery(&apos;redheff&apos;,n))&lt;/pre&gt;
&lt;p&gt;I know very little about the distribution of prime numbers and computing values of the M&amp;ouml;bius function. On the other hand, I know a lot about numerical linear algebra and computing determinants.&lt;/p&gt;

&lt;p&gt;In general, I am dead set against computing determinants. They are often used to check for singularity or to somehow compute eigenvalues. But here the determinant is an integer counter of modest size.&lt;/p&gt;

&lt;h4&gt;Redheffer Sparsity&lt;a name=&quot;f8ff3cc0-f3e0-4d4d-84f5-b3049b3af76f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Computing &lt;tt&gt;M(n)&lt;/tt&gt; directly with &lt;tt&gt;det(redheffer(n))&lt;/tt&gt; requires &lt;tt&gt;O(n^2)&lt;/tt&gt; space and &lt;tt&gt;O(n^3)&lt;/tt&gt; time and is not practical for large &lt;tt&gt;n&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;However, &lt;tt&gt;A = redheffer(n)&lt;/tt&gt; is modestly sparse. Here is the fraction of nonzeros.&lt;/p&gt;

&lt;pre&gt;  s = nnz(A)/n^2&lt;/pre&gt;
&lt;pre class=&quot;codeinput&quot;&gt;
    disp(sparsity)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
       n         s    
    _____    ________
    10000    0.001037
    20000    0.000553
    30000    0.000382
    40000    0.000294
    50000    0.000239
    60000    0.000203
    70000    0.000176
    80000    0.000156
    90000    0.000139
    1e+05    0.000127
&lt;/pre&gt;
&lt;p&gt;Taking advantage of this sparsity and the MATLAB tools for sparse matrix computation provide linear space complexity and perhaps &lt;tt&gt;O(n^2)&lt;/tt&gt; time complexity.&lt;/p&gt;

&lt;h4&gt;
&lt;tt&gt;redheffer&lt;/tt&gt;&lt;a name=&quot;3cf9c9a2-aba7-4a78-b8f2-96522c7fc05d&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here is MATLAB code to generate a sparse &lt;tt&gt;redheffer(n)&lt;/tt&gt; without creating any full intermediate matrices.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;type&lt;span class=&quot;string&quot;&gt;    redheffer&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
    function A = redheffer(n)
        j(1:n) = (1:n)&apos;;
        k(1:n) = 1;
        m = n;
        for i = 2:n
            t = [1 i:i:n]&apos;;
            p = length(t);
            j(m+(1:p)) = t;
            k(m+(1:p)) = i;
            m = m+p;
        end
        A = sparse(k,j,1,n,n);
    end
&lt;/pre&gt;
&lt;p&gt;As expected, we see that the execution time for &lt;tt&gt;redheffer(n)&lt;/tt&gt; is a linear function of &lt;tt&gt;n&lt;/tt&gt;. (The space required also grows linearly.)&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    redheffer_time
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mertens_blog2_03.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Sparse LU&lt;a name=&quot;221d2a42-3916-44d9-b314-debfbcfbaced&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The MATLAB Gaussian elimination function &lt;tt&gt;lu&lt;/tt&gt; with one sparse input and four sparse outputs is designed for solving sparse linear systems.&lt;/p&gt;

&lt;pre&gt;  [L,U,P,Q] = lu(A)&lt;/pre&gt;
&lt;p&gt;Written primarily by Tim Davis and included in his UMFPACK package, the function uses an unsymmetric pattern multifrontal pivoting strategy to find permutations &lt;tt&gt;P&lt;/tt&gt; and &lt;tt&gt;Q&lt;/tt&gt; so that &lt;tt&gt;L&lt;/tt&gt; is lower triangular, &lt;tt&gt;U&lt;/tt&gt; is upper triangular and&lt;/p&gt;

&lt;pre&gt;  P*A*Q = L*U&lt;/pre&gt;
&lt;p&gt;Consequently, the determinant of &lt;tt&gt;A&lt;/tt&gt; is the product of four easily computed determinants.&lt;/p&gt;

&lt;pre&gt;  det(A) = det(L)*det(U)*det(P)*det(Q)&lt;/pre&gt;
&lt;p&gt;The pivoting strategy aims to reduce fill-in while maintaining numerical stability.&lt;/p&gt;

&lt;p&gt;For example, here are &lt;tt&gt;L&lt;/tt&gt; and &lt;tt&gt;U&lt;/tt&gt; for the Redheffer matrix in the spy plot near the top of this blog post.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    close
    A = redheffer(200);
    [L,U,P,Q] = lu(A);
    spy(L|U)
    title(&lt;span class=&quot;string&quot;&gt;&apos;L|U&apos;&lt;/span&gt;)
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mertens_blog2_04.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;And here are the four determinants.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    dets = [det(L),det(U),det(P),det(Q)];
    disp(dets)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
    1    -8    -1    -1
&lt;/pre&gt;
&lt;p&gt;Finally, &lt;tt&gt;M(200)&lt;/tt&gt; is&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    M_200 = det(L)*det(U)*det(P)*det(Q)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
    M_200 =
        -8
&lt;/pre&gt;
&lt;h4&gt;
&lt;tt&gt;mertens&lt;/tt&gt;&lt;a name=&quot;c293a71a-bd97-4107-8fc8-3063376e0ea7&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Mertens function can be computed with four lines of code.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    type&lt;span class=&quot;string&quot;&gt;    mertens&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;
    function M = mertens(n)
        der = @(x) full(round(prod(diag(x))));
        A = redheffer(n);
        [L,U,P,Q] = lu(A);
        M = der(L)*der(U)*det(P)*det(Q);
    end
&lt;/pre&gt;
&lt;p&gt;Execution time for &lt;tt&gt;mertens&lt;/tt&gt; is dominated by the time in sparse &lt;tt&gt;lu&lt;/tt&gt;. The time required to compute the four determinants is an order of magnitude smaller than the other two.&lt;/p&gt;

&lt;p&gt;Experimentally, we see that the time complexity of sparse &lt;tt&gt;lu&lt;/tt&gt; is &lt;tt&gt;O(n^2)&lt;/tt&gt;, but we have no proof.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;
    mertens_time
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/mertens_blog2_05.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;Mertens Conjecture Is False&lt;a name=&quot;5dc1b513-cf9c-43c7-a3b7-06e75d99e97e&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The Mertens conjecture stood for nearly 100 years before it was proved false in 1985 by Andrew Odlyzko and Herman te Riele. The authors present indirect proofs that&lt;/p&gt;

&lt;pre&gt;  lim sup (n -&amp;gt; inf) M(n)/sqrt(n) &amp;gt; 1.06&lt;/pre&gt;
&lt;pre&gt;  lim inf (n -&amp;gt; inf) M(n)/sqrt(n) &amp;lt; -1.009&lt;/pre&gt;
&lt;p&gt;Odlyzko and te Riele do not actually produce any value of &lt;tt&gt;n&lt;/tt&gt; for which &lt;tt&gt;M(n) &amp;gt; sqrt(x)&lt;/tt&gt;. They suspect that any Mertens conjecture counterexample requires &lt;tt&gt;n&lt;/tt&gt; &amp;gt; $10^{30}$, which is far beyond any computation possible today.&lt;/p&gt;

&lt;p&gt;Odlyzko and te Riele also describe several complete tabulations of &lt;tt&gt;M(n)&lt;/tt&gt; for &lt;tt&gt;n&lt;/tt&gt; as large as $7.8 \cdot 10^{9}$ . These computations do not use Redheffer determinants.&lt;/p&gt;

&lt;h4&gt;Postscripts&lt;a name=&quot;4247c5bb-c39a-4a0a-88a9-4859dcc0e793&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;To tell the truth, I did not really expect to find any Mertens or Riemann counterexamples. I did, however, enjoy computing determinants for the first time and discovering an unexpected use for sparse LU.&lt;/p&gt;

&lt;p&gt;Thanks a lot to Tim Davis for his help with this post.&lt;/p&gt;

&lt;h4&gt;References&lt;a name=&quot;8b8af9b2-9248-420a-9072-b53f5d344050&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A. M. Odlyzko and H. J. J. te Riele, &quot;Disproof of the Mertens conjecture&quot;, &lt;i&gt;Journal f&amp;uuml;r die reine und angewandte Mathematik&lt;/i&gt;, Vol. 357 (1985), Pages138-160. &lt;a href=&quot;https://eudml.org/doc/152712&quot;&gt;https://eudml.org/doc/152712&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Timothy A. Davis, &quot;A Column Pre-Ordering Strategy for the Unsymmetric-Pattern Multifrontal Method&quot;, &lt;i&gt;ACM Transactions on Mathematical Software&lt;/i&gt;, Vol. 30, No. 2, June 2004, Pages 165&amp;ndash;195. &lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/992200.992205&quot;&gt;https://dl.acm.org/doi/abs/10.1145/992200.992205&lt;/a&gt;.&lt;/p&gt;

&lt;!-- 
    function grabCode_500e91acec4e4151a58ba494fb74b941() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;500e91acec4e4151a58ba494fb74b941 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 500e91acec4e4151a58ba494fb74b941&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
500e91acec4e4151a58ba494fb74b941 ##### SOURCE BEGIN #####
%% Redheffer, Mertens, Riemann and $1M
% I didn&apos;t know anything about these topics until a couple of
% weeks ago. Now I can&apos;t stop thinking about them.
%
% * Redheffer&apos;s matrix has been in the 
% &lt;https://blogs.mathworks.com/cleve/2019/06/24/bohemian-matrices-in-the-matlab-gallery/
% MATLAB Gallery&gt; for a long time, but I have ignored it        .
% * Redheffer&apos;s matrix can be used to compute Mertens function and
% investigate the
% &lt;https://en.wikipedia.org/wiki/Mertens_conjecture
% Mertens conjecture&gt;.
% * A proof of the Mertens conjecture would also provide a proof of the
% &lt;https://en.wikipedia.org/wiki/Riemann_hypothesis Riemann hypothesis&gt;.
% * For nearly a century, all the available computational evidence
% indicated that the Mertens conjecture was likely to be true.
% * The Riemann hypothesis is the most important unsolved problem in
% mathematics and wins a Clay prize worth 
% &lt;https://www.claymath.org/millennium/riemann-hypothesis
% one-million dollars&gt;.
% * MATLAB&apos;s sparse matrix functions turn out to be useful
% in an investigation of Redheffer&apos;s matrix and the Mertens conjecture.
% * However, it has been known since 1985 that the Mertens
% conjecture is false.

%% Redheffer&apos;s Matrix
% &lt;https://en.wikipedia.org/wiki/Raymond_Redheffer Raymond Redheffer&gt;
% (1921-2005) was an American mathematician, a professor at UCLA for
% 55 years, the author of several popular textbooks, the inventor
% of the electronic game &lt;https://en.wikipedia.org/wiki/Nim Nim&gt;   
% and, with Ray and Charles Eames, the creator of a four-meter long poster
% &lt;https://www.worthpoint.com/worthopedia/1966-ray-charles-eames-office-men-1724813663
% Men of Modern Mathematics&gt;.
%
% Redheffer&apos;s matrix is a matrix of zeros and ones.
% |A(k,j)| equals one if |j| is a divisor of |k|.
% In addition, the first column is all ones.
%
%    function A = redheffer(n)
%        k = 1:n;
%        j = k&apos;;
%        A = (mod(k,j) == 0);
%        A(:,1) = 1;
%    end
%
% Or
%
%    A = gallery(&apos;redheff&apos;,n)
%
% Here  is the 10-by-10.

    A = redheffer(10);
    disp(full(A))

%%
% And here is a spy plot of the 200-by-200.

    A = redheffer(200);
    spy(A)
    title(&apos;redheffer(200)&apos;)

%% Möbius Function
% The Möbius function was introduced in 1832 by German mathematician
% August Möbius and is ubiquitous in the study of prime numbers.
% For positive integers |n|, |μ(n)| is
%
% * |0| if |n| has a squared prime factor,
% * |+1| if |n| is square-free and has an even number of prime factors,
% * |-1| if |n| is square-free and has an odd number of prime factors.
%
%% Mertens Function
% &lt;https://en.wikipedia.org/wiki/Franz_Mertens Franz Mertens&gt;
% (1840-1927) was a Polish mathematician who spent most of his
% career in Austria at the University of Vienna.
% Here is a
% &lt;https://mathshistory.st-andrews.ac.uk/Biographies/Mertens/
% link&gt; to a biography of Mertens at the University of St. Andrews
% MacTutor project.
%
% The Mertens function is sum of values of the Möbius function.
% For a positive integer |n|, the Mertens function is
%
%     M(n) = sum(μ(1:n))
%
% So |M(n)| is the difference between the number of square-free
% integers with an even number of prime factors and those with an
% odd number.
%
% This graphic shows |M(n)| for |n = 1:100000|.

    mertens_plot_2

%% Mertens Conjecture
% The Mertens function |M(n)| fluctuates wildly and grows slowly with
% increasing |n|.  The graphic shows that M(n) is easily bounded
% by of |sqrt(n)| and |-sqrt(n)|, at least for |n| less than |100k|.
% The Mertens conjecture is that this continues for larger |n|.
% 
%    -sqrt(n) &lt; M(n) &lt; sqrt(n) for all n
%
% The conjecture was included in a letter from Stieltjes to
% Hermite in 1895 and in a paper by Mertens in 1897.
% The result is important since a proof of the Mertens conjecture
% would imply the truth of the Riemann hypothesis.

%% Mertens Meets Redheffer
% I became interested in all this when I learned that
% the determinant of the MATLAB Gallery matrix which I have
% ignored for years is related to the Riemann hypothesis and
% the million-dollar prize.
%
%    M(n) = det(gallery(&apos;redheff&apos;,n))
%
% I know very little about the distribution of prime numbers and
% computing values of the Möbius function.  On the other hand,
% I know a lot about numerical linear algebra and computing determinants.
%
% In general, I am dead set against computing determinants.
% They are often used to check for singularity or to somehow
% compute eigenvalues.  But here the determinant is an
% integer counter of modest size.

%% Redheffer Sparsity
% Computing |M(n)| directly with |det(redheffer(n))| requires
% |O(n^2)| space and |O(n^3)| time and is not practical for
% large |n|.
%
% However, |A = redheffer(n)| is modestly sparse.
% Here is the fraction of nonzeros.
% 
%    s = nnz(A)/n^2
     
     disp(sparsity)

%% 
% Taking advantage of this sparsity and the MATLAB tools for
% sparse matrix computation provide
% linear space complexity and perhaps |O(n^2)| time complexity.

%% |redheffer|
% Here is MATLAB code to generate a sparse |redheffer(n)| without
% creating any full intermediate matrices.


    type redheffer

%%
% As expected, we see that the execution time for |redheffer(n)|
% is a linear function of |n|.  (The space required also grows linearly.)

    redheffer_time

%% Sparse LU
% The MATLAB Gaussian elimination function |lu| with one sparse
% input and four sparse outputs
% is designed for solving sparse linear systems.
% 
%    [L,U,P,Q] = lu(A)
%
% Written primarily
% by Tim Davis and included in his UMFPACK package, the function
% uses an unsymmetric pattern multifrontal pivoting strategy to
% find permutations |P| and |Q| so that |L| is lower triangular,
% |U| is upper triangular and
%
%    P*A*Q = L*U
%
% Consequently, the determinant of |A| is the product of four easily
% computed determinants.
%
%    det(A) = det(L)*det(U)*det(P)*det(Q)
%
% The pivoting strategy aims to reduce fill-in while maintaining
% numerical stability.

%%
% For example, here are |L| and |U| for the Redheffer matrix
% in the spy plot near the top of this blog post.

    close
    A = redheffer(200);
    [L,U,P,Q] = lu(A);
    spy(L|U)
    title(&apos;L|U&apos;)
    
%%
% And here are the four determinants.

    dets = [det(L), det(U), det(P), det(Q)];
    disp(dets)

%%
% Finally, |M(200)| is

    M_200 = det(L)*det(U)*det(P)*det(Q)

%% |mertens|
% Mertens function can be computed with four lines of code.

    type mertens

%%
% Execution time for |mertens| is dominated by the time in sparse |lu|.
% The time required to compute the four determinants is an order of
% magnitude smaller than the other two.  
%
% Experimentally, we see that the time complexity of sparse |lu| is
% |O(n^2)|, but we have no proof.   

    mertens_time

%% Mertens Conjecture Is False
% The Mertens conjecture stood for nearly 100 years before it was 
% proved false in 1985 by Andrew Odlyzko and Herman te Riele.
% The authors present indirect proofs that
%
%    lim sup (n -&gt; inf) M(n)/sqrt(n) &gt; 1.06
%
%    lim inf (n -&gt; inf) M(n)/sqrt(n) &lt; -1.009
%
% Odlyzko and te Riele do not actually produce any value of |n| for 
% which |M(n) &gt; sqrt(x)|. They suspect that any Mertens conjecture
% counterexample requires |n| &gt; $10^{30}$, which is far beyond any
% computation possible today.
%
% Odlyzko and te Riele also describe several complete tabulations of 
% |M(n)| for |n| as large as $7.8 \cdot 10^{9}$ .  These computations
% do not use Redheffer determinants.

%% Postscripts
% To tell the truth, I did not really expect to find any Mertens or
% Riemann counterexamples.  I did, however, enjoy computing determinants
% for the first time and discovering an unexpected use for sparse LU. 
%
% Thanks a lot to Tim Davis for his help with this post.

%% References
% A. M. Odlyzko and H. J. J. te Riele,
% &quot;Disproof of the Mertens conjecture&quot;,
% _Journal für die reine und angewandte Mathematik_,
% Vol. 357 (1985), Pages138-160. &lt;https://eudml.org/doc/152712&gt;.
%
% Timothy A. Davis,
% &quot;A Column Pre-Ordering Strategy for the Unsymmetric-Pattern Multifrontal
% Method&quot;,
% _ACM Transactions on Mathematical Software_,
% Vol. 30, No. 2, June 2004, Pages 165–195.
% &lt;https://dl.acm.org/doi/abs/10.1145/992200.992205&gt;.
% 


##### SOURCE END ##### 500e91acec4e4151a58ba494fb74b941
--&gt;
</content>
 </entry>
 
 <entry>
   <title>NA_Digest and NA_Net</title>
   <link href="https://hpc.social/2024/na-digest-and-na-net/"/>
   <updated>2024-08-31T21:44:36-06:00</updated>
   <id>https://hpc.social/2024/na-digest-and-na-net</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.netlib.org/na-digest-html/&quot;&gt;NA-Digest&lt;/a&gt; is an electronic newsletter for the numerical analysis and scientific software community. The NA-Digest is one of world&apos;s first examples of social networking. The Digest is one of the forces that makes our community a living, viable community.&lt;/p&gt;

&lt;p&gt;The Digest is part of NA-Net, which also includes &lt;a href=&quot;https://www.netlib.org/&quot;&gt;Netlib&lt;/a&gt;, a collection of mathematical software, papers, and databases.&lt;/p&gt;

&lt;p&gt;For its first forty years, the NA-Digest has had only four editors. Now, we are &lt;a href=&quot;https://www.netlib.org/na-digest-html/24/v24n11.html&quot;&gt;adding two more&lt;/a&gt;. As we do that, I would like to take a personal look back at the history of the NA-Digest.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#42644b1c-8ee9-4edf-8399-1ffb5ba7f590&quot;&gt;Gene and Mark&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#22096a5c-5e18-461e-9393-60f6a3bbb50c&quot;&gt;Jack and Eric&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1fd1e215-f726-417a-aa69-971302131b6f&quot;&gt;Tammy and Danny&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7c1ce1c2-47b9-4c04-a89b-6f5b35367817&quot;&gt;David and Alex&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a8dab39f-1171-4d72-8485-cc39142450cd&quot;&gt;Archive&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#319b8bc4-61b1-47d7-a372-6ea6ffd20197&quot;&gt;Members&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#82cfa35d-28ab-4312-984e-623267f106d4&quot;&gt;Important Postings&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2e3065dc-2d44-4a9f-96fc-d8376c9b2490&quot;&gt;Thanks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8f0306a7-58c2-424a-bae9-f87fb1ae7dc5&quot;&gt;References&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Gene and Mark&lt;a name=&quot;42644b1c-8ee9-4edf-8399-1ffb5ba7f590&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Like many other developments in the numerical analysis world, the Digest began with &lt;a href=&quot;https://en.wikipedia.org/wiki/Gene_H._Golub&quot;&gt;Gene Golub&lt;/a&gt;. In the early 1980&apos;s, Golub was chair of Stanford&apos;s Computer Science Department. Email was a new thing and Gene maintained a list of email addresses for his many friends around the world. Email addresses came in many different formats; today&apos;s system of domain names was not yet in wide spread use.&lt;/p&gt;

&lt;p&gt;In 1984, Mark Kent, one of Gene&apos;s grad students, with help from Ray Tuminaro, Mark Crispin and Dan Kolkowitz, wrote software that used Gene&apos;s list in an email forwarding service. Mail sent to&lt;/p&gt;

&lt;p&gt;
&lt;tt&gt;na.&lt;/tt&gt;&lt;i&gt;name&lt;/i&gt;&lt;tt&gt;@su-score&lt;/tt&gt;
&lt;/p&gt;

&lt;p&gt;would be forwarded to the person with that last name. And email sent to&lt;/p&gt;

&lt;p&gt;
&lt;tt&gt;na@su-score&lt;/tt&gt;
&lt;/p&gt;

&lt;p&gt;would be forwarded to everyone on the list.&lt;/p&gt;

&lt;p&gt;Gene and Mark Kent began to gather contributions together and send the collection out periodically. By February 1987, this had evolved into a moderated weekly newsletter. Gene dubbed these email services the &lt;i&gt;NA-Net&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Nick Trefethen has this memory.&lt;/p&gt;

&lt;pre&gt;  Early in the days of email, domain names were all over the place.
  I think there was a period when Gene was using xxx.na for the
  names of numerical analysts.  Then somebody decided addresses should
  end with the country, giving us .uk and .fr and .ch and all
  that.  For a period, we found that a lot of our numerical
  analysis emails were being directed to Namibia!&lt;/pre&gt;
&lt;p&gt;In 1987, Gene asked me to moderate NA-Digest temporarily while he went on a sabbatical. That temporary position ultimately lasted 18 years, until 2005.&lt;/p&gt;

&lt;h4&gt;Jack and Eric&lt;a name=&quot;22096a5c-5e18-461e-9393-60f6a3bbb50c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://history.siam.org/oralhistories/dongarra.htm&quot;&gt;Jack Dongarra&lt;/a&gt; began his career at Argonne National Laboratory. Jack&apos;s colleague, Eric Grosse, began his career at Bell Labs. In 1984, Jack and Eric created Netlib, a software repository and distribution service, and merged it with NA-Net. In 1989, Jack and the NA-Net system moved from Argonne to Oak Ridge National Lab and the University of Tennessee.&lt;/p&gt;

&lt;p&gt;Keith Moore, at the University of Tennessee, rewrote the NA-Net software and maintained the servers for many years.&lt;/p&gt;

&lt;p&gt;Gerald Ragghianti, the Technical Services Leader at Tennessee&apos;s Innovative Computer Lab, currently maintains the NA-Net software and servers.&lt;/p&gt;

&lt;h4&gt;Tammy and Danny&lt;a name=&quot;1fd1e215-f726-417a-aa69-971302131b6f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;In 2005, I asked Tammy Kolda, who was then at Sandia Labs in Livermore, to be the NA-Digest editor. Tammy&apos;s &lt;a href=&quot;https://www.google.com/search?q=tamara+kolda&quot;&gt;Wikipedia page&lt;/a&gt; reveals that her given name is &quot;Tamara&quot;, but everybody calls her &quot;Tammy&quot;. She left Sandia is 2021 and now has her own consulting company, &lt;a href=&quot;https://www.mathsci.ai/&quot;&gt;MathSci.ai&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In 2010, Tammy recommended that Danny Dunlavy, from Sandia Labs in Albuquerque, take over as editor. He has been the editor for 14 years. Danny&apos;s day job at Sandia&apos;s &lt;a href=&quot;https://www.sandia.gov/ccr&quot;&gt;Center for Computing Research&lt;/a&gt; involves a wide range of fields including computer architecture, cognitive modeling and discrete mathematics.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/OldEditors.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;David and Alex&lt;a name=&quot;7c1ce1c2-47b9-4c04-a89b-6f5b35367817&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/NewEditors.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://www.netlib.org/na-digest-html/24/v24n11.html&quot;&gt;Starting next week&lt;/a&gt;, NA-Digest and NA-Net will move &lt;a href=&quot;https://en.wikipedia.org/wiki/Lock,_stock,_and_barrel&quot;&gt;lock, stock, and barrel&lt;/a&gt; to Cornell University. The new editors are &lt;a href=&quot;https://www.cs.cornell.edu/~bindel/bio&quot;&gt;David Bindell&lt;/a&gt; and &lt;a href=&quot;https://pi.math.cornell.edu/~ajt/&quot;&gt;Alex Townsend&lt;/a&gt;. Cornell&apos;s IT organization will be taking over the logistics.&lt;/p&gt;

&lt;p&gt;David, Alex and &lt;a href=&quot;https://www.cs.cornell.edu/~damle/#About&quot;&gt;Anil Damle&lt;/a&gt; are also the hosts for &lt;a href=&quot;https://householder-symposium.github.io&quot;&gt;Householder XXII&lt;/a&gt;, June 8-13, 2025.&lt;/p&gt;

&lt;h4&gt;Archive&lt;a name=&quot;a8dab39f-1171-4d72-8485-cc39142450cd&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Every issue of NA-Digest since February 1987 is available at &lt;a href=&quot;https://www.netlib.org/na-digest-html&quot;&gt;https://www.netlib.org/na-digest-html&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Members&lt;a name=&quot;319b8bc4-61b1-47d7-a372-6ea6ffd20197&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;When I succeeded Gene as editor in 1987, there were about 800 names on the NA-Net mailing list. Today, in 2024, there are a little over 10,000. Discontinuities in the size of the list result when unused and illegitimate names are removed.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/NA_Digs.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Important Postings&lt;a name=&quot;82cfa35d-28ab-4312-984e-623267f106d4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I have made three personally important announcements in the Digest over the years.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;October 29, 1989&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;In 1989 I was working at &lt;a href=&quot;https://blogs.mathworks.com/cleve/2013/11/25/the-ardent-titan-part-1/&quot;&gt;Ardent Computer&lt;/a&gt;, a startup in Silicon Valley. I announced in NA-Digest that MathWorks was looking for a numerical analyst. (Note the MathWorks telephone number near the end of this announcement.)&lt;/p&gt;

&lt;pre&gt;  From: Cleve Moler &amp;lt;na.moler@na-net.stanford.edu&amp;gt;
  Date: Sun Oct 29 10:39:38 PST 1989
  Subject: Positions at The MathWorks&lt;/pre&gt;
&lt;pre&gt;  The MathWorks is the company which develops and markets MATLAB.
  The company currently employs about 30 people and expects to
  add three or four more soon. The company headquarters is in
  East Natick, Massachusetts, which is about a half hour drive
  west of Boston.&lt;/pre&gt;
&lt;pre&gt;  The background and interests expected for the various positions
  available range from numerical linear algebra and matrix computation
  to systems programming and graphics. Educational level and
  experience expected range from inexperienced beginner willing
  to learn to seasoned Ph.D. with a personal library of M-files.&lt;/pre&gt;
&lt;pre&gt;  For more information, send email to na.moler@na-net.stanford.edu
  or phone me at 408-732-0400. Or, contact the MathWorks&apos; president,
  John Little, with email to jnl@mathworks.com, phone 508-653-1415,
  or write to:&lt;/pre&gt;
&lt;pre&gt;  The MathWorks
  21 Eliot Street
  South Natick, MA 01760&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;November 26, 1989&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;Shortly after that announcement, &lt;a href=&quot;https://en.wikipedia.org/wiki/Stardent_Inc.&quot;&gt;Ardent imploded&lt;/a&gt; and I said that I was taking the job myself.&lt;/p&gt;

&lt;pre&gt;  From: Cleve Moler &amp;lt;moler@mathworks.com&amp;gt;
  Date: Sun Nov 26 09:16:32 PST 1989
  Subject: Change of Address for Moler&lt;/pre&gt;
&lt;pre&gt;  A couple of weeks ago, I made an announcement here that
  The MathWorks, the MATLAB company, was looking to fill several
  positions, including one for a numerical analyst. Now, I&apos;ve
  decided to take that slot myself. I&apos;m one of the founders of
  MathWorks, and have always been a consultant to the company, but
  now I&apos;ll be a full time employee. For a while at least, I&apos;ll
  be working out of my home in California, even though MathWorks
  headquarters is in Massachusetts. (There are already a couple
  of other MathWorks developers in the Bay Area.)
  . . .
  My electronic address is &quot;moler@mathworks.com&quot;. If your mailer
  can&apos;t find the route via uunet to mathworks.com, you can still
  use &quot;na.moler@na-net.stanford.edu&quot;.&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;November 16, 2007&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;In November 2007 I was attending the Super Computing conference in Reno. I had rented a car and intended to drive to the Bay Area after the conference. But my wife called me and said, &quot;Hey Cleve, have you heard that Gene is in the hospital?&quot; I left SC immediately and drove to Palo Alto. Two days later we sent out a special issue of the Digest:&lt;/p&gt;

&lt;pre&gt;  From: Cleve Moler &amp;lt;Cleve.Moler@mathworks.com&amp;gt;
  Date: Fri, 16 Nov 2007 17:55:42 -0500
  Subject: Gene Golub, 1932 - 2007&lt;/pre&gt;
&lt;pre&gt;  Gene Golub, founder of the NA Digest, passed away today, Friday, November 16,
  at the Stanford University Hospital. He was 75 years old.&lt;/pre&gt;
&lt;pre&gt;  Gene returned home to Stanford recently from a trip to Hong Kong. He was
  planning to leave again Tuesday on another trip, this one to Zurich where the
  ETH was to honor him with a special degree. Instead, Sunday night he went to
  the emergency room because he was &quot;feeling lousy&quot;. On Tuesday, he was found
  to have AML, acute myelogenous leukemia, a form of cancer that affects the
  white blood cells. This is a potentially curable disease and he was expecting
  to begin chemotherapy today. But serious complications developed suddenly
  over night.&lt;/pre&gt;
&lt;pre&gt;  I was able to see Gene for an hour last night and he was in reasonably good
  spirits. Mike Saunders was trying to get Gene&apos;s laptop to use dial-up over
  the hospital&apos;s phone system because Gene said he was a couple of days behind
  on his email. I was planning to get a wireless card for his machine today.
  None of us had any idea how suddenly the situation would worsen.&lt;/pre&gt;
&lt;pre&gt;  The Stanford ICME students have created a memorial blog at
  http://genehgolub.blogspot.com .&lt;/pre&gt;
&lt;pre&gt;  Our community has lost its foremost member. He was a valued colleague and
  friend. Goodbye, Gene.&lt;/pre&gt;
&lt;pre&gt;  -- Cleve Moler&lt;/pre&gt;
&lt;h4&gt;Thanks&lt;a name=&quot;2e3065dc-2d44-4a9f-96fc-d8376c9b2490&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Gene Golub and Mark Kent for creating NA-Digest and NA-Net.&lt;/li&gt;
&lt;li&gt;Tammy Kolda and Danny Dunlavy for editing the Digest for two decades.&lt;/li&gt;
&lt;li&gt;Jack Dongarra, Eric Grosse, Keith Moore and Geri Ragghianti for creating Netlib and for hosting the system for four decades.&lt;/li&gt;
&lt;li&gt;David Bindel and Alex Townsend for joining this team.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;References&lt;a name=&quot;8f0306a7-58c2-424a-bae9-f87fb1ae7dc5&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Jack Dongarra, Gene Golub, Eric Grosse, Cleve Moler and Keith Moore. &quot;Netlib and NA-Net: Building a Scientific Computing Community&quot;, &lt;a href=&quot;https://ieeexplore.ieee.org/document/4544554&quot;&gt;&lt;i&gt;IEEE Annals of the History of Computing&lt;/i&gt;&lt;/a&gt;, (Volume: 30, Issue: 2, April-June 2008). &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/icl-utk-351-2008.pdf&quot;&gt;A PDF is available here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mark Kent, &lt;a href=&quot;https://www.research-collection.ethz.ch/handle/20.500.11850/68968&quot;&gt;The Numerical Analysis Net (NA-NET)&lt;/a&gt;, Technical Report 85, ETH Zurich, Institut fuer Informatik, 1988.&lt;/p&gt;

&lt;!-- 
    function grabCode_ad3526f9a6bc4fedb6f2b87f8bc0de10() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;ad3526f9a6bc4fedb6f2b87f8bc0de10 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; ad3526f9a6bc4fedb6f2b87f8bc0de10&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
ad3526f9a6bc4fedb6f2b87f8bc0de10 ##### SOURCE BEGIN #####
%% NA_Digest and NA_Net
% The &lt;https://www.netlib.org/na-digest-html/  NA-Digest&gt;
% is an electronic newsletter for the numerical analysis and
% scientific software community.
% The NA-Digest is one of world&apos;s first examples of social networking.
% The Digest is one of the forces that makes our community
% a living, viable community.
%
% The Digest is part of NA-Net, which also includes 
% &lt;https://www.netlib.org/ Netlib&gt;, a collection of mathematical software,
% papers, and databases.
%
% For its first forty years, the NA-Digest has had only four editors.
% Now, we are
% &lt;https://www.netlib.org/na-digest-html/24/v24n11.html
% adding two more&gt;.
% As we do that, I would like to take a personal look back at the
% history of the NA-Digest.

%% Gene and Mark
% Like many other developments in the numerical analysis world,
% the Digest began with &lt;https://en.wikipedia.org/wiki/Gene_H._Golub
% Gene Golub&gt;. In the early 1980&apos;s, Golub was chair of Stanford&apos;s
% Computer Science Department. Email was a new thing and Gene
% maintained a list of email addresses for his many friends
% around the world.  Email addresses came in many different formats;
% today&apos;s system of domain names was not yet in wide spread use.
%
% In 1984, Mark Kent, one of Gene&apos;s grad students,
% with help from Ray Tuminaro, Mark Crispin and Dan Kolkowitz,
% wrote software that used Gene&apos;s list in an email
% forwarding service.  Mail sent to
%
% |na.|_name_|@su-score|
%
% would be forwarded to the person with that last name. And email sent to
%
% |na@su-score| 
%
% would be forwarded to everyone on the list.
%
% Gene and Mark Kent
% began to gather contributions together
% and send the collection out periodically.  By February 1987, this
% had evolved into a moderated weekly newsletter.
% Gene dubbed these email services the _NA-Net_.
%
% Nick Trefethen has this memory.
%
%    Early in the days of email, domain names were all over the place.
%    I think there was a period when Gene was using xxx.na for the
%    names of numerical analysts.  Then somebody decided addresses should
%    end with the country, giving us .uk and .fr and .ch and all
%    that.  For a period, we found that a lot of our numerical 
%    analysis emails were being directed to Namibia!
%
% In 1987, Gene asked me to moderate NA-Digest temporarily while he
% went on a sabbatical.  That temporary position ultimately
% lasted 18 years, until 2005.
%

%% Jack and Eric
% &lt;https://history.siam.org/oralhistories/dongarra.htm Jack Dongarra&gt;
% began his career at Argonne National Laboratory. Jack&apos;s colleague,
% Eric Grosse, began his career at Bell Labs.
% In 1984, Jack and Eric created Netlib, a software repository and
% distribution service, and merged it with NA-Net.
% In 1989, Jack and the NA-Net system moved from Argonne to 
% Oak Ridge National Lab and the University of Tennessee.
%
% Keith Moore, at the University of Tennessee,
% rewrote the NA-Net software and maintained the servers for many years.
%
% Gerald Ragghianti, the Technical Services Leader at
% Tennessee&apos;s Innovative Computer Lab, currently maintains the NA-Net
% software and servers.

%% Tammy and Danny
% In 2005, I asked Tammy Kolda, who was then at Sandia Labs
% in Livermore, to be the NA-Digest editor.
% Tammy&apos;s &lt;https://www.google.com/search?q=tamara+kolda Wikipedia page&gt;
% reveals that her given name is &quot;Tamara&quot;, but everybody calls her &quot;Tammy&quot;.  
% She left Sandia is 2021 and now has her own consulting company,
% &lt;https://www.mathsci.ai/ MathSci.ai&gt;. 
% 
% In 2010, Tammy recommended that Danny Dunlavy, from Sandia Labs in 
% Albuquerque, take over as editor.  He has been the editor for 14 years.
% Danny&apos;s day job at Sandia&apos;s
% &lt;https://www.sandia.gov/ccr Center for Computing Research&gt;
% involves a wide range of fields including computer architecture,
% cognitive modeling and discrete mathematics.
%
% &lt;&lt;OldEditors.png&gt;&gt;
%

%% David and Alex
%
% &lt;&lt;NewEditors.png&gt;&gt;
%
% &lt;https://www.netlib.org/na-digest-html/24/v24n11.html
% Starting next week&gt;, NA-Digest and NA-Net will move
% &lt;https://en.wikipedia.org/wiki/Lock,_stock,_and_barrel
% lock, stock, and barrel&gt; to Cornell University.
% The new editors are
% &lt;https://www.cs.cornell.edu/~bindel/bio David Bindell&gt;
% and
% &lt;https://pi.math.cornell.edu/~ajt/ Alex Townsend&gt;.
% Cornell&apos;s IT organization will be taking over the logistics.
%
% David, Alex and &lt;https://www.cs.cornell.edu/~damle/#About Anil Damle&gt;
% are also the hosts for 
% &lt;https://householder-symposium.github.io Householder XXII&gt;,
% June 8-13, 2025.

%% Archive
% Every issue of NA-Digest since February 1987
% is available at
% &lt;https://www.netlib.org/na-digest-html&gt;.

%% Members
% When I succeeded Gene as editor in 1987, there were about 800 names
% on the NA-Net mailing list.  Today, in 2024, there are a little
% over 10,000.
% Discontinuities in the size of the list result when
% unused and illegitimate names are removed.
%
% &lt;&lt;NA_Digs.png&gt;&gt;

%% Important Postings
% I have made three personally important announcements in the Digest over
% the years. 
%
% *October 29, 1989*
%
% In 1989 I was working at
% &lt;https://blogs.mathworks.com/cleve/2013/11/25/the-ardent-titan-part-1/
% Ardent Computer&gt;, a startup in Silicon Valley.
% I announced in NA-Digest that MathWorks was looking for a numerical
% analyst. (Note the MathWorks telephone number near the end of this
% announcement.)
%
%    From: Cleve Moler &lt;na.moler@na-net.stanford.edu&gt;
%    Date: Sun Oct 29 10:39:38 PST 1989
%    Subject: Positions at The MathWorks
%   
%    The MathWorks is the company which develops and markets MATLAB.
%    The company currently employs about 30 people and expects to
%    add three or four more soon. The company headquarters is in
%    East Natick, Massachusetts, which is about a half hour drive
%    west of Boston.
%   
%    The background and interests expected for the various positions
%    available range from numerical linear algebra and matrix computation
%    to systems programming and graphics. Educational level and
%    experience expected range from inexperienced beginner willing
%    to learn to seasoned Ph.D. with a personal library of M-files.
%
%    For more information, send email to na.moler@na-net.stanford.edu
%    or phone me at 408-732-0400. Or, contact the MathWorks&apos; president,
%    John Little, with email to jnl@mathworks.com, phone 508-653-1415,
%    or write to:
%
%    The MathWorks
%    21 Eliot Street
%    South Natick, MA 01760
%
% *November 26, 1989*
%
% Shortly after that announcement, 
% &lt;https://en.wikipedia.org/wiki/Stardent_Inc. Ardent imploded&gt;
% and I said that I was taking the job myself.
%
%    From: Cleve Moler &lt;moler@mathworks.com&gt;
%    Date: Sun Nov 26 09:16:32 PST 1989
%    Subject: Change of Address for Moler
%    
%    A couple of weeks ago, I made an announcement here that
%    The MathWorks, the MATLAB company, was looking to fill several
%    positions, including one for a numerical analyst. Now, I&apos;ve
%    decided to take that slot myself. I&apos;m one of the founders of
%    MathWorks, and have always been a consultant to the company, but
%    now I&apos;ll be a full time employee. For a while at least, I&apos;ll    
%    be working out of my home in California, even though MathWorks
%    headquarters is in Massachusetts. (There are already a couple
%    of other MathWorks developers in the Bay Area.)
%    . . .
%    My electronic address is &quot;moler@mathworks.com&quot;. If your mailer
%    can&apos;t find the route via uunet to mathworks.com, you can still
%    use &quot;na.moler@na-net.stanford.edu&quot;.
%
% *November 16, 2007*
%
% In November 2007 I was attending the Super Computing conference in
% Reno.  I had rented a car and intended to drive to the Bay Area
% after the conference.  But my wife called me and said,
% &quot;Hey Cleve, have you heard that Gene is in the hospital?&quot;
% I left SC immediately and drove to Palo Alto.  Two days later
% we sent out a special issue of the Digest:
%
%    From: Cleve Moler &lt;Cleve.Moler@mathworks.com&gt;
%    Date: Fri, 16 Nov 2007 17:55:42 -0500
%    Subject: Gene Golub, 1932 - 2007
%    
%    Gene Golub, founder of the NA Digest, passed away today, Friday, November 16,
%    at the Stanford University Hospital. He was 75 years old.
%    
%    Gene returned home to Stanford recently from a trip to Hong Kong. He was
%    planning to leave again Tuesday on another trip, this one to Zurich where the
%    ETH was to honor him with a special degree. Instead, Sunday night he went to
%    the emergency room because he was &quot;feeling lousy&quot;. On Tuesday, he was found
%    to have AML, acute myelogenous leukemia, a form of cancer that affects the
%    white blood cells. This is a potentially curable disease and he was expecting
%    to begin chemotherapy today. But serious complications developed suddenly
%    over night.
%    
%    I was able to see Gene for an hour last night and he was in reasonably good
%    spirits. Mike Saunders was trying to get Gene&apos;s laptop to use dial-up over
%    the hospital&apos;s phone system because Gene said he was a couple of days behind
%    on his email. I was planning to get a wireless card for his machine today.
%    None of us had any idea how suddenly the situation would worsen.
%    
%    The Stanford ICME students have created a memorial blog at
%    http://genehgolub.blogspot.com .
%    
%    Our community has lost its foremost member. He was a valued colleague and
%    friend. Goodbye, Gene.
%    
%    REPLACE_WITH_DASH_DASH Cleve Moler

%% Thanks
%
% * Gene Golub and Mark Kent for creating NA-Digest and NA-Net.
% * Tammy Kolda and Danny Dunlavy for editing the Digest for two decades.
% * Jack Dongarra, Eric Grosse, Keith Moore and Geri Ragghianti for
% creating Netlib and for hosting the system for four decades.
% * David Bindel and Alex Townsend for joining this team.

%% References
%
% Jack Dongarra, Gene Golub, Eric Grosse, Cleve Moler and Keith Moore.
% &quot;Netlib and NA-Net: Building a Scientific Computing Community&quot;,
% &lt;https://ieeexplore.ieee.org/document/4544554
% _IEEE Annals of the History of Computing_&gt;,
% (Volume: 30, Issue: 2, April-June 2008).
% &lt;https://blogs.mathworks.com/cleve/files/icl-utk-351-2008.pdf
% A PDF is available here&gt;.
%
% Mark Kent,
% &lt;https://www.research-collection.ethz.ch/handle/20.500.11850/68968
% The Numerical Analysis Net (NA-NET)&gt;, Technical Report 85, ETH
% Zurich, Institut fuer Informatik, 1988.

##### SOURCE END ##### ad3526f9a6bc4fedb6f2b87f8bc0de10
--&gt;
</content>
 </entry>
 
 <entry>
   <title>A Treacherous SVD</title>
   <link href="https://hpc.social/2024/a-treacherous-svd/"/>
   <updated>2024-07-15T15:39:04-06:00</updated>
   <id>https://hpc.social/2024/a-treacherous-svd</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;A few days ago, a bug report from our office in Cambridge caught my attention. Computing the singular values and singular vectors of a particular matrix would sometimes cause MATLAB to crash.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#687983f8-4f5c-4ab6-8c9a-670d933db516&quot;&gt;Two Computers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#bb7d2817-a6f9-4636-b9a4-ec93834d3c2f&quot;&gt;Math Libraries&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b76d6ed5-ea1c-4dc5-876b-9e32dd95c51e&quot;&gt;G3366394&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#66e487ba-0c85-4c88-a56d-87408f340dd4&quot;&gt;Rank&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0848e46c-23e0-40b5-9f63-5d781d53d2d0&quot;&gt;Zero rows&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b08e8c96-055a-4909-8778-d590028d1cb3&quot;&gt;Fuzz&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f72bffb3-25d4-4136-a01c-35ce3294dcc5&quot;&gt;Flip&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0a7fccdf-a476-4cd7-b66e-e52d0349aa3b&quot;&gt;Now what?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Two Computers&lt;a name=&quot;687983f8-4f5c-4ab6-8c9a-670d933db516&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I use two different two computers regularly. The machine in my home office is a Lenovo ThinkPad&amp;reg; model T14, loaded with two external monitors, several external disc drives, a sound bar and a dedicated internet connection. My traveling machine is a Lenovo ThinkPad X1 Nano with no external hardware.&lt;/p&gt;

&lt;p&gt;The report of a crash in the SVD became even more interesting when I found that it happens on my office computer, but not on the portable. A quick check revealed that the CPUs on the two machines come from different manufacturers. The office computer uses an AMD&amp;reg; Ryzen Pro 5 while the traveling machine uses an Intel&amp;reg; Core i7.&lt;/p&gt;

&lt;h4&gt;Math Libraries&lt;a name=&quot;bb7d2817-a6f9-4636-b9a4-ec93834d3c2f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The crash occurs several software layers deep in &lt;a href=&quot;https://netlib.org/lapack/explore-3.3.0-html/d5/d1f/cgesvd_8f_source.html&quot;&gt;CGESVD&lt;/a&gt;, the LAPACK driver for single precision complex SVD. Various chip manufacturers provide math libraries that have been optimized for their CPUs. However, by default, MATLAB uses the reportedly faster Intel Math Kernel Library, MKL. It is possible to switch to other math libraries.&lt;/p&gt;

&lt;p&gt;We have experts at MathWorks who know far more about the details of these libraries than I do. They will soon sort this all out. In the meantime, here is what I have learned about the offending matrix.&lt;/p&gt;

&lt;h4&gt;G3366394&lt;a name=&quot;b76d6ed5-ea1c-4dc5-876b-9e32dd95c51e&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;We refer to the matrix in the crash report by its case number in our bug tracking system. The matrix is of modest size but is otherwise unusual for several reasons. It is rectangular with fewer rows than columns, it is in single precision, and it is complex.&lt;/p&gt;

&lt;pre&gt;  clear
  load g3366394 X
  whos&lt;/pre&gt;
&lt;pre&gt;  Name        Size              Bytes  Class     Attributes
  X         219x384            672768  single    complex&lt;/pre&gt;
&lt;p&gt;The following code calling SVD with three outputs will crash MATLAB on my T14, but not on my X1.&lt;/p&gt;

&lt;pre&gt;  trysvd = false
  if trysvd
      [U,S,V] = svd(X);
      R = U*S*V&apos; - X;
      relres = norm(R)/norm(X)
  end&lt;/pre&gt;
&lt;pre&gt;  trysvd =
    logical
      0&lt;/pre&gt;
&lt;h4&gt;Rank&lt;a name=&quot;66e487ba-0c85-4c88-a56d-87408f340dd4&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Computing the singular values without the vectors can be done on either machine. The following code uses double precision and then plots the singular values on a logarithmic scale with a line at single precision roundoff level.&lt;/p&gt;

&lt;pre&gt;  S = svd(X);
  semilogy(S,&apos;.-&apos;)
  ep = eps(&apos;single&apos;);
  line([0 230],[ep ep])
  axis([0 230 1e-15 10])
  legend({&apos;singular values&apos;,&apos;eps(&apos;&apos;single&apos;&apos;)&apos;})&lt;/pre&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/semilogy.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;We see that the matrix is far from full rank. About half of its singular values are negligible. This is confirmed by&lt;/p&gt;

&lt;pre&gt;   xrank = rank(X)&lt;/pre&gt;
&lt;pre&gt;   xrank =
      110&lt;/pre&gt;
&lt;h4&gt;Zero rows&lt;a name=&quot;0848e46c-23e0-40b5-9f63-5d781d53d2d0&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The cause of the low rank is easy to find. This surf plot reveals that almost half of the rows are flat zero.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/full.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;Let&apos;s remove the zero rows.&lt;/p&gt;

&lt;pre&gt;  c = sum(abs(X),2)==0;
  nnzc = nnz(c)
  X(c&amp;gt;0,:) = [];&lt;/pre&gt;
&lt;pre&gt;  nnzc =
     109&lt;/pre&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/reduced.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;The remaining matrix is full rank and it is safe to compute its singular vectors.&lt;/p&gt;

&lt;pre&gt;  [U,S,V] = svd(X);
  R = U*S*V&apos; - X;
  resnorm = norm(R)&lt;/pre&gt;
&lt;pre&gt;  resnorm =
     2.8191e-06&lt;/pre&gt;
&lt;h4&gt;Fuzz&lt;a name=&quot;b08e8c96-055a-4909-8778-d590028d1cb3&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Removing the zero rows was the first work-around that I tried. There are many others. You can replace the zeros with any nonzero &quot;fuzz&quot;.&lt;/p&gt;

&lt;pre&gt;  fuzz = 1.e-20;
  [U,S,V] = svd(X + fuzz*randn(size(X)));&lt;/pre&gt;
&lt;pre&gt;  resnorm = norm(U*S*V&apos;-X)&lt;/pre&gt;
&lt;pre&gt;  resnorm =
     2.8222e-06&lt;/pre&gt;
&lt;h4&gt;Flip&lt;a name=&quot;f72bffb3-25d4-4136-a01c-35ce3294dcc5&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;You can reorder the matrix so that the zero rows are not at the beginning.&lt;/p&gt;

&lt;pre&gt;  [U,S,V] = svd(flipud(X));
  U = flipud(U);&lt;/pre&gt;
&lt;pre&gt;  resnorm = norm(U*S*V&apos;-X)&lt;/pre&gt;
&lt;pre&gt;  resnorm =
     2.3809e-06&lt;/pre&gt;
&lt;h4&gt;Now what?&lt;a name=&quot;0a7fccdf-a476-4cd7-b66e-e52d0349aa3b&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;How to avoid the crash is not the most important question. What causes the crash with the original matrix? We will find out and get it fixed.&lt;/p&gt;

&lt;!-- 
    function grabCode_e32dbb50b2604a45be30742645bd3bea() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;e32dbb50b2604a45be30742645bd3bea &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; e32dbb50b2604a45be30742645bd3bea&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
e32dbb50b2604a45be30742645bd3bea ##### SOURCE BEGIN #####
%% A Treacherous SVD 
% A few days ago, a bug report from our office in Cambridge
% caught my attention.  Computing the singular values and singular
% vectors of a particular matrix would sometimes cause MATLAB to crash. 

%% Two Computers
% I use two different two computers regularly.
% The machine in my home office is a Lenovo ThinkPad(R)
% model T14, loaded with two external monitors, several external
% disc drives, a sound bar and a dedicated internet connection.
% My traveling machine is a Lenovo ThinkPad X1 Nano with no external
% hardware.
%
% The report of a crash in the SVD became even more interesting when
% I found that it happens on my office computer, but not on the portable.
% A quick check revealed that the CPUs on the two machines come from 
% different manufacturers.
% The office computer uses an AMD(R) Ryzen Pro 5
% while the traveling machine uses an Intel(R) Core i7.
%

%% Math Libraries
% The crash occurs several software layers deep in
% &lt;https://netlib.org/lapack/explore-3.3.0-html/d5/d1f/cgesvd_8f_source.html
% CGESVD&gt;, the LAPACK driver for single precision complex SVD.
% Various chip manufacturers provide math libraries that have been
% optimized for their CPUs. However, by default, MATLAB uses 
% the reportedly faster Intel Math Kernel Library, MKL.
% It is possible to switch to other  math libraries.
%
% We have experts at MathWorks who know far more about the details
% of these libraries than I do.  They will soon sort this all out.
% In the meantime, here is what I have learned about the offending
% matrix.

%% G3366394
% We refer to the matrix in the crash report by its case
% number in our bug tracking system.
% The matrix is of modest size but
% is otherwise unusual for several reasons.
% It is rectangular with fewer rows than columns,
% it is in single precision, and it is complex.
%
%    clear
%    load g3366394 X
%    whos
%
%    Name        Size              Bytes  Class     Attributes
%    X         219x384            672768  single    complex   


%%
% The following code calling SVD with three outputs
% will crash MATLAB on  my T14, but not on my X1.
%
%    trysvd = false
%    if trysvd
%        [U,S,V] = svd(X);
%        R = U*S*V&apos; - X;
%        relres = norm(R)/norm(X)
%    end
%
%    trysvd =
%      logical
%        0

%% Rank
% Computing the singular values without the vectors can be done
% on either machine.  The following code uses double precision and
% then plots the singular values on a logarithmic scale with a
% line at single precision roundoff level.
%
%    S = svd(X);
%    semilogy(S,&apos;.-&apos;)
%    ep = eps(&apos;single&apos;);
%    line([0 230],[ep ep])
%    axis([0 230 1e-15 10])
%    legend({&apos;singular values&apos;,&apos;eps(&apos;&apos;single&apos;&apos;)&apos;})
%
% &lt;&lt;semilogy.png&gt;&gt;
 
%%
% We see that the matrix is far from full rank.
% About half of its singular values are negligible.
% This is confirmed by
%
%     xrank = rank(X)
%
%     xrank =
%        110

%%  Zero rows
% The cause of the low rank is easy to find.  
% This surf plot reveals that almost half of the rows are flat zero.
%
% &lt;&lt;full.png&gt;&gt;
%

%% 
% Let&apos;s remove the zero rows.
%
%    c = sum(abs(X),2)==0;
%    nnzc = nnz(c)
%    X(c&gt;0,:) = [];
%
%    nnzc =
%       109

%%
% &lt;&lt;reduced.png&gt;&gt;
%

%%
% The remaining matrix is full rank and it is safe to compute its
% singular vectors.
%
%    [U,S,V] = svd(X);
%    R = U*S*V&apos; - X;
%    resnorm = norm(R)
%
%    resnorm =
%       2.8191e-06

%% Fuzz
% Removing the zero rows was the first work-around that I tried.
% There are many others.  You can replace the zeros with any
% nonzero &quot;fuzz&quot;.
%
%    fuzz = 1.e-20;
%    [U,S,V] = svd(X + fuzz*randn(size(X)));
%
%    resnorm = norm(U*S*V&apos;-X)
%
%    resnorm =
%       2.8222e-06

%% Flip
% You can reorder the matrix so that the zero rows are not at the
% beginning.
%
%    [U,S,V] = svd(flipud(X));
%    U = flipud(U);
%
%    resnorm = norm(U*S*V&apos;-X)
%
%    resnorm =
%       2.3809e-06

%% Now what?
% How to avoid the crash is not the most important question.
% What causes the crash with the original matrix?
% We will find out and get it fixed.


##### SOURCE END ##### e32dbb50b2604a45be30742645bd3bea
--&gt;
</content>
 </entry>
 
 <entry>
   <title>SuperSum, In Defense of Floating Point Arithmetic</title>
   <link href="https://hpc.social/2024/supersum-in-defense-of-floating-point-arithmetic/"/>
   <updated>2024-06-27T17:54:38-06:00</updated>
   <id>https://hpc.social/2024/supersum-in-defense-of-floating-point-arithmetic</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;Floating point arithmetic doesn&apos;t get the respect it deserves. Many people consider it mysterious, fuzzy, unpredictable. These misgivings often occur in discussion of vector sums. Our provocatively named &lt;i&gt;SuperSum&lt;/i&gt; is intended to calm these fears.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6cc58603-9b70-4a29-bc08-fae5fe3d5db0&quot;&gt;Ledgers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#cc3635b6-5a76-4420-baeb-94c5b36a6573&quot;&gt;Checksums&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#71f16826-8ff1-4a14-bc85-146da594d56f&quot;&gt;Order&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5356ff4e-b231-4d40-9404-17b0d0d882af&quot;&gt;Speed&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#52953716-f4f9-4698-9680-8a5d38254f1e&quot;&gt;Three Sums&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f8a4c9a1-edd5-4ac3-9dca-bc7306b7de0f&quot;&gt;Toy Example&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8acba015-e19b-413e-8817-1e093e31ee2d&quot;&gt;Second Test&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e0e62ed1-a352-49ea-ac59-31107304d71e&quot;&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Ledgers&lt;a name=&quot;6cc58603-9b70-4a29-bc08-fae5fe3d5db0&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A &lt;i&gt;ledger&lt;/i&gt; is a list of transactions in an account. &lt;i&gt;Auditing&lt;/i&gt; the ledger involves comparing the total of the items with the change in the account balance.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;v&lt;/i&gt; is a vector of transaction amounts, then we need to compute&lt;/p&gt;

&lt;pre&gt;sum(v)&lt;/pre&gt;
&lt;p&gt;If this sum is equal to the change in the balance, then it is reasonable to assume that the ledger is correct. If not, the ledger must be examined line-by-line.&lt;/p&gt;

&lt;h4&gt;Checksums&lt;a name=&quot;cc3635b6-5a76-4420-baeb-94c5b36a6573&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Have you ever used a checksum for a file transfer? One checksum is computed before the file is sent. After the file has been sent over a questionable channel, a second checksum is computed on the receiving end. If the two checksums agree, the transmission was probably okay. If not, the file must be sent again.&lt;/p&gt;

&lt;h4&gt;Order&lt;a name=&quot;71f16826-8ff1-4a14-bc85-146da594d56f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Floating point addition is not &lt;i&gt;associative&lt;/i&gt;. This means&lt;/p&gt;

&lt;pre&gt;(a + b) + c&lt;/pre&gt;
&lt;p&gt;is not necessarily the same as&lt;/p&gt;

&lt;pre class=&quot;language-matlab&quot;&gt;a+(b+c).
&lt;/pre&gt;
&lt;p&gt;So the &lt;i&gt;order&lt;/i&gt; of doing a computation is important.&lt;/p&gt;

&lt;p&gt;Computers are deterministic devices. If the same computation is done &lt;i&gt;in the same order&lt;/i&gt; more than once, the results must be the same. If you get different sums from different runs on a fixed computer, then it must be because the order has been changed.&lt;/p&gt;

&lt;h4&gt;Speed&lt;a name=&quot;5356ff4e-b231-4d40-9404-17b0d0d882af&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;In recent years, we have made the built-in function &lt;tt&gt;sum(x)&lt;/tt&gt; faster by parallelizing it. The input vector is broken into several pieces, the sum of each piece is computed separately and simultaneously, then the partial sums are combined to give the final result. If the number and size of the pieces varies from run to run, the order varies and consequently the computed sums may vary.&lt;/p&gt;

&lt;h4&gt;Three Sums&lt;a name=&quot;52953716-f4f9-4698-9680-8a5d38254f1e&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Here are three replacements for &lt;tt&gt;nansum(x)&lt;/tt&gt;, the version of &lt;tt&gt;sum(x)&lt;/tt&gt; that skips over &lt;tt&gt;NaNs&lt;/tt&gt; and &lt;tt&gt;infs&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;simplesum&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;Avoid the effect of blocking in the built-in sum(x).&lt;/p&gt;

&lt;pre&gt;function s = simplesum(x)
     % simplesum.  s = simplesum(x), for vector(x).
     % Force sequential order for sum(x).
     % Skips NaNs and infs.&lt;/pre&gt;
&lt;pre&gt;     s = 0;
     for k = 1:length(x)
         if isfinite(x(k))
             s = s + x(k);
         end
     end
end&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;KahanSum&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;This is the Kahan summation algorithm. The sum is accumulated in two words, the more significant &lt;tt&gt;s&lt;/tt&gt; and the correction &lt;tt&gt;c&lt;/tt&gt;. If you were able to form &lt;tt&gt;s + c&lt;/tt&gt; exactly, it would be more accurate than &lt;tt&gt;s&lt;/tt&gt; alone.&lt;/p&gt;

&lt;pre&gt;function s = KahanSum(x)
     % KahanSum.  s = KahanSum(x), for vector(x).
     % More accurate, but slower, than sum(x).
     % Skips NaNs and infs.
     % https://en.wikipedia.org/wiki/Kahan_summation_algorithm.&lt;/pre&gt;
&lt;pre&gt;     s = 0;  % sum
     c = 0;  % correction
     for k = 1:length(x)
         if isfinite(x(k))
             y = x(k) - c;
             t = s + y;
             c = (t - s) - y;
             s = t;
         end
     end
end&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;SuperSum&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;I gave it a pretentious name to grab attention. Use extended precision, with enough digits to hold any MATLAB double.&lt;/p&gt;

&lt;pre&gt;function s = SuperSum(x)
     % SuperSum.  s = SuperSum(x), for vector(x).
     % Symbolic Math Toolbox extended precision.
     % Skips NaNs and infs.
     %
     % 632 decimal digits holds every IEEE-754 double.
     % 632 = ceil(log10(realmax) - log10(eps*realmin));
     %
     din = digits(632);  % Remember current setting
     s = double(sum(sym(x(isfinite(x)),&apos;D&apos;)));
     digits(din)         % Restore
end&lt;/pre&gt;
&lt;h4&gt;Toy Example&lt;a name=&quot;f8a4c9a1-edd5-4ac3-9dca-bc7306b7de0f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;A test case here at MathWorks, known by a French-Canadian name that translates to &quot;toy example&quot;, has a vector &lt;tt&gt;e2&lt;/tt&gt; of length 4243 and values that range from -3.3e7 to 6.8e9.&lt;/p&gt;

&lt;p&gt;When running tests involving floating point numbers it is a good idea to set the output format to &lt;tt&gt;hex&lt;/tt&gt; so we can see every last bit.&lt;/p&gt;

&lt;pre&gt;format hex
load jeuTest e2
x = e2;&lt;/pre&gt;
&lt;pre&gt;[nansum(x)
 simplesum(x)
 KahanSum(x)
 SuperSum(x)]&lt;/pre&gt;
&lt;pre&gt;ans =
   423785e8206150e2
   423785e8206150e0
   423785e8206150e1
   423785e8206150e1&lt;/pre&gt;
&lt;p&gt;For &lt;tt&gt;jeuTest&lt;/tt&gt;, Kahan summation gets the same result as &lt;tt&gt;SuperSum&lt;/tt&gt;, while &lt;tt&gt;nansum&lt;/tt&gt; and &lt;tt&gt;simplesum&lt;/tt&gt; differ in the last bit or two.&lt;/p&gt;

&lt;h4&gt;Second Test&lt;a name=&quot;8acba015-e19b-413e-8817-1e093e31ee2d&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The vector length is only three, but the third term completely cancels the first, and the second term rises from obscurity. In this situation, &lt;tt&gt;KahanSum&lt;/tt&gt; is no more accurate than &lt;tt&gt;sum&lt;/tt&gt;.&lt;/p&gt;

&lt;pre&gt;format hex
x = [1 1e-14 -1]&apos;&lt;/pre&gt;
&lt;pre&gt;[nansum(x)
 simplesum(x)
 KahanSum(x)
 SuperSum(x)]&lt;/pre&gt;
&lt;pre&gt;x =
   3ff0000000000000
   3d06849b86a12b9b
   bff0000000000000&lt;/pre&gt;
&lt;pre&gt;ans =
   3d06800000000000
   3d06800000000000
   3d06800000000000
   3d06849b86a12b9b&lt;/pre&gt;
&lt;h4&gt;Conclusion&lt;a name=&quot;e0e62ed1-a352-49ea-ac59-31107304d71e&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I will leave careful timing for another day. Let&apos;s just say that in situations like &lt;tt&gt;jeuTest&lt;/tt&gt;, &lt;tt&gt;KahanSum&lt;/tt&gt; is probably all you need. It is usually more accurate than &lt;tt&gt;sum&lt;/tt&gt;, and not much slower.&lt;/p&gt;

&lt;p&gt;However, for complete reliability, use &lt;tt&gt;SuperSum&lt;/tt&gt;. There is no substitute for the right answer.&lt;/p&gt;

&lt;!-- 
    function grabCode_7bd084f1e3e84c86b0c419e2b2dcd8b5() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;7bd084f1e3e84c86b0c419e2b2dcd8b5 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 7bd084f1e3e84c86b0c419e2b2dcd8b5&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
7bd084f1e3e84c86b0c419e2b2dcd8b5 ##### SOURCE BEGIN #####
%% SuperSum, In Defense of Floating Point Arithmetic
% Floating point arithmetic doesn&apos;t get the respect it deserves.
% Many people consider it mysterious, fuzzy, unpredictable.
% These misgivings often occur in
% discussion of vector sums.  Our provocatively named
% _SuperSum_ is intended to calm these fears.

%% Ledgers
% A _ledger_ is a list of transactions in an account.
% _Auditing_ the ledger involves comparing the total of 
% the items with the change in the account balance.
%
% If _v_ is a vector of transaction amounts, then we
% need to compute
%
%  sum(v)
% 
% If this sum is equal to the change in the balance, then it is
% reasonable to assume that the ledger is correct.
% If not, the ledger must be examined line-by-line.
%
%% Checksums
% Have you ever used a checksum for a file transfer?
% One checksum is computed before the file is sent.  After the file
% has been sent over a questionable channel, a second checksum is 
% computed on the receiving end.  If the two checksums agree,
% the transmission was probably okay.  If not, the file must be
% sent again.

%% Order
% Floating point addition is not _associative_.  This means
%
%  (a + b) + c
%
% is not necessarily the same as
%
%   a + (b + c).
%
% So the _order_ of doing a computation is important.
%
% Computers are deterministic devices.  If the same
% computation is done _in the same order_ more than once,
% the results must be the same.
% If you get different sums from different runs on a fixed
% computer, then it must be because the order has been 
% changed.

%% Speed
% In recent years, we have made the built-in function |sum(x)|
% faster by parallelizing it.  The input vector is broken into
% several pieces, the sum of each piece is computed separately
% and simultaneously, then the partial sums are combined to give
% the final result.  If the number and size of the pieces varies
% from run to run, the order varies and consequently the computed
% sums may vary.

%% Three Sums
% Here are three replacements for |nansum(x)|,
% the version of |sum(x)| that skips over |NaNs| and |infs|.
%
% *simplesum*
%
% Avoid the effect of blocking in the built-in sum(x).
%
%  function s = simplesum(x)
%       % simplesum.  s = simplesum(x), for vector(x).
%       % Force sequential order for sum(x).
%       % Skips NaNs and infs.
%
%       s = 0;
%       for k = 1:length(x)
%           if isfinite(x(k))
%               s = s + x(k);
%           end
%       end
%  end
%
% *KahanSum*
%
% This is the Kahan summation algorithm.
% The sum is accumulated in two words, the more significant
% |s| and the correction |c|.
% If you were able to form |s + c| exactly, it would be more
% accurate than |s| alone.
%
%  function s = KahanSum(x)
%       % KahanSum.  s = KahanSum(x), for vector(x).
%       % More accurate, but slower, than sum(x).
%       % Skips NaNs and infs.
%       % https://en.wikipedia.org/wiki/Kahan_summation_algorithm.
%   
%       s = 0;  % sum
%       c = 0;  % correction
%       for k = 1:length(x)
%           if isfinite(x(k))
%               y = x(k) - c;
%               t = s + y;
%               c = (t - s) - y;
%               s = t;
%           end
%       end
%  end
%
% *SuperSum*
%
% I gave it a pretentious name to grab attention.
% Use extended precision, with enough digits to hold any MATLAB double.
%
%  function s = SuperSum(x) 
%       % SuperSum.  s = SuperSum(x), for vector(x).
%       % Symbolic Math Toolbox extended precision.
%       % Skips NaNs and infs.
%       %
%       % 632 decimal digits holds every IEEE-754 double.
%       % 632 = ceil(log10(realmax) - log10(eps*realmin));
%       %
%       din = digits(632);  % Remember current setting
%       s = double(sum(sym(x(isfinite(x)),&apos;D&apos;)));
%       digits(din)         % Restore
%  end

%% Toy Example
% A test case here at MathWorks, known by a French-Canadian name that
% translates to &quot;toy example&quot;, has a vector |e2|
% of length 4243 and values that range from -3.3e7 to 6.8e9.
%
% When running tests involving floating point numbers
% it is a good idea to set the output format to |hex|
% so we can see every last bit.
%
%  format hex
%  load jeuTest e2
%  x = e2;
%
%  [nansum(x)
%   simplesum(x)
%   KahanSum(x)
%   SuperSum(x)]
%
%  ans =
%     423785e8206150e2
%     423785e8206150e0
%     423785e8206150e1
%     423785e8206150e1
%
% For |jeuTest|,  Kahan summation gets the same result as |SuperSum|,
% while |nansum| and |simplesum| differ in the last bit or two.
%

%% Second Test
% The vector length is only three, but the third term completely
% cancels the first, and the second term rises from obscurity.
% In this situation, |KahanSum| is no more accurate than |sum|.
% 
%  format hex
%  x = [1 1e-14 -1]&apos;
%
%  [nansum(x)
%   simplesum(x)
%   KahanSum(x)
%   SuperSum(x)]
%
%  x =
%     3ff0000000000000
%     3d06849b86a12b9b
%     bff0000000000000
%
%  ans =
%     3d06800000000000
%     3d06800000000000
%     3d06800000000000
%     3d06849b86a12b9b

%% Conclusion
% I will leave careful timing for another day.  Let&apos;s just say that  
% in situations like |jeuTest|, |KahanSum| is probably all you need.
% It is usually more accurate than |sum|, and not much slower.
%
% However, for complete reliability, use |SuperSum|.  There is no
% substitute for the right answer.
##### SOURCE END ##### 7bd084f1e3e84c86b0c419e2b2dcd8b5
--&gt;
</content>
 </entry>
 
 <entry>
   <title>IBM Hexadecimal Floating Point</title>
   <link href="https://hpc.social/2024/ibm-hexadecimal-floating-point/"/>
   <updated>2024-05-25T15:51:21-06:00</updated>
   <id>https://hpc.social/2024/ibm-hexadecimal-floating-point</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;Our technical support group recently received a request for a tool that would convert IBM System/360 hexadecimal floating point numbers to the IEEE-754 format. I am probably the only one left at MathWorks that actually used IBM mainframe computers. I thought we had seen the last of hexadecimal arithmetic years ago. But, it turns out that the hexadecimal floating point format is alive and well.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#927291b6-bb83-4c85-937c-8f20844b3c74&quot;&gt;IBM System/360&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#43cbbb43-f2f5-4415-99df-f6a6c114c912&quot;&gt;Formats&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5d482994-2d0d-42fa-86e2-c98bc728ebbe&quot;&gt;Data&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#099df223-ed1e-405e-917f-0cccd1d54a26&quot;&gt;&lt;tt&gt;Hex_ieee&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#126c1d80-75f5-4879-841f-de925f083fc1&quot;&gt;&lt;tt&gt;ieee2ibm&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#88d3bc9c-b626-4578-872e-b95f02057e43&quot;&gt;&lt;tt&gt;ibm2ieee&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#64f8c2ec-011c-40a2-a2f3-a2926ee929ac&quot;&gt;Examples&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#41ed0fce-64bf-4471-b2c3-e22645d184f5&quot;&gt;Comparison&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9e4ce83f-58b7-498d-b480-9f17c5c1f6e0&quot;&gt;Software&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;IBM System/360&lt;a name=&quot;927291b6-bb83-4c85-937c-8f20844b3c74&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The System/360 is a family of mainframe computers that IBM introduced in 1965 and that dominated the computer industry until PCs came along twenty years later. They range in size from desk-sized to systems that fill a large room.&lt;/p&gt;

&lt;p&gt;Here is a photo of a mid-sized model.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/ibm-360-60.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;
&lt;i&gt;System/360, Model 60.&lt;/i&gt; &lt;i&gt;Photo from Ken Shirrif&apos;s blog, IBM 360/System Summary&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;The System/360 architecture is byte-oriented, so it can handle business data processing as well as scientific and engineering computation. This leads to base-16, rather than base-2 or base-10, floating point arithmetic.&lt;/p&gt;

&lt;pre&gt;* Binary      f*2^e    1/2&amp;lt;=f&amp;lt;1
* Decimal     f*10^e   1/10&amp;lt;=f&amp;lt;1
* Hexadecimal f*16^e   1/16&amp;lt;=f&amp;lt;1&lt;/pre&gt;
&lt;h4&gt;Formats&lt;a name=&quot;43cbbb43-f2f5-4415-99df-f6a6c114c912&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Floating point formats played an important role in technical computing in the early days. This table from &lt;a href=&quot;https://www.amazon.com/exec/obidos/ASIN/0131653326/acmorg-20&quot;&gt;FMM&lt;/a&gt; lists formats that were in use in the 1970s, before IEEE-754 was introduced in 1985.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/fmm2.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Data&lt;a name=&quot;5d482994-2d0d-42fa-86e2-c98bc728ebbe&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The System/360 hexadecimal format is used in many industries for the preservation of data files.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://www.crewes.org/ResearchLinks/FreeSoftware&quot;&gt;CREWES&lt;/a&gt;. Teaching exploration seismology. Comprehensive MATLAB toolbox for use with the textbook &quot;Numerical Methods of Exploration Seismology with algorithms in Matlab&quot; by Gary F. Margrave, a geoscience professor at the University of Calgary.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://www.loc.gov/preservation/digital/formats/fdd/fdd000464.shtml&quot;&gt;Library of Congress&lt;/a&gt;. Government.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://nssdc.gsfc.nasa.gov/nssdc/formats/IBM_32-Bit.html&quot;&gt;NASA&lt;/a&gt;. Astronautics.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://support.sas.com/content/dam/SAS/support/en/technical-papers/record-layout-of-a-sas-version-5-or-6-data-set-in-sas-transport-xport-format.pdf&quot;&gt;SAS&lt;/a&gt;. Statistics and business analytics. SAS wrapers for C.&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/enthought/ibm2ieee&quot;&gt;Enthought&lt;/a&gt;. Python wrappers for C.&lt;/p&gt;

&lt;h4&gt;
&lt;tt&gt;Hex_ieee&lt;/tt&gt;&lt;a name=&quot;099df223-ed1e-405e-917f-0cccd1d54a26&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt; &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Hex_ieee.m&quot;&gt;&lt;tt&gt;Hex_ieee&lt;/tt&gt;&lt;/a&gt;. I have two twenty-line MATLAB functions, &lt;tt&gt;ieee2ibm&lt;/tt&gt; and &lt;tt&gt;ibm2ieee&lt;/tt&gt;, that convert IEEE-754 floating point to and from IBM hexadecimal format.&lt;/p&gt;

&lt;p&gt;Three statements in the middle of &lt;tt&gt;ieee2ibm&lt;/tt&gt; are the key to the entire operation. The first statement is&lt;/p&gt;

&lt;pre&gt;    [~,e] = log2(x)&lt;/pre&gt;
&lt;p&gt;With two output arguments, &lt;tt&gt;log2&lt;/tt&gt; returns the mantissa and exponent of an IEEE-754 floating point number. The mantissa is not needed here.&lt;/p&gt;

&lt;p&gt;The second key statement&lt;/p&gt;

&lt;pre&gt;    e = ceil(e/4)&lt;/pre&gt;
&lt;p&gt;makes &lt;tt&gt;e&lt;/tt&gt; divisible by 4. This turns &lt;tt&gt;e&lt;/tt&gt; into the appropriate hexadecimal exponent so that the third statement&lt;/p&gt;

&lt;pre&gt;    f = x.*16.^(-e)&lt;/pre&gt;
&lt;p&gt;can produce the hexadecimal mantissa.&lt;/p&gt;

&lt;h4&gt;
&lt;tt&gt;ieee2ibm&lt;/tt&gt;&lt;a name=&quot;126c1d80-75f5-4879-841f-de925f083fc1&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;pre&gt;function z = ieee2ibm(x)
   Convert IEEE-754 to IBM System 360 hexadecimal.
   z = ieee2ibm(x)
      Input x, real column vector.
      Output z, length(x)-by-16 char.
   Example: ieee2ibm(-118.625) = &apos;C276A00000000000&apos;.&lt;/pre&gt;
&lt;pre&gt;      s = sign(x);                      % -1, 0, or 1
      x = abs(x);
      x(x &amp;lt; 16^(-65)) = 0;              % Underflow
      x(x &amp;gt;= 16^63) = (1-eps/2)*16^63;  % Overflow&lt;/pre&gt;
&lt;pre&gt;      [~,e] = log2(x);                  % base 2 exponent
      e = ceil(e/4)                     % base 16 exponent
      f = x.*16.^(-e);                  % base 16 mantissa&lt;/pre&gt;
&lt;pre&gt;      E = uint64((e+64)*2^56);          % Assemb1e output
      F = uint64(f*2^56);
      S = uint64((1-s)*2^62);           % 1 or 0
      z = dec2hex(S + E + F);           % z = &apos;ZZFFFFFFFFFFFFFF&apos;
end&lt;/pre&gt;
&lt;h4&gt;
&lt;tt&gt;ibm2ieee&lt;/tt&gt;&lt;a name=&quot;88d3bc9c-b626-4578-872e-b95f02057e43&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;pre&gt;function x = ibm2ieee(z)
   Convert IBM System 360 hexadecimal to IEEE-754.
   x = ibm2ieee(z)
      Input z, n-by-16 char.
      Output x, n-by-1 double.
   Example: ibm2ieee(&apos;C276A00000000000&apos;) = -118.625.&lt;/pre&gt;
&lt;pre&gt;      E = hex2dec(z(:,1:2));           % Disassemble input
      F1 = hex2dec(z(:,3:8));          % &amp;lt; 16^6
      F2 = hex2dec(z(:,9:end));        % &amp;lt; 16^8
      s = sign(128-E);                 % -1 or 1&lt;/pre&gt;
&lt;pre&gt;      e = E-(s&amp;gt;0)*64-(s&amp;lt;0)*192;        % base 16 exponent
      f = F1/16^6 + F2/16^14;          % base 16 mantissa
      x = s.*f.*16.^e;
end&lt;/pre&gt;
&lt;h4&gt;Examples&lt;a name=&quot;64f8c2ec-011c-40a2-a2f3-a2926ee929ac&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Underflow. Anything &lt;tt&gt;&amp;lt; 16^(-65)&lt;/tt&gt; is too small and is flushed to zero. There are no denormals.&lt;/p&gt;

&lt;p&gt;Overflow. Anything &lt;tt&gt;&amp;gt;= 16^63&lt;/tt&gt; is too large. There is no &lt;tt&gt;inf&lt;/tt&gt; or &lt;tt&gt;NaN&lt;/tt&gt;.&lt;/p&gt;

&lt;pre&gt;* 1.0           4110000000000000
* 0.1           401999999999999A
* -pi           C13243F6A8885A30
* 5.3976e-79    0010000000000000
* 7.2370e+75    7FFFFFFFFFFFFFF8&lt;/pre&gt;
&lt;h4&gt;Comparison&lt;a name=&quot;41ed0fce-64bf-4471-b2c3-e22645d184f5&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;S/360 hexadecimal has 7 exponent bits, while IEEE-754 has 11. Consequently, hexadecimal has a much smaller range, 5.4e-79 to 7.2e+75 versus 2.2e-308 to 1.8e+308.&lt;/p&gt;

&lt;p&gt;The base-16 normalization implies that hexadecimal effectively has between 53 and 56 mantissa bits. Counting the hidden bit, IEEE-754 also has 53. So, the accuracy of the two is pretty much the same.&lt;/p&gt;

&lt;h4&gt;Software&lt;a name=&quot;9e4ce83f-58b7-498d-b480-9f17c5c1f6e0&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;My functions &lt;tt&gt;ieee2ibm&lt;/tt&gt; and &lt;tt&gt;ieee2ibm&lt;/tt&gt; described above, modified to handle both single and double, plus &lt;tt&gt;hex_test&lt;/tt&gt;, which does what its name implies, are available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Hex_ieee.m&quot;&gt;&lt;tt&gt;Hex_ieee&lt;/tt&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Homework: What happens?&lt;/p&gt;

&lt;pre&gt;ok = 0;
for k = 1:10
     x = single(k/10);
     ok(k) = hex_test(x);
end
ok&lt;/pre&gt;
&lt;!-- 
    function grabCode_54dd3908d741477c9a1ad45b553487d5() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;54dd3908d741477c9a1ad45b553487d5 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 54dd3908d741477c9a1ad45b553487d5&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
54dd3908d741477c9a1ad45b553487d5 ##### SOURCE BEGIN #####
%% IBM Hexadecimal Floating Point
% Our technical support group recently received a request
% for a tool that would convert IBM System/360 hexadecimal
% floating point numbers to the IEEE-754 format.
% I am probably the only one left at MathWorks that actually used
% IBM mainframe computers.
% I thought we had seen the last of hexadecimal arithmetic years ago.
% But, it turns out that the hexadecimal floating point format
% is alive and well.

%% IBM System/360
% The System/360 is a family of mainframe computers that IBM
% introduced in 1965 and that dominated the computer industry
% until PCs came along twenty years later.  They range in size
% from desk-sized to systems that fill a large room.
%
% Here is a photo of a mid-sized model.
%
% &lt;&lt;ibm-360-60.png&gt;&gt;
%
% _System/360, Model 60._
% _Photo from Ken Shirrif&apos;s blog, IBM 360/System Summary_.
%
% The System/360 architecture is byte-oriented, so it can
% handle business
% data processing as well as scientific and engineering computation.
% This leads to base-16, rather than base-2 or base-10,
% floating point arithmetic.
%
%  * Binary      f*2^e    1/2&lt;=f&lt;1
%  * Decimal     f*10^e   1/10&lt;=f&lt;1
%  * Hexadecimal f*16^e   1/16&lt;=f&lt;1

%% Formats
% Floating point formats played an important role in
% technical computing in the early days.
% This table from
% &lt;https://www.amazon.com/exec/obidos/ASIN/0131653326/acmorg-20
% FMM&gt; lists formats that
% were in use in the 1970s, before IEEE-754 was introduced in 1985.
%
% &lt;&lt;fmm2.png&gt;&gt;
%

%% Data
% The System/360 hexadecimal format is used in many industries for the
% preservation of data files.
%
% &lt;https://www.crewes.org/ResearchLinks/FreeSoftware CREWES&gt;.
% Teaching exploration seismology.
% Comprehensive MATLAB toolbox for use with the textbook
% &quot;Numerical Methods of Exploration Seismology with algorithms in Matlab&quot; 
% by Gary F. Margrave, a geoscience professor at the University of Calgary.
%
% &lt;https://www.loc.gov/preservation/digital/formats/fdd/fdd000464.shtml
% Library of Congress&gt;. Government.
%
% &lt;https://nssdc.gsfc.nasa.gov/nssdc/formats/IBM_32-Bit.html NASA&gt;.
% Astronautics.
%
% &lt;https://support.sas.com/content/dam/SAS/support/en/technical-papers/record-layout-of-a-sas-version-5-or-6-data-set-in-sas-transport-xport-format.pdf
% SAS&gt;.  
% Statistics and business analytics.  SAS wrapers for C.
%
% &lt;https://github.com/enthought/ibm2ieee Enthought&gt;.  Python wrappers for C. 
%

%% |Hex_ieee|
% &lt;https://blogs.mathworks.com/cleve/files/Hex_ieee.m |Hex_ieee|&gt;.
% I have two twenty-line MATLAB functions, |ieee2ibm| and |ibm2ieee|,
% that convert IEEE-754 floating point to and from IBM hexadecimal format.
%
% Three statements in the middle of |ieee2ibm| are the key to
% the entire operation. The first statement is
%
%      [~,e] = log2(x)
% 
% With two output arguments, |log2| returns the mantissa
% and exponent of an IEEE-754 floating point number.
% The mantissa is not needed here.
%
% The second key statement
%
%      e = ceil(e/4) 
%
% makes |e| divisible by 4. This turns |e| into the appropriate 
% hexadecimal exponent so that the third statement
%
%      f = x.*16.^(-e)
% 
% can produce the hexadecimal mantissa.
%   

%% |ieee2ibm|
%  function z = ieee2ibm(x)
%     Convert IEEE-754 to IBM System 360 hexadecimal.
%     z = ieee2ibm(x)
%        Input x, real column vector.
%        Output z, length(x)-by-16 char.
%     Example: ieee2ibm(-118.625) = &apos;C276A00000000000&apos;.
%
%        s = sign(x);                      % -1, 0, or 1
%        x = abs(x);
%        x(x &lt; 16^(-65)) = 0;              % Underflow
%        x(x &gt;= 16^63) = (1-eps/2)*16^63;  % Overflow
%
%        [~,e] = log2(x);                  % base 2 exponent
%        e = ceil(e/4)                     % base 16 exponent
%        f = x.*16.^(-e);                  % base 16 mantissa
%
%        E = uint64((e+64)*2^56);          % Assemb1e output
%        F = uint64(f*2^56);
%        S = uint64((1-s)*2^62);           % 1 or 0
%        z = dec2hex(S + E + F);           % z = &apos;ZZFFFFFFFFFFFFFF&apos;
% end

%% |ibm2ieee|
%  function x = ibm2ieee(z)
%     Convert IBM System 360 hexadecimal to IEEE-754.
%     x = ibm2ieee(z)
%        Input z, n-by-16 char.
%        Output x, n-by-1 double.
%     Example: ibm2ieee(&apos;C276A00000000000&apos;) = -118.625.
%
%        E = hex2dec(z(:,1:2));           % Disassemble input
%        F1 = hex2dec(z(:,3:8));          % &lt; 16^6
%        F2 = hex2dec(z(:,9:end));        % &lt; 16^8
%        s = sign(128-E);                 % -1 or 1
%
%        e = E-(s&gt;0)*64-(s&lt;0)*192;        % base 16 exponent
%        f = F1/16^6 + F2/16^14;          % base 16 mantissa
%        x = s.*f.*16.^e;
%  end

%% Examples
% Underflow.  Anything |&lt; 16^(-65)| is too small and is flushed to zero.
% There are no denormals.
%
% Overflow.  Anything |&gt;= 16^63| is too large.
% There is no |inf| or |NaN|.
%
%  * 1.0           4110000000000000
%  * 0.1           401999999999999A
%  * -pi           C13243F6A8885A30
%  * 5.3976e-79    0010000000000000
%  * 7.2370e+75    7FFFFFFFFFFFFFF8

%% Comparison
% S/360 hexadecimal has 7 exponent bits, while IEEE-754 has 11.
% Consequently, hexadecimal has a much smaller range, 5.4e-79 to 7.2e+75
% versus 2.2e-308 to 1.8e+308.
%
% The base-16 normalization implies that hexadecimal effectively has
% between 53 and 56 mantissa bits.  Counting the hidden bit,
% IEEE-754 also has 53.  So, the accuracy of the two is pretty much the
% same.

%% Software
% My functions |ieee2ibm| and |ieee2ibm| described above,
% modified to handle both single and double,
% plus |hex_test|, which does what its name implies, are available at
% &lt;https://blogs.mathworks.com/cleve/files/Hex_ieee.m |Hex_ieee|&gt;.
%
% Homework: What happens?
%
%  ok = 0;
%  for k = 1:10
%       x = single(k/10);
%       ok(k) = hex_test(x);
%  end
%  ok


##### SOURCE END ##### 54dd3908d741477c9a1ad45b553487d5
--&gt;
</content>
 </entry>
 
 <entry>
   <title>A Sixty-Year Old Program for Predicting the Future</title>
   <link href="https://hpc.social/2024/a-sixty-year-old-program-for-predicting-the-future/"/>
   <updated>2024-05-19T16:55:03-06:00</updated>
   <id>https://hpc.social/2024/a-sixty-year-old-program-for-predicting-the-future</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;The graphics in &lt;a href=&quot;https://blogs.mathworks.com/cleve/2024/05/04/r-squared-is-bigger-better/&quot;&gt;my post about &lt;tt&gt;R^2&lt;/tt&gt;&lt;/a&gt; were produced by an updated version of a sixty-year old program involving the U.S. census. Originally, the program was based on census data from 1900 to 1960 and sought to predict the population in 1970. The software back then was written in Fortran, the predominate technical programming language a half century ago. I have updated the MATLAB version of the program so that it now uses census data from 1900 to 2020.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e46c5c76-356a-4c77-aea9-20aae3e00d62&quot;&gt;&lt;tt&gt;censusapp2024&lt;/tt&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#80c94327-eb2c-492a-8542-388485d68adc&quot;&gt;Risky Business&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#97d3b2b7-4a14-4003-85b6-c7f854fc8d56&quot;&gt;Splines&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c8daccba-8dbe-4dbf-a0c6-6bb0b66a1e38&quot;&gt;Exponentials&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b1af50c9-b8ea-4211-884b-79f28e12d34f&quot;&gt;Predictions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#acb134fb-dc9a-43cb-840b-0e7934c63e24&quot;&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#d945ac16-2ef7-4c75-a529-d64d03f50776&quot;&gt;Blogs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c7c11668-f0eb-404b-b951-52729c417b5c&quot;&gt;FMM&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#906b81f5-b694-47e8-9dee-fb0586a19671&quot;&gt;Software&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;
&lt;tt&gt;censusapp2024&lt;/tt&gt;&lt;a name=&quot;e46c5c76-356a-4c77-aea9-20aae3e00d62&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The latest version of the census application is now available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/censusapp_2024.m&quot;&gt;censusapp2024&lt;/a&gt;. Here are the data and the opening screenshot.&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;[t,p]=UScensus;fprintf(&lt;span class=&quot;string&quot;&gt;&apos;%12d%12.3f\n&apos;&lt;/span&gt;,[t,p]&apos;)
&lt;/pre&gt;
&lt;pre class=&quot;codeoutput&quot;&gt;        1900      75.995
        1910      91.972
        1920     105.711
        1930     123.203
        1940     131.669
        1950     150.697
        1960     179.323
        1970     203.212
        1980     226.505
        1990     249.633
        2000     281.422
        2010     308.746
        2020     331.449
&lt;/pre&gt;
&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/screenshot.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Risky Business&lt;a name=&quot;80c94327-eb2c-492a-8542-388485d68adc&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Today, MATLAB makes it easier to vary parameters and visualize results, but the underlying mathematical principles are unchanged:&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Using polynomials to predict the future by extrapolating data is a risky business.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;One new observation is added to the data every 10 years, when the United States does the decennial census. Originally there were only 7 observations; today there are 13. The program now allows you to fit the data exactly by interpolation with a polynomial of degree 12 or fit it approximately by polynomials of degree less than 12.&lt;/p&gt;

&lt;p&gt;Here are the least-squares fits with linear, cubic, and degree seven polynomials and the interpolating polynomial. As the polynomial degree increases, so does &lt;tt&gt;R^2&lt;/tt&gt;, until &lt;tt&gt;R^2&lt;/tt&gt; reaches one with the exact fit.&lt;/p&gt;

&lt;p&gt;Do any of these fits look like they could be used to predict future population growth?&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/polys.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Splines&lt;a name=&quot;97d3b2b7-4a14-4003-85b6-c7f854fc8d56&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;In addition to polynomials, you can choose interpolation by three different &lt;a href=&quot;https://blogs.mathworks.com/cleve/2019/04/29/makima-piecewise-cubic-interpolation/&quot;&gt;piecewise Hermite cubics&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;tt&gt;spline&lt;/tt&gt; Continuous second derivate, &quot;not-a-knot&quot; end condition.&lt;/li&gt;
&lt;li&gt;
&lt;tt&gt;pchip&lt;/tt&gt; Continuous first derivative, strictly shape-preserving.&lt;/li&gt;
&lt;li&gt;
&lt;tt&gt;makima&lt;/tt&gt; Continuous first derivative, relaxed shape-preserving.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Since these fits interpolate the data, all their &lt;tt&gt;R^2&lt;/tt&gt; values are one. But before 1900 and after 2020 these functions are cubic polynomials that are not designed for extrapolation.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/splines.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Exponentials&lt;a name=&quot;c8daccba-8dbe-4dbf-a0c6-6bb0b66a1e38&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;It is also possible to do nonlinear least squares fits by an exponential, a logistic sigmoid, and an exponential of an exponetial known as the Gompertz model.&lt;/p&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;tt&gt;exponential exp(b*t+c)&lt;/tt&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;tt&gt;logistic a./(1+exp(-b*(t-c)))&lt;/tt&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;tt&gt;gompertz a*exp(-b*exp(-c*t))&lt;/tt&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;An article by Kathleen and Even Tj&amp;oslash;rve, from the Inland Norway University of Applied Sciences in Elverum, Norway, in the journal &lt;a href=&quot;https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0178691&quot;&gt;PLOS ONE&lt;/a&gt; has this to say about Gompertz. &quot;The Gompertz model has been in use as a growth model even longer than its better known relative, the logistic model. The model, referred to at the time as the Gompertz theoretical law of mortality, was first suggested and first applied by Mr. Benjamin Gompertz in 1825. He fitted it to the relationship between increasing death rate and age, what he referred to as &apos;the average exhaustions of a man&amp;rsquo;s power to avoid death&amp;rdquo; or the &apos;portion of his remaining power to oppose destruction.&apos; &quot;&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/expos.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Predictions&lt;a name=&quot;b1af50c9-b8ea-4211-884b-79f28e12d34f&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Which fits are suitable for predicting future population size?&lt;/p&gt;

&lt;p&gt;Despite their large R^2 values, polynomials of any degree are not suitable because outside of the time interval they behave like polynomials and do not provide realistic predictions.&lt;/p&gt;

&lt;p&gt;Splines were never intended for extrapolation.&lt;/p&gt;

&lt;p&gt;That leaves the exponentials. The simple exponential model grows exponentially and is not suitable. The Gompertz fit does approach a finite asymptotic limit, but the value is an astronimical &lt;tt&gt;a&lt;/tt&gt; = 2101, corresponding to 2.1 $\times 10^9$ inhabitants. Hopefully, that is out of the question.&lt;/p&gt;

&lt;p&gt;The logistic fit has an asymptotic limit of &lt;tt&gt;a&lt;/tt&gt; = 655.7. We recently passed the value of &lt;tt&gt;t&lt;/tt&gt; where &lt;tt&gt;p(t)&lt;/tt&gt; reaches &lt;tt&gt;a/2&lt;/tt&gt;, namely &lt;tt&gt;c&lt;/tt&gt; = 2018. So, the logistic model predicts that the long-term size of the U.S. population will be about twice its current value. Is that realistic? Probably not.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/expos_future.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Conclusion&lt;a name=&quot;acb134fb-dc9a-43cb-840b-0e7934c63e24&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The British statistician George Box once said, &quot;all models are wrong, some are useful.&quot; This is true of the models of the U. S. Census that I have discussed over the past sixty years.&lt;/p&gt;

&lt;p&gt;Here is &lt;tt&gt;censusapp2024&lt;/tt&gt; after all its buttons have been pushed. The extrapolation date is set to 2040. White noise has been added to the data. The model is a fourth-degree polynomial with an &lt;tt&gt;R^2&lt;/tt&gt; = 0.99. The &lt;tt&gt;R^2&lt;/tt&gt; value and the error estimates produced by &lt;tt&gt;errs&lt;/tt&gt; account for errors in the data, but not in the model.&lt;/p&gt;

&lt;p&gt;This particular model does a lousy job of predicting even twenty years in the future. Some of the other models are better, many are worse. Hopefully, their study is worthwhile.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/predict.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Blogs&lt;a name=&quot;d945ac16-2ef7-4c75-a529-d64d03f50776&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;I have made blog posts about the census before, in &lt;a href=&quot;https://blogs.mathworks.com/cleve/2020/11/06/anticipating-official-u-s-census-for-2020&quot;&gt;2020&lt;/a&gt; and in &lt;a href=&quot;https://blogs.mathworks.com/cleve/2017/01/05/fitting-and-extrapolating-us-census-data&quot;&gt;2017&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;FMM&lt;a name=&quot;c7c11668-f0eb-404b-b951-52729c417b5c&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Predicting population growth is featured in &lt;i&gt;Computer Methods for Mathematical Computations&lt;/i&gt;, by George Forsythe, Mike Malcolm and myself, published by Prentice-Hall in 1977. That textbook is now available from an interesting smorgasbord of sources, including &lt;a href=&quot;https://scholar.google.com/citations?view_op=view_citation&amp;amp;hl=en&amp;amp;user=rldfxOMAAAAJ&amp;amp;citation_for_view=rldfxOMAAAAJ:buQ7SEKw-1sC&quot;&gt;Google Scholar&lt;/a&gt;, &lt;a href=&quot;https://www.amazon.com/exec/obidos/ASIN/0131653326/acmorg-20&quot;&gt;Amazon&lt;/a&gt;, &lt;a href=&quot;https://www.etsy.com/listing/1676520741/vintage-textbook-computer-methods-for&quot;&gt;dizhasneatstuff&lt;/a&gt;, &lt;a href=&quot;https://www.abebooks.com/servlet/BookDetailsPL?bi=22650690419&quot;&gt;Abe Books&lt;/a&gt;, &lt;a href=&quot;https://archive.org/details/computermethodsf00fors/page/18/mode/2up&quot;&gt;Internet Archive&lt;/a&gt;, &lt;a href=&quot;https://www.pdas.com/fmm.html&quot;&gt;PDAS&lt;/a&gt;, &lt;a href=&quot;https://search.worldcat.org/title/1150302502&quot;&gt;WorldCat (Chinese)&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Software&lt;a name=&quot;906b81f5-b694-47e8-9dee-fb0586a19671&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;tt&gt;censusapp2024&lt;/tt&gt; is available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/censusapp_2024.m&quot;&gt;censusapp2024&lt;/a&gt;.&lt;/p&gt;

&lt;!-- 
    function grabCode_02c7b1cd1f114211a874bb3dcae61323() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;02c7b1cd1f114211a874bb3dcae61323 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 02c7b1cd1f114211a874bb3dcae61323&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
02c7b1cd1f114211a874bb3dcae61323 ##### SOURCE BEGIN #####
%% A Sixty-Year Old Program for Predicting the Future
% The graphics in
% &lt;https://blogs.mathworks.com/cleve/2024/05/04/r-squared-is-bigger-better/
% my post about |R^2|&gt; were produced by an updated version of
% a sixty-year old program involving the U.S. census.
% Originally, the program was based on census data from 1900 to 1960
% and sought to predict the population in 1970.
% The software back then was written in Fortran, 
% the predominate technical programming language a half century ago. 
% I have updated the MATLAB version of the program
% so that it now uses census data from 1900 to 2020.

%% |censusapp2024|
% The latest version of the census application is now available at
% &lt;https://blogs.mathworks.com/cleve/files/censusapp_2024.m
% censusapp2024&gt;.  Here are the data and the opening screenshot.

   [t,p] = UScensus; fprintf(&apos;%12d%12.3f\n&apos;,[t,p]&apos;)

%%
% &lt;&lt;screenshot.png&gt;&gt;

%% Risky Business
% Today, MATLAB makes it easier to  vary parameters and visualize
% results, but the underlying mathematical principles are unchanged:
%
% * Using polynomials to predict
%    the future by extrapolating data is a risky business.
%
% One new observation is added to the data 
% every 10 years, when the United States does the decennial census.  
% Originally there were only 7 observations; today there are 13.
% The program now allows you to fit the data exactly by interpolation with
% a polynomial of degree 12 or fit it approximately by
% polynomials of degree less than 12. 
%
% Here are the least-squares fits with linear, cubic, and degree seven 
% polynomials and the interpolating polynomial.
% As the polynomial degree increases, so does |R^2|, until |R^2| reaches
% one with the exact fit.  
%
% Do any of these fits look like they could be used to predict future
% population growth?
%
% &lt;&lt;polys.png&gt;&gt;

%% Splines
% In addition to polynomials, you can choose
% interpolation by three different 
% &lt;https://blogs.mathworks.com/cleve/2019/04/29/makima-piecewise-cubic-interpolation/
% piecewise Hermite cubics&gt;.
%
% * |spline|    Continuous second derivate, &quot;not-a-knot&quot; end condition.
% * |pchip|     Continuous first derivative, strictly shape-preserving.
% * |makima|    Continuous first derivative, relaxed shape-preserving.
%
% Since these fits interpolate the data, all their |R^2| values are one.
% But before 1900 and after 2020 these functions are cubic polynomials
% that are not designed for extrapolation.
%
% &lt;&lt;splines.png&gt;&gt;

%% Exponentials
% It is also possible to do nonlinear least squares fits by an exponential,
% a logistic sigmoid, and an exponential of an exponetial known as the
% Gompertz model.
%
% * |exponential   exp(b*t+c)|
% * |logistic      a./(1+exp(-b*(t-c)))|
% * |gompertz      a*exp(-b*exp(-c*t))|
% 
% An article by Kathleen and Even Tjørve, from the 
% Inland Norway University of Applied Sciences in Elverum, Norway,
% in the journal
% &lt;https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0178691
% PLOS ONE&gt; has this to say about Gompertz.
% &quot;The Gompertz model has been in use as a growth model even longer
% than its better known relative, the logistic model. The model, 
% referred to at the time as the Gompertz theoretical law of mortality, was 
% first suggested and first applied by Mr. Benjamin Gompertz in 1825. 
% He fitted it to the relationship between increasing death rate and age, 
% what he referred to as &apos;the average exhaustions of a man’s power to 
% avoid death” or the &apos;portion of his remaining power to oppose 
% destruction.&apos; &quot;
%
% &lt;&lt;expos.png&gt;&gt;

%% Predictions
% Which fits are suitable for predicting future population size?
%
% Despite their large R^2 values, polynomials of any degree
% are not suitable because outside of the time interval they behave
% like polynomials and do not provide realistic predictions.
%
% Splines were never intended for extrapolation.
%
% That leaves the exponentials. The simple exponential model grows
% exponentially and is not suitable. The Gompertz fit does approach
% a finite asymptotic limit, but the value is an astronimical |a| = 2101,
% corresponding to 2.1 $\times 10^9$ inhabitants. Hopefully, that is
% out of the question.
%
% The logistic fit has an asymptotic limit of |a| = 655.7.
% We recently passed the value of |t| where |p(t)| reaches |a/2|,
% namely |c| = 2018.  So, the logistic model predicts that
% the long-term size of the U.S. population will be about twice its
% current value.  Is that realistic?  Probably not.
%
% &lt;&lt;expos_future.png&gt;&gt;
%

%% Conclusion
% The British statistician George Box once said, &quot;all models are wrong,
% some are useful.&quot;  This is true of the models of the
% U. S. Census that I have discussed over the past sixty years.
%
% Here is |censusapp2024| after all its buttons have been pushed.
% The extrapolation date is set to 2040.
% White noise has been added to the data.
% The model is a fourth-degree polynomial with an |R^2| = 0.99.
% The |R^2| value and the error estimates produced by |errs|
% account for errors in the data, but not in the model.
%
% This particular model does a lousy job of predicting even twenty
% years in the future.
% Some of the other models are better, many are worse.
% Hopefully, their study is worthwhile.
%
% &lt;&lt;predict.png&gt;&gt;

%% Blogs
% I have made blog posts about the census before, in
% &lt;https://blogs.mathworks.com/cleve/2020/11/06/anticipating-official-u-s-census-for-2020
% 2020&gt; and in
% &lt;https://blogs.mathworks.com/cleve/2017/01/05/fitting-and-extrapolating-us-census-data
% 2017&gt;.

%% FMM
% Predicting population growth is featured in
% _Computer Methods for Mathematical Computations_, 
% by George Forsythe, Mike Malcolm and myself,
% published by Prentice-Hall in 1977.
% That textbook is now available from an interesting smorgasbord of 
% sources, including
% &lt;https://scholar.google.com/citations?view_op=view_citation&amp;hl=en&amp;user=rldfxOMAAAAJ&amp;citation_for_view=rldfxOMAAAAJ:buQ7SEKw-1sC
% Google Scholar&gt;,
% &lt;https://www.amazon.com/exec/obidos/ASIN/0131653326/acmorg-20 Amazon&gt;,
% &lt;https://www.etsy.com/listing/1676520741/vintage-textbook-computer-methods-for
% dizhasneatstuff&gt;,
% &lt;https://www.abebooks.com/servlet/BookDetailsPL?bi=22650690419
% Abe  Books&gt;,
% &lt;https://archive.org/details/computermethodsf00fors/page/18/mode/2up
% Internet Archive&gt;,
% &lt;https://www.pdas.com/fmm.html PDAS&gt;,
% &lt;https://search.worldcat.org/title/1150302502 WorldCat (Chinese)&gt;.

%% Software
% |censusapp2024| is available at
% &lt;https://blogs.mathworks.com/cleve/files/censusapp_2024.m
% censusapp2024&gt;.
##### SOURCE END ##### 02c7b1cd1f114211a874bb3dcae61323
--&gt;
</content>
 </entry>
 
 <entry>
   <title>R-squared.  Is Bigger Better?</title>
   <link href="https://hpc.social/2024/r-squared-is-bigger-better/"/>
   <updated>2024-05-04T14:33:38-06:00</updated>
   <id>https://hpc.social/2024/r-squared-is-bigger-better-</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;The &lt;i&gt;coefficient of determination&lt;/i&gt;, R-squared or &lt;tt&gt;R^2&lt;/tt&gt;, is a popular statistic that describes how well a regression model fits data. It measures the proportion of variation in data that is predicted by a model. However, that is &lt;i&gt;all&lt;/i&gt; that &lt;tt&gt;R^2&lt;/tt&gt; measures. It is &lt;i&gt;not&lt;/i&gt; appropriate for any other use. For example, it does not support extrapolation beyond the domain of the data. It does not suggest that one model is preferable to another.&lt;/p&gt;

&lt;p&gt;I recently watched high school students participate in the final round of a national mathematical modeling competition. The teams&apos; presentations were excellent; they were well-prepared, mathematically sophisticated, and informative. Unfortunately, many of the presentations abused &lt;tt&gt;R^2&lt;/tt&gt;. It was used to compare different fits, to justify extrapolation, and to recommend public policy.&lt;/p&gt;

&lt;p&gt;This was not the first time that I have seen abuses of &lt;tt&gt;R^2&lt;/tt&gt;. As educators and authors of mathematical software, we must do more to expose its limitations. There are dozens of pages and videos on the web describing &lt;tt&gt;R^2&lt;/tt&gt;, but few of them warn about possible misuse.&lt;/p&gt;

&lt;p&gt;
&lt;tt&gt;R^2&lt;/tt&gt; is easily computed. If &lt;tt&gt;y&lt;/tt&gt; is a vector of observations, &lt;tt&gt;f&lt;/tt&gt; is a fit to the data and &lt;tt&gt;ybar = mean(y)&lt;/tt&gt;, then&lt;/p&gt;

&lt;pre&gt;   R^2 = 1 - norm(y-f)^2/norm(y-ybar)^2&lt;/pre&gt;
&lt;p&gt;If the data are centered, then &lt;tt&gt;ybar = 0&lt;/tt&gt; and &lt;tt&gt;R^2&lt;/tt&gt; is between zero and one.&lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;p&gt;One of my favorite examples is the United States Census. Here is the population, in millions, every ten years since 1900.&lt;/p&gt;

&lt;pre&gt;   t         p
  ____    _______
  1900     75.995
  1910     91.972
  1920    105.711
  1930    123.203
  1940    131.669
  1950    150.697
  1960    179.323
  1970    203.212
  1980    226.505
  1990    249.633
  2000    281.422
  2010    308.746
  2020    331.449&lt;/pre&gt;
&lt;p&gt;There are 13 observations. So, we can do a least-squares fit by a polynomial of any degree less than 12 and can interpolate by a polynomial of degree 12. Here are four such fits and the corresponding &lt;tt&gt;R^2&lt;/tt&gt; values. As the degree increases, so does &lt;tt&gt;R^2&lt;/tt&gt;. Interpolation fits the data exactly and earns a perfect core.&lt;/p&gt;

&lt;p&gt;Which fit would you choose to predict the population in 2030, or even to estimate the population between census years?&lt;/p&gt;

&lt;pre class=&quot;codeinput&quot;&gt;R2_census
&lt;/pre&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/R2_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;Thanks to Peter Perkins and Tom Lane for help with this post.&lt;/p&gt;

&lt;!-- 
    function grabCode_c876d07b32bc454d8001573d08d2f7aa() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;c876d07b32bc454d8001573d08d2f7aa &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; c876d07b32bc454d8001573d08d2f7aa&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
c876d07b32bc454d8001573d08d2f7aa ##### SOURCE BEGIN #####
%% R-squared.  Is Bigger Better?
% The _coefficient of determination_, R-squared or |R^2|, is a popular
% statistic that describes how well a regression model fits data.
% It measures the proportion of variation in data that is
% predicted by a model.  However, that is _all_ that |R^2|
% measures.  It is _not_ appropriate for any other use.  For example,
% it does not support extrapolation beyond the domain of the data.
% It does not suggest that one model is preferable to
% another.  
%
% I recently watched high school students participate in the
% final round of a national mathematical modeling competition.
% The teams&apos; presentations were excellent; they were
% well-prepared, mathematically sophisticated, and informative.
% Unfortunately, many of the presentations abused |R^2|.  It was
% used to compare different fits, to justify extrapolation,
% and to recommend public policy.
%
% This was not the first time that I have seen abuses of |R^2|.
% As educators and authors of mathematical software, we must
% do more to expose its limitations.  There are dozens of pages
% and videos on the web describing |R^2|, but few of them warn
% about possible misuse.
%
% |R^2| is easily computed. 
% If |y| is a vector of observations, |f| is a fit to
% the data and |ybar = mean(y)|, then
% 
%     R^2 = 1 - norm(y-f)^2/norm(y-ybar)^2 
%
% If the data are centered, then |ybar = 0| and |R^2| is between
% zero and one.

%%
% One of my favorite examples is the United States Census.
% Here is the population, in millions, every ten years since 1900. 
%
%     t         p   
%    ____    _______
%    1900     75.995
%    1910     91.972
%    1920    105.711
%    1930    123.203
%    1940    131.669
%    1950    150.697
%    1960    179.323
%    1970    203.212
%    1980    226.505
%    1990    249.633
%    2000    281.422
%    2010    308.746
%    2020    331.449
%
% There are 13 observations.  So, we can do a least-squares fit
% by a polynomial of any degree less than 12 and can
% interpolate by a polynomial of degree 12.  Here are four such
% fits and the corresponding |R^2| values.  As the degree increases,
% so does |R^2|.  Interpolation fits the data exactly and earns
% a perfect core.
%
% Which fit would you choose to predict the population in 2030,
% or even to estimate the population between census years?

R2_census

%%
% Thanks to Peter Perkins and Tom Lane for help with this post.

##### SOURCE END ##### c876d07b32bc454d8001573d08d2f7aa
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Closest Pair of Points Problem</title>
   <link href="https://hpc.social/2024/closest-pair-of-points-problem/"/>
   <updated>2024-03-28T20:00:00-06:00</updated>
   <id>https://hpc.social/2024/closest-pair-of-points-problem</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;The Closest Pair of Points problem is a standard topic in an algorithms course today, but when I taught such a course fifty years ago, the algorithm was not yet known.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0f62a942-c8a3-4395-8f83-9509ed1dabd0&quot;&gt;California Dreaming&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#825b1d10-1532-4f6e-8927-6d9e45dbdb49&quot;&gt;Closest Pair of Points&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#92c53c07-0f81-494a-91a7-c364eb3132ea&quot;&gt;&lt;tt&gt;Pairs&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#05e723c3-e7a0-4091-bb97-463ac017b7e0&quot;&gt;&lt;tt&gt;DivCon&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#387c9a5e-eee6-47d0-be8a-6ea3d8d95f8f&quot;&gt;&lt;tt&gt;Center&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#53330f5c-f9a0-4060-ba34-e5e98e1c9ed4&quot;&gt;Complexity&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5d10f4df-79d5-46b8-9375-01260abdba40&quot;&gt;Timing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4de823af-8e67-4218-a471-d8def3204d38&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0dc6f3e8-7d3a-4381-8d34-13514fb2cad1&quot;&gt;References&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;California Dreaming&lt;a name=&quot;0f62a942-c8a3-4395-8f83-9509ed1dabd0&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Imagine you are driving a car on the Harbor Freeway in southern California with typical Los Angeles traffic conditions. Among the many things you might want to know is which pair of vehicles is nearest each other.&lt;/p&gt;
&lt;p&gt;This is an instance of the Closest Pair of Points problem:&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Given the location of &lt;tt&gt;n&lt;/tt&gt; points in the plane, which pair of points is closest to each other?&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/traffic.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Closest Pair of Points&lt;a name=&quot;825b1d10-1532-4f6e-8927-6d9e45dbdb49&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;It is convenient to represent the points by a vector of complex values. The distance between points &lt;tt&gt;z(k)&lt;/tt&gt; and &lt;tt&gt;z(j)&lt;/tt&gt; is then&lt;/p&gt;
&lt;pre&gt;  d = abs(z(k) - z(j))&lt;/pre&gt;&lt;p&gt;Here are a few points in the unit square.  The closest pair is highlighted.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/pairs.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;&lt;tt&gt;Pairs&lt;/tt&gt;&lt;a name=&quot;92c53c07-0f81-494a-91a7-c364eb3132ea&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The first algorithm you might think of computes the distances between all possible pairs of points and finds the minimum.  This is a brute force approach that requires only a few lines of code.&lt;/p&gt;
&lt;pre&gt;function d = Pairs(z)
    % Pairs.
    % d = Pairs(z) is the minimum distance between any two elements
    % of the complex vector z.&lt;/pre&gt;&lt;pre&gt;    n = length(z);
    d = Inf;
    for k = 1:n
        for j = k+1:n
            if abs(z(k) - z(j)) &amp;lt; d
                d = abs(z(k) - z(j));
            end
        end
    end
end&lt;/pre&gt;&lt;h4&gt;&lt;tt&gt;DivCon&lt;/tt&gt;&lt;a name=&quot;05e723c3-e7a0-4091-bb97-463ac017b7e0&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;DivCon stands for Divide and Conquer.  In outline, the steps are:&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Divide the set of points into two halves.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Recursively, find the closest pair in each half.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Consider the case when the closest pair has one point in each half.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Terminate the recursion with sets of two or three points.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;pre&gt;function d = DivCon(z,sorted)
    % DivCon.
    % d = DivCon(z) is the minimum distance between any two elements
    % of the complex vector z.
    %
    % d = DivCon(z,true) is a recursive call with ascending real(z).&lt;/pre&gt;&lt;pre&gt;    n = length(z);
    if n &amp;lt;= 3
       d = Pairs(z);
    else
       if nargin &amp;lt; 2 || ~sorted
           [~,p] = sort(real(z));
           z = z(p);
       end
       m = floor(n/2);&lt;/pre&gt;&lt;pre&gt;       % Left half
       dl = DivCon(z(1:m),true)&lt;/pre&gt;&lt;pre&gt;       % Right half
       dr = DivCon(z(m+1:end),true);&lt;/pre&gt;&lt;pre&gt;       % Choose
       d = min(dl,dr);&lt;/pre&gt;&lt;pre&gt;       % Center strip
       ds = Center(z,d);
       d = min(ds,d);
    end
end&lt;/pre&gt;&lt;h4&gt;&lt;tt&gt;Center&lt;/tt&gt;&lt;a name=&quot;387c9a5e-eee6-47d0-be8a-6ea3d8d95f8f&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The delicate case involves the strip of points near the center dividing line.  The width of the strip is the closest distance found in the recursion.  Any closer pair with one point in each half must be in this strip.&lt;/p&gt;
&lt;pre&gt;function d = Center(z,d)
    % Center(z,d) is used by DivCon to examine the
    % strip of half-width d about the center point.&lt;/pre&gt;&lt;pre&gt;    n = length(z)
    m = floor(n/2);
    xh = real(z(m));
    [~,p] = sort(imag(z));
    z = z(p);
    s = [];
    for i = 1:n
        if abs(real(z(i)) - xh) &amp;lt;  d
            s = [s; z(i)];
        end
    end&lt;/pre&gt;&lt;pre&gt;    ns = length(s);
    for k = 1:ns
        for j = k+1:ns
            if (imag(s(j)) - imag(s(k))) &amp;lt; d &amp;amp;&amp;amp; abs(s(k) - s(j)) &amp;lt; d
                d = abs(s(k) - s(j));
            end
        end
    end
end&lt;/pre&gt;&lt;h4&gt;Complexity&lt;a name=&quot;53330f5c-f9a0-4060-ba34-e5e98e1c9ed4&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Let &lt;tt&gt;n&lt;/tt&gt; be the number of points.  An asymptotic execution-time complexity analysis involves &lt;tt&gt;n&lt;/tt&gt; approaching infinity.&lt;/p&gt;
&lt;p&gt;It is not hard to see that the complexity of the brute force algorithm implemented in &lt;tt&gt;Pairs&lt;/tt&gt; is O(&lt;tt&gt;n&lt;/tt&gt;^2).&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&quot;https://www.google.com/search?q=closest+pair+of+points+(divide+and+conquer)&quot;&gt;dozens of pages on the web&lt;/a&gt; devoted to showing that the complexity of the divide and conquer algorithm implemented in &lt;tt&gt;DivCon&lt;/tt&gt; and &lt;tt&gt;Center&lt;/tt&gt; is O(&lt;tt&gt;n&lt;/tt&gt;*log(&lt;tt&gt;n&lt;/tt&gt;)).  The best page that I have seen is the &lt;a href=&quot;https://www.youtube.com/watch?v=6u_hWxbOc7E&quot;&gt;YouTube video by Ling Qi&lt;/a&gt;. The key to the analysis is showing that the inner loop in &lt;tt&gt;Center&lt;/tt&gt; is executed at most 7 times for any &lt;tt&gt;n&lt;/tt&gt;.&lt;/p&gt;
&lt;h4&gt;Timing&lt;a name=&quot;5d10f4df-79d5-46b8-9375-01260abdba40&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;We measured the execution time of &lt;tt&gt;Pairs(z)&lt;/tt&gt; and &lt;tt&gt;DivCon(z)&lt;/tt&gt; for &lt;tt&gt;n&lt;/tt&gt; from 1,000 to 40,000 and computed the ratios of the two times. The complexity analysis predicts that this ratio is asymptotically&lt;/p&gt;
&lt;pre&gt;  O(n/log(n))&lt;/pre&gt;&lt;p&gt;Here are the timing results and a least square fit by &lt;tt&gt;n&lt;/tt&gt;/log(&lt;tt&gt;n&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/fit.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;4de823af-8e67-4218-a471-d8def3204d38&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A self-extracting MATLAB archive is available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/TestDivCon_mzip.m&quot;&gt;https://blogs.mathworks.com/cleve/files/TestDivCon_mzip.m&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;References&lt;a name=&quot;0dc6f3e8-7d3a-4381-8d34-13514fb2cad1&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Ling Qi, IDeer7, &lt;i&gt;Closest Pair of Points (Divide and Conquer) Explained&lt;/i&gt;. &lt;a href=&quot;https://www.youtube.com/watch?v=6u_hWxbOc7E&quot;&gt;https://www.youtube.com/watch?v=6u_hWxbOc7E&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford. &lt;i&gt;Introduction to Algorithms (4th ed.)&lt;/i&gt;. MIT Press and McGraw-Hill. ISBN 0-262-04630-X. 1312 pp.&lt;/p&gt;
&lt;!-- 
    function grabCode_fc0430dede624952a83439140fe547ff() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;fc0430dede624952a83439140fe547ff &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; fc0430dede624952a83439140fe547ff&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
fc0430dede624952a83439140fe547ff ##### SOURCE BEGIN #####
%% The Closest Pair of Points Problem
% The Closest Pair of Points problem is a standard topic in an
% algorithms course today, but when I taught such 
% a course fifty years ago, the algorithm was not yet known.

%% California Dreaming 
% Imagine you are driving a car on the Harbor Freeway in southern 
% California with typical Los Angeles traffic conditions.
% Among the many things you might want to know is which pair of 
% vehicles is nearest each other.  
%
% This is an instance of the Closest Pair of Points problem:
%
% * Given the location of |n| points in the plane, which pair of points
% is closest to each other?
%
% &lt;&lt;traffic.png&gt;&gt;
%
%% Closest Pair of Points
% It is convenient to represent the points by a vector of complex values. 
% The distance between points |z(k)| and |z(j)| is then
%
%    d = abs(z(k) - z(j))
%
% Here are a few points in the unit square.  The closest pair is
% highlighted.
%
% &lt;&lt;pairs.png&gt;&gt;
%

%% |Pairs|
% The first algorithm you might think of computes the distance
% between all possible pairs of points and finds the minimum.  This is
% a brute force approach that requires only a few lines of code.
%
%  function d = Pairs(z)
%      % Pairs. 
%      % d = Pairs(z) is the minimum distance between any two elements
%      % of the complex vector z.  
%
%      n = length(z);
%      d = Inf; 
%      for k = 1:n
%          for j = k+1:n
%              if abs(z(k) - z(j)) &lt; d
%                  d = abs(z(k) - z(j));
%              end    
%          end
%      end
%  end

%% |DivCon|
% DivCon stands for Divide and Conquer.  In outline, the steps are:
%
% * Divide the set of points into two halves.
%
% * Recursively, find the closest pair in each half.
%
% * Consider the case when the closest pair has one point in each half. 
%
% * Terminate the recursion with sets of two or three points.
%
%  function d = DivCon(z,sorted)
%      % DivCon. 
%      % d = DivCon(z) is the minimum distance between any two elements
%      % of the complex vector z. 
%      %
%      % d = DivCon(z,true) is a recursive call with ascending real(z).
%
%      n = length(z);
%      if n &lt;= 3
%         d = Pairs(z);
%      else
%         if nargin &lt; 2 || ~sorted
%             [~,p] = sort(real(z));
%             z = z(p);
%         end
%         m = floor(n/2);
%   
%         % Left half
%         dl = DivCon(z(1:m),true)
%   
%         % Right half
%         dr = DivCon(z(m+1:end),true);
% 
%         % Choose
%         d = min(dl,dr);
%   
%         % Center strip
%         ds = Center(z,d);
%         d = min(ds,d);
%      end
%  end

%% |Center|
% The delicate case involves the strip of points near the 
% center dividing line.  The width of the strip is the closest
% distance found in the recursion.  Any closer pair with one point
% in each half must be in this strip.
%
%  function d = Center(z,d)    
%      % Center(z,d) is used by DivCon to examine the
%      % strip of half-width d about the center point.
%
%      n = length(z) 
%      m = floor(n/2);
%      xh = real(z(m));
%      [~,p] = sort(imag(z));
%      z = z(p);
%      s = [];
%      for i = 1:n
%          if abs(real(z(i)) - xh) &lt;  d
%              s = [s; z(i)];
%          end
%      end
%
%      ns = length(s);
%      for k = 1:ns
%          for j = k+1:ns
%              if (imag(s(j)) - imag(s(k))) &lt; d &amp;&amp; abs(s(k) - s(j)) &lt; d
%                  d = abs(s(k) - s(j));
%              end
%          end
%      end
%  end

%% Complexity
% Let |n| be the number of points.  An asymptotic execution-time 
% complexity analysis involves |n| approaching infinity.
%
% It is not hard to see that the complexity of the brute force algorithm
% implemented in |Pairs| is O(|n|^2).  
%
% There are 
% &lt;https://www.google.com/search?q=closest+pair+of+points+(divide+and+conquer)
% dozens of pages on the web&gt; devoted to showing that the complexity
% of the divide and conquer algorithm implemented in |DivCon| and |Center|
% is O(|n|*log(|n|)).  The best page that I have seen is the 
% &lt;https://www.youtube.com/watch?v=6u_hWxbOc7E
% YouTube video by Ling Qi&gt;.
% The key to the analysis is showing that the inner
% loop in |Center| is executed at most 7 times for any |n|.  
% 
%% Timing
% We measured the execution time of |Pairs(z)| and |DivCon(z)| for
% |n| from 1,000 to 40,000 and computed the ratios of the two times.
% The complexity analysis predicts that this ratio is asymptotically
%
%    O(n/log(n))
%
% Here are the timing results and a least square fit by |n|/log(|n|).
%
% &lt;&lt;fit.png&gt;&gt;

%% Software
% A self-extracting MATLAB archive is available at
% &lt;https://blogs.mathworks.com/cleve/files/TestDivCon_mzip.m&gt;

%% References
%
% Ling Qi, IDeer7, _Closest Pair of Points (Divide and Conquer) Explained_.
% &lt;https://www.youtube.com/watch?v=6u_hWxbOc7E&gt;.
%
% Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; 
% Stein, Clifford. _Introduction to Algorithms (4th ed.)_.
% MIT Press and McGraw-Hill. ISBN 0-262-04630-X. 1312 pp.
##### SOURCE END ##### fc0430dede624952a83439140fe547ff
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Twenty Years of Parallel MATLAB</title>
   <link href="https://hpc.social/2024/twenty-years-of-parallel-matlab/"/>
   <updated>2024-03-15T18:05:58-06:00</updated>
   <id>https://hpc.social/2024/twenty-years-of-parallel-matlab</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;I have just returned from the MathWorks company meeting celebrating our 40th Anniversary. In one of the presentations, Jos Martin described how Parallel MATLAB was introduced almost twenty years ago.  Here are a few slides from Jos&apos;s talk.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#eb526631-dc7b-4d6f-b20d-0df539aebec4&quot;&gt;Why There Wasn&apos;t Any Parallel MATLAB&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#46778056-77d3-4a5c-b5fe-b52d97931018&quot;&gt;Twenty-seven Parallel MATLABs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3df2759d-d597-4b19-9c05-c9112532cadc&quot;&gt;Distributed Computing Toolbox&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7c5caf72-f3b8-485b-8b12-1c06813855e0&quot;&gt;Supercomputing Conference&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9266c227-5e9f-4e31-9d7d-a8d89fc7b2d1&quot;&gt;Bill Gates&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#85862059-8ccf-4c67-b17b-018619edab9f&quot;&gt;Now There is a Parallel MATLAB&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Why There Wasn&apos;t Any Parallel MATLAB&lt;a name=&quot;eb526631-dc7b-4d6f-b20d-0df539aebec4&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;In &lt;i&gt;MATLAB News and Notes&lt;/i&gt; for spring 1995, I wrote a one-page Cleve&apos;s Corner titled &quot;Why there isn&apos;t any parallel MATLAB.&quot; There were three reasons.&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Memory model.  MATLAB would generate a matrix on a host machine, split it into roughly equally sized submatrices, and distribute each submatrix to a node.  But it took far longer to distribute the data then it did to do the computation.  Any matrix that would fit into memory on the host was too small to make  effective use of the parallel computer itself.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Granularity.  The amount of work involved in a single matrix computation is too little to be effectively parallelized.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Business situation.  There are too few potential customers at this time (1995) to undertake fundamental changes in MATLAB&apos;s architecture.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;This one-page note turned out to be one of my most widely cited publications.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Picture3.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;h4&gt;Twenty-seven Parallel MATLABs&lt;a name=&quot;46778056-77d3-4a5c-b5fe-b52d97931018&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://citeseerx.ist.psu.edu/document?repid=rep1&amp;amp;type=pdf&amp;amp;doi=0b90279927d97c5e4e2ae48a07f5a44f1abe7bac&quot;&gt;A 2001 survey by Ron Choy&lt;/a&gt; at MIT found 27 different projects that were developing some way to run MATLAB in parallel. All of them involved a MATLAB-based host program calling a fixed library of parallel functions, written in some other language, on the workers. None of the systems were capable of running arbitrary MATLAB programs in parallel.  None of them were MathWorks products.&lt;/p&gt;
&lt;h4&gt;Distributed Computing Toolbox&lt;a name=&quot;3df2759d-d597-4b19-9c05-c9112532cadc&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.hpcwire.com/2004/11/09/mathworks-unveils-computing-toolbox-for-matlab-and-simulink/&quot;&gt;MathWorks introduced&lt;/a&gt; the MATLAB Distributed Computing Toolbox in November 2004. We improvised this demo setup at our first Supercomputing Conference, SC2004 in Pittsburg,&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/SC2004.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;h4&gt;Supercomputing Conference&lt;a name=&quot;7c5caf72-f3b8-485b-8b12-1c06813855e0&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A year later, SC2005 was in Seattle and our booth featured four worker machines on a wire shelving unit purchased at a local Home Depot.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/SC2005.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;h4&gt;Bill Gates&lt;a name=&quot;9266c227-5e9f-4e31-9d7d-a8d89fc7b2d1&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Since Seattle was his home town, Bill Gates gave the keynote talk at SC2005.  He announced that Microsoft was going into High Performance Computing and used the MathWorks Distributed Computing Toolbox in his demonstration.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Gates.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;h4&gt;Now There is a Parallel MATLAB&lt;a name=&quot;85862059-8ccf-4c67-b17b-018619edab9f&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;So, a little more than ten years after the first Cleve&apos;s Corner about parallel computing, a second Cleve&apos;s Corner in &lt;i&gt;News and Notes&lt;/i&gt; was able to reverse the situation.&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Picture2.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;!-- 
    function grabCode_14a73fc939e74d6a9266b6fa2deda9a3() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;14a73fc939e74d6a9266b6fa2deda9a3 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 14a73fc939e74d6a9266b6fa2deda9a3&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
14a73fc939e74d6a9266b6fa2deda9a3 ##### SOURCE BEGIN #####
%% Twenty Years of Parallel MATLAB
% I have just returned from the MathWorks company meeting
% celebrating our 40th Anniversary. In one of the presentations,
% Jos Martin described how Parallel MATLAB was introduced 
% almost twenty years ago.  Here are a few slides
% from Jos&apos;s talk.

%% Why There Wasn&apos;t Any Parallel MATLAB
% In _MATLAB News and Notes_ for spring 1995, I wrote a one-page
% Cleve&apos;s Corner titled &quot;Why there isn&apos;t any parallel MATLAB.&quot;
% There were three reasons.
%
% * Memory model.  MATLAB would generate a matrix on a host machine,
% split it into roughly equally sized submatrices, and distribute
% each submatrix to a node.  But it took far longer to distribute
% the data then it did to do the computation.  Any matrix that would
% fit into memory on the host was too small to make  effective use
% of the parallel computer itself.
%
% * Granularity.  The amount of work involved in a single matrix 
% computation is too little to be effectively parallelized. 
%
% * Business situation.  There are too few potential customers
% at this time (1995) to undertake fundamental changes in 
% MATLAB&apos;s architecture.
% 
% This one-page note turned out to be one of my most widely cited
% publications.
%
% .
% 
% &lt;&lt;Picture3.png&gt;&gt;
%
% .
%

%% Twenty-seven Parallel MATLABs
% &lt;https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=0b90279927d97c5e4e2ae48a07f5a44f1abe7bac
% A 2001 survey by Ron Choy&gt; at MIT found 27 different projects
% that were developing some way to run MATLAB in parallel.  
% All of them involved a MATLAB-based host program calling a fixed 
% library of parallel functions, written in some other language,
% on the workers.
% None of the systems were capable of running arbitrary MATLAB programs
% in parallel.  None of them were MathWorks products.
%

%%% Distributed Computing Toolbox
% &lt;https://www.hpcwire.com/2004/11/09/mathworks-unveils-computing-toolbox-for-matlab-and-simulink/
% MathWorks introduced&gt;
% the MATLAB Distributed Computing Toolbox in November 2004.
% We improvised this demo setup at our first Supercomputing
% Conference, SC2004 in Pittsburg,
%
% &lt;&lt;SC2004.png&gt;&gt;
%
% .
%


%% Supercomputing Conference
% A year later, SC2005 was in Seattle and our booth featured four worker
% machines on a wire shelving unit purchased at a local Home Depot.
%
% &lt;&lt;SC2005.png&gt;&gt;
%
% .
%

%% Bill Gates
% Since Seattle was his home town, Bill Gates gave the keynote talk at
% SC2005.  He announced that Microsoft was going into High Performance
% Computing and used the MathWorks Distributed Computing Toolbox in
% his demonstration.
%
% &lt;&lt;Gates.png&gt;&gt;
%
% .
%


%% Now There is a Parallel MATLAB
% So, a little more than ten years after the first Cleve&apos;s Corner
% about parallel computing, a second Cleve&apos;s Corner in _News and Notes_
% was able to reverse the situation. 
%
% .
%
% &lt;&lt;Picture2.png&gt;&gt;
%


##### SOURCE END ##### 14a73fc939e74d6a9266b6fa2deda9a3
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Chaotic Swinging Sticks</title>
   <link href="https://hpc.social/2024/chaotic-swinging-sticks/"/>
   <updated>2024-02-20T16:24:41-07:00</updated>
   <id>https://hpc.social/2024/chaotic-swinging-sticks</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;
&lt;p&gt;
&lt;a href=&quot;https://swingingsticks.com&quot;&gt;The Swinging Sticks&lt;/a&gt; is a kinetic sculpture that exhibits chaotic motion. The device became very popular after it upstaged Tony Stark in &lt;a href=&quot;https://www.google.com/search?q=youtube+swinging+sticks+iron+man#fpstate=ive&amp;amp;vld=cid:6a6186e3,vid:sbbjhNLiL3c,st:0&quot;&gt;Iron Man 2&lt;/a&gt;. My daughter Carolyn gave me a desktop version of Swinging Sticks for Christmas. I immediately set out to simulate it.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sculpture.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;!--/introduction--&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a9143ab6-8f3f-482e-92ee-35cf3f9190de&quot;&gt;Chaotic Motion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#bf97f3ad-e2a5-4421-9892-a8466b18022a&quot;&gt;Swinging Sticks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3862e132-f69e-4702-85b6-6aeeb1406839&quot;&gt;Sculpture&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#dd331fb2-a5f9-42c6-a538-5b2cb8c9b486&quot;&gt;Code&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h4&gt;Chaotic Motion&lt;a name=&quot;a9143ab6-8f3f-482e-92ee-35cf3f9190de&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Chaotic motion appears random but isn&apos;t. Once the motion begins, the initial conditions together with Newton&apos;s law of motion, F = ma, determine subsequent behavior. There are no random forces. It may be difficult to predict positions, but they are well-determined, nonetheless.&lt;/p&gt;

&lt;p&gt;A classic example of chaotic motion is the double pendulum. One mass at end of a massless string swings about a fixed pivot, and a second mass is attached by a massless string to the first. My simulator of the classis double pendulum is available in Cleve&apos;s Lab, &lt;a href=&quot;https://blogs.mathworks.com/cleve/2016/10/31/introducing-cleves-laboratory&quot;&gt;swinger&lt;/a&gt;, and a movie is available here &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/swinger.mp4&quot;&gt;pendulum movie&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Swinging Sticks&lt;a name=&quot;bf97f3ad-e2a5-4421-9892-a8466b18022a&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The swinging sticks are similar to the double pendulum. The sticks are two rods with uniformly distributed mass, different lengths and off-center pivots. The best way to view the motion is to download &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/swinging_sticks.m&quot;&gt;this code&lt;/a&gt; and run it in your own MATLAB. Otherwise, here in a short slow-motion animated GIF.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sticks_gif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;p&gt;And, here is a longer &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/sticks.mp4&quot;&gt;Swinging Sticks Video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The motion of the shorter of the two rods is chaotic. Here are the orbits traced by the ends of the short rod.&lt;/p&gt;

&lt;p&gt;
&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/chaos.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;

&lt;h4&gt;Sculpture&lt;a name=&quot;3862e132-f69e-4702-85b6-6aeeb1406839&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Swinging Sticks sculptures are available in various sizes and colors. &lt;a href=&quot;https://swingingsticks.com&quot;&gt;The Swinging Sticks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our mathematical model is of a frictionless perpetual motion machine. The real sculptures have an ingenious electromagnetic controller in the base that is claimed to run for two years on four AA batteries. Mine has been running since Christmas. An excellent &lt;a href=&quot;https://www.youtube.com/watch?v=PWg6TG2bkFU&quot;&gt;YouTube video&lt;/a&gt; by Wayne Schmidt describes the controller.&lt;/p&gt;

&lt;h4&gt;Code&lt;a name=&quot;dd331fb2-a5f9-42c6-a538-5b2cb8c9b486&quot;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/swinging_sticks.m&quot;&gt;https://blogs.mathworks.com/cleve/files/swinging_sticks.m&lt;/a&gt;
&lt;/p&gt;

&lt;!-- 
    function grabCode_3007bf720ec7402cb273ace1e6e2d61e() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;3007bf720ec7402cb273ace1e6e2d61e &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 3007bf720ec7402cb273ace1e6e2d61e&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;
&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
      Published with MATLAB&amp;reg; R2024a&lt;br /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;!--
3007bf720ec7402cb273ace1e6e2d61e ##### SOURCE BEGIN #####
%% Chaotic Swinging Sticks
% &lt;https://swingingsticks.com  
% The Swinging Sticks&gt; is a kinetic sculpture that exhibits chaotic motion.
% The device became very popular after it upstaged Tony Stark in
% &lt;https://www.google.com/search?q=youtube+swinging+sticks+iron+man#fpstate=ive&amp;vld=cid:6a6186e3,vid:sbbjhNLiL3c,st:0
% Iron Man 2&gt;.
% My daughter Carolyn gave me a desktop version of Swinging Sticks
% for Christmas.  I immediately set out to simulate it.
%
% &lt;&lt;sculpture.png&gt;&gt;


%% Chaotic Motion
% Chaotic motion appears random but isn&apos;t. Once the motion begins, the
% initial conditions together with Newton&apos;s law of motion, F = ma,
% determine subsequent behavior.  There are no random forces.  It may be
% difficult to predict positions, but they are well-determined,
% nonetheless.
%
% A classic example of chaotic motion is the double pendulum.
% One mass at end of a massless string swings about a fixed pivot, and
% a second mass is attached by a massless string to the first.
% My simulator of the classis double pendulum is available in Cleve&apos;s Lab,
% &lt;https://blogs.mathworks.com/cleve/2016/10/31/introducing-cleves-laboratory
% swinger&gt;, and a movie is available here
% &lt;https://blogs.mathworks.com/cleve/files/swinger.mp4 pendulum movie&gt;.

%% Swinging Sticks
% The swinging sticks are similar to the double pendulum.
% The sticks are two rods with uniformly distributed mass,
% different lengths and off-center pivots.
% The best way to view the motion is to download
% &lt;https://blogs.mathworks.com/cleve/files/swinging_sticks.m
% this code&gt; and run it in your own MATLAB.
% Otherwise, here in a short slow-motion animated GIF.
% 
% &lt;&lt;sticks_gif.gif&gt;&gt;
%
% And, here is a longer 
% &lt;https://blogs.mathworks.com/cleve/files/sticks.mp4
% Swinging Sticks Video&gt;.
%
% The motion of the shorter of the two rods is chaotic.  Here are the
% orbits traced by the ends of the short rod.
%
% &lt;&lt;chaos.png&gt;&gt;


%% Sculpture
% Swinging Sticks sculptures are available in various sizes and 
% colors. &lt;https://swingingsticks.com  The Swinging Sticks&gt;.
%
% Our mathematical model is of a frictionless perpetual motion machine.
% The real sculptures have an ingenious electromagnetic controller in the
% base that is claimed to run for two years on four AA batteries.
% Mine has been running since Christmas.
% An excellent &lt;https://www.youtube.com/watch?v=PWg6TG2bkFU YouTube video&gt;
% by Wayne Schmidt describes the controller.

%% Code
% &lt;https://blogs.mathworks.com/cleve/files/swinging_sticks.m&gt;
##### SOURCE END ##### 3007bf720ec7402cb273ace1e6e2d61e
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Nick Higham (1961-2024)</title>
   <link href="https://hpc.social/2024/nick-higham-1961-2024/"/>
   <updated>2024-01-25T16:36:37-07:00</updated>
   <id>https://hpc.social/2024/nick-higham-1961-2024-</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;Nick Higham passed away last Saturday. Nick was a close friend of mine and a great friend of MATLAB. I will leave it to others to describe his research and teaching, his many honors, and his service to our community, especially SIAM. I have just a few, more personal, comments.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/nick.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#30541246-5968-4618-8d07-532c62fe2e2a&quot;&gt;NA Digest&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#10c6af44-05e5-4256-a91f-c92e2d648323&quot;&gt;Books&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b0e711ae-b3d7-419b-ae0e-150ac24e7133&quot;&gt;MATLAB&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#bc2af9b1-f993-4890-87ca-98922e77688e&quot;&gt;&lt;tt&gt;gallery&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#81a97ac0-cabd-445f-9a83-2791ffc04ac4&quot;&gt;&lt;tt&gt;expm&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6b361048-1e6f-40a5-8b30-1b8f7361e4b8&quot;&gt;Goodbye&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;NA Digest&lt;a name=&quot;30541246-5968-4618-8d07-532c62fe2e2a&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Monday&apos;s NA Digest led off with this from Nick&apos;s wife Francoise and his brother Des.&lt;/p&gt;
&lt;pre&gt;Subject: Nick Higham (1961--2024)&lt;/pre&gt;&lt;pre&gt;With great sadness we report that Nick Higham, Royal Society Research
Professor and Richardson Professor of Applied Mathematics at the
University of Manchester, passed away on January 20, 2024, at the age
of 62 after an 18 month struggle with a form of blood cancer. An
obituary describing Nick&apos;s research and leadership contributions will
appear in SIAM News in due course.&lt;/pre&gt;&lt;pre&gt;Francoise Tisseur and Des Higham&lt;/pre&gt;&lt;h4&gt;Books&lt;a name=&quot;10c6af44-05e5-4256-a91f-c92e2d648323&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Nick was an excellent writer, and an excellent writer about writing.&lt;/p&gt;
&lt;p&gt;Here are the covers of his six books.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/book_covers.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;SIAM published five of these.  Two are surveys of Nick&apos;s research on the accuracy of numeric algorithms and the computation of matrix functions. Two more, one of them coauthored with Dennis Sherwood, are guides to mathematical exposition.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;MATLAB Guide&lt;/i&gt;, by Des and Nick Higham, is one of my favorite books about MATLAB. It is a succinct introduction for newcomers and a valuable refresher for old-timers. The third edition, published in 2017, includes chapters on object-oriented computing, parallel computing, the Symbolic Math Toolbox and other recent additions.  Be sure to check out the &lt;a href=&quot;https://nhigham.com/matlab-guide/&quot;&gt;&lt;i&gt;MATLAB Guide&lt;/i&gt; web site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The only non-SIAM book pictured above is &lt;a href=&quot;https://nhigham.com/the-princeton-companion-to-applied-mathematics/&quot;&gt;&lt;i&gt;The Princeton Companion to Applied Mathematics&lt;/i&gt;&lt;/a&gt;.  It is over 1,000 pages long and features nearly 200 sections written by an &lt;a href=&quot;https://assets.press.princeton.edu/chapters/s1_10592.pdf&quot;&gt;international team of experts&lt;/a&gt;. Nick is the editor-in-chief and wrote many of the sections himself.&lt;/p&gt;
&lt;h4&gt;MATLAB&lt;a name=&quot;b0e711ae-b3d7-419b-ae0e-150ac24e7133&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here is a &lt;a href=&quot;https://nhigham.com&quot;&gt;Word Cloud&lt;/a&gt; from Nick&apos;s home page.  It shows the frequency of the tags for his blog and confirms his interest in MATLAB.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/word_cloud.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;&lt;tt&gt;gallery&lt;/tt&gt;&lt;a name=&quot;bc2af9b1-f993-4890-87ca-98922e77688e&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Anyone interested in numerical linear algebra should also be interested in the &lt;tt&gt;gallery&lt;/tt&gt; function, which is based on Nick&apos;s work.  Enter&lt;/p&gt;
&lt;pre class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; doc gallery
&lt;/pre&gt;&lt;p&gt;Scroll down to &lt;tt&gt;matrixname&lt;/tt&gt; and investigate over 70 different test matrices.&lt;/p&gt;
&lt;p&gt;If you find &lt;tt&gt;gallery&lt;/tt&gt; irresistible, take a look at &lt;a href=&quot;https://nhigham.com/2021/11/09/anymatrix/&quot;&gt;&lt;tt&gt;anymatrix&lt;/tt&gt;&lt;/a&gt;, an extensible matrix collection, by Nick and Mantas Mikaitis.&lt;/p&gt;
&lt;h4&gt;&lt;tt&gt;expm&lt;/tt&gt;&lt;a name=&quot;81a97ac0-cabd-445f-9a83-2791ffc04ac4&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This is very personal for me. Thirty or forty years ago, Charlie Van Loan and I were regarded as authorities on computing the matrix exponential, $e^{A}$. The function &lt;tt&gt;expm&lt;/tt&gt; has been in MATLAB since its very beginning. Around twenty years ago, we ceded the authority title to Nick and Awad Al-Mohy. &lt;a href=&quot;https://eprints.maths.manchester.ac.uk/1300/1/alhi09a.pdf&quot;&gt;Their code&lt;/a&gt; for matrix exponential is now the basis for &lt;tt&gt;expm&lt;/tt&gt;.&lt;/p&gt;
&lt;h4&gt;Goodbye&lt;a name=&quot;6b361048-1e6f-40a5-8b30-1b8f7361e4b8&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Our business has lost one of its superstars. I have lost a good friend, way too soon. Goodbye Nick.&lt;/p&gt;
&lt;!-- 
    function grabCode_062397ce6659461698190fb5b2757714() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;062397ce6659461698190fb5b2757714 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 062397ce6659461698190fb5b2757714&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
062397ce6659461698190fb5b2757714 ##### SOURCE BEGIN #####
%% Nick Higham (1961-2024)
% Nick Higham passed away last Saturday. Nick was a close friend of mine
% and a great friend of MATLAB. I will leave it to others to describe his
% research and teaching, his many honors, and his service to our community,
% especially SIAM. I have just a few, more personal, comments.
%
% &lt;&lt;nick.png&gt;&gt;
%

%% NA Digest
%
% Monday&apos;s NA Digest led off with this from
% Nick&apos;s wife Francoise and his brother Des.
%
%  Subject: Nick Higham (1961REPLACE_WITH_DASH_DASH2024)
%  
%  With great sadness we report that Nick Higham, Royal Society Research
%  Professor and Richardson Professor of Applied Mathematics at the
%  University of Manchester, passed away on January 20, 2024, at the age
%  of 62 after an 18 month struggle with a form of blood cancer. An
%  obituary describing Nick&apos;s research and leadership contributions will
%  appear in SIAM News in due course.
%  
%  Francoise Tisseur and Des Higham
%

%% Books
% Nick was an excellent writer, and an excellent writer about writing.
%
% Here are the covers of his six books.
%
% &lt;&lt;book_covers.png&gt;&gt;
%
% SIAM published five of these.  Two are surveys of Nick&apos;s research
% on the accuracy of numeric algorithms and
% the computation of matrix functions.
% Two more, one of them coauthored with Dennis Sherwood, are
% guides to mathematical exposition.
%
% _MATLAB Guide_, by Des and Nick Higham, is one of my
% favorite books about MATLAB.
% It is a succinct introduction for newcomers
% and a valuable refresher for old-timers.
% The third edition, published in 2017, includes chapters on
% object-oriented computing, parallel computing, the Symbolic Math
% Toolbox and other recent additions.  Be sure to check out the
% &lt;https://nhigham.com/matlab-guide/ _MATLAB Guide_ web site&gt;.
%
% The only non-SIAM book pictured above is
% &lt;https://nhigham.com/the-princeton-companion-to-applied-mathematics/
% _The Princeton Companion to Applied Mathematics_&gt;.  It is over 1,000 pages long and features
% nearly 200 sections written by an 
% &lt;https://assets.press.princeton.edu/chapters/s1_10592.pdf 
% international team of experts&gt;.
% Nick is the editor-in-chief and wrote many of the sections himself.

%% MATLAB
% Here is a &lt;https://nhigham.com Word Cloud&gt; from
% Nick&apos;s home page.  It shows the frequency of the tags for his blog
% and confirms his interest in MATLAB.
%
% &lt;&lt;word_cloud.png&gt;&gt;
%

%% |gallery|
% Anyone interested in numerical linear algebra should also be interested
% in the |gallery| function, which is based on Nick&apos;s work.  Enter
%
%   &gt;&gt; doc gallery
%
% Scroll down to |matrixname| and investigate over 70 different test
% matrices. 
%
% If you find |gallery| irresistible, take a look at
% &lt;https://nhigham.com/2021/11/09/anymatrix/ |anymatrix|&gt;, 
% an extensible matrix collection, by Nick and Mantas Mikaitis.

%% |expm|
% This is very personal for me.
% Thirty or forty years ago, Charlie Van Loan and I were regarded as
% authorities on computing the matrix exponential, $e^{A}$.  
% The function |expm| has been in MATLAB since its very beginning.
% Around twenty years ago, we ceded the authority title to Nick and
% Awad Al-Mohy.  
% &lt;https://eprints.maths.manchester.ac.uk/1300/1/alhi09a.pdf
% Their code&gt; for matrix exponential is now the basis for |expm|.

%% Goodbye
% Our business has lost one of its superstars.
% I have lost a good friend, way too soon.
% Goodbye Nick.

##### SOURCE END ##### 062397ce6659461698190fb5b2757714
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Exponential Fitting, Separable Least Squares, and Quahogs</title>
   <link href="https://hpc.social/2024/exponential-fitting-separable-least-squares-and-quahogs/"/>
   <updated>2024-01-12T16:35:32-07:00</updated>
   <id>https://hpc.social/2024/exponential-fitting-separable-least-squares-and-quahogs</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;We have been investigating a recent bug report about &lt;tt&gt;fitnlm&lt;/tt&gt;, the Statistics and Machine Learning Toolbox function for robust fitting of nonlinear models.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e8d5954f-4051-48dd-9888-3729cc8d6313&quot;&gt;Quahogs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1fd80451-cc63-4160-8fcc-b1a1448c7382&quot;&gt;Acidification&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#faab8af3-c8dd-48bf-8621-b7fa14ade2fb&quot;&gt;Separable Least Squares&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8afd06c3-7aca-4df8-b636-b7d660a3b6ca&quot;&gt;Centering Data&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b8434e53-14a6-412e-97d9-39485ad02c07&quot;&gt;Exponential Fitting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e6bd554c-66fa-4ebc-b3d4-2cd14229bed0&quot;&gt;Results&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#dd10ff5a-44a4-4ad7-9ddb-7cb103a943eb&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7e09ac26-71d6-47be-aa47-13da26bc9755&quot;&gt;Thanks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Quahogs&lt;a name=&quot;e8d5954f-4051-48dd-9888-3729cc8d6313&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/quahogs.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The bug report comes from Greg Pelletier, an independent research scientist and biogeochemical modeler in Olympia, Washington. Greg has been studying the vulnerability of sensitive marine organisms to increases in ocean acidification.  One of the most important of these organisms is &lt;a href=&quot;https://en.wikipedia.org/wiki/Hard_clam&quot;&gt;Mercenaria mercenaria&lt;/a&gt;, the hard clam.&lt;/p&gt;
&lt;p&gt;Especially here in New England, hard clams are known by their traditional Native American name, &lt;i&gt;quahog&lt;/i&gt;. They have a well-deserved reputation for making excellent clam chowder.&lt;/p&gt;
&lt;h4&gt;Acidification&lt;a name=&quot;1fd80451-cc63-4160-8fcc-b1a1448c7382&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;We are all aware of increasing levels of carbon dioxide in the earth&apos;s atmosphere.  We may not be as aware of the effect this increase has on the health of the earth&apos;s oceans.  According to &lt;a href=&quot;https://www.noaa.gov/education/resource-collections/ocean-coasts/ocean-acidification&quot;&gt;NOAA&lt;/a&gt;, the ocean absorbs about 30% of the atmospheric carbon dioxide.&lt;/p&gt;
&lt;p&gt;A definitive and controversial 2009 paper by Justin Ries and colleagues, then at the Woods Hole Oceanographic Institution, is &quot;Marine calcifiers exhibit mixed responses to CO2-induced ocean acidification&quot;, &lt;a href=&quot;https://doi.org/10.1130/G30210A.1&quot;&gt;https://doi.org/10.1130/G30210A.1&lt;/a&gt;. The hard clam example in Greg&apos;s bug report comes from figure 1K in the Ries et al. paper.&lt;/p&gt;
&lt;p&gt;The independent variable in experiments is the ratio of alkalinity of sea water to the concentration of dissolved inorganic carbon. The dependent variable is the calcification rate, which compares how fast the organism builds its shells to how fast the shells are dissolving.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Ries_et_al.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Separable Least Squares&lt;a name=&quot;faab8af3-c8dd-48bf-8621-b7fa14ade2fb&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The model chosen by Ries at al. is&lt;/p&gt;
&lt;p&gt;$$ y \approx \beta_1 + \beta_2 e^{\lambda t} $$&lt;/p&gt;
&lt;p&gt;where $t$ is the ratio of alkalinity to dissolved carbon and $y$ is the calcification rate. The data have only four distinct values of $t$, with several observations of $y$ at each value.&lt;/p&gt;
&lt;p&gt;The parameters $\beta_1$, $\beta_2$ and $\lambda$ are determined by least squares curve fit.  This is a &lt;i&gt;separable least squares&lt;/i&gt; problem. For any given value of $\lambda$, the parameters $\beta_1$ and $\beta_2$ occur linearly and the least squares solution can be obtained by MATLAB&apos;s backslash.&lt;/p&gt;
&lt;p&gt;Gene Golub and Victor Pereyra described separable least squares in 1973 and proposed solving it by a &lt;i&gt;variable projection algorithm&lt;/i&gt;. Since 1973 a number of people, including Pereyra, Linda Kaufman, Fred Krogh, John Bolstadt and David Gay, have contributed to the development of a series of Fortran programs named &lt;tt&gt;varpro&lt;/tt&gt;. In 2011, Dianne O&apos;Leary and Burt Rust created a MATLAB version of &lt;tt&gt;varpro&lt;/tt&gt;.  Their report, &lt;a href=&quot;https://www.cs.umd.edu/~oleary/software/varpro/&quot;&gt;https://www.cs.umd.edu/~oleary/software/varpro/&lt;/a&gt;, is a good background source, as well as documentation for &lt;tt&gt;varpro.m&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I have a section on separable least squares, and an example, &lt;tt&gt;expfitdemo&lt;/tt&gt;, in NCM, &lt;a href=&quot;https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/leastsquares.pdf&quot;&gt;Numerical Computing with MATLAB&lt;/a&gt;. I have modified &lt;tt&gt;expfitdemo&lt;/tt&gt; to work on Greg&apos;s quahogs problem.&lt;/p&gt;
&lt;h4&gt;Centering Data&lt;a name=&quot;8afd06c3-7aca-4df8-b636-b7d660a3b6ca&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;It turns out that the problem Greg encountered can be traced to the fact that the data are not centered.  The given values of $t$ are all positive.  This causes &lt;tt&gt;fitnlm&lt;/tt&gt; to print a warning message and attempt to rectify the situation by changing the degrees of freedom from 22 to 23, but this only makes the situation worse. (We should take another look at the portion of &lt;tt&gt;fitnlm&lt;/tt&gt; that adjusts the degrees of freedom.)&lt;/p&gt;
&lt;p&gt;It is always a good idea in curve fitting to center the data with something like&lt;/p&gt;
&lt;pre&gt;  t = t - mean(t)&lt;/pre&gt;&lt;p&gt;The values of $y$ are already pretty well centered. Rescaling $y$ with&lt;/p&gt;
&lt;pre&gt;  y = 10000*y&lt;/pre&gt;&lt;p&gt;makes interpretation of results easier.&lt;/p&gt;
&lt;h4&gt;Exponential Fitting&lt;a name=&quot;b8434e53-14a6-412e-97d9-39485ad02c07&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;With the data centered and scaled, we have three different ways of tackling Greg&apos;s problem.  All three methods agree on the results they compute.&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;fitnlm&lt;/tt&gt;. Treats all parameters as if they were nonlinear.      Computes statistical quantities such as R-squared and      RMS Error.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;varpro&lt;/tt&gt;. Venerable software history.      Only one nonlinear parameter for the quahogs problem.      Delivers additional statistical quantities in &lt;tt&gt;Regression&lt;/tt&gt; structure.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;quahogsfit&lt;/tt&gt;. Textbook separable least squares code.      Modification for the quahogs problem of &lt;tt&gt;expfitdemo&lt;/tt&gt; from NCM.      Only one nonlinear parameter.  No statistics.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Results&lt;a name=&quot;e6bd554c-66fa-4ebc-b3d4-2cd14229bed0&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;fitnlm&lt;/tt&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;pre&gt;Nonlinear regression model:
    y ~ param1 + param2*exp(param3*xval)&lt;/pre&gt;&lt;pre&gt;Estimated Coefficients:
              Estimate      SE        tStat       pValue
              ________    _______    _______    __________&lt;/pre&gt;&lt;pre&gt;    param1     0.69536     0.1657     4.1964    0.00037344
    param2    -0.26482    0.19909    -1.3302       0.19709
    param3     -22.218     8.1494    -2.7263      0.012327&lt;/pre&gt;&lt;pre&gt;Number of observations: 25, Error degrees of freedom: 22
Root Mean Squared Error: 0.307
R-Squared: 0.828,  Adjusted R-Squared 0.813
F-statistic vs. constant model: 53, p-value = 3.86e-09&lt;/pre&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;varpro&lt;/tt&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;pre&gt;Linear Parameters:
  0.695367   -0.264837
Nonlinear Parameters:
 -22.217495&lt;/pre&gt;&lt;pre&gt;Norm         of weighted residual  =   1.438935
Norm         of data vector        =   3.545820
Expected error of observations     =   0.306782
Coefficient of determination       =   0.828145&lt;/pre&gt;&lt;pre&gt;Regression.t_ratio
    4.1962
   -1.3301
   -2.7264&lt;/pre&gt;&lt;pre&gt;Regression.std_param
    0.1657
    0.1991
    8.1490&lt;/pre&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;quahogsfit&lt;/tt&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;pre&gt;lambda =
  -22.2180
condX =
    4.3882
beta =
    0.6954
   -0.2648
normres =
    1.4389&lt;/pre&gt;&lt;p&gt;&lt;tt&gt;quahogsfit&lt;/tt&gt; produces this plot, which can be compared with figure 1K from Ries et al, reproduced above.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/quahogsfit.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;dd10ff5a-44a4-4ad7-9ddb-7cb103a943eb&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The codes for this post are available here &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/quahogs_driver.m&quot;&gt;quahogs_driver.m&lt;/a&gt; and here &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/varpro.m&quot;&gt;varpro.m&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Thanks&lt;a name=&quot;7e09ac26-71d6-47be-aa47-13da26bc9755&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Thanks to Greg Pelletier for the bug report and to Tom Lane for his statistical expertise.&lt;/p&gt;
&lt;!-- 
    function grabCode_0a292e90c48540ba9ef9da619b32e8e7() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;0a292e90c48540ba9ef9da619b32e8e7 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 0a292e90c48540ba9ef9da619b32e8e7&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2024 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
0a292e90c48540ba9ef9da619b32e8e7 ##### SOURCE BEGIN #####
%% Exponential Fitting, Separable Least Squares, and Quahogs
% We have been investigating a recent bug report about |fitnlm|,
% the Statistics and Machine Learning Toolbox function
% for robust fitting of nonlinear models.

%% Quahogs
% &lt;&lt;quahogs.png&gt;&gt;
%
% The bug report comes from Greg Pelletier, an independent research
% scientist and biogeochemical modeler in Olympia, Washington.
% Greg has been studying the 
% vulnerability of sensitive marine organisms to increases in ocean
% acidification.  One of the most important of these organisms is
% &lt;https://en.wikipedia.org/wiki/Hard_clam Mercenaria mercenaria&gt;,
% the hard clam.
% 
% Especially here in New England, hard clams are known
% by their traditional Native American name, _quahog_.
% They have a well-deserved reputation for making excellent
% clam chowder.

%% Acidification
% We are all aware of increasing levels of carbon dioxide in the earth&apos;s
% atmosphere.  We may not be as aware of the effect this increase has
% on the health of the earth&apos;s oceans.  According to
% &lt;https://www.noaa.gov/education/resource-collections/ocean-coasts/ocean-acidification
% NOAA&gt;, the ocean absorbs about 30% of the atmospheric carbon dioxide. 
%
% A definitive and controversial 2009 paper
% by Justin Ries and colleagues,
% then at the Woods Hole Oceanographic Institution, is
% &quot;Marine calcifiers exhibit mixed responses to CO2-induced ocean
% acidification&quot;, &lt;https://doi.org/10.1130/G30210A.1&gt;.
% The hard clam example in Greg&apos;s bug report comes from 
% figure 1K in the Ries et al. paper.
%
% The independent variable in experiments is the
% ratio of alkalinity of sea water
% to the concentration of dissolved inorganic carbon.
% The dependent variable is the calcification rate, which compares
% how fast the organism builds its shells 
% to how fast the shells are dissolving.
%
% &lt;&lt;Ries_et_al.png&gt;&gt;
%
%% Separable Least Squares
% The model chosen by Ries at al. is
%
% $$ y \approx \beta_1 + \beta_2 e^{\lambda t} $$
%
% where $t$ is the ratio of alkalinity to dissolved carbon and $y$ is the 
% calcification rate. The data have only four distinct values of $t$, with 
% several observations of $y$ at each value.
%
% The parameters $\beta_1$, $\beta_2$ and $\lambda$ are determined by
% least squares curve fit.  This is a _separable least squares_ problem.
% For any given value of $\lambda$, the parameters $\beta_1$ and $\beta_2$
% occur linearly and the least squares solution can be obtained by 
% MATLAB&apos;s backslash.
% 
% Gene Golub and Victor Pereyra described separable least squares in 1973
% and proposed solving it by a _variable projection algorithm_.
% Since 1973 a number of people, including Pereyra, Linda Kaufman,
% Fred Krogh, John Bolstadt and David Gay, have contributed to the
% development of a series of Fortran programs named |varpro|.
% In 2011, Dianne O&apos;Leary and Burt Rust created a MATLAB version of
% |varpro|.  Their report,
% &lt;https://www.cs.umd.edu/~oleary/software/varpro&gt;&lt;/https://www.cs.umd.edu/~oleary/software/varpro&gt;, is a good background
% source, as well as documentation for |varpro.m|.
%
% I have a section on separable least squares, and an example,
% |expfitdemo|, in NCM,
% &lt;https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/leastsquares.pdf
% Numerical Computing with MATLAB&gt;. I have modified |expfitdemo| to
% work on Greg&apos;s quahogs problem.

%% Centering Data
% It turns out that the problem Greg encountered can be traced to the 
% fact that the data are not centered.  The given values of $t$ are all
% positive.  This causes |fitnlm| to print a warning message and attempt
% to rectify the situation by changing the degrees of freedom  
% from 22 to 23, but this only makes the situation worse.
% (We should take another look at the portion of |fitnlm| that adjusts 
% the degrees of freedom.)
%
% It is always a good idea in curve fitting to center the 
% data with something like
%
%    t = t - mean(t)
%
% The values of $y$ are already pretty well centered.
% Rescaling $y$ with
%
%    y = 10000*y
%
% makes interpretation of results easier.

%% Exponential Fitting
% With the data centered and scaled, we have three different 
% ways of tackling Greg&apos;s problem.  All three methods
% agree on the results they compute.
% 
% * |fitnlm|. Treats all parameters as if they were nonlinear.
%      Computes statistical quantities such as R-squared and
%      RMS Error.
% 
% * |varpro|. Venerable software history.
%      Only one nonlinear parameter for the quahogs problem.
%      Delivers additional statistical quantities in |Regression| structure.
%  
% * |quahogsfit|. Textbook separable least squares code.
%      Modification for the quahogs problem of |expfitdemo| from NCM.
%      Only one nonlinear parameter.  No statistics.
%

%% Results
% * |fitnlm| 
%
%  Nonlinear regression model:
%      y ~ param1 + param2*exp(param3*xval)
%  
%  Estimated Coefficients:
%                Estimate      SE        tStat       pValue  
%                ________    _______    _______    __________
%  
%      param1     0.69536     0.1657     4.1964    0.00037344
%      param2    -0.26482    0.19909    -1.3302       0.19709
%      param3     -22.218     8.1494    -2.7263      0.012327
%  
%  
%  Number of observations: 25, Error degrees of freedom: 22
%  Root Mean Squared Error: 0.307
%  R-Squared: 0.828,  Adjusted R-Squared 0.813
%  F-statistic vs. constant model: 53, p-value = 3.86e-09
%
% * |varpro|
%   
%  Linear Parameters:
%    0.695367   -0.264837
%  Nonlinear Parameters:
%   -22.217495
%   
%  Norm         of weighted residual  =   1.438935
%  Norm         of data vector        =   3.545820
%  Expected error of observations     =   0.306782
%  Coefficient of determination       =   0.828145
%
%  Regression.t_ratio
%      4.1962
%     -1.3301
%     -2.7264
%
%  Regression.std_param
%      0.1657
%      0.1991
%      8.1490
%
% * |quahogsfit|
%
%  lambda =
%    -22.2180
%  condX =
%      4.3882
%  beta =
%      0.6954
%     -0.2648
%  normres =
%      1.4389
%
% |quahogsfit| produces this plot, which can be compared with
% figure 1K from Ries et al, reproduced above.
%
% &lt;&lt;quahogsfit.png&gt;&gt;
%

%% Software
% The codes for this post are available here
% &lt;https://blogs.mathworks.com/cleve/files/quahogs_driver.m  quahogs_driver.m&gt;
% and here 
% &lt;https://blogs.mathworks.com/cleve/files/varpro.m  varpro.m&gt;.

%% Thanks
% Thanks to Greg Pelletier for the bug report and
% to Tom Lane for his statistical expertise.

##### SOURCE END ##### 0a292e90c48540ba9ef9da619b32e8e7
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Season’s Greetings</title>
   <link href="https://hpc.social/2023/season-s-greetings/"/>
   <updated>2023-12-20T14:13:20-07:00</updated>
   <id>https://hpc.social/2023/season-s-greetings</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;h3&gt;Season&apos;s Greeings&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/xmas.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;!-- 
    function grabCode_79511e45062b40d2899d215fa871042a() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;79511e45062b40d2899d215fa871042a &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 79511e45062b40d2899d215fa871042a&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
79511e45062b40d2899d215fa871042a ##### SOURCE BEGIN #####
%% Season&apos;s Greeings
%
% &lt;&lt;xmas.gif&gt;&gt;
%
##### SOURCE END ##### 79511e45062b40d2899d215fa871042a
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Blog Post Number 300, Vibrating Logo</title>
   <link href="https://hpc.social/2023/blog-post-number-300-vibrating-logo/"/>
   <updated>2023-12-13T18:23:26-07:00</updated>
   <id>https://hpc.social/2023/blog-post-number-300-vibrating-logo</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;This is post number 300 of &lt;i&gt;Cleve&apos;s Corner&lt;/i&gt; blog. The first post was on June 6, 2012, which is 600 weeks ago. So, I have averaged one post every two weeks for over a decade. The posts were more frequent in the early days and are less frequent today.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ccc2ebb6-1c1e-46a0-b19b-455cc4058635&quot;&gt;Vibrating Logo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#71788969-1610-4111-83ec-1f91f974b786&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#407dbfb8-a326-471c-ac13-3f5c58b66121&quot;&gt;vibrating_logo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ea75a53d-1aaa-4128-b51b-46fd84380580&quot;&gt;vibrating_logo_frame&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#355fe3db-750d-4a82-b9d9-7de0df29ee65&quot;&gt;first frame&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4329c90d-ee62-412f-aa5d-018a818cca4d&quot;&gt;init_fig&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Vibrating Logo&lt;a name=&quot;ccc2ebb6-1c1e-46a0-b19b-455cc4058635&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;For my 300-th post, I want to take another look at our MathWorks logo. Here is a modified version of one of the animations that I entered in the recent &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries&quot;&gt;MATLAB Flipbook Mini Hack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/vibrating_logo.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;pre&gt;       Vibrating Logo&lt;/pre&gt;&lt;p&gt;The MathWorks company logo is the solution to a partial differential equation that describes how a disturbance travels through matter.  I discussed the logo in a five-part blog post in 2014. Here are links to three of those posts.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/2014/10/13/mathworks-logo-part-one-why-is-it-l-shaped/&quot;&gt;Why is it L-shaped?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/2014/11/17/mathworks-logo-part-four-method-of-particular-solutions-generates-the-logo/&quot;&gt;The method of particular solutions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/2014/12/01/mathworks-logo-part-five-evolution-of-the-logo/&quot;&gt;How the view has evolved.&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of my most-liked blog posts is by ten-year old &lt;a href=&quot;https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo/&quot;&gt;Eden Rajapakse&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Code&lt;a name=&quot;71788969-1610-4111-83ec-1f91f974b786&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This code is available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/vibrating_logo.m&quot;&gt;vibrating_logo&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;vibrating_logo&lt;a name=&quot;407dbfb8-a326-471c-ac13-3f5c58b66121&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&quot;codeinput&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; vibrating_logo
&lt;/pre&gt;&lt;pre class=&quot;codeinput&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;% MathWorks logo, vibrating L-shaped membrane.&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;% See Cleve&apos;s Corner, Dec. 13, 2023.&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;% https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo.&lt;/span&gt;

    stop = init_fig;
    fps = 6;
    f = 0;
    &lt;span class=&quot;comment&quot;&gt;% Loop until stop is toggled.&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; true
        f = f + 1;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; stop.Value
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
        vibrating_logo_frame(f)
        pause(1/fps)
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/vibes_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;vibrating_logo_frame&lt;a name=&quot;ea75a53d-1aaa-4128-b51b-46fd84380580&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&quot;codeinput&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; vibrating_logo_frame(f)
        &lt;span class=&quot;comment&quot;&gt;%&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;% One frame of animation.&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; f == 1
            first_frame
        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
        fud = get(gcf,&lt;span class=&quot;string&quot;&gt;&apos;UserData&apos;&lt;/span&gt;);
        [mu,L,s] = deal(fud{:});
        t = (f-1)/fps;
        Z = cos(mu(1)*t)*L{1} + sin(mu(2)*t)*L{2} + sin(mu(3)*t)*L{3} +  &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
            sin(mu(4)*t)*L{4} + sin(mu(5)*t)*L{5} + sin(mu(6)*t)*L{6};
        s.ZData = Z;
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;h4&gt;first frame&lt;a name=&quot;355fe3db-750d-4a82-b9d9-7de0df29ee65&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&quot;codeinput&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; first_frame
        cla
        axis &lt;span class=&quot;string&quot;&gt;off&lt;/span&gt;

        &lt;span class=&quot;comment&quot;&gt;% First six eigenvalues.&lt;/span&gt;
        mu = sqrt([9.6397238445, 15.19725192, 2*pi^2, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
                   29.5214811, 31.9126360, 41.4745099]);

        &lt;span class=&quot;comment&quot;&gt;% First six eigenfunctions.&lt;/span&gt;
        L{1} = 30*membrane(1,25);
        L{2} = 2*membrane(2,25);
        L{3} = -2*membrane(3,25);
        L{4} = 5*membrane(4,25);
        L{5} = -3*membrane(5,25);
        L{6} = 4*membrane(6,25);

        &lt;span class=&quot;comment&quot;&gt;% Surf plot with custom lighting.&lt;/span&gt;
        axes(&lt;span class=&quot;string&quot;&gt;&apos;CameraPosition&apos;&lt;/span&gt;, [-193.4013 -265.1546  220.4819],&lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;CameraTarget&apos;&lt;/span&gt;,[26 26 10], &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;CameraUpVector&apos;&lt;/span&gt;,[0 0 1], &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;CameraViewAngle&apos;&lt;/span&gt;,9.5, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;DataAspectRatio&apos;&lt;/span&gt;, [1 1 .9],&lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;Visible&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;off&apos;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;XLim&apos;&lt;/span&gt;,[1 51], &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;YLim&apos;&lt;/span&gt;,[1 51], &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;ZLim&apos;&lt;/span&gt;,[-13 40]);
        s = surface(zeros(size(L{1})), &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;EdgeColor&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;none&apos;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;FaceColor&apos;&lt;/span&gt;,[0.9 0.2 0.2], &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;FaceLighting&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;phong&apos;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;AmbientStrength&apos;&lt;/span&gt;,0.3, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;DiffuseStrength&apos;&lt;/span&gt;,0.6, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;Clipping&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;off&apos;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;BackFaceLighting&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;lit&apos;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;SpecularStrength&apos;&lt;/span&gt;,1.0, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;SpecularColorReflectance&apos;&lt;/span&gt;,1, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;SpecularExponent&apos;&lt;/span&gt;,7);
        light(&lt;span class=&quot;string&quot;&gt;&apos;Position&apos;&lt;/span&gt;,[40 100 20], &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;Style&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;local&apos;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;Color&apos;&lt;/span&gt;,[0 0.8 0.8]);
        light(&lt;span class=&quot;string&quot;&gt;&apos;Position&apos;&lt;/span&gt;,[.5 -1 .4], &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
             &lt;span class=&quot;string&quot;&gt;&apos;Color&apos;&lt;/span&gt;,[0.8 0.8 0]);
        set(gcf,&lt;span class=&quot;string&quot;&gt;&apos;UserData&apos;&lt;/span&gt;,{mu,L,s})
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;h4&gt;init_fig&lt;a name=&quot;4329c90d-ee62-412f-aa5d-018a818cca4d&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&quot;codeinput&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; stop = init_fig
        &lt;span class=&quot;comment&quot;&gt;% Initialize figure.&lt;/span&gt;
        fig = gcf;
        fig.Color = &lt;span class=&quot;string&quot;&gt;&apos;k&apos;&lt;/span&gt;;
        fig.MenuBar = &lt;span class=&quot;string&quot;&gt;&apos;none&apos;&lt;/span&gt;;
        fig.ToolBar = &lt;span class=&quot;string&quot;&gt;&apos;none&apos;&lt;/span&gt;;
        fig.NumberTitle = &lt;span class=&quot;string&quot;&gt;&apos;off&apos;&lt;/span&gt;;
        fig.Clipping = &lt;span class=&quot;string&quot;&gt;&apos;off&apos;&lt;/span&gt;;
        stop = uicontrol;
        stop.Style = &lt;span class=&quot;string&quot;&gt;&apos;togglebutton&apos;&lt;/span&gt;;
        stop.String = &lt;span class=&quot;string&quot;&gt;&apos;X&apos;&lt;/span&gt;;
        stop.FontSize = 12;
        stop.FontWeight = &lt;span class=&quot;string&quot;&gt;&apos;bold&apos;&lt;/span&gt;;
        stop.Units = &lt;span class=&quot;string&quot;&gt;&apos;normalized&apos;&lt;/span&gt;;
        stop.Position = [.92 .92 .06 .06];
        cla
        shg
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;codeinput&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;!-- 
    function grabCode_cfdea481005c456d8c4a25238f900460() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;cfdea481005c456d8c4a25238f900460 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; cfdea481005c456d8c4a25238f900460&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
cfdea481005c456d8c4a25238f900460 ##### SOURCE BEGIN #####
%% Blog Post Number 300, Vibrating Logo
% This is post number 300 of _Cleve&apos;s Corner_ blog.
% The first post was on June 6, 2012, which is 600 weeks ago.
% So, I have averaged one post every two weeks for over a decade.
% The posts were more frequent in the early days and are less frequent
% today.

%% Vibrating Logo 
% For my 300-th post, I want to take another look at our MathWorks logo.
% Here is a modified version of one of the animations that I entered in
% the recent 
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries
% MATLAB Flipbook Mini Hack&gt;.  
%
% &lt;&lt;vibrating_logo.gif&gt;&gt;
%
%         Vibrating Logo
%

%%
% The MathWorks company logo is the solution to a 
% partial differential equation that describes how a disturbance travels
% through matter.  I discussed the logo in a five-part blog post in 2014.
% Here are links to three of those posts.
%
% &lt;https://blogs.mathworks.com/cleve/2014/10/13/mathworks-logo-part-one-why-is-it-l-shaped/
% Why is it L-shaped?&gt;.
%
% &lt;https://blogs.mathworks.com/cleve/2014/11/17/mathworks-logo-part-four-method-of-particular-solutions-generates-the-logo/
% The method of particular solutions&gt;.
%
% &lt;https://blogs.mathworks.com/cleve/2014/12/01/mathworks-logo-part-five-evolution-of-the-logo/
% How the view has evolved.&gt;.
%
% One of my most-liked blog posts is by ten-year old
% &lt;https://blogs.mathworks.com/cleve/2021/12/23/a-new-view-of-our-logo/
% Eden Rajapakse&gt;.

%% Code
% This code is available at 
% &lt;https://blogs.mathworks.com/cleve/files/vibrating_logo.m
% vibrating_logo&gt;.

%% vibrating_logo

function vibrating_logo
    % MathWorks logo, vibrating L-shaped membrane.
    % See Cleve&apos;s Corner, Dec. 13, 2023.
    % https://blogs.mathworks.com/cleve/2023/12/13/blog-post-number-300-vibrating-logo.
    
    stop = init_fig;
    fps = 6;
    f = 0;
    % Loop until stop is toggled.
    while true
        f = f + 1;
        if stop.Value
            return
        end
        vibrating_logo_frame(f)
        pause(1/fps)
    end

%% vibrating_logo_frame

    function vibrating_logo_frame(f)
        % 
        % One frame of animation.
        if f == 1
            first_frame
        end
        fud = get(gcf,&apos;UserData&apos;);
        [mu,L,s] = deal(fud{:});
        t = (f-1)/fps;
        Z = cos(mu(1)*t)*L{1} + sin(mu(2)*t)*L{2} + sin(mu(3)*t)*L{3} +  ...
            sin(mu(4)*t)*L{4} + sin(mu(5)*t)*L{5} + sin(mu(6)*t)*L{6};
        s.ZData = Z;
    end

%% first frame

    function first_frame
        cla
        axis off

        % First six eigenvalues.
        mu = sqrt([9.6397238445, 15.19725192, 2*pi^2, ...
                   29.5214811, 31.9126360, 41.4745099]);

        % First six eigenfunctions.
        L{1} = 30*membrane(1,25);
        L{2} = 2*membrane(2,25);
        L{3} = -2*membrane(3,25);
        L{4} = 5*membrane(4,25);
        L{5} = -3*membrane(5,25);
        L{6} = 4*membrane(6,25);

        % Surf plot with custom lighting.
        axes(&apos;CameraPosition&apos;, [-193.4013 -265.1546  220.4819],...
             &apos;CameraTarget&apos;,[26 26 10], ...
             &apos;CameraUpVector&apos;,[0 0 1], ...
             &apos;CameraViewAngle&apos;,9.5, ...
             &apos;DataAspectRatio&apos;, [1 1 .9],...
             &apos;Visible&apos;,&apos;off&apos;, ...
             &apos;XLim&apos;,[1 51], ...
             &apos;YLim&apos;,[1 51], ...
             &apos;ZLim&apos;,[-13 40]);
        s = surface(zeros(size(L{1})), ...
             &apos;EdgeColor&apos;,&apos;none&apos;, ...
             &apos;FaceColor&apos;,[0.9 0.2 0.2], ...
             &apos;FaceLighting&apos;,&apos;phong&apos;, ...
             &apos;AmbientStrength&apos;,0.3, ...
             &apos;DiffuseStrength&apos;,0.6, ... 
             &apos;Clipping&apos;,&apos;off&apos;,...
             &apos;BackFaceLighting&apos;,&apos;lit&apos;, ...
             &apos;SpecularStrength&apos;,1.0, ...
             &apos;SpecularColorReflectance&apos;,1, ...
             &apos;SpecularExponent&apos;,7);
        light(&apos;Position&apos;,[40 100 20], ...
             &apos;Style&apos;,&apos;local&apos;, ...
             &apos;Color&apos;,[0 0.8 0.8]);
        light(&apos;Position&apos;,[.5 -1 .4], ...
             &apos;Color&apos;,[0.8 0.8 0]);
        set(gcf,&apos;UserData&apos;,{mu,L,s})
    end

%% init_fig

    function stop = init_fig
        % Initialize figure.
        fig = gcf;
        fig.Color = &apos;k&apos;;
        fig.MenuBar = &apos;none&apos;;
        fig.ToolBar = &apos;none&apos;;
        fig.NumberTitle = &apos;off&apos;;
        fig.Clipping = &apos;off&apos;;
        stop = uicontrol;
        stop.Style = &apos;togglebutton&apos;;
        stop.String = &apos;X&apos;;
        stop.FontSize = 12;
        stop.FontWeight = &apos;bold&apos;;
        stop.Units = &apos;normalized&apos;;
        stop.Position = [.92 .92 .06 .06];  
        cla
        shg
    end
end
##### SOURCE END ##### cfdea481005c456d8c4a25238f900460
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Bouncing Bucky Ball at Flipbook Mini Hack</title>
   <link href="https://hpc.social/2023/bouncing-bucky-ball-at-flipbook-mini-hack/"/>
   <updated>2023-11-16T23:01:49-07:00</updated>
   <id>https://hpc.social/2023/bouncing-bucky-ball-at-flipbook-mini-hack</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;The 2023 &lt;a href=&quot;https://www.mathworks.com/matlabcentral/contests/2023-matlab-mini-hack.html&quot;&gt;MATLAB Central Flipbook Mini Hack&lt;/a&gt; contest runs from November 6 until December 3.  Over 200 entries have been submitted in the first two weeks.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b522fbe2-47f9-4136-a6f2-1892f2cf0495&quot;&gt;New Rules&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#bfa6df5c-89fc-46be-b4f7-64f6a1fa7c33&quot;&gt;Gallery&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3d0c7d73-a1e6-40a1-94ca-11bc9e0705fd&quot;&gt;Personal Favorites&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#56cf252d-30c5-4192-b1a9-ab40e17f29c7&quot;&gt;Bouncing Bucky Ball&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#046a72f3-6f55-49b9-8420-0a1cd4c8e5d0&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8ea0a405-6fd5-4778-966c-4ff090808b5f&quot;&gt;Thanks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;New Rules&lt;a name=&quot;b522fbe2-47f9-4136-a6f2-1892f2cf0495&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This year&apos;s mini hack features short animations. The contest software runs the program you submit to make an animated GIF file with exactly 48 frames and an inner-frame delay time of 1/24 second.  So, your animation will run for two seconds, then continuously repeat. If you want periodic motion, you need to be back where you started by frame 48.&lt;/p&gt;
&lt;p&gt;In previous mini hacks, programs had to be Twitter length -- at most 255 characters long. Now, the new limit is 2,000 characters.  Comments and formatting blanks are not counted.  Remixes and reuse of other submissions is encouraged.&lt;/p&gt;
&lt;p&gt;Participants and other viewers vote on the submissions.  There are prizes like Amazon gift cards and T-shirts.  MathWorkers may participate, but not win prizes.&lt;/p&gt;
&lt;h4&gt;Gallery&lt;a name=&quot;bfa6df5c-89fc-46be-b4f7-64f6a1fa7c33&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Take a look at the &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries&quot;&gt;Gallery&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Personal Favorites&lt;a name=&quot;3d0c7d73-a1e6-40a1-94ca-11bc9e0705fd&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I find the results fascinating.  There are so many different creative styles, artistic talents and programming techniques. Here are a few of my personal favorites.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Jenny Bosten&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.mathworks.com/pick/2021/10/25/jenny-bostens-art-in-the-matlab-mini-hack&quot;&gt;Jenny Bosten&lt;/a&gt; is a familiar name on MATLAB Central. She is a Senior Lecturer in Psychology at the University of Sussex, where she is a &quot;visual neuroscientist specialising in colour vision.&quot; Her code for &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13760&quot;&gt;Time lapse of Lake view to the West&lt;/a&gt; shows she is also a wizard of coordinate systems and color maps.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/bosten.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;b&gt;&amp;#38534;&amp;#20809; &amp;#20013;&amp;#26449;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;I don&apos;t know anything about this person.  All I see is this name, &amp;#38534;&amp;#20809; &amp;#20013;&amp;#26449;, and this ingenious code for &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13092&quot;&gt;Fireworks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/fireworks.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;b&gt;Ned Gulley&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Ned is the long-time MathWorker who is the architect of MATLAB Central, and who, this time, is also a prolific participant.  One of his more mathematical animations is &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13840&quot;&gt;Orbiting Roots&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/gulley.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;b&gt;Eric Ludham&lt;/b&gt;&apos;&lt;/p&gt;
&lt;p&gt;Eric is head of the MathWorks development team for Graphics and Charting. Contributions like this &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13857&quot;&gt;Blooming Rose&lt;/a&gt; demonstrate his artistic design talent.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/ludham.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Bouncing Bucky Ball&lt;a name=&quot;56cf252d-30c5-4192-b1a9-ab40e17f29c7&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;My own contributions are not nearly as attractive as these.&lt;/p&gt;
&lt;p&gt;The 2,000 character limit is a good idea. It forced me to look critically at some old code and rewrite it to be simpler and clearer.&lt;/p&gt;
&lt;p&gt;This program for a &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/14102&quot;&gt;Bouncing Bucky Ball&lt;/a&gt; uses the &lt;tt&gt;hgtransform&lt;/tt&gt; object to good effect. I also think it has a nice solution to the problem facing everybody of how to retain state from one frame to the next.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/bouncing_bucky.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;046a72f3-6f55-49b9-8420-0a1cd4c8e5d0&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here is a link to a slightly more complicated version with one &lt;tt&gt;togglebutton&lt;/tt&gt; that provides a random restart capability. &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Bouncing_Bucky.m&quot;&gt;Bouncing_Bucky.m&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Thanks&lt;a name=&quot;8ea0a405-6fd5-4778-966c-4ff090808b5f&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Chen Lin, David Wey and Vinay Ramesh are running the Mini Hack this year,&lt;/p&gt;
&lt;!-- 
    function grabCode_65f76a589bbd4188bfa9698c4a4437a7() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;65f76a589bbd4188bfa9698c4a4437a7 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 65f76a589bbd4188bfa9698c4a4437a7&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
65f76a589bbd4188bfa9698c4a4437a7 ##### SOURCE BEGIN #####
%% Bouncing Bucky Ball at Flipbook Mini Hack
% The 2023
% &lt;https://www.mathworks.com/matlabcentral/contests/2023-matlab-mini-hack.html
% MATLAB Central Flipbook Mini Hack&gt; contest runs
% from November 6 until December 3.  Over 200 entries have been submitted
% in the first two weeks.
%

%% New Rules
% This year&apos;s mini hack features short animations.
% The contest software runs the program you submit to make an animated
% GIF file with exactly 48 frames and an inner-frame delay time
% of 1/24 second.  So, your animation will run for two seconds, then
% continuously repeat. If you want periodic motion, you need
% to be back where you started by frame 48.
%
% In previous mini hacks, programs had to be Twitter length REPLACE_WITH_DASH_DASH
% at most 255 characters long.
% Now, the new limit is 2,000 characters.  Comments and formatting
% blanks are not counted.  Remixes and reuse of other submissions is
% encouraged.
%
% Participants and other viewers vote on the submissions.  There are
% prizes like Amazon gift cards and T-shirts.  MathWorkers may 
% participate, but not win prizes.

%% Gallery
% Take a look at the
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries
% Gallery&gt;.

%% Personal Favorites
% I find the results fascinating.  There are so many different creative
% styles, artistic talents and programming techniques.
% Here are a few of my personal favorites.
%
% *Jenny Bosten*
%
% &lt;https://blogs.mathworks.com/pick/2021/10/25/jenny-bostens-art-in-the-matlab-mini-hack
% Jenny Bosten&gt; is a familiar name on MATLAB Central.
% She is a Senior Lecturer in Psychology at the University of Sussex,
% where she is a &quot;visual neuroscientist specialising in colour vision.&quot;
% Her code for 
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13760
% Time lapse of Lake view to the West&gt;
% shows she is also a wizard of coordinate systems and color maps.
%
% &lt;&lt;bosten.gif&gt;&gt; 
%
%
% *隆光 中村*
%
% I don&apos;t know anything about this person.  All I see is this 
% name, 隆光 中村, and this ingenious code for
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13092
% Fireworks&gt;.
%
% &lt;&lt;fireworks.gif&gt;&gt;
%
%
% *Ned Gulley*
%
% Ned is the long-time MathWorker who is the architect of MATLAB Central,
% and who, this time, is also a prolific participant.  One of his more
% mathematical animations is 
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13840
% Orbiting Roots&gt;.
%
% &lt;&lt;gulley.gif&gt;&gt;
%
%
% *Eric Ludham*&apos;
%
% Eric is head of the MathWorks development team for Graphics and Charting.
% Contributions like this
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/13857
% Blooming Rose&gt; demonstrate his artistic design talent.
%
% &lt;&lt;ludham.gif&gt;&gt;
%
%
%% Bouncing Bucky Ball
% My own contributions are not nearly as attractive as these.
%
% The 2,000 character limit is a good idea. It forced me to look
% critically at some old code and rewrite it to be simpler and clearer.
%
% This program for a
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/6/entries/14102
% Bouncing Bucky Ball&gt; uses the |hgtransform| object to good effect.
% I also think it has a nice solution to the problem facing everybody of
% how to retain state from one frame to the next.
%
% &lt;&lt;bouncing_bucky.gif&gt;&gt;
%

%% Software
% Here is a link to a slightly more complicated version with one 
% |togglebutton| that provides a random restart capability.  
% &lt;https://blogs.mathworks.com/cleve/files/Bouncing_Bucky.m
% Bouncing_Bucky.m&gt;

%% Thanks
% Chen Lin, David Wey and Vinay Ramesh are running the Mini Hack this year,

##### SOURCE END ##### 65f76a589bbd4188bfa9698c4a4437a7
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Exploring Matrices Exercises</title>
   <link href="https://hpc.social/2023/exploring-matrices-exercises/"/>
   <updated>2023-09-25T17:57:28-06:00</updated>
   <id>https://hpc.social/2023/exploring-matrices-exercises</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;Try your hand at a few exercises involving &lt;a href=&quot;https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices&quot;&gt;Exploring Matrices&lt;/a&gt;.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#39c51606-0f1d-4f63-a836-a5b7b53bd13b&quot;&gt;Qube Simplified&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7c52cde6-70d3-4ad5-b1a1-37c5ce6e87cc&quot;&gt;Exploring Matrices Exercises&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#72d1baf3-32a5-43fd-9ee9-d78b0756d365&quot;&gt;Matrix Multiplication&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5866120b-8ad5-44c6-91d4-7599fdd930ad&quot;&gt;Rotations and Scaling&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9ee4efdc-6cce-4067-b642-b70c3c75d2c6&quot;&gt;Computer Graphics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#08826629-b0f9-4a97-a3e3-655f52742c85&quot;&gt;Matrices and Cubes&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Qube Simplified&lt;a name=&quot;39c51606-0f1d-4f63-a836-a5b7b53bd13b&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Qube_simplified.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;I have simplified the &lt;tt&gt;Qube&lt;/tt&gt; app by removing these four buttons.&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;solve&lt;/tt&gt;.  The &amp;lt;== key now controls the unscrambling   operation.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;scramble&lt;/tt&gt;.  The ==&amp;gt; key now does six random rotations.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;order&lt;/tt&gt;.  I never found a satisfactory reference for   the group theory of Rubik&apos;s cube.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;score&lt;/tt&gt;.  I never found a use for the nuclear norm.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;Code for &lt;tt&gt;Qube&lt;/tt&gt; dated 9/24/2023 is included in the &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Apps_mzip.m&quot;&gt;Apps mzip archive&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Exploring Matrices Exercises&lt;a name=&quot;7c52cde6-70d3-4ad5-b1a1-37c5ce6e87cc&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here are a few exercises for &lt;a href=&quot;https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices&quot;&gt;Exploring Matrices&lt;/a&gt;. The answers are available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/ExMatAnswers.pdf&quot;&gt;ExMatAnswers&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Matrix Multiplication&lt;a name=&quot;72d1baf3-32a5-43fd-9ee9-d78b0756d365&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;b&gt;1.&lt;/b&gt; Compute by rows, and by columns.&lt;/p&gt;
&lt;p&gt;$$
  \left(
  \begin{array}{rrr}
     8 &amp;amp; 1 &amp;amp; 6 \\
     3 &amp;amp; 5 &amp;amp; 7 \\
     4 &amp;amp; 9 &amp;amp; 2
  \end{array}
  \right)
  \left(
  \begin{array}{r}
     1  \\
     1  \\
     1
  \end{array}
  \right)
$$&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.&lt;/b&gt; Solve for $z$ using inner products of rows, and using linear combinations of columns.&lt;/p&gt;
&lt;p&gt;$$
  \left(
  \begin{array}{rrr}
     1 &amp;amp; 2 &amp;amp; 3 \\
     4 &amp;amp; 5 &amp;amp; 6 \\
     7 &amp;amp; 8 &amp;amp; 9
  \end{array}
  \right)
  \left(
  \begin{array}{r}
     1  \\
     z  \\
     1
  \end{array}
  \right)
  \ = \
  \left(
  \begin{array}{r}
     0  \\
     0  \\
     0
  \end{array}
  \right)
$$&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.&lt;/b&gt; What do the &lt;tt&gt;m&lt;/tt&gt;, &lt;tt&gt;n&lt;/tt&gt; and &lt;tt&gt;p&lt;/tt&gt; buttons on the &lt;tt&gt;Multiply&lt;/tt&gt; app do? What are the other buttons and what do they do?&lt;/p&gt;
&lt;p&gt;&lt;b&gt;4.&lt;/b&gt; If &lt;i&gt;A&lt;/i&gt; is n-by-n and &lt;i&gt;x&lt;/i&gt; is n-by-1, how many multiplications are required to compute &lt;i&gt;A x&lt;/i&gt; ?&lt;/p&gt;
&lt;p&gt;&lt;b&gt;5.&lt;/b&gt; If &lt;i&gt;A&lt;/i&gt; is m-by-n and &lt;i&gt;B&lt;/i&gt; is n-by-p, how many multiplications are required to compute &lt;i&gt;A B&lt;/i&gt; ?&lt;/p&gt;
&lt;h4&gt;Rotations and Scaling&lt;a name=&quot;5866120b-8ad5-44c6-91d4-7599fdd930ad&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;b&gt;1.&lt;/b&gt; What is &lt;i&gt;R&lt;/i&gt;(30&amp;ordm;)?&lt;/p&gt;
&lt;p&gt;$$
R(\theta) \ = \
\left(
  \begin{array}{rr}
     \cos{\theta} &amp;amp; \sin{\theta} \\
    -\sin{\theta} &amp;amp; \cos{\theta}
  \end{array}
  \right)
$$&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.&lt;/b&gt; Explain &lt;a href=&quot;https://xkcd.com/184&quot;&gt;https://xkcd.com/184&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.&lt;/b&gt; What is the value of $\theta$ ?&lt;/p&gt;
&lt;p&gt;$$
R(\theta) \ = \
\left(
  \begin{array}{rr}
     0.8 &amp;amp; 0.6 \\
    -0.6 &amp;amp; 0.8
  \end{array}
  \right)
$$&lt;/p&gt;
&lt;p&gt;&lt;b&gt;4.&lt;/b&gt; What is the value of $\theta$ ?&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/theta_exer.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;b&gt;5.&lt;/b&gt; Edit a copy of &lt;tt&gt;Rotate.m&lt;/tt&gt; and replace the house with a hand.  You can use &lt;a href=&quot;https://mathworks-my.sharepoint.com/:u:/p/moler/EVREwZQo4ZBLkDggPTky6o4BNIfckvaLQoCDdX4ICjch9A?e=dGA2Y4&quot;&gt;my hand&lt;/a&gt; or your own hand; see exercise 3.4 in &lt;a href=&quot;https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/interp.pdf&quot;&gt;Numerical Computing with MATLAB&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/hand_exer.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Computer Graphics&lt;a name=&quot;9ee4efdc-6cce-4067-b642-b70c3c75d2c6&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;b&gt;1.&lt;/b&gt; Show how homogeneous coordinates and matrix-vector multiplication by &lt;tt&gt;Tx&lt;/tt&gt;, &lt;tt&gt;Ty&lt;/tt&gt; or &lt;tt&gt;Tz&lt;/tt&gt; produce translation.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.&lt;/b&gt; What is the range of the rotations used by the pitch, roll, and yaw buttons on the &lt;tt&gt;Grafix&lt;/tt&gt; app?&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.&lt;/b&gt; What color in the beacon on top of the plane? How would you change the beacon&apos;s color?&lt;/p&gt;
&lt;p&gt;&lt;b&gt;4,&lt;/b&gt; What is the function of the resolution and offset sliders for the teapot?&lt;/p&gt;
&lt;p&gt;&lt;b&gt;5,&lt;/b&gt; How many times does the bucky ball bounce off the sides of the plot window?&lt;/p&gt;
&lt;h4&gt;Matrices and Cubes&lt;a name=&quot;08826629-b0f9-4a97-a3e3-655f52742c85&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;b&gt;1.&lt;/b&gt; What is the color of central cubelet in the Color Cube?&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.&lt;/b&gt; What do the &quot;&amp;lt;=&quot; , &quot;&amp;lt;==&quot; , &quot;=&amp;gt;&quot; and  &quot;==&amp;gt;&quot; buttons on &lt;tt&gt;Qube&lt;/tt&gt; do?&lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.&lt;/b&gt; What is &quot;God&apos;s Number&quot; for a 3-by-3-by-3 Rubik&apos;s Cube? What are &lt;tt&gt;Q20&lt;/tt&gt; and &lt;tt&gt;Q26&lt;/tt&gt;? See &lt;a href=&quot;https://blogs.mathworks.com/cleve/2022/09/05/rubiks-cube-superflips-and-gods-number&quot;&gt;Cleve&apos;s Corner 2022/09/05&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;4.&lt;/b&gt; Can you restore the following scrambled cubes with fewer moves than &lt;tt&gt;&amp;lt;==&lt;/tt&gt;, the unscramble key?  Use the quarter-turn metric and reset the cube with &lt;tt&gt;start&lt;/tt&gt; or by clicking on &lt;tt&gt;stack&lt;/tt&gt; and &lt;tt&gt;Q0&lt;/tt&gt;. You might also want to set &lt;tt&gt;speed&lt;/tt&gt; to 30 or 45,&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;LRUDFB&lt;/tt&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;LRL&apos;R&apos;&lt;/tt&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;FLLLRB&lt;/tt&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;Q26&lt;/tt&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Reset the random number generator by entering  &lt;tt&gt;rng(r)&lt;/tt&gt;  for some   small integer &lt;tt&gt;r&lt;/tt&gt; in the command window and then generate six   random rotations with the   &lt;tt&gt;==&amp;gt;&lt;/tt&gt; key.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;!-- 
    function grabCode_661f86ea0d734810b8ca2514e6ba69c9() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;661f86ea0d734810b8ca2514e6ba69c9 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 661f86ea0d734810b8ca2514e6ba69c9&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
661f86ea0d734810b8ca2514e6ba69c9 ##### SOURCE BEGIN #####
%% Exploring Matrices Exercises
% Try your hand at a few exercises involving
% &lt;https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices
% Exploring Matrices&gt;.

%% Qube Simplified
%
% &lt;&lt;Qube_simplified.png&gt;&gt;
%
% I have simplified the |Qube| app by removing these four buttons.
% 
% * |solve|.  The &lt;== key now controls the unscrambling
%   operation.
%
% * |scramble|.  The ==&gt; key now does six random rotations.
%
% * |order|.  I never found a satisfactory reference for  
%   the group theory of Rubik&apos;s cube. 
%
% * |score|.  I never found a use for the nuclear norm.
%
% Code for |Qube| dated 9/24/2023 is included in the
% &lt;https://blogs.mathworks.com/cleve/files/Apps_mzip.m
% Apps mzip archive&gt;.

%% Exploring Matrices Exercises
%
% Here are a few exercises for 
% &lt;https://blogs.mathworks.com/cleve/2023/09/11/exploring-matrices
% Exploring Matrices&gt;.
% The answers are available at 
% &lt;https://blogs.mathworks.com/cleve/files/ExMatAnswers.pdf
% ExMatAnswers&gt;.

%% Matrix Multiplication
%
% *1.* 
% Compute by rows, and by columns.
%
% $$
%   \left(
%   \begin{array}{rrr}
%      8 &amp; 1 &amp; 6 \\
%      3 &amp; 5 &amp; 7 \\
%      4 &amp; 9 &amp; 2
%   \end{array}
%   \right)     
%   \left(
%   \begin{array}{r}
%      1  \\
%      1  \\
%      1
%   \end{array}
%   \right) 
% $$
%
%
% *2.*
% Solve for $z$ using inner products of rows, and
% using linear combinations of columns.
%
% $$ 
%   \left(
%   \begin{array}{rrr}
%      1 &amp; 2 &amp; 3 \\
%      4 &amp; 5 &amp; 6 \\
%      7 &amp; 8 &amp; 9
%   \end{array}
%   \right) 
%   \left(
%   \begin{array}{r}
%      1  \\
%      z  \\
%      1
%   \end{array}
%   \right) 
%   \ = \
%   \left(
%   \begin{array}{r}
%      0  \\
%      0  \\
%      0
%   \end{array}
%   \right) 
% $$
%
%
% *3.*
% What do the |m|, |n| and |p| buttons on the |Multiply| app do?
% What are the other buttons and what do they do?
%
%
% *4.* 
% If _A_ is n-by-n and _x_ is n-by-1,
% how many multiplications are required to compute _A x_ ?
%
% *5.* 
% If _A_ is m-by-n and _B_ is n-by-p,
% how many multiplications are required to compute _A B_ ?

%% Rotations and Scaling
%
% *1.*
% What is _R_(30º)?
%
% $$ 
% R(\theta) \ = \
% \left(
%   \begin{array}{rr}
%      \cos{\theta} &amp; \sin{\theta} \\
%     -\sin{\theta} &amp; \cos{\theta}
%   \end{array}
%   \right)
% $$
%
% *2.*
% Explain &lt;https://xkcd.com/184&gt;.
%
% *3.*
% What is the value of $\theta$ ?
%
% $$ 
% R(\theta) \ = \
% \left(
%   \begin{array}{rr}
%      0.8 &amp; 0.6 \\
%     -0.6 &amp; 0.8
%   \end{array}
%   \right) 
% $$
%
%
% *4.*
% What is the value of $\theta$ ?
%
% &lt;&lt;theta_exer.png&gt;&gt;
%
%
% *5.* 
% Edit a copy of |Rotate.m| and replace the house with a hand.  You can use
% &lt;https://mathworks-my.sharepoint.com/:u:/p/moler/EVREwZQo4ZBLkDggPTky6o4BNIfckvaLQoCDdX4ICjch9A?e=dGA2Y4  my hand&gt;
% or your own hand; see exercise 3.4 in
% &lt;https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/interp.pdf
% Numerical Computing with MATLAB&gt; .
%
% &lt;&lt;hand_exer.png&gt;&gt;
%

%% Computer Graphics
%
% *1.*
% Show how homogeneous coordinates and matrix-vector multiplication by
% |Tx|, |Ty| or |Tz| produce translation.
%
%
% *2.*
% What is the range of the rotations used by the pitch, roll, and yaw
% buttons on the |Grafix| app?
%
% *3.*
% What color in the beacon on top of the plane?
% How would you change the beacon&apos;s color?
%
%
% *4,*
% What is the function of the resolution and offset sliders for the teapot?
%
%
% *5,*
% How many times does the bucky ball bounce off the sides of the plot
% window?
%


%% Matrices and Cubes
%
% *1.*
% What is the color of central cubelet in the Color Cube?
%
%
% *2.*
% What do the &quot;&lt;=&quot; , &quot;&lt;==&quot; , &quot;=&gt;&quot; and  &quot;==&gt;&quot; buttons on |Qube| do?
%
%
% *3.* 
% What is &quot;God&apos;s Number&quot; for a 3-by-3-by-3 Rubik&apos;s Cube?
% What are |Q20| and |Q26|?
% See &lt;https://blogs.mathworks.com/cleve/2022/09/05/rubiks-cube-superflips-and-gods-number
% Cleve&apos;s Corner 2022/09/05&gt;.
%
%
% *4.*
% Can you restore the following scrambled cubes with fewer moves than |&lt;==|,
% the unscramble key?  Use the quarter-turn metric and
% reset the cube with |start| or by clicking on |stack| and |Q0|.
% You might also want to set |speed| to 30 or 45,
%
% * |LRUDFB|
% 
% * |LRL&apos;R&apos;|
% 
% * |FLLLRB|
% 
% * |Q26|
%
% * Reset the random number generator by entering  |rng(r)|  for some
%   small integer |r| in the command window and then generate six 
%   random rotations with the   |==&gt;| key.


##### SOURCE END ##### 661f86ea0d734810b8ca2514e6ba69c9
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Exploring Matrices</title>
   <link href="https://hpc.social/2023/exploring-matrices/"/>
   <updated>2023-09-12T03:11:52-06:00</updated>
   <id>https://hpc.social/2023/exploring-matrices</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;I have spent much of my career working to bring abstract linear algebra and practical matrix computation closer together.  This project is my latest effort.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#76e7f706-3666-4329-b846-6b0ab1b75468&quot;&gt;Alibi&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6c62b301-b35d-4699-a60a-6dc8bd2f86c3&quot;&gt;Exploring Matrices&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#653e3c66-3977-46c8-aef6-8ae60d87baa9&quot;&gt;YouTube Videos&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ea1683fd-3523-4939-8c2e-c581324ac557&quot;&gt;Matrix Multiplication&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#254c72ed-9b08-4442-b7a5-6d4f512351ef&quot;&gt;Rotation and Scaling&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#cef8c368-00e7-4ccb-9f05-f2435e94a403&quot;&gt;Computer Graphics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#eec3c339-e1b1-466c-8361-62f63808b278&quot;&gt;Matrices and Cubes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#873c693b-1541-41b8-b6c6-583b05562cd0&quot;&gt;Simulink&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e6b8796b-c1b0-4132-9038-5e5cc92f9ec2&quot;&gt;AI and Gorillas&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#96f4d47e-9920-4215-bf7d-2bf2a3286ab9&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#29bbbdbc-5d65-4ac3-a74e-1aafe0388a95&quot;&gt;Thanks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6116cfa9-4ed1-4e87-b2ed-099f26839a77&quot;&gt;Dedication&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Alibi&lt;a name=&quot;76e7f706-3666-4329-b846-6b0ab1b75468&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Over sixty years ago, as a sophomore contemplating a major in mathematics, I took a course entitled Survey of Modern Algebra. We used a now-classic textbook by MacLane and Birkhoff that featured abstract theorems about groups, rings, fields, vector spaces and linear algebra. I remember the colorful terms &lt;i&gt;alias&lt;/i&gt; and &lt;i&gt;alibi&lt;/i&gt; had something to do with change  of basis and change of position, but I have never seen those terms again.&lt;/p&gt;
&lt;p&gt;The next year, I took Numerical Analysis.  We did some of the homework on a Burroughhs 205 Datatron and I wrote a machine language program to solve simultaneous linear equations.  I was hooked.&lt;/p&gt;
&lt;p&gt;But at the time I did not realize that the two courses were about the same magnificent object -- the &lt;i&gt;matrix&lt;/i&gt;.&lt;/p&gt;
&lt;h4&gt;Exploring Matrices&lt;a name=&quot;6c62b301-b35d-4699-a60a-6dc8bd2f86c3&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Exploring Matrices is a multi-media project that shows matrices in action.  Short videos, blog posts, interactive MATLAB software and self-study exercises investigate applications of matrices. The material is intended for studebts in an undergraduate course in linear algebra or computational science. However, anyone using matrices should find topics that interest them.&lt;/p&gt;
&lt;p&gt;The first release of Exploring Matrices has six modules. All of the modules feature animated MATLAB displays and four of the modules include interactive MATLAB &quot;apps&quot;. The modules are:&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Matrix Multiplication&lt;/li&gt;&lt;li&gt;Rotation and Scaling&lt;/li&gt;&lt;li&gt;Computer Graphics&lt;/li&gt;&lt;li&gt;Matrices and Cubes&lt;/li&gt;&lt;li&gt;Simulink&lt;/li&gt;&lt;li&gt;AI and Gorillas %&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;YouTube Videos&lt;a name=&quot;653e3c66-3977-46c8-aef6-8ae60d87baa9&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;An introduction and six videos ranging in length from one to six minutes, are available on YouTube at&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://youtube.com/playlist?list=PLn8PRpmsu08oGNmtBfFOmgVC0TlXDaLDJ&quot;&gt;https://youtube.com/playlist?list=PLn8PRpmsu08oGNmtBfFOmgVC0TlXDaLDJ&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first four of these videos feature animations produced by our four MATLAB apps -- &lt;tt&gt;Multiply&lt;/tt&gt;, &lt;tt&gt;Rotate&lt;/tt&gt;, &lt;tt&gt;Grafix&lt;/tt&gt;, and &lt;tt&gt;Qube&lt;/tt&gt;. The other two videos describe two applications, simulation of control systems and neural networks for facial recognition (of gorillas).&lt;/p&gt;
&lt;h4&gt;Matrix Multiplication&lt;a name=&quot;ea1683fd-3523-4939-8c2e-c581324ac557&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Some viewers may just be learning the mechanics of matrix multiplication. Other viewers will have encountered it years ago. The traditional algorithm for computing the product of two matrices involves inner products between the rows of the first matrix and the columns of the second.  A less familiar algorithm, which involves linear combinations of the columns of the first matrix, is often more efficient and informative.  The two approaches produce the same final result from intermediate terms in different orders.&lt;/p&gt;
&lt;p&gt;Here is one frame from the animation of these two algorithms generated by our &lt;tt&gt;Multiply&lt;/tt&gt; app.  The highlighted element in the first matrix either moves across the rows or goes down the columns.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Multy.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Rotation and Scaling&lt;a name=&quot;254c72ed-9b08-4442-b7a5-6d4f512351ef&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Our first matrices are 2-by-2.  We see how the matrix&lt;/p&gt;
&lt;p&gt;$$
R \ = \
\left(
  \begin{array}{rr}
     \cos{\theta} &amp;amp; \sin{\theta} \\
    -\sin{\theta} &amp;amp; \cos{\theta}
  \end{array}
  \right)
$$&lt;/p&gt;
&lt;p&gt;rotates points by the angle $\theta$, measured in degrees.&lt;/p&gt;
&lt;p&gt;We also see how the matrix&lt;/p&gt;
&lt;p&gt;$$
S \ = \
\left(
  \begin{array}{rr}
     \sigma &amp;amp; 0 \\
     0 &amp;amp; \sigma
  \end{array}
  \right)
\ \ \ \ \ \ \ \
$$&lt;/p&gt;
&lt;p&gt;makes objects larger and smaller.&lt;/p&gt;
&lt;p&gt;The two can be combined with matrix multiplication. For more operations in higher dimensions, matrix multiplication provides a unifying framework.&lt;/p&gt;
&lt;p&gt;Here is one frame from the animation of rotation and scaling generated by the &lt;tt&gt;Rotate&lt;/tt&gt; app.  The first panel displays a 2-by-2 rotation matrix, the second panel displays a 2-by-2 diagonal scaling matrix, and the third panel displays their product.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Rotate.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Computer Graphics&lt;a name=&quot;cef8c368-00e7-4ccb-9f05-f2435e94a403&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Operations with the 4-by-4 matrices that are at the heart of modern computer graphics employ a system known as &quot;homogeneous coordinates&quot;. The leading 3-by-3 submatrix produces rotation and scaling in three dimensions.  The fourth column produces translations.&lt;/p&gt;
&lt;p&gt;Here is one frame from an animation of rotation about the x-axis generated by the &lt;tt&gt;Grafix&lt;/tt&gt; app. This is often called &quot;pitch&quot;.  Rotation about the y- and z-axes are &quot;roll&quot; and &quot;yaw&quot;,&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Graphics.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Matrices and Cubes&lt;a name=&quot;eec3c339-e1b1-466c-8361-62f63808b278&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Rubik&apos;s Cube, named for its inventor, Ern&amp;#337; Rubik, a Hungarian professor of architecture, is the greatest mathematical puzzle of all time. Our digital simulation of the puzzle, &lt;tt&gt;Qube&lt;/tt&gt;, is powered by rotation matrices.&lt;/p&gt;
&lt;p&gt;The model consists of 27 identical copies of a single small &lt;i&gt;cubelet&lt;/i&gt; whose sides are colored red, white, blue, yellow, orange and green. Initially, all cubelets have the same orientation. A &lt;i&gt;move&lt;/i&gt; is the simultaneous rotation of the nine cubelets in one of the six faces, by 90&amp;deg; or 180&amp;deg;, clockwise or counterclockwise.  This leads to $4.3 \times 10^{19}$ possible configurations for a scrambled cube.&lt;/p&gt;
&lt;p&gt;The object of the puzzle is to return a scrambled cube to the initial state.  Most people are interested in solving the puzzle rapidly, but I am more interested in the number of moves required.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;Qube&lt;/tt&gt; offers animations of many mathematical properties of Rubik&apos;s cubes.  Here is a frame from one of them.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Qube_frame.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Simulink&lt;a name=&quot;873c693b-1541-41b8-b6c6-583b05562cd0&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;MATLAB&apos;s companion product, Simulink, is a block diagram programming environment used to design and simulate systems with multidomain models and to automatically generate the code required to operate embedded processors.&lt;/p&gt;
&lt;p&gt;Matrices are involved in dozens of different ways by Simulink, but most users rarely see operations at that detailed level. Our Simulink module shows a model of an automobile being driven on a test track and displays the pitch, roll and yaw recorded by the matrix connecting the coordinate system for the automobile to the coordinate system for the track.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Simulink.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;AI and Gorillas&lt;a name=&quot;e6b8796b-c1b0-4132-9038-5e5cc92f9ec2&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This is a personal story about a project in the early stages of development.&lt;/p&gt;
&lt;p&gt;My wife and I first visited gorillas in the Volcano National Park of Rwanda twelve years ago. An American primatologist named Dian Fossey had studied the gorillas between 1966 and her murder by poachers in 1985. Her book &lt;i&gt;Gorillas in the Mist&lt;/i&gt; was very popular and was the basis for a critically acclaimed 1988 Hollywood movie starring Sigourney Weaver.&lt;/p&gt;
&lt;p&gt;We have become good friends with the people in the &lt;a href=&quot;https://www.gorilladoctors.org/&quot;&gt;Gorilla Doctors&lt;/a&gt; organization. These African and American veterinarians attend to the health of the roughly 1,000 gorillas in the park.  Most of the gorillas have African names like &quot;Inkundwa&quot; and &quot;Maisha&quot;.  We envision a gorilla facial recognition system that is available on cell phones and tablets so that new guides and doctors can learn the names of their patients.&lt;/p&gt;
&lt;p&gt;Inception-v3 is a convolutional neural network (CNN) that is widely used for image processing. We have a version of the network pretrained on more than a million images from the ImageNet database. This publicly available system knows nothing about gorillas. We must do additional training using photos of our unique subjects.&lt;/p&gt;
&lt;p&gt;This is where matrices are applied.  Training a CNN involves determining the values of thousands of weights and coefficients.  The digital photos, regarded as vectors, and repeatedly multiplied by circulant matrices where each row is a shifted copy of the other rows.  Importantly, a modern CNN also contains some nonlinear layers.&lt;/p&gt;
&lt;p&gt;Here is one photo from a small test collection.  Indundwa appears to have his own selfie stick.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;https://blogs.mathworks.com/cleve/files/Gorillas.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;96f4d47e-9920-4215-bf7d-2bf2a3286ab9&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A self-extracting MATLAB source archive of our four apps is available at&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Apps_mzip.m&quot;&gt;https://blogs.mathworks.com/cleve/files/Apps_mzip.m&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Thanks&lt;a name=&quot;29bbbdbc-5d65-4ac3-a74e-1aafe0388a95&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Thanks to Jackson Kustell, Josh Bethoney and Heather Gorr from MathWorks and Jan Ramer and Mike Cranfield from Gorilla Doctors.&lt;/p&gt;
&lt;h4&gt;Dedication&lt;a name=&quot;6116cfa9-4ed1-4e87-b2ed-099f26839a77&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;We dedicate the Gorillas project to the memory of &lt;a href=&quot;https://www.marylandzoo.org/news-and-updates/2023/08/mourning-the-loss-of-dr-mike-cranfield&quot;&gt;Mike Cranfield, DMV&lt;/a&gt;.  Mike was Executive Director of the Mountain Gorillas Veterinary Project in Rwanda from 1999 until 2014.  Before Rwanda, he held various positions at the Maryland Zoo in Baltimore.&lt;/p&gt;
&lt;p&gt;Three months ago, Mike sent us a disc drive containing over 14,000 photographs of gorillas he had taken in Rwanda.  We are now sorting and organizing the photos to provide  specialized training of the facial recognition neural net.&lt;/p&gt;
&lt;p&gt;A month ago, Mike was hospitalized from an apparent attack of West Nile Virus.  He passed away on August 27.  Ironically, after years of working safely in the mountain jungles of Central Africa, it is likely that he acquired the virus from a mosquito bite at his family&apos;s cabin in Canada.&lt;/p&gt;
&lt;!-- 
    function grabCode_77d29507140c40a1a497777d9fd035e6() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;77d29507140c40a1a497777d9fd035e6 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 77d29507140c40a1a497777d9fd035e6&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
77d29507140c40a1a497777d9fd035e6 ##### SOURCE BEGIN #####
%% Exploring Matrices
% I have spent much of my career working to bring abstract linear 
% algebra and practical matrix computation closer together.  This project
% is my latest effort.

%% Alibi
% Over sixty years ago, as a sophomore contemplating a major
% in mathematics, I took a course entitled Survey of Modern Algebra.
% We used a now-classic textbook by MacLane and Birkhoff that featured
% abstract theorems about groups, rings, fields, vector spaces and
% linear algebra.
% I remember the colorful terms _alias_ and _alibi_ had something
% to do with change  of basis and change of position, but I have never
% seen those terms again.
%
% The next year, I took Numerical Analysis.  We did some of the homework
% on a Burroughhs 205 Datatron and I wrote a machine language program to
% solve simultaneous linear equations.  I was hooked.
%
% But at the time I did not realize that the two courses were about the
% same magnificent object REPLACE_WITH_DASH_DASH the _matrix_. 
% 

%% Exploring Matrices
% Exploring Matrices is a multi-media project that shows matrices
% in action.  Short videos, blog posts,
% interactive MATLAB software and self-study exercises investigate
% applications of matrices. The material is intended for studebts in an
% undergraduate course in linear algebra or computational science.
% However, anyone using matrices should find topics that interest them.
%
% The first release of Exploring Matrices has six modules.
% All of the modules feature animated MATLAB displays and
% four of the modules include interactive MATLAB &quot;apps&quot;.
% The modules are:
% 
% * Matrix Multiplication
% * Rotation and Scaling
% * Computer Graphics
% * Matrices and Cubes
% * Simulink
% * AI and Gorillas
% %

%% YouTube Videos
% An introduction and six videos ranging in length from one to 
% six minutes, are available on YouTube at
%
% &lt;https://youtube.com/playlist?list=PLn8PRpmsu08oGNmtBfFOmgVC0TlXDaLDJ&gt;.
%
% The first four of these videos feature animations produced by our four
% MATLAB apps REPLACE_WITH_DASH_DASH |Multiply|, |Rotate|, |Grafix|, and |Qube|.
% The other two videos describe two applications, simulation of control
% systems and neural networks for facial recognition (of gorillas).

%% Matrix Multiplication
% Some viewers may just be learning the mechanics of matrix multiplication.
% Other viewers will have encountered it years ago.
% The traditional algorithm for computing the product of two
% matrices involves inner products between the rows of the first matrix
% and the columns of the second.  A less familiar algorithm, which
% involves linear combinations of the columns of the first matrix,
% is often more efficient and informative.  The two approaches produce
% the same final result from intermediate terms in different orders.
%
% Here is one frame from the animation of these two algorithms generated
% by our |Multiply| app.  The highlighted element in the first matrix
% either moves across the rows or goes down the columns.
%
% &lt;&lt;Multy.png&gt;&gt;

%% Rotation and Scaling
% Our first matrices are 2-by-2.  We see how the matrix
%
% $$ 
% R \ = \
% \left(
%   \begin{array}{rr}
%      \cos{\theta} &amp; \sin{\theta} \\
%     -\sin{\theta} &amp; \cos{\theta}
%   \end{array}
%   \right) 
% $$
%
% rotates points by the angle $\theta$, measured in degrees.
%
% We also see how the matrix
%
% $$ 
% S \ = \
% \left(
%   \begin{array}{rr}
%      \sigma &amp; 0 \\
%      0 &amp; \sigma
%   \end{array}
%   \right) 
% \ \ \ \ \ \ \ \
% $$
%
% makes objects larger and smaller.
%
% The two can be combined with matrix multiplication.
% For more operations in higher dimensions, matrix multiplication
% provides a unifying framework.
%
% Here is one frame from the animation of rotation and scaling generated
% by the |Rotate| app.  The first panel displays a 2-by-2 rotation 
% matrix, the second panel displays a 2-by-2 diagonal scaling matrix,
% and the third panel displays their product.
%
% &lt;&lt;Rotate.png&gt;&gt;
%

%% Computer Graphics
% Operations with the 4-by-4 matrices that are at the heart of modern 
% computer graphics employ a system known as &quot;homogeneous coordinates&quot;.
% The leading 3-by-3 submatrix produces rotation and scaling in 
% three dimensions.  The fourth column produces translations.
%
% Here is one frame from an animation of rotation about the x-axis
% generated by the |Grafix| app.
% This is often called &quot;pitch&quot;.  Rotation about the y- and z-axes
% are &quot;roll&quot; and &quot;yaw&quot;,
% 
% &lt;&lt;Graphics.png&gt;&gt;
%

%% Matrices and Cubes
% Rubik&apos;s Cube, named for its inventor, Ernő Rubik, a Hungarian professor
% of architecture, is the greatest mathematical puzzle of all time. Our
% digital simulation of the puzzle, |Qube|, is powered by rotation 
% matrices.
%
% The model consists of 27 identical copies of a single small _cubelet_ 
% whose sides are colored red, white, blue, yellow, orange and green.
% Initially, all cubelets have the same orientation.
% A _move_ is the simultaneous rotation of the nine cubelets in one of 
% the six faces, by 90° or 180°, clockwise or counterclockwise.  This
% leads to $4.3 \times 10^{19}$ possible configurations for a scrambled
% cube.  
% 
% The object of the puzzle is to return a scrambled cube to the initial
% state.  Most people are interested in solving the puzzle rapidly,
% but I am more interested in the number of moves required.
%
% |Qube| offers animations of many mathematical properties
% of Rubik&apos;s cubes.  Here is a frame from one of them.
%
% &lt;&lt;Qube_frame.png&gt;&gt;

%% Simulink
% MATLAB&apos;s companion product, Simulink, is a block diagram programming
% environment used to design and simulate systems with multidomain 
% models and to automatically generate the code required to operate
% embedded processors.
%
% Matrices are involved in dozens of different ways by Simulink,
% but most users rarely see operations at that detailed level.
% Our Simulink module shows a model of an automobile being driven
% on a test track and displays the pitch, roll and yaw recorded by
% the matrix connecting the coordinate system for the automobile to
% the coordinate system for the track.
%
% &lt;&lt;Simulink.png&gt;&gt;

%% AI and Gorillas
% This is a personal story about a project in the early stages of 
% development.  
% 
% My wife and I first visited gorillas
% in the Volcano National Park of Rwanda twelve years ago.
% An American primatologist named Dian Fossey had studied the gorillas
% between 1966 and her murder by poachers in 1985.
% Her book _Gorillas in the Mist_ was very popular and was the basis 
% for a critically acclaimed 1988 Hollywood movie starring
% Sigourney Weaver.
%
% We have become good friends with the people in the
% &lt;https://www.gorilladoctors.org/ Gorilla Doctors&gt; organization.
% These African and American veterinarians attend to the health of the
% roughly 1,000 gorillas in the park.  Most of the gorillas have
% African names like &quot;Inkundwa&quot; and &quot;Maisha&quot;.  We envision a
% gorilla facial recognition system that is available on
% cell phones and tablets so that new guides and doctors can learn
% the names of their patients.
%
% Inception-v3 is a convolutional neural network (CNN) that is widely
% used for image processing. We have a version of the network 
% pretrained on more than a million images from the ImageNet database. 
% This publicly available system knows nothing about gorillas.
% We must do additional training using photos of our unique subjects.
%
% This is where matrices are applied.  Training a CNN involves determining
% the values of thousands of weights and coefficients.  The digital photos,
% regarded as vectors, and repeatedly multiplied by circulant matrices
% where each row is a shifted copy of the other rows.  Importantly,
% a modern CNN also contains some nonlinear layers.
%
% Here is one photo from a small test collection.  Indundwa appears
% to have his own selfie stick. 
%
% &lt;&lt;Gorillas.png&gt;&gt;

%% Software
% A self-extracting MATLAB source archive of our four apps is available at
%
% &lt;https://blogs.mathworks.com/cleve/files/Apps_mzip.m&gt;
% 

%% Thanks
% Thanks to Jackson Kustell, Josh Bethoney and Heather Gorr from MathWorks
% and Jan Ramer and Mike Cranfield from Gorilla Doctors.

%% Dedication  
% We dedicate the Gorillas project to the memory of
% &lt;https://www.marylandzoo.org/news-and-updates/2023/08/mourning-the-loss-of-dr-mike-cranfield
% Mike Cranfield, DMV&gt;.  Mike was Executive Director of the Mountain Gorillas 
% Veterinary Project in Rwanda from 1999 until 2014.  Before Rwanda, 
% he held various positions at the Maryland Zoo in Baltimore.
%
% Three months ago, Mike sent us a disc drive containing over 14,000
% photographs of gorillas he had taken in Rwanda.  We are now
% sorting and organizing the photos to provide  specialized training
% of the facial recognition neural net.
%
% A month ago, Mike was hospitalized from an apparent attack of West Nile
% Virus.  He passed away on August 27.  Ironically, after years of working
% safely in the mountain jungles of Central Africa, it is likely that
% he acquired the virus from a mosquito bite at his family&apos;s cabin
% in Canada.
##### SOURCE END ##### 77d29507140c40a1a497777d9fd035e6
--&gt;
</content>
 </entry>
 
 <entry>
   <title>MiniGallery, Sampler of MATLAB Test Matrices</title>
   <link href="https://hpc.social/2023/minigallery-sampler-of-matlab-test-matrices/"/>
   <updated>2023-06-28T16:34:09-06:00</updated>
   <id>https://hpc.social/2023/minigallery-sampler-of-matlab-test-matrices</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;MATLAB has dozens of test matrices.  Here are a few.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2fb5167b-7e82-4227-9f86-2870405cf53c&quot;&gt;Mini_Gallery&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#eba25d52-863f-4050-9d5c-28d66c4a102b&quot;&gt;Collections&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#66c32842-91ed-4ddf-9f2b-544fc3a88564&quot;&gt;Blogs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a58fbf40-276b-4c6c-8576-97e02358a317&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/TinyGallery.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Mini_Gallery&lt;a name=&quot;2fb5167b-7e82-4227-9f86-2870405cf53c&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Random. &lt;tt&gt;A = sprand(n,n,0.25)&lt;/tt&gt;. Random sparse, density = 0.25.&lt;/li&gt;&lt;li&gt;Bucky.  &lt;tt&gt;A = bucky&lt;/tt&gt;. Sparse connectivity graph of the geodesic dome,      the soccer ball, and the carbon-60 molecule.&lt;/li&gt;&lt;li&gt;Wilkinson. &lt;tt&gt;A = wilkinson(n)&lt;/tt&gt;. Wn+. Nearly equal double eigenvalues.&lt;/li&gt;&lt;li&gt;Band. &lt;tt&gt;A = triu(tril(A,2),-2)&lt;/tt&gt;.  Elements near diagonal.&lt;/li&gt;&lt;li&gt;Triangular. &lt;tt&gt;A = triu(A)&lt;/tt&gt;.  Elements on and above diagonal.&lt;/li&gt;&lt;li&gt;Hessenberg. &lt;tt&gt;A = triu(A,-1)&lt;/tt&gt;.  Upper triangular plus one subdiagonal.      See &lt;tt&gt;schur&lt;/tt&gt;.&lt;/li&gt;&lt;li&gt;Permutation. &lt;tt&gt;A = sparse(randperm(n),1:n,1)&lt;/tt&gt;.  One +1 in each row and      column.&lt;/li&gt;&lt;li&gt;Companion.  &lt;tt&gt;c = charpoly(A); A = [-c(2:end); eye(n-1,n)]&lt;/tt&gt;.      Traditional companion matrix.&lt;/li&gt;&lt;li&gt;Fiedler.  &lt;tt&gt;c = charpoly(A); A = fiedler(-c(2:end))&lt;/tt&gt;. Fiedler companion      matrix.&lt;/li&gt;&lt;li&gt;Hankel. &lt;tt&gt;A = flip(gallery(&apos;toeppd&apos;,n))&lt;/tt&gt;.  Constant antidiagonals.&lt;/li&gt;&lt;li&gt;Toeplitz. &lt;tt&gt;A = gallery(&apos;toeppd&apos;,n)&lt;/tt&gt;.  Constant diagonals.&lt;/li&gt;&lt;li&gt;Magic.  &lt;tt&gt;A = magic(n)&lt;/tt&gt;.  Magic square.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Collections&lt;a name=&quot;eba25d52-863f-4050-9d5c-28d66c4a102b&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;tt&gt;gallery&lt;/tt&gt;. Nick Higham and MathWorks, &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/gallery.html&quot;&gt;https://www.mathworks.com/help/matlab/ref/gallery.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Anymatrix. Nick Higham and Mantas Mikaitis, &lt;a href=&quot;https://nhigham.com/2021/11/09/anymatrix&quot;&gt;https://nhigham.com/2021/11/09/anymatrix&lt;/a&gt;&amp;gt;&lt;/li&gt;&lt;li&gt;SuiteSparse. Tim Davis, Yifan Hu and Scott Kolodzie, &lt;a href=&quot;http://sparse.tamu.edu&quot;&gt;http://sparse.tamu.edu&lt;/a&gt;&lt;/li&gt;&lt;li&gt;MatrixMarket, NIST, &lt;a href=&quot;https://math.nist.gov/MatrixMarket&quot;&gt;https://math.nist.gov/MatrixMarket&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Blogs&lt;a name=&quot;66c32842-91ed-4ddf-9f2b-544fc3a88564&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/2012/11/05/magic-squares-part-2-algorithms/&quot;&gt;https://blogs.mathworks.com/cleve/2012/11/05/magic-squares-part-2-algorithms/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/2013/04/15/wilkinsons-matrices-2/&quot;&gt;https://blogs.mathworks.com/cleve/2013/04/15/wilkinsons-matrices-2/&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/2013/12/23/fiedler-companion-matrix/&quot;&gt;https://blogs.mathworks.com/cleve/2013/12/23/fiedler-companion-matrix/&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/2021/05/12/bringing-back-the-bucky-ball/&quot;&gt;https://blogs.mathworks.com/cleve/2021/05/12/bringing-back-the-bucky-ball/&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Software&lt;a name=&quot;a58fbf40-276b-4c6c-8576-97e02358a317&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Mini_Gallery.m&quot;&gt;https://blogs.mathworks.com/cleve/files/Mini_Gallery.m&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;!-- 
    function grabCode_3ac745ceafba4a469aec48ad4b98c1b4() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;3ac745ceafba4a469aec48ad4b98c1b4 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 3ac745ceafba4a469aec48ad4b98c1b4&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
3ac745ceafba4a469aec48ad4b98c1b4 ##### SOURCE BEGIN #####
%% MiniGallery, Sampler of MATLAB Test Matrices
% MATLAB has dozens of test matrices.  Here are a few.

%%
%
% &lt;&lt;TinyGallery.png&gt;&gt;
%

%% MiniGallery 
% * Random. |A = sprand(n,n,0.25)|. Random sparse, density = 0.25.
% * Bucky.  |A = bucky|. Sparse connectivity graph of the geodesic dome, 
%      the soccer ball, and the carbon-60 molecule.
% * Wilkinson. |A = wilkinson(n)|. Wn+. Nearly equal double eigenvalues.
% * Band. |A = triu(tril(A,2),-2)|.  Elements near diagonal.
% * Triangular. |A = triu(A)|.  Elements on and above diagonal.
% * Hessenberg. |A = triu(A,-1)|.  Upper triangular plus one subdiagonal.
%      See |schur|.  
% * Permutation. |A = sparse(randperm(n),1:n,1)|.  One +1 in each row and
%      column.
% * Companion.  |c = charpoly(A); A = [-c(2:end); eye(n-1,n)]|.
%      Traditional companion matrix.
% * Fiedler.  |c = charpoly(A); A = fiedler(-c(2:end))|. Fiedler companion
%      matrix. 
% * Hankel. |A = flip(gallery(&apos;toeppd&apos;,n))|.  Constant antidiagonals.
% * Toeplitz. |A = gallery(&apos;toeppd&apos;,n)|.  Constant diagonals.
% * Magic.  |A = magic(n)|.  Magic square.

%% Collections
% * |gallery|. Nick Higham and MathWorks, &lt;https://www.mathworks.com/help/matlab/ref/gallery.html&gt;
% * Anymatrix. Nick Higham and Mantas Mikaitis, https://nhigham.com/2021/11/09/anymatrix&gt;
% * SuiteSparse. Tim Davis, Yifan Hu and Scott Kolodzie, &lt;http://sparse.tamu.edu&gt;
% * MatrixMarket, NIST, &lt;https://math.nist.gov/MatrixMarket&gt;.

%% Blogs
% * &lt;https://blogs.mathworks.com/cleve/2012/11/05/magic-squares-part-2-algorithms&gt;&lt;/https://blogs.mathworks.com/cleve/2012/11/05/magic-squares-part-2-algorithms&gt;
% * &lt;https://blogs.mathworks.com/cleve/2013/04/15/wilkinsons-matrices-2&gt;&lt;/https://blogs.mathworks.com/cleve/2013/04/15/wilkinsons-matrices-2&gt;.
% * &lt;https://blogs.mathworks.com/cleve/2013/12/23/fiedler-companion-matrix&gt;&lt;/https://blogs.mathworks.com/cleve/2013/12/23/fiedler-companion-matrix&gt;.
% * &lt;https://blogs.mathworks.com/cleve/2021/05/12/bringing-back-the-bucky-ball&gt;&lt;/https://blogs.mathworks.com/cleve/2021/05/12/bringing-back-the-bucky-ball&gt;.

%% Software
% * &lt;https://blogs.mathworks.com/cleve/files/MiniGallery.m&gt;
##### SOURCE END ##### 3ac745ceafba4a469aec48ad4b98c1b4
--&gt;
</content>
 </entry>
 
 <entry>
   <title>ARLS, Automatically Regularized Least Squares</title>
   <link href="https://hpc.social/2023/arls-automatically-regularized-least-squares/"/>
   <updated>2023-06-17T00:57:05-06:00</updated>
   <id>https://hpc.social/2023/arls-automatically-regularized-least-squares</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;(I have a guest blogger today.  Ron Jones worked with me in 1985 for his Ph. D. from the University of New Mexico.  He retired recently after nearly 40 years at Sandia National Labs in Albuquerque and now has a chance to return to the problem he studied in his thesis. -- CBM)&lt;/p&gt;
&lt;p&gt;by Rondall Jones, &lt;a href=&quot;mailto:rejones7@msn.com&quot;&gt;rejones7@msn.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our interest is in automatically solving difficult linear systems,&lt;/p&gt;
&lt;pre&gt;  A*x = b&lt;/pre&gt;&lt;p&gt;Such systems often arise, for example, in &quot;inverse problems&quot; in which the analyst is trying to reverse the effects of natural smoothing processes such as heat dissipation, optical blurring, or indirect sensing. These problems exhibit &quot;ill-conditioning&quot;, which means that the solution results are overly sensitive to insignificant changes to the observations, which are given in the right-hand-side vector, &lt;tt&gt;b&lt;/tt&gt; .&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;p&gt;Here is a graphic showing this behavior using a common test matrix, a 31 x 31 Hilbert matrix, with the blue line being the ideal solution that one would hope a solver could compute.  The jagged red line shows the result of a traditional solver on this problem.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/arls_0.bmp&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;In fact this graph is extremely mild: the magnitude of the oscillations often measure in the millions, not just a little larger than the true solution. Traditionally analysts have approached this issue in the linear algebraic system context by appending equations to &lt;tt&gt;A*x = b&lt;/tt&gt; that request each solution value, &lt;tt&gt;x(i)&lt;/tt&gt;, to be zero. Then, one weights these conditioning equations using a parameter usually called &quot;lambda&quot;. We will call it &lt;tt&gt;p&lt;/tt&gt; here. What we have to solve then is this expanded linear system:&lt;/p&gt;
&lt;pre&gt;   [ A ; p*I] * x = [b; 0]&lt;/pre&gt;&lt;p&gt;If we decompose &lt;tt&gt;A&lt;/tt&gt; into its Singular Value Decomposition&lt;/p&gt;
&lt;pre&gt;   A = U * S * V&apos;&lt;/pre&gt;&lt;p&gt;and multiply both sides by the transpose of the augmented LHS, the resulting solution to is&lt;/p&gt;
&lt;pre&gt;   x = V * inv(S^2 + p^2*I) * S * U&apos; * b&lt;/pre&gt;&lt;p&gt;instead of the usual&lt;/p&gt;
&lt;pre&gt;   x = V * inv(S) * U&apos; * b&lt;/pre&gt;&lt;p&gt;It is convenient in the following discussion to represent this as&lt;/p&gt;
&lt;pre&gt;   x = V * PCV&lt;/pre&gt;&lt;p&gt;where&lt;/p&gt;
&lt;pre&gt;   PCV = inv(S) * U&apos; * b&lt;/pre&gt;&lt;p&gt;is what we call the &lt;i&gt;Picard Condition Vector&lt;/i&gt;. Then &lt;tt&gt;x&lt;/tt&gt; is computed in the usual SVD manner with the change that each singular value &lt;tt&gt;S(i)&lt;/tt&gt; is replaced by&lt;/p&gt;
&lt;pre&gt;   S(i) + p^2/S(i)&lt;/pre&gt;&lt;p&gt;This process is called &lt;i&gt;Tikhonov regularization&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Using Tikhonov regularization successfully requires &lt;i&gt;somehow&lt;/i&gt; picking an appropriate value for &lt;tt&gt;p&lt;/tt&gt;.  Cleve Moler has for many years jokingly used the term &quot;eyeball norm&quot; to describe how to pick &lt;tt&gt;p&lt;/tt&gt;. &quot;Try various values of &lt;tt&gt;p&lt;/tt&gt; and pick the resulting solution (or its graph)  that &apos;looks good&apos;&quot;.&lt;/p&gt;
&lt;p&gt;My early work in attempting to determine lambda automatically was based instead on determining when the PCV begins to seriously diverge. Beyond that point one can be fairly sure that noise in &lt;tt&gt;b&lt;/tt&gt; is causing &lt;tt&gt;U&apos;*b&lt;/tt&gt; to decrease more slowly than &lt;tt&gt;inv(S)&lt;/tt&gt; is increasing, so their product, which is the PCV, starts growing unacceptably. Such an algorithm can be made to work and versions of my work have been available in various forms over the years. But determining where the PCV starts growing unacceptably (which I refer to as the &lt;i&gt;usable rank&lt;/i&gt;) is based on heuristics, moving averages, and such, as of which require choices of moving average lengths and other such parameters. This is not an optimal situation, so a I began trying to redesign algorithms that do not use any heuristics.&lt;/p&gt;
&lt;p&gt;How do we do that algorithmically?  Per Christian Hansen gave a clue to this question when he said (my re-phrasing) that &quot;the analyst should not expect a good solution for such a problem unless the PCV is &apos;declining&apos;&quot;. We note that this adage is a context-specific application of a general requirement that when a function is represented by an orthogonal expansion the coefficients of the orthogonal basis functions should eventually decline toward zero. If this behavior does not happen, then typically either the model is incomplete or the data is contaminated. In our case the orthogonal basis is simply the columns of &lt;tt&gt;V&lt;/tt&gt;, and &lt;tt&gt;b&lt;/tt&gt; is the set of coefficients that would be expected to decline.  A good working definition of &quot;declining&quot; has been hard to nail down. The algorithm in &lt;tt&gt;ARLS&lt;/tt&gt; has implemented this concept using two specific essential steps:&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;First, we replace the PCV by a second-degree polynomial (e.g., a parabolic) least-squares fit to the PCV. This allows a lot of the typical &quot;wild&quot; variations in the PCV to be smoothed over and thereby tolerated without eliminating the problem&apos;s distinctive behavior.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Second, we don&apos;t actually fit the curve to the PCV, but rather to the &lt;b&gt;logarithm&lt;/b&gt; of the PCV. Without this change, small values of the PCV are seen by the curve fit process as just near-zero values, with no significant difference in the effect of a value of 0.0001 or a value of 0.0000000001. But in the (base 10) logarithm of the PCV these values nicely spread out from -4 to -10 (for example).&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;So, Phase 1 of ARLS searches a large range of values of p  (remember, p is Tikhonov&apos;s &quot;lambda&quot;) to find a value just barely large enough to make the slope of the parabolic fit entirely negative or zero.  This gives us a tight lower bound for the &quot;correct&quot; value of p.&lt;/p&gt;
&lt;p&gt;Phase 2 of ARLS is much simpler. Since p is the minimum usable regularization parameter, the solution tends to be less smooth and less close to the ideal solution than optimum. So we simply increase p slightly to let the shape of the graph of x smooth out. Our current implementation increases p until the residual (that is, &lt;tt&gt;norm(A*x-b)&lt;/tt&gt;) of the solution increases by a factor of 2. This is, unfortunately, a heuristic. But an appropriate value of it can be determined by &amp;#8220;tuning&amp;#8221; the algorithm on a wide range of test problems.&lt;/p&gt;
&lt;p&gt;We call this new algorithm Logarithmic Picard Condition Analysis. (If the problems you work on seem to need a bit more relaxation you can, of course, increase the number 2 a bit. It is 5 lines from the bottom of the file.) In the example shown in the graphic above, ARLS produces the blue line so closely that the ideal solution and ARLS computed solution are indistinguishable.&lt;/p&gt;
&lt;p&gt;In addition to ARLS(A,b) itself, we provide two constrained solvers built on ARLS which are called just like ARLS:&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;ARLSNN(A,b), which constrains the solution to be non-negative (like the classic NNLS, buth with regularization.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;ARLSRISE(A,b) which constrains the solution to be non-decreasing. To get a non-increasing, or &amp;#8220;falling&amp;#8221; solution, you can compute -ARLSRISE(A,-b).&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;Try ARLS. It&apos;s available from the MATLAB Central File Exchange, #130259, &lt;a href=&quot;https://www.mathworks.com/matlabcentral/fileexchange/130259-arls-automatically-regularized-least-squares&quot;&gt;at this link&lt;/a&gt;.&lt;/p&gt;
&lt;!-- 
    function grabCode_95d95d5b92ad4c4ca262dfdb5ff7efe9() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;95d95d5b92ad4c4ca262dfdb5ff7efe9 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 95d95d5b92ad4c4ca262dfdb5ff7efe9&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
95d95d5b92ad4c4ca262dfdb5ff7efe9 ##### SOURCE BEGIN #####
%% ARLS, Automatically Regularized Least Squares
%
% (I have a guest blogger today.  Ron Jones worked with me in 1985 for
% his Ph. D. from the University of New Mexico.  He retired recently 
% after nearly 40 years at Sandia National Labs in Albuquerque and now 
% has a chance to return to the problem he studied in his thesis. REPLACE_WITH_DASH_DASH CBM)
%
% by Rondall Jones, rejones7@msn.com
%
% Our interest is in automatically solving difficult linear systems,
% 
%    A*x = b
%
% Such systems often arise, for example, in &quot;inverse problems&quot; in which 
% the analyst is trying to reverse the effects of natural smoothing 
% processes such as heat dissipation, optical blurring, or indirect sensing. 
% These problems exhibit &quot;ill-conditioning&quot;, which means that the solution 
% results are overly sensitive to insignificant changes to the observations, 
% which are given in the right-hand-side vector, |b| .
%%
% Here is a graphic showing this behavior using a common test matrix, a 
% 31 x 31 Hilbert matrix, with the blue line being the ideal solution that 
% one would hope a solver could compute.  The jagged red line shows the 
% result of a traditional solver on this problem.
% 
% &lt;&lt;arls_0.bmp&gt;&gt; 
%  
% In fact this graph is extremely mild: the magnitude of the oscillations 
% often measure in the millions, not just a little larger than the true 
% solution. Traditionally analysts have approached this issue in the linear 
% algebraic system context by appending equations to |A*x = b| that request 
% each solution value, |x(i)|, to be zero. Then, one weights these 
% conditioning equations using a parameter usually called &quot;lambda&quot;. We 
% will call it |p| here. What we have to solve then is this expanded linear 
% system:
%
%     [ A ; p*I] * x = [b; 0]      
%
% If we decompose |A| into its Singular Value Decomposition
% 
%     A = U * S * V&apos;
%
% and multiply both sides by the transpose of the augmented LHS,
% the resulting solution to is
%
%     x = V * inv(S^2 + p^2*I) * S * U&apos; * b
%
% instead of the usual  
%
%     x = V * inv(S) * U&apos; * b     
%
% It is convenient in the following discussion to represent this as 
%
%     x = V * PCV
%
% where 
% 
%     PCV = inv(S) * U&apos; * b
% 
% is what we call the _Picard Condition Vector_. Then 
% |x| is computed in the usual SVD manner with the change that each 
% singular value |S(i)| is replaced by
% 
%     S(i) + p^2/S(i)
%
% This process is called _Tikhonov regularization_.
%
% Using Tikhonov regularization successfully requires _somehow_ picking 
% an appropriate value for |p|.  Cleve Moler has for 
% many years jokingly used the term &quot;eyeball norm&quot; to describe how to pick 
% |p|. &quot;Try various values of |p| and pick the resulting solution
% (or its graph)  that &apos;looks good&apos;&quot;.

%%
% My early work in attempting to determine lambda automatically was 
% based instead on determining when the PCV begins to seriously diverge. 
% Beyond that point one can be fairly sure that noise in |b| is causing
% |U&apos;*b| to decrease more slowly than |inv(S)| is increasing, so their 
% product, which is the PCV, starts growing unacceptably. 
% Such an algorithm can be made
% to work and versions of my work have been available in various forms
% over the years. But determining where the PCV starts growing unacceptably 
% (which I refer to as the _usable rank_) is based on heuristics, moving 
% averages, and such, as of which require choices of moving average 
% lengths and other such parameters. This is not an optimal situation, so a 
% I began trying to redesign algorithms that do not use any heuristics. 

%%
% How do we do that algorithmically?  Per Christian Hansen gave a clue to
% this question when he said (my re-phrasing) that &quot;the analyst should not 
% expect a good solution for such a problem unless the PCV is &apos;declining&apos;&quot;. 
% We note that this adage is a context-specific application of a general 
% requirement that when a function is represented by an orthogonal 
% expansion the coefficients of the orthogonal basis functions should 
% eventually decline toward zero. If this behavior does not happen, then 
% typically either the model is incomplete or the data is contaminated. In 
% our case the orthogonal basis is simply the columns of |V|, and |b| is
% the set of coefficients that would be expected to decline.  A good 
% working definition of &quot;declining&quot; has been hard to nail down. The 
% algorithm in |ARLS| has implemented this concept using two specific 
% essential steps:
%
% * First, we replace the PCV by a second-degree polynomial (e.g., a 
% parabolic) least-squares fit to the PCV. This allows a lot of the typical 
% &quot;wild&quot; variations in the PCV to be smoothed over and thereby tolerated 
% without eliminating the problem&apos;s distinctive behavior.
% 
% * Second, we don&apos;t actually fit the curve to the PCV, but rather to the 
% *logarithm* of the PCV. Without this change, small values of the PCV 
% are seen by the curve fit process as just near-zero values, with no 
% significant difference in the effect of a value of 0.0001 or a value of 
% 0.0000000001. But in the (base 10) logarithm of the PCV these values 
% nicely spread out from -4 to -10 (for example).
%
% So, Phase 1 of ARLS searches a large range of values of p  (remember, p 
% is Tikhonov&apos;s &quot;lambda&quot;) to find a value just barely large enough to make 
% the slope of the parabolic fit entirely negative or zero.  This gives us a 
% tight lower bound for the &quot;correct&quot; value of p.
%
% Phase 2 of ARLS is much simpler. Since p is the minimum usable 
% regularization parameter, the solution tends to be less smooth and less 
% close to the ideal solution than optimum. So we simply increase p 
% slightly to let the shape of the graph of x smooth out. Our current 
% implementation increases p until the residual (that is, |norm(A*x-b)|) of 
% the solution increases by a factor of 2. This is, unfortunately, a heuristic. 
% But an appropriate value of it can be determined by “tuning” the 
% algorithm on a wide range of test problems.
%
% We call this new algorithm Logarithmic Picard Condition Analysis.
% (If the problems you work on seem to need a bit more relaxation you 
% can, of course, increase the number 2 a bit. It is 5 lines from the
% bottom of the file.)
% In the example shown in the graphic above, ARLS produces the blue line 
% so closely that the ideal solution and ARLS computed solution are 
% indistinguishable.
%
% In addition to ARLS(A,b) itself, we provide two constrained solvers
% built on ARLS which are called just like ARLS: 
%
% * ARLSNN(A,b), which constrains the solution to be non-negative
% (like the classic NNLS, buth with regularization.
% 
% * ARLSRISE(A,b) which constrains the solution to be non-decreasing.
% To get a non-increasing, or “falling” solution, you can compute
% -ARLSRISE(A,-b).
%
% Try ARLS. It&apos;s available from the MATLAB Central File Exchange,
% #130259,
% &lt;https://www.mathworks.com/matlabcentral/fileexchange/130259-arls-automatically-regularized-least-squares
% at this link&gt;.
##### SOURCE END ##### 95d95d5b92ad4c4ca262dfdb5ff7efe9
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Happy Birthday, John Gilbert</title>
   <link href="https://hpc.social/2023/happy-birthday-john-gilbert/"/>
   <updated>2023-06-07T14:48:32-06:00</updated>
   <id>https://hpc.social/2023/happy-birthday-john-gilbert</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;I have just returned from a one-day workshop at U. C. Santa Barbara honoring John Gilbert on his 70th birthday and his official retirement after 20 years on the UCSB faculty.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/johnrgilbert.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#483e8936-1d16-4486-a661-92c662f34d97&quot;&gt;New Mexico&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0be2f0ed-b459-4a36-af7a-57fefb22d647&quot;&gt;Xerox PARC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e413f7b9-c197-454d-b046-d30190db4c17&quot;&gt;Friendship&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3b88cae7-503d-4399-99b3-4329200f4ed6&quot;&gt;UCSB&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;New Mexico&lt;a name=&quot;483e8936-1d16-4486-a661-92c662f34d97&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I have known John since he was a teenager.&lt;/p&gt;
&lt;p&gt;In the late 1960&apos;s, John&apos;s father, Ed Gilbert, together with fellow mathematicians Don Morrison and Sto Bell, left their jobs at Sandia National Labs in Albuquerque and established the Computer Science Department at the University of New Mexico.  Ed was especially interested in undergraduate education and led the department to early adoption of Pascal and Unix in the curriculum.&lt;/p&gt;
&lt;p&gt;In 1972, my wife at the time, Nancy Martin, and I were seeking a university where we could both have faculty positions.  UNM offered me a job in the Math Department and Nancy one in Computer Science. I stayed at UNM for 13 years, eventually succeeding Morrison as Chairman of Computer Science.&lt;/p&gt;
&lt;p&gt;When I first met the Gilbert family in &apos;72, both John and his younger brother Erik were undergrad students at UNM.  A year later, both brothers were admitted to grad school in Computer Science at Stanford. After getting their Ph.D.&apos;s in CS at Stanford, Erik went on to cofound a software company that produced a dialect of Lisp and John joined the Computer Science Department at Cornell.&lt;/p&gt;
&lt;h4&gt;Xerox PARC&lt;a name=&quot;0be2f0ed-b459-4a36-af7a-57fefb22d647&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;After several years at Cornell, John returned to California and the famous Xerox Palo Alto Research Center.&lt;/p&gt;
&lt;p&gt;Sometime around Christmas in 1988, Ian Duff, the British authority on sparse matrices, wanted to go skiing in the Sierras.  Iain arranged with Gene Golub to give a talk at Stanford.  I was living in Menlo Park at the time and went to the talk.  So did John Gilbert and Rob Schreiber, from Hewlett Packard Research in Palo Alto.&lt;/p&gt;
&lt;p&gt;After the talk, everybody went for coffee at Tresidder, Stanford&apos;s student union.  During the ensuing discussion, John, Rob and I decided it was time to have sparse matrices in MATLAB.  The first new data structure in MATLAB and its description resulted.  See the links at &lt;a href=&quot;https://epubs.siam.org/doi/10.1137/0613024&quot;&gt;SIAM&lt;/a&gt; and &lt;a href=&quot;https://www.mathworks.com/help/pdf_doc/otherdocs/simax.pdf&quot;&gt;MathWorks&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Friendship&lt;a name=&quot;e413f7b9-c197-454d-b046-d30190db4c17&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Our collaboration on sparse matrices has led to an enduring friendship. Every year, at SCxx, the High Performance Computing conference in November, the three of us and Jack Dongarra get together.  Here we are with Sven Hammarling from NAG, at SC17 in Denver.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/sc17.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;UCSB&lt;a name=&quot;3b88cae7-503d-4399-99b3-4329200f4ed6&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;After a dozen years at PARC, John returned to academic life at the University of California near Santa Barbara. Last Saturday, Aydin Buluc and Daniel Lokshtanov, two of John&apos;s UCSB Ph. D. students, organized the JRG70 workshop.  Here is a link to the Web page, including the list of talks presented. &lt;a href=&quot;https://sites.google.com/lbl.gov/jrg70/home&quot;&gt;link&lt;/a&gt;. It was the first time since Tresidder that Iain, John, Rob and I have all been together.&lt;/p&gt;
&lt;p&gt;Here is a portrait of the JRG70 participants.  As usual, John is being modest; he&apos;s in the back row, in a burgundy sweater.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/jrg70.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;!-- 
    function grabCode_6a6c6e1bce6a40f28847707c01157cbb() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;6a6c6e1bce6a40f28847707c01157cbb &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 6a6c6e1bce6a40f28847707c01157cbb&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
6a6c6e1bce6a40f28847707c01157cbb ##### SOURCE BEGIN #####
%% Happy Birthday, John Gilbert
% I have just returned from a one-day workshop at U. C. Santa Barbara
% honoring John Gilbert on his 70th birthday and his
% official retirement after 20 years on the UCSB faculty.
%
% &lt;&lt;johnrgilbert.jpg&gt;&gt;
%

%% New Mexico
% I have known John since he was a teenager.       

%%
% In the late 1960&apos;s, John&apos;s father, Ed Gilbert, together with fellow 
% mathematicians Don Morrison and Sto Bell, left their jobs at 
% Sandia National Labs in Albuquerque and established the Computer 
% Science Department at the University of New Mexico.  Ed was
% especially interested in undergraduate education and led the
% department to early adoption of Pascal and Unix in the curriculum.

%%
% In 1972, my wife at the time, Nancy Martin, and I were seeking a
% university where we could both have faculty positions.  UNM offered 
% me a job in the Math Department and Nancy one in Computer Science.
% I stayed at UNM for 13 years, eventually succeeding Morrison as
% Chairman of Computer Science.

%%
% When I first met the Gilbert family in &apos;72, both John and his younger
% brother Erik were undergrad students at UNM.  A year later, both
% brothers were admitted to grad school in Computer Science at Stanford.
% After getting their Ph.D.&apos;s in CS at Stanford, Erik went on to
% cofound a software company that produced a dialect of Lisp and
% John joined the Computer Science Department at Cornell. 

%% Xerox PARC
% After several years at Cornell, John returned to California and
% the famous Xerox Palo Alto Research Center.
%
% Sometime around Christmas in 1988, Ian Duff, the British authority on
% sparse matrices, wanted to go skiing in the Sierras.  Iain arranged with
% Gene Golub to give a talk at Stanford.  I was living in Menlo Park
% at the time and went to the talk.  So did John Gilbert and Rob Schreiber,
% from Hewlett Packard Research in Palo Alto.
%
% After the talk, everybody went for coffee at Tresidder, Stanford&apos;s
% student union.  During the ensuing discussion, John, Rob and I decided
% it was time to have sparse matrices in MATLAB.  The first new data
% structure in MATLAB and its description resulted.  See the links at
% &lt;https://epubs.siam.org/doi/10.1137/0613024
% SIAM&gt; and
% &lt;https://www.mathworks.com/help/pdf_doc/otherdocs/simax.pdf
% MathWorks&gt;.

%% Friendship
% Our collaboration on sparse matrices has led to an enduring friendship.
% Every year, at SCxx, the High Performance Computing conference in
% November, the three of us and Jack Dongarra get together.  Here we are
% with Sven Hammarling from NAG, at SC17 in Denver.
%
% &lt;&lt;SC17.jpg&gt;&gt;
%

%% UCSB
% After a dozen years at PARC, John returned to academic life at
% the University of California near Santa Barbara.
% Last Saturday, Aydin Buluc and Daniel Lokshtanov, two of John&apos;s
% UCSB Ph. D. students, organized the JRG70 workshop.  Here is a 
% link to the Web page, including the list of talks presented. 
% &lt;https://sites.google.com/lbl.gov/jrg70/home link&gt;.
% It was the first time since Tresidder that Iain, John, Rob and I
% have all been together.
%
% Here is a portrait of the JRG70 participants.  As usual, John is
% being modest; he&apos;s in the back row, in a burgundy sweater.
%
% &lt;&lt;jrg70.jpg&gt;&gt;



##### SOURCE END ##### 6a6c6e1bce6a40f28847707c01157cbb
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Special Notice</title>
   <link href="https://hpc.social/2023/special-notice/"/>
   <updated>2023-04-04T15:12:36-06:00</updated>
   <id>https://hpc.social/2023/special-notice</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;h3&gt;Special Notice&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/notice.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;If you have been following my posts about Wordle, be sure to see the puzzle in today&apos;s &lt;i&gt;New York Times&lt;/i&gt;, Tuesday, April 4.&lt;/p&gt;
&lt;!-- 
    function grabCode_455754acb45549b2b4f3c459b7fef0d9() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;455754acb45549b2b4f3c459b7fef0d9 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 455754acb45549b2b4f3c459b7fef0d9&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
455754acb45549b2b4f3c459b7fef0d9 ##### SOURCE BEGIN #####
%% Special Notice
%
% &lt;&lt;notice.png&gt;&gt;
%
% If you have been following my posts about Wordle, be sure to see
% the puzzle in today&apos;s _New York Times_, Tuesday, April 4.

##### SOURCE END ##### 455754acb45549b2b4f3c459b7fef0d9
--&gt;
</content>
 </entry>
 
 <entry>
   <title>My Chat with Ernie, a Chinese Chat Bot</title>
   <link href="https://hpc.social/2023/my-chat-with-ernie-a-chinese-chat-bot/"/>
   <updated>2023-04-01T05:00:26-06:00</updated>
   <id>https://hpc.social/2023/my-chat-with-ernie-a-chinese-chat-bot</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;I recently had an opportunity to chat with Ernie, the Large Language Model currently under development at the Chinese internet search giant, &lt;a href=&quot;https://www.cnbc.com/2023/02/07/baidu-shares-leaps-as-it-reveals-plan-for-chatgpt-style-ernie-bot.html&quot;&gt;Baidu&lt;/a&gt;.  As I expected, Ernie&apos;s responses are in Chinese. I don&apos;t speak Chinese, so I have asked Google Translate for the response in English.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8bdaf182-51c2-4843-a2be-98df430c39cc&quot;&gt;Embarrassingly Parallel&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7aad9ef7-8d41-4907-be94-fd647ab6a762&quot;&gt;Love MATLAB?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#fc2f9078-105c-45bf-9ea6-df8e811b0de2&quot;&gt;Cleve&apos;s Corner&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6ac55893-0202-442a-8871-ffd685ea191a&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Embarrassingly Parallel&lt;a name=&quot;8bdaf182-51c2-4843-a2be-98df430c39cc&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;One of my questions that Microsoft&apos;s ChatGPT answered incorrectly was&lt;/p&gt;
&lt;pre&gt;   Who coined the term &quot;embarrassingly parallel?&quot;&lt;/pre&gt;&lt;p&gt;Ernie&apos;s response to the same question was&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/response3.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Goggle translate:&lt;/p&gt;
&lt;pre&gt;   Who coined the embarrassing word parallel?&lt;/pre&gt;&lt;p&gt;Well that&apos;s a &lt;b&gt;very&lt;/b&gt; unfortunate misunderstanding. And, it&apos;s just repeating the question. That&apos;s an old trick; the mother of all chat bots, &lt;a href=&quot;https://en.wikipedia.org/wiki/ELIZA&quot;&gt;Eliza&lt;/a&gt; , used it over sixty years ago.&lt;/p&gt;
&lt;h4&gt;Love MATLAB?&lt;a name=&quot;7aad9ef7-8d41-4907-be94-fd647ab6a762&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;One  of the questions I often ask when I meet someone for the first time is&lt;/p&gt;
&lt;pre&gt;  Do you use MATLAB?&lt;/pre&gt;&lt;p&gt;Earnie&apos;s reply was&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/response1.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Google translation is&lt;/p&gt;
&lt;pre&gt;  I think I love you.&lt;/pre&gt;&lt;p&gt;Well, that&apos;s nice, but doesn&apos;t really answer my question.&lt;/p&gt;
&lt;h4&gt;Cleve&apos;s Corner&lt;a name=&quot;fc2f9078-105c-45bf-9ea6-df8e811b0de2&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Can a chat bot assist with writing this blog? I don&apos;t expect help with the MATLAB code, or with the graphics, or with any mathematics.  How about the prose, if it isn&apos;t too technical.&lt;/p&gt;
&lt;p&gt;Here is the opening sentence of the &lt;a href=&quot;https://blogs.mathworks.com/cleve/2023/02/04/matrices-in-action-grafix-2-0/&quot;&gt;post I made a few weeks ago&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;   The 4-by-4 matrices in the panels on the following screenshots
   are at the heart of computer graphics.&lt;/pre&gt;&lt;p&gt;I asked Ernie how that would look in Chinese. Ernie responded with&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/response2.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;When Google translates that back to English, we get&lt;/p&gt;
&lt;pre&gt;   The 4&amp;times;4 matrix in the screenshot panel below is at the heart of
   computer graphics.&lt;/pre&gt;&lt;p&gt;Ernie decided to make the sentence singular, which happens to shorten it.  But I am afraid that isn&apos;t much help for this blog.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;a name=&quot;6ac55893-0202-442a-8871-ffd685ea191a&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I have already described &lt;a href=&quot;https://blogs.mathworks.com/cleve/2023/02/21/my-chat-with-chatgpt/&quot;&gt;my chat with ChatGPT&lt;/a&gt;. This Chinese competitor is certainly not an improvement. For now, I will continue to produce this blog the old fashioned way, without any &quot;help&quot; from AI.&lt;/p&gt;
&lt;!-- 
    function grabCode_1ab0a9dd4230472ebcebbecc859ab36c() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;1ab0a9dd4230472ebcebbecc859ab36c &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 1ab0a9dd4230472ebcebbecc859ab36c&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
1ab0a9dd4230472ebcebbecc859ab36c ##### SOURCE BEGIN #####
%% My Chat with Ernie, a Chinese Chat Bot
% I recently had an opportunity to chat with Ernie, the Large Language
% Model currently under development at the Chinese internet search giant,
% &lt;https://www.cnbc.com/2023/02/07/baidu-shares-leaps-as-it-reveals-plan-for-chatgpt-style-ernie-bot.html
% Baidu&gt;.  As I expected, Ernie&apos;s responses are in Chinese.  
% I don&apos;t speak Chinese, so I have asked Google Translate for the response
% in English.

%% Embarrassingly Parallel
% One of my questions that Microsoft&apos;s ChatGPT answered incorrectly
% was
%
%     Who coined the term &quot;embarrassingly parallel?&quot;
%
% Ernie&apos;s response to the same question was
%
% &lt;&lt;response3.jpg&gt;&gt;
%
% Goggle translate:
%
%     Who coined the embarrassing word parallel?
%
% Well that&apos;s a *very* unfortunate misunderstanding.
% And, it&apos;s just repeating the question.
% That&apos;s an old trick; the mother of all chat bots, 
% &lt;https://en.wikipedia.org/wiki/ELIZA
% Eliza&gt; , used it over sixty years ago.

%% Love MATLAB?
% One  of the questions I often ask when I meet someone for the first
% time is
% 
%    Do you use MATLAB?
% 
% Earnie&apos;s reply was
%
% &lt;&lt;response1.jpg&gt;&gt;
%
% Google translation is
%
%    I think I love you.
%
% Well, that&apos;s nice, but doesn&apos;t really answer my question.

%% Cleve&apos;s Corner
% Can a chat bot assist with writing this blog?
% I don&apos;t expect help with the MATLAB code, or with the graphics, or with
% any mathematics.  How about the prose, if it isn&apos;t too technical.
%
% Here is the opening sentence of the
% &lt;https://blogs.mathworks.com/cleve/2023/02/04/matrices-in-action-grafix-2-0/
% post I made a few weeks ago&gt;.
%
%     The 4-by-4 matrices in the panels on the following screenshots
%     are at the heart of computer graphics.
%
% I asked Ernie how that would look in Chinese.
% Ernie responded with
%
% &lt;&lt;response2.jpg&gt;&gt;
%
% When Google translates that back to English, we get
%
%     The 4×4 matrix in the screenshot panel below is at the heart of
%     computer graphics.
%
% Ernie decided to make the sentence singular, which happens to 
% shorten it.  But I am afraid that isn&apos;t much help for this blog.

%% Conclusion
% I have already described
% &lt;https://blogs.mathworks.com/cleve/2023/02/21/my-chat-with-chatgpt/
% my chat with ChatGPT&gt;.
% This Chinese competitor is certainly not an improvement.
% For now, I will continue to produce this blog the old fashioned way,
% without any &quot;help&quot; from AI.
##### SOURCE END ##### 1ab0a9dd4230472ebcebbecc859ab36c
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Three Wordle Assistants</title>
   <link href="https://hpc.social/2023/three-wordle-assistants/"/>
   <updated>2023-03-28T03:00:55-06:00</updated>
   <id>https://hpc.social/2023/three-wordle-assistants</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;When I tackle a Wordle puzzle, I like to make all the key decisions myself.  My three assistants set up puzzles and suggest words when I ask for help, but I guide the actual solution. My assistants also make it possible for me to play Wordle anywhere, anytime, even when my laptop is in airplane mode. I don&apos;t need the &lt;i&gt;New York Times&lt;/i&gt; or access to the Web.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#dacb9b49-209b-4bd4-9600-ddcbf92f222e&quot;&gt;Three Assistants&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9a0fa3c8-2ea4-4e0d-8679-69e40f59921c&quot;&gt;Vocabulary&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#fef3bbd2-49bf-47e0-b344-69a2b844ce95&quot;&gt;Words&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#313da354-b5c6-4675-929e-3bbe89e7a74a&quot;&gt;Wordle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#bc74a1cc-f3c3-4b86-bd1b-7a19d18b8d36&quot;&gt;NYT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a2a62471-6d35-4253-8c11-b0de6725afd4&quot;&gt;Pared Down&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3634c294-6419-4ca0-9339-7a1e50630492&quot;&gt;Five Golds&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#fb298646-e9d7-4395-ba63-3e8d2607dc82&quot;&gt;Thanks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3daf42e9-4815-4553-9b08-c2945d557011&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Three Assistants&lt;a name=&quot;dacb9b49-209b-4bd4-9600-ddcbf92f222e&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Wordler&lt;/tt&gt;, &lt;tt&gt;Words&lt;/tt&gt; and &lt;tt&gt;Wordie&lt;/tt&gt; are the three assistants. &lt;tt&gt;Wordler&lt;/tt&gt; replaces the &lt;i&gt;Times&lt;/i&gt; by generating puzzles and evaluating responses. &lt;tt&gt;Words&lt;/tt&gt; provides lists of possible responses. &lt;tt&gt;Wordie&lt;/tt&gt; handles the Wordler Window and colors the letters gray, green or gold.&lt;/p&gt;
&lt;h4&gt;Vocabulary&lt;a name=&quot;9a0fa3c8-2ea4-4e0d-8679-69e40f59921c&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Words&lt;/tt&gt; has a &lt;tt&gt;vocabulary&lt;/tt&gt; of 4665 five-letter English words. Any of them are acceptable responses. The vocabulary begins with&lt;/p&gt;
&lt;pre&gt;  vocab = [ ...
  &quot;ABEAM&quot; &quot;ABETS&quot; &quot;ABHOR&quot; &quot;ABIDE&quot; &quot;ABLED&quot; &quot;ABLER&quot; &quot;ABODE&quot; &quot;ABORT&quot; ...&lt;/pre&gt;&lt;p&gt;And, 584 lines later, ends with&lt;/p&gt;
&lt;pre&gt;  &quot;ZILCH&quot; &quot;ZINCS&quot; &quot;ZINGS&quot; &quot;ZIPPY&quot; &quot;ZOMBI&quot; &quot;ZONAL&quot; &quot;ZONED&quot; &quot;ZONES&quot; ...
  &quot;ZOOMS&quot; ];&lt;/pre&gt;&lt;p&gt;If you were to print the entire vocabulary with 40 lines per page, you would print over 100 pages of words.&lt;/p&gt;
&lt;h4&gt;Words&lt;a name=&quot;fef3bbd2-49bf-47e0-b344-69a2b844ce95&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;It took me a long time to write the &lt;tt&gt;Words&lt;/tt&gt; assistant, which is called whenever the Words button in the Wordle Window is clicked.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/ratio.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;tt&gt;Words&lt;/tt&gt; is supported by a seventeen-program library of functions named &lt;tt&gt;Wordspq&lt;/tt&gt; where &lt;tt&gt;p&lt;/tt&gt; and &lt;tt&gt;q&lt;/tt&gt; are nonnegative integers with &lt;tt&gt;p+q &amp;lt;= 5&lt;/tt&gt;. &lt;tt&gt;Wordspq&lt;/tt&gt; finds words with &lt;tt&gt;p&lt;/tt&gt; green letters and &lt;tt&gt;q&lt;/tt&gt; gold letters. The programs in the &lt;tt&gt;Words&lt;/tt&gt; library all have the same structure involving five nested &lt;tt&gt;for&lt;/tt&gt; loops.&lt;/p&gt;
&lt;p&gt;The last line of &lt;tt&gt;Words&lt;/tt&gt; is&lt;/p&gt;
&lt;pre&gt;  feval([&apos;Words&apos; p q],Gray,Green,GreenLoc,Gold,GoldLoc)&lt;/pre&gt;&lt;p&gt;&lt;tt&gt;Gray&lt;/tt&gt;, &lt;tt&gt;Green&lt;/tt&gt; and &lt;tt&gt;Gold&lt;/tt&gt; are lists of letters with specified colors and with locations &lt;tt&gt;GreenLoc&lt;/tt&gt; and &lt;tt&gt;GoldLoc&lt;/tt&gt;.  Locating the green letters is easy because they must be in specific slots. Locating the gold letters is tricky because each of them can be in any of several different slots.&lt;/p&gt;
&lt;p&gt;For example, this situation in the NYT puzzle described below would result in a call to &lt;tt&gt;Words13&lt;/tt&gt; with&lt;/p&gt;
&lt;pre&gt;  Gray = &apos;AIHEC&apos;
  Green = &apos;T&apos;
  GreenLoc = 5
  Gold = &apos;ROU&apos;
  GoldLoc = {[2,3],[3,4],[1,2,4]}&lt;/pre&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/grout3.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Wordle&lt;a name=&quot;313da354-b5c6-4675-929e-3bbe89e7a74a&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Wordle&lt;/tt&gt; starts a game by choosing a secret random target from the vocabulary, or from a smaller subset about half the size. At the same time, I choose my starting word, which is usually &lt;tt&gt;RATIO&lt;/tt&gt;.  My assistants respond with the Wordler Window and a simple keyboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/keybored.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The gold &lt;tt&gt;O&lt;/tt&gt; tells me the target contains an &lt;tt&gt;O&lt;/tt&gt;, that it is not in position 5, and the target does not contain &lt;tt&gt;R&lt;/tt&gt;, &lt;tt&gt;A&lt;/tt&gt;, &lt;tt&gt;T&lt;/tt&gt;, or &lt;tt&gt;I&lt;/tt&gt;. I know there are hundreds of such words in the vocabulary. One of them is &lt;tt&gt;DEMOS&lt;/tt&gt;, which I enter on the keyboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/demos.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;tt&gt;DEMOS&lt;/tt&gt; happens to be a very lucky choice.  The target has an &lt;tt&gt;E&lt;/tt&gt; in the second slot, an &lt;tt&gt;S&lt;/tt&gt; in the last slot, &lt;tt&gt;M&lt;/tt&gt; and &lt;tt&gt;O&lt;/tt&gt; in the remaining slots, and no &lt;tt&gt;D&lt;/tt&gt;. When the answer does not occur to me in a minute or two, I click the &lt;tt&gt;Words&lt;/tt&gt; button.  The response is&lt;/p&gt;
&lt;pre&gt;  MEOWS
  cnt = 1&lt;/pre&gt;&lt;p&gt;So, there is only one word to choose, and it earns five greens.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/meows.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;NYT&lt;a name=&quot;bc74a1cc-f3c3-4b86-bd1b-7a19d18b8d36&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Let&apos;s do the &lt;i&gt;Times&lt;/i&gt; puzzle from March 23. I start with my mathematical &lt;tt&gt;RATIO&lt;/tt&gt;. I see that the answer contains &lt;tt&gt;R&lt;/tt&gt;, &lt;tt&gt;T&lt;/tt&gt; and &lt;tt&gt;O&lt;/tt&gt; and does not contain &lt;tt&gt;A&lt;/tt&gt; or &lt;tt&gt;I&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I happen to remember that &lt;tt&gt;OTHER&lt;/tt&gt; qualifies.  It does not hit any new letters, but it places additional restrictions on the ones I already have and eliminates &lt;tt&gt;E&lt;/tt&gt; and &lt;tt&gt;H&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;Words&lt;/tt&gt; now lists 37 words that I should choose from.  I pick &lt;tt&gt;COURT&lt;/tt&gt; because it contains &lt;tt&gt;U&lt;/tt&gt;, the only remaining vowel.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;Words&lt;/tt&gt; informs me that there are only two possibilities left, &lt;tt&gt;TROUT&lt;/tt&gt; and &lt;tt&gt;GROUT&lt;/tt&gt;.  I pick the one without a double consonant and it is the winner.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/grout_combo.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Pared Down&lt;a name=&quot;a2a62471-6d35-4253-8c11-b0de6725afd4&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here is an atypical, but instructive, example.  For this puzzle I am pleased to see &lt;tt&gt;Wordler&lt;/tt&gt; gives &lt;tt&gt;RATIO&lt;/tt&gt; a green &lt;tt&gt;A&lt;/tt&gt; in position 2 and a gold &lt;tt&gt;R&lt;/tt&gt; somewhere in positions 3 through 5.  I remember one of my favorite &quot;technical&quot; terms, &lt;tt&gt;PARSE&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To use a baseball metaphor, &lt;tt&gt;PARSE&lt;/tt&gt; hits a triple and almost gets an in-the-park home run.  Now I need to ask &lt;tt&gt;Words&lt;/tt&gt; for qualifying responses.  There are exactly two, &lt;tt&gt;PARED&lt;/tt&gt; and &lt;tt&gt;PARER&lt;/tt&gt;.  (Both come from the verb &quot;to pare&quot;, which means to cut the outer skin off something.)&lt;/p&gt;
&lt;p&gt;One of the choices has a double consonant, so I choose the other one. When it doesn&apos;t fly, the only choice left earns the five-leaf clover.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/parer_combo.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Five Golds&lt;a name=&quot;3634c294-6419-4ca0-9339-7a1e50630492&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;How do I generate five golds?  I need the starting guess to be a &lt;i&gt;permutation&lt;/i&gt; of the final answer.  A few moments thought suggests &lt;tt&gt;TAKES&lt;/tt&gt; and &lt;tt&gt;SKATE&lt;/tt&gt;.  I am sure there are other possibilities. But this one is special because &lt;tt&gt;STEAK&lt;/tt&gt; makes it triplets. &lt;tt&gt;TEAKS&lt;/tt&gt; would make four permutations but does not meet the &quot;hard mode&quot; restrictions.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/skate_combo.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Thanks&lt;a name=&quot;fb298646-e9d7-4395-ba63-3e8d2607dc82&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Over a year ago, MATLAB programs for solving Wordle puzzles were described by &lt;a href=&quot;https://blogs.mathworks.com/loren/2022/01/18/building-a-wordle-solver/&quot;&gt;Adam Filion&lt;/a&gt; as a guest blogger on Loren&apos;s blog and by &lt;a href=&quot;https://www.youtube.com/watch?v=bVTcQtEnOlk&quot;&gt;Matt Tearle&lt;/a&gt; with a YouTube video.&lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;3daf42e9-4815-4553-9b08-c2945d557011&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Working on my Wordle obsession has been very interesting. I have developed some useful tools and I see forgotten five-letter words everywhere.  You can share the fun by downloading the code at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Wordler_mzip.m&quot;&gt;this link&lt;/a&gt; and running it yourself.&lt;/p&gt;
&lt;!-- 
    function grabCode_5b2bc84c600a4474a0eabbc4d9bb6ab8() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;5b2bc84c600a4474a0eabbc4d9bb6ab8 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 5b2bc84c600a4474a0eabbc4d9bb6ab8&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
5b2bc84c600a4474a0eabbc4d9bb6ab8 ##### SOURCE BEGIN #####
%% Three Wordle Assistants
% When I tackle a Wordle puzzle, I like to make all the key decisions 
% myself.  My three assistants set up puzzles and suggest words
% when I ask for help, but I guide the actual solution.
% My assistants also make it possible for me to play Wordle anywhere,
% anytime, even when my laptop is in airplane mode.
% I don&apos;t need the _New York Times_ or access to the Web.

%% Three Assistants
% |Wordler|, |Words| and |Wordie| are the three assistants.
% |Wordler| replaces the _Times_ by generating puzzles
% and evaluating responses.
% |Words| provides lists of possible responses.
% |Wordie| handles the Wordler Window and colors the letters gray, 
% green or gold.

%% Vocabulary
% |Words| has a |vocabulary| of 4665 five-letter English words.
% Any of them are acceptable responses.
% The vocabulary begins with
% 
%    vocab = [ ...  
%    &quot;ABEAM&quot; &quot;ABETS&quot; &quot;ABHOR&quot; &quot;ABIDE&quot; &quot;ABLED&quot; &quot;ABLER&quot; &quot;ABODE&quot; &quot;ABORT&quot; ...
%
% And, 584 lines later, ends with
%
%    &quot;ZILCH&quot; &quot;ZINCS&quot; &quot;ZINGS&quot; &quot;ZIPPY&quot; &quot;ZOMBI&quot; &quot;ZONAL&quot; &quot;ZONED&quot; &quot;ZONES&quot; ...
%    &quot;ZOOMS&quot; ]; 
%
% If you were to print the entire vocabulary with 40 lines per page,
% you would print over 100 pages of words.

%% Words
% It took me a long time to write the |Words| assistant, which is
% called whenever the Words button in the Wordle Window is clicked.
%
% &lt;&lt;ratio.gif&gt;&gt;
%
% |Words| is supported by a seventeen-program library of functions
% named |Wordspq| where |p| and |q| are nonnegative integers 
% with |p+q &lt;= 5|.
% |Wordspq| finds words with |p| green letters and |q| gold letters.
% The programs in the |Words| library all have the same structure
% involving five nested |for| loops.
%
% The last line of |Words| is
%
%    feval([&apos;Words&apos; p q],Gray,Green,GreenLoc,Gold,GoldLoc)
%
% |Gray|, |Green| and |Gold| are lists of letters with specified 
% colors and with locations |GreenLoc| and |GoldLoc|.  Locating the
% green letters is easy because they must be in specific slots.
% Locating the gold letters is tricky because each of them
% can be in any of several different slots.
%
% For example, this situation in the NYT puzzle described below
% would result in a call to |Words13| with
%
%    Gray = &apos;AIHEC&apos;
%    Green = &apos;T&apos;
%    GreenLoc = 5
%    Gold = &apos;ROU&apos;
%    GoldLoc = {[2,3],[3,4],[1,2,4]}
%
% &lt;&lt;grout3.gif&gt;&gt;
 
%% Wordle
% |Wordle| starts a game by choosing a secret random target
% from the vocabulary, or from a smaller subset about half the size.
% At the same time, I choose my starting word, which is usually
% |RATIO|.  My assistants respond with the Wordler Window
% and a simple keyboard.
%
% &lt;&lt;keybored.png&gt;&gt;
%

%% 
% The gold |O| tells me the target contains an |O|, that it is not 
% in position 5, and the target does not contain |R|, |A|, |T|, or |I|.
% I know there are hundreds of such words in the vocabulary.        
% One of them is |DEMOS|, which I enter on the keyboard.
%
% &lt;&lt;demos.gif&gt;&gt;
%

%%
% |DEMOS| happens to be a very lucky choice.  The target has an
% |E| in the second slot, an |S| in the last slot, |M| and |O|
% in the remaining slots, and no |D|.
% When the answer does not occur to me in a minute or two,
% I click the |Words| button.  The response is
%
%    MEOWS
%    cnt = 1
%
% So, there is only one word to choose, and it earns five greens.
%
% &lt;&lt;meows.gif&gt;&gt;
%

%% NYT
% Let&apos;s do the _Times_ puzzle from March 23.
% I start with my mathematical |RATIO|.
% I see that the answer contains |R|, |T| and |O| and does
% not contain |A| or |I|.
%
% I happen to remember that |OTHER| qualifies.  It does not hit
% any new letters, but it places additional restrictions on
% the ones I already have and eliminates |E| and |H|.
%
% |Words| now lists 37 words that I should choose from.  I pick |COURT|
% because it contains |U|, the only remaining vowel.
%
% |Words| informs me that there are only two possibilities left,
% |TROUT| and |GROUT|.  I pick the one without a double consonant
% and it is the winner.
%
% &lt;&lt;grout_combo.gif&gt;&gt;

%% Pared Down
% Here is an atypical, but instructive, example.  For this puzzle
% I am pleased to see |Wordler| gives |RATIO| a green |A| in position 2 
% and a gold |R| somewhere in positions 3 through 5.  I remember one of
% my favorite &quot;technical&quot; terms, |PARSE|.
%
% To use a baseball metaphor, |PARSE| hits a triple and almost
% gets an in-the-park home run.  Now I need to ask |Words|
% for qualifying responses.  There are exactly two, |PARED| and
% |PARER|.  (Both come from the verb &quot;to pare&quot;, which means to cut 
% the outer skin off something.)
%
% One of the choices has a double consonant, so I choose the other
% one. When it doesn&apos;t fly, the only choice left earns the
% five-leaf clover.
%
% &lt;&lt;parer_combo.gif&gt;&gt;
%

%% Five Golds
% How do I generate five golds?  I need the starting guess to be
% a _permutation_ of the final answer.  A few moments thought
% suggests |TAKES| and |SKATE|.  I am sure there are other possibilities.
% But this one is special because |STEAK| makes it triplets.
% |TEAKS| would make four permutations but does not meet
% the &quot;hard mode&quot; restrictions.
%
% &lt;&lt;skate_combo.gif&gt;&gt;
%

%% Thanks
% Over a year ago, MATLAB programs for solving Wordle puzzles 
% were described by
% &lt;https://blogs.mathworks.com/loren/2022/01/18/building-a-wordle-solver/
% Adam Filion&gt; as a guest blogger on Loren&apos;s blog and by
% &lt;https://www.youtube.com/watch?v=bVTcQtEnOlk
% Matt Tearle&gt; with a YouTube video.

%% Software
% Working on my Wordle obsession has been very interesting.
% I have developed some useful tools and I see forgotten five-letter
% words everywhere.  You can share the fun by downloading the code at
% &lt;https://blogs.mathworks.com/cleve/files/Wordler_mzip.m
% this link&gt; and running it yourself.
##### SOURCE END ##### 5b2bc84c600a4474a0eabbc4d9bb6ab8
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Wordle Sneak Previews</title>
   <link href="https://hpc.social/2023/wordle-sneak-previews/"/>
   <updated>2023-03-24T19:18:10-06:00</updated>
   <id>https://hpc.social/2023/wordle-sneak-previews</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#55eb7850-c832-4b41-9b94-907594d82fcc&quot;&gt;Early Birds&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Early Birds&lt;a name=&quot;55eb7850-c832-4b41-9b94-907594d82fcc&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;There several sites on the Web that reveal the solution to the Wordle puzzle in the &lt;i&gt;New York Times&lt;/i&gt; while it is still in play. Some of these sites are in India, where India Standard Time is 9-1/2 hours ahead of Eastern Daylight Time, so India sees the puzzle long before the USA does. These sites surround their puzzle clues with ads and are trying to get more visitors.&lt;/p&gt;
&lt;p&gt;For a while, whenever I get a chance, I intend try to update this animation with the latest reveals.  I don&apos;t have any obvious ads, but I have to admit that my own motivation is similar to the other sites.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/word_gif37.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;!-- 
    function grabCode_432eb9e3bcc34e8da1135593bb49ee5f() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;432eb9e3bcc34e8da1135593bb49ee5f &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 432eb9e3bcc34e8da1135593bb49ee5f&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
432eb9e3bcc34e8da1135593bb49ee5f ##### SOURCE BEGIN #####
%% Wordle Sneak Previews

%% Early Birds
% There several sites on the Web that reveal the solution to the
% Wordle puzzle in the _New York Times_ while it is still in play.
% Some of these sites are in India, where India Standard Time is 
% 9-1/2 hours ahead of Eastern Daylight Time, so India sees
% the puzzle long before the USA does.
% These sites surround their puzzle clues with ads
% and are trying to get more visitors.
%
% For a while, whenever I get a chance, I intend try to update this
% animation with the latest reveals.  I don&apos;t have any obvious ads,
% but I have to admit that my own motivation is similar to the other
% sites.
%
% &lt;&lt;word_gif37.gif&gt;&gt;
%
##### SOURCE END ##### 432eb9e3bcc34e8da1135593bb49ee5f
--&gt;
</content>
 </entry>
 
 <entry>
   <title>WordBot and Words, My Wordle Assistants</title>
   <link href="https://hpc.social/2023/wordbot-and-words-my-wordle-assistants/"/>
   <updated>2023-03-11T19:07:02-07:00</updated>
   <id>https://hpc.social/2023/wordbot-and-words-my-wordle-assistants</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;I am late joining the Wordle craze. Over a year ago, MATLAB programs for solving Wordle puzzles were described by &lt;a href=&quot;https://blogs.mathworks.com/loren/2022/01/18/building-a-wordle-solver/&quot;&gt;Adam Filion&lt;/a&gt; as a guest blogger on Loren&apos;s blog and by &lt;a href=&quot;https://www.youtube.com/watch?v=bVTcQtEnOlk&quot;&gt;Matt Tearle&lt;/a&gt; with a YouTube video. But my programs for Wordle Assistants are different. &lt;tt&gt;WordBot&lt;/tt&gt; doesn&apos;t try to solve any puzzles and &lt;tt&gt;Words&lt;/tt&gt; just supplies lists of possible words. I enjoy providing the solution logic myself.&lt;/p&gt;
&lt;p&gt;Here are two examples, taken from recent Wordle puzzles in the &lt;a href=&quot;https://www.nytimes.com/games/wordle/index.html&quot;&gt;&lt;i&gt;New York Times&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#07e1455b-4718-47a2-93c5-cce24028b05f&quot;&gt;Wednesday&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e5f6c4a9-b502-447f-9003-f6a351a4a093&quot;&gt;Thursday&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f246159e-8444-40a5-9280-1750f81c8c5d&quot;&gt;Four Days in March&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#fa65c920-c034-4600-910d-ad06c3df4153&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Wednesday&lt;a name=&quot;07e1455b-4718-47a2-93c5-cce24028b05f&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;WordBot&lt;/tt&gt; has a list of 4676 possible words, but knows nothing about their probabilities, so I don&apos;t ask for any assistance with the opening guess.&lt;/p&gt;
&lt;p&gt;I like to use mathematical words whenever possible. I usually start with &lt;tt&gt;RATIO&lt;/tt&gt;, which has three vowels and two popular consonants. &lt;tt&gt;RATIO&lt;/tt&gt; was a good opening move for the puzzle in the &lt;i&gt;Times&lt;/i&gt; on Wednesday. It received a green &lt;tt&gt;R&lt;/tt&gt; and a gold &lt;tt&gt;A&lt;/tt&gt;. I informed &lt;tt&gt;WordBot&lt;/tt&gt; of our good fortune using 2, 1 and 0 to indicate green, gold and gray. My faithful assistant responded by reproducing the first graphic in the  &lt;i&gt;Times&lt;/i&gt;.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    WordBot &lt;span class=&quot;string&quot;&gt;ratio&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;21000&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/WordBot_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;&lt;tt&gt;Words&lt;/tt&gt; is my suite of programs that produce lists of acceptable words for various scenarios.  In this situation with an &lt;tt&gt;R&lt;/tt&gt; as the first letter, an &lt;tt&gt;A&lt;/tt&gt; somewhere in the last three letters and &lt;tt&gt;T&lt;/tt&gt;, &lt;tt&gt;I&lt;/tt&gt; and &lt;tt&gt;O&lt;/tt&gt; on the gray list, &lt;tt&gt;Words&lt;/tt&gt; finds 25 words, starting with &lt;tt&gt;REACH&lt;/tt&gt; and ending with &lt;tt&gt;RUMBA&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The last of those 25 words got my attention.  I decided to try &lt;tt&gt;RUMBA&lt;/tt&gt; on my second move. I knew &lt;tt&gt;RUMBA&lt;/tt&gt; was unlikely to succeed but would be spectacular if it did.  Sure enough, Wordle didn&apos;t want to dance.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    WordBot &lt;span class=&quot;string&quot;&gt;rumba&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;20001&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/WordBot_blog_02.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;Three more letters gray-listed and &lt;tt&gt;A&lt;/tt&gt; limited to two slots reduces the number of possible words from 25 to 18. The first word on the list is still &lt;tt&gt;REACH&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    WordBot &lt;span class=&quot;string&quot;&gt;reach&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;22100&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/WordBot_blog_03.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;There are now 11 possibilities.&lt;/p&gt;
&lt;pre class=&quot;language-matlab&quot;&gt;READS
READY
REALS
REAPS
REARS
REGAL
RELAX
RELAY
RENAL
REPAY
RERAN
&lt;/pre&gt;&lt;p&gt;I need to relax.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    WordBot &lt;span class=&quot;string&quot;&gt;relax&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;22120&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/WordBot_blog_04.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;I don&apos;t need another list of possibilities. I can quickly see the previous list has only two words that end in &lt;tt&gt;L&lt;/tt&gt;.  The  choice between &quot;fit for a monarch&quot; and &quot;pertaining to kidney function&quot; is clear. I have solved Wednesday&apos;s puzzle in five moves, including the Hail Mary at move two.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    WordBot &lt;span class=&quot;string&quot;&gt;regal&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;22222&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/WordBot_blog_05.png&quot; vspace=&quot;5&quot; /&gt; &lt;pre class=&quot;codeinput&quot;&gt;    close
&lt;/pre&gt;&lt;h4&gt;Thursday&lt;a name=&quot;e5f6c4a9-b502-447f-9003-f6a351a4a093&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Thursday&apos;s puzzle in the &lt;i&gt;Times&lt;/i&gt; offered different challenges. As always, I started with &lt;tt&gt;RATIO&lt;/tt&gt;.  This time I get only one gold letter.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    WordBot &lt;span class=&quot;string&quot;&gt;ratio&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;10000&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/WordBot_blog_06.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;I need an &lt;tt&gt;R&lt;/tt&gt; somewhere in the last four positions and can&apos;t use &lt;tt&gt;A&lt;/tt&gt;, &lt;tt&gt;T&lt;/tt&gt;, &lt;tt&gt;I&lt;/tt&gt; or &lt;tt&gt;O&lt;/tt&gt;. &lt;tt&gt;Words&lt;/tt&gt; knows 229 qualified candidates. I choose another mathematical word.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    WordBot &lt;span class=&quot;string&quot;&gt;perms&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;01100&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/WordBot_blog_07.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;I now must have an &lt;tt&gt;R&lt;/tt&gt; and an &lt;tt&gt;E&lt;/tt&gt; and can&apos;t have any of those seven grays. &lt;tt&gt;Words&lt;/tt&gt; offers 72 possibilities.  Have I been in an accident?&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    WordBot &lt;span class=&quot;string&quot;&gt;wreck&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;21200&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/WordBot_blog_08.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;Well, that&apos;s much better.  Two greens, one gold, and nine grays. There is only one possibility.   The solution must be &lt;tt&gt;WHERE&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    WordBot &lt;span class=&quot;string&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;22222&lt;/span&gt;
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/WordBot_blog_09.png&quot; vspace=&quot;5&quot; /&gt; &lt;pre class=&quot;codeinput&quot;&gt;    close
&lt;/pre&gt;&lt;h4&gt;Four Days in March&lt;a name=&quot;f246159e-8444-40a5-9280-1750f81c8c5d&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Wednesday, Thursday, Friday and Saturday.&lt;/p&gt;
&lt;p&gt;If your browser isn&apos;t showing the animation, &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/word_gif.gif&quot;&gt;look here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/word_gif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;fa65c920-c034-4600-910d-ad06c3df4153&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/WordBot_2_mzip.m&quot;&gt;This code&lt;/a&gt; is immature.  Be gentle and let me know how it works for you.&lt;/p&gt;
&lt;!-- 
    function grabCode_a44a8488723741b3acf8277d1f858a07() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;a44a8488723741b3acf8277d1f858a07 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; a44a8488723741b3acf8277d1f858a07&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
a44a8488723741b3acf8277d1f858a07 ##### SOURCE BEGIN #####
%% WordBot and Words, My Wordle Assistants
% I am late joining the Wordle craze.
% Over a year ago, MATLAB programs for solving Wordle puzzles 
% were described by
% &lt;https://blogs.mathworks.com/loren/2022/01/18/building-a-wordle-solver/
% Adam Filion&gt; as a guest blogger on Loren&apos;s blog and by
% &lt;https://www.youtube.com/watch?v=bVTcQtEnOlk
% Matt Tearle&gt; with a YouTube video.
% But my programs for Wordle Assistants are different.
% |WordBot| doesn&apos;t try to solve any puzzles and
% |Words| just supplies lists of possible words.
% I enjoy providing the solution logic myself. 
%
% Here are two examples, taken from recent Wordle puzzles in the
% &lt;https://www.nytimes.com/games/wordle/index.html
% _New York Times_&gt;.


%% Wednesday
% |WordBot| has a list of 4676 possible words,
% but knows nothing about their probabilities, so I don&apos;t ask
% for any assistance with the opening guess.
%
% I like to use mathematical words whenever possible.
% I usually start with |RATIO|, which has three vowels and two
% popular consonants. |RATIO| was a good opening move
% for the puzzle in the _Times_ on Wednesday.
% It received a green |R| and a gold |A|.
% I informed |WordBot| of our good fortune using
% 2, 1 and 0 to indicate green, gold and gray.
% My faithful assistant responded by reproducing the first 
% graphic in the  _Times_.

    WordBot ratio 21000


%%
% |Words| is my suite of programs that produce lists of
% acceptable words for various scenarios.  In this situation
% with an |R| as the first letter, an |A| somewhere in the last
% three letters and |T|, |I| and |O| on the gray list, |Words|  
% finds 25 words, starting with |REACH| and ending with |RUMBA|.
% 
% The last of those 25 words got my attention.  I decided to try |RUMBA|
% on my second move.
% I knew |RUMBA| was unlikely to succeed but would be
% spectacular if it did.  Sure enough, Wordle didn&apos;t want to dance.

    WordBot rumba 20001

%%
% Three more letters gray-listed and |A| limited to two slots reduces the
% number of possible words from 25 to 18.
% The first word on the list is still |REACH|.

    WordBot reach 22100

%%
% There are now 11 possibilities.
% 
%   READS
%   READY
%   REALS
%   REAPS
%   REARS
%   REGAL
%   RELAX
%   RELAY
%   RENAL
%   REPAY
%   RERAN
%
% I need to relax.
% 
    WordBot relax 22120

%%
% I don&apos;t need another list of possibilities.
% I can quickly see the previous list has only two words that
% end in |L|.  The  choice between &quot;fit for a monarch&quot; and
% &quot;pertaining to kidney function&quot; is clear.
% I have solved Wednesday&apos;s puzzle in five moves, including the Hail Mary
% at move two.

    WordBot regal 22222

%%
    close

%% Thursday
% Thursday&apos;s puzzle in the _Times_ offered different challenges.
% As always, I started with |RATIO|.  This time I get only one
% gold letter.

    WordBot ratio 10000

%%
% I need an |R| somewhere in the last four positions and can&apos;t
% use |A|, |T|, |I| or |O|. |Words| knows 229 qualified candidates.
% I choose another mathematical word.

    WordBot perms 01100

%%
% I now must have an |R| and an |E| and can&apos;t have any of those seven
% grays. |Words| offers 72 possibilities.  Have I been in an accident?

    WordBot wreck 21200

%% 
% Well, that&apos;s much better.  Two greens, one gold, and nine grays.
% There is only one possibility.   The solution must be |WHERE|.

    WordBot where 22222

%% 
    close

%% Four Days in March
% Wednesday, Thursday, Friday and Saturday.
%
% If your browser isn&apos;t showing the animation,
% &lt;https://blogs.mathworks.com/cleve/files/word_gif.gif
% look here&gt;.
%
% &lt;&lt;word_gif.gif&gt;&gt;
%

%% Software
% &lt;https://blogs.mathworks.com/cleve/files/WordBot_2_mzip.m
% This code&gt; is immature.  Be gentle and let me know how it 
% works for you.

##### SOURCE END ##### a44a8488723741b3acf8277d1f858a07
--&gt;
</content>
 </entry>
 
 <entry>
   <title>R2-D2, Rotations and Dilations in Two Dimensions</title>
   <link href="https://hpc.social/2023/r2-d2-rotations-and-dilations-in-two-dimensions/"/>
   <updated>2023-03-03T19:50:25-07:00</updated>
   <id>https://hpc.social/2023/r2-d2-rotations-and-dilations-in-two-dimensions</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;&lt;tt&gt;R2_D2&lt;/tt&gt; is is the name I&apos;ve given a new MATLAB program that provides animations of 2-by-2 rotation and dilation matrices. I admit I chose &quot;dilations&quot; so the acronym would be memorable, but otherwise the code has little to do with the famous Star Wars droid.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#44861ff7-11fc-4399-ad23-d58213ec0d26&quot;&gt;House&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#23ac6c7d-9deb-4368-af3a-b72341fd82e0&quot;&gt;Hand&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a87fd4bd-4298-4c71-a3c2-a9f90fa02fbe&quot;&gt;Rotation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4b0e42eb-235d-4dc6-8a7e-5cfafe76b486&quot;&gt;Dilation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3bd73ac8-4279-4bb6-b08e-9f866181f581&quot;&gt;Both&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#384f6c01-d1f5-456f-a0d0-b31ba5b772b2&quot;&gt;&lt;tt&gt;R2_D2&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f6931ffe-5f30-439a-97cb-2e04cab0aeaf&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;House&lt;a name=&quot;44861ff7-11fc-4399-ad23-d58213ec0d26&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This outline of a house is featured in &lt;a href=&quot;https://www.mathworks.com/moler/exm/chapters.html&quot;&gt;&lt;i&gt;Experiments with MATLAB&lt;/i&gt;&lt;/a&gt;. The data are the 11 blue dots.  The coordinates of each dot form a 2-by-1 vector; the 2-by-2 rotation and dilation matrices multiply each of these vectors separately. (The lines between the dots complete the picture and are not involved in any computation.)&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/house.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The house also appears in several editions of Gil Strang&apos;s textbooks. The cover of the third edition of Strang&apos;s &lt;a href=&quot;https://www.amazon.com/Introduction-Linear-Algebra-Gilbert-Strang/dp/0961408898&quot;&gt;&lt;i&gt;Introduction to Linear Algebra&lt;/i&gt;&lt;/a&gt; features nine houses on a quilt made by Gil&apos;s friend Chris Curtis.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/quilt.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Hand&lt;a name=&quot;23ac6c7d-9deb-4368-af3a-b72341fd82e0&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This outline of a hand, which I made from measurements of my own hand, is also used in &lt;a href=&quot;https://www.mathworks.com/moler/exm/chapters.html&quot;&gt;&lt;i&gt;Experiments with MATLAB&lt;/i&gt;&lt;/a&gt;. There are 37 points, so &lt;tt&gt;Hand&lt;/tt&gt; is a 2-by-37 matrix.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/hand.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Rotation&lt;a name=&quot;a87fd4bd-4298-4c71-a3c2-a9f90fa02fbe&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Multiplication by this matrix produces a two-dimensional rotation by an angle &lt;tt&gt;theta&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;$$ R = \left(
  \begin{array}{rr}
     \cos{\theta} &amp;amp; \sin{\theta} \\
     - \sin{\theta} &amp;amp; \cos{\theta}
  \end{array}
  \right) $$&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;R&lt;/tt&gt; is displayed in the first panel. If the house is not rotating in your browser, try this link: &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/house_rotate.gif&quot;&gt;https://blogs.mathworks.com/cleve/files/house_rotate.gif&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/house_rotate.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Dilation&lt;a name=&quot;4b0e42eb-235d-4dc6-8a7e-5cfafe76b486&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Dilation is the process of making objects larger or smaller. Multiplication by this diagonal matrix produces a dilation by a factor &lt;tt&gt;sigma&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;$$ S = \left(
  \begin{array}{rr}
     \sigma &amp;amp; 0 \\
     0 &amp;amp; \sigma
  \end{array}
  \right) $$&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;S&lt;/tt&gt; is displayed in the second panel. The animation is also available at: &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/hand_dilate.gif&quot;&gt;https://blogs.mathworks.com/cleve/files/hand_dilate.gif&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/hand_dilate.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Both&lt;a name=&quot;3bd73ac8-4279-4bb6-b08e-9f866181f581&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here rotation and dilation are combined. The product of the rotation and dilation matrices drives the action. If you are missing all the action, try: &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/hand_both.gif&quot;&gt;https://blogs.mathworks.com/cleve/files/hand_both.gif&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/hand_both.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;&lt;tt&gt;R2_D2&lt;/tt&gt;&lt;a name=&quot;384f6c01-d1f5-456f-a0d0-b31ba5b772b2&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;When you run &lt;tt&gt;R2_D2&lt;/tt&gt; on your own computer, you can drive the rotations and dilations yourself.  Mousing outside of the object creates rotation and mousing inside produces dilation.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;R2_D2&lt;/tt&gt; program is available from &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/R2_D2_4.m&quot;&gt;https://blogs.mathworks.com/cleve/files/R2_D2_4.m&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Further Reading&lt;a name=&quot;f6931ffe-5f30-439a-97cb-2e04cab0aeaf&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If you are not familiar with matrices, or just want a quick refresher, check out the &lt;a href=&quot;https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/exm/chapters/matrices.pdf&quot;&gt;Matrices&lt;/a&gt; chapter of &lt;a href=&quot;https://www.mathworks.com/moler/exm/chapters.html&quot;&gt;&lt;i&gt;Experiments with MATLAB&lt;/i&gt;&lt;/a&gt;. Exercise 4.14 is particularly handy.&lt;/p&gt;
&lt;!-- 
    function grabCode_0fd9ed7550fd4ba3911f9d86fad47cd5() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;0fd9ed7550fd4ba3911f9d86fad47cd5 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 0fd9ed7550fd4ba3911f9d86fad47cd5&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
0fd9ed7550fd4ba3911f9d86fad47cd5 ##### SOURCE BEGIN #####
%% R2-D2, Rotations and Dilations in Two Dimensions
% |R2_D2| is is the name I&apos;ve given a new MATLAB program that provides
% animations of 2-by-2 rotation and dilation matrices.
% I admit I chose &quot;dilations&quot;
% so the acronym would be memorable, but otherwise
% the code has little to do with the famous Star Wars droid.

%% House
% This outline of a house is featured in
% &lt;https://www.mathworks.com/moler/exm/chapters.html
% _Experiments with MATLAB_&gt;.
% The data are the 11 blue dots.  The coordinates of each dot form a 2-by-1
% vector; the 2-by-2 rotation and dilation matrices multiply each of
% these vectors separately. (The lines between the dots complete the
% picture and are not involved in any computation.)
%
% &lt;&lt;house.gif&gt;&gt;
%
% The house also appears in several editions of Gil Strang&apos;s textbooks.
% The cover of the third edition of Strang&apos;s
% &lt;https://www.amazon.com/Introduction-Linear-Algebra-Gilbert-Strang/dp/0961408898
% _Introduction to Linear Algebra_&gt; features nine houses on a quilt 
% made by Gil&apos;s friend Chris Curtis.
%
% &lt;&lt;quilt.png&gt;&gt;
%


%% Hand
% This outline of a hand, which I made from measurements of my own hand,
% is also used in 
% &lt;https://www.mathworks.com/moler/exm/chapters.html
% _Experiments with MATLAB_&gt;.
% There are 37 points, so |Hand| is a 2-by-37 matrix.
% 
% &lt;&lt;hand.gif&gt;&gt;
%

%% Rotation
% Multiplication by this matrix produces a two-dimensional
% rotation by an angle |theta|.  
%
% $$ R = \left(
%   \begin{array}{rr}
%      \cos{\theta} &amp; \sin{\theta} \\
%      - \sin{\theta} &amp; \cos{\theta}
%   \end{array}
%   \right) $$
%
% |R| is displayed in the first panel.
% If the house is not rotating in your browser, try this link:
% &lt;https://blogs.mathworks.com/cleve/files/house_rotate.gif&gt;
%
%
% &lt;&lt;house_rotate.gif&gt;&gt;
%

%% Dilation
% Dilation is the process of making objects larger or smaller.
% Multiplication by this diagonal matrix
% produces a dilation by a factor |sigma|.
%
% $$ S = \left(
%   \begin{array}{rr}
%      \sigma &amp; 0 \\
%      0 &amp; \sigma
%   \end{array}
%   \right) $$
%
% |S| is displayed in the second panel.
% The animation is also available at:
% &lt;https://blogs.mathworks.com/cleve/files/hand_dilate.gif&gt;
%
%
% &lt;&lt;hand_dilate.gif&gt;&gt;
%

%% Both
% Here rotation and dilation are combined.
% The product of the rotation and dilation matrices drives the action.
% If you are missing all the action, try:
% &lt;https://blogs.mathworks.com/cleve/files/hand_both.gif&gt;
%
% &lt;&lt;hand_both.gif&gt;&gt;
%

%% |R2_D2|
% When you run |R2_D2| on your own computer, you can drive the
% rotations and dilations yourself.  Mousing outside of the object
% creates rotation and mousing inside produces dilation.
%
% The |R2_D2| program is available from
% &lt;https://blogs.mathworks.com/cleve/files/R2_D2_4.m&gt;.
%
%% Further Reading
% If you are not familiar with matrices, or just want a quick
% refresher, check out the 
% &lt;https://www.mathworks.com/content/dam/mathworks/mathworks-dot-com/moler/exm/chapters/matrices.pdf
% Matrices&gt; chapter of
% &lt;https://www.mathworks.com/moler/exm/chapters.html
% _Experiments with MATLAB_&gt;. 
% Exercise 4.14 is particularly handy.
##### SOURCE END ##### 0fd9ed7550fd4ba3911f9d86fad47cd5
--&gt;
</content>
 </entry>
 
 <entry>
   <title>My Chat With ChatGPT</title>
   <link href="https://hpc.social/2023/my-chat-with-chatgpt/"/>
   <updated>2023-02-22T02:06:53-07:00</updated>
   <id>https://hpc.social/2023/my-chat-with-chatgpt</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;While it is still fresh in my mind, I want to describe the conversation I had with &lt;a href=&quot;https://openai.com/blog/chatgpt/&quot;&gt;a publicly available version of ChatGPT&lt;/a&gt;, the much-discussed large language model, LLM, for conversational artificial intelligence.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#5c070bbf-dca9-48a1-8be7-ac106737302f&quot;&gt;Mixed Reception&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6bc024ea-c1ab-40ea-b7de-687748c50bc9&quot;&gt;Where Is Sydney?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#bfe0d37b-cc5a-4998-9d8d-f16c425327f8&quot;&gt;Me and AI&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#d44eee64-c400-46cb-ae9e-b18066fe1fb8&quot;&gt;Me and ChatGPT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3fca7af1-1ac0-4481-8135-c47e5a3db750&quot;&gt;AI Winters&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ecb671af-be78-4da3-b321-d89f60308ce3&quot;&gt;Truth&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Mixed Reception&lt;a name=&quot;5c070bbf-dca9-48a1-8be7-ac106737302f&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A newer version of ChatGPT than the one I used is available to selected journalists and computer industry observers. Their reaction has been, shall I say, mixed. At first, some of the reports were positive and even ecstatic. Most of these early reports were from people whose primary concern is the stock market, not AI technology. Many of the more recent and more careful reports have been negative and critical.&lt;/p&gt;
&lt;h4&gt;Where Is Sydney?&lt;a name=&quot;6bc024ea-c1ab-40ea-b7de-687748c50bc9&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I have given ChatGPT the nickname &quot;Chad&quot;. Some early users of one of Chad&apos;s competitors asked deliberately provocative questions and encountered a cranky alter-ego named &quot;Sydney&quot;.  I didn&apos;t ask my Chad any unfair questions and didn&apos;t encounter any Sydney&apos;s.&lt;/p&gt;
&lt;h4&gt;Me and AI&lt;a name=&quot;bfe0d37b-cc5a-4998-9d8d-f16c425327f8&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I have been a long-time observer of -- although not a contributor to -- artificial intelligence research.&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;I took AI courses at Stanford from the inventor of   the field, John McCarthy.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Bill McKeeman and I entered McCarthy&apos;s chess program in   a &lt;i&gt;San Francisco Chronicle&apos;s&lt;/i&gt; by-mail chess contest.   (The computer did not fair well.)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;I used Joe Weizenbaum&apos;s computer program Eliza,   the very first Chat Bot.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;I was once married to someone with a PhD in AI.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Symbolic Math, like MathWorks now does in our Toolbox, and which   we used to do with Macsyma and Maple, was once considered AI.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;The wild animal trail cameras project that I did a few years ago with   Heather Gorr and Jim Sanderson uses modern machine learning and AI.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Me and ChatGPT&lt;a name=&quot;d44eee64-c400-46cb-ae9e-b18066fe1fb8&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I talked to -- I should say chatted with, or actually typed at -- Chad for most of an hour on a recent evening. Think of Stephen Hawking in a Web Browser. Chad&apos;s responses were always courteous and conversational. And the majority of Chad&apos;s responses were factually correct.&lt;/p&gt;
&lt;p&gt;However, a surprising number of Chad&apos;s answers were just plain wrong. Some examples:&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;I was neither born in, nor raised in, rural New Mexico.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;I did not get a PhD from the University of Michigan.   Neither did my wife, Patsy.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Patsy is not the mother of my daughter Kam,   nor of my sister Betsy.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Patsy is not an expert in   computational fluid dynamics.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Ken Kennedy did not coin the term &quot;embarrassingly parallel.&quot;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Pam McCorduck never worked for the Santa Fe Institute.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;I cannot find any reference to the guys Chad claimed   improved Sympletic Spacewar.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;All of Chad&apos;s incorrect responses could have been fact-checked by simple Google queries.&lt;/p&gt;
&lt;h4&gt;AI Winters&lt;a name=&quot;3fca7af1-1ac0-4481-8135-c47e5a3db750&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Everybody wants to combine the conversational style offered by large language models with the reliability and breadth provided by Google.  Now THAT sounds like a really good idea.&lt;/p&gt;
&lt;p&gt;Artificial intelligence has a history of flush successes interspersed with fallow periods known as AI Winters.  I am afraid that continued obsession with Chat Bots might lead to another AI Winter.&lt;/p&gt;
&lt;h4&gt;Truth&lt;a name=&quot;ecb671af-be78-4da3-b321-d89f60308ce3&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Steve Eddins revealed the Truth behind ChatGPT with this internal MathWorks Yammer post.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/ChatGPT_truth.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;!-- 
    function grabCode_49d101acd4414820a4f6fe4b080b1113() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;49d101acd4414820a4f6fe4b080b1113 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 49d101acd4414820a4f6fe4b080b1113&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
49d101acd4414820a4f6fe4b080b1113 ##### SOURCE BEGIN #####
%% My Chat with ChatGPT
% While it is still fresh in my mind, I want to describe the conversation
% I had with
% &lt;https://openai.com/blog/chatgpt/ 
% a publicly available version of ChatGPT&gt;, the much-discussed
% large language model, LLM, for conversational artificial intelligence.

%% Mixed Reception
% A newer version of ChatGPT than the one I used is
% available to selected journalists and computer industry observers.
% Their reaction has been, shall I say, mixed.
% At first, some of the reports were positive and even ecstatic.
% Most of these early reports were from people whose primary concern
% is the stock market, not AI technology. Many of the more recent and
% more careful reports have been negative and critical.

%% Where Is Sydney?
% I have given ChatGPT the nickname &quot;Chad&quot;.
% Some early users of one of Chad&apos;s competitors asked
% deliberately provocative questions and encountered a cranky alter-ego
% named &quot;Sydney&quot;.  I didn&apos;t ask my Chad any unfair questions and 
% didn&apos;t encounter any Sydney&apos;s. 

%% Me and AI
% I have been a long-time observer of REPLACE_WITH_DASH_DASH although not a contributor to REPLACE_WITH_DASH_DASH
% artificial intelligence research.
%
% * I took AI courses at Stanford from the inventor of 
%   the field, John McCarthy.
%
% * Bill McKeeman and I entered McCarthy&apos;s chess program in
%   a _San Francisco Chronicle&apos;s_ by-mail chess contest.
%   (The computer did not fair well.)
%
% * I used Joe Weizenbaum&apos;s computer program Eliza, 
%   the very first Chat Bot. 
%
% * I was once married to someone with a PhD in AI.
% 
% * Symbolic Math, like MathWorks now does in our Toolbox, and which
%   we used to do with Macsyma and Maple, was once considered AI.
%
% * The wild animal trail cameras project that I did a few years ago with
%   Heather Gorr and Jim Sanderson uses modern machine learning and AI.

%% Me and ChatGPT
% I talked to REPLACE_WITH_DASH_DASH I should say chatted with, or actually typed at REPLACE_WITH_DASH_DASH
% Chad for most of an hour on a recent evening.
% Think of Stephen Hawking in a Web Browser.
% Chad&apos;s responses were always courteous and conversational.
% And the majority of Chad&apos;s responses were factually correct.
% 
% However, a surprising number of Chad&apos;s answers were just plain wrong.
% Some examples:
%
% * I was neither born in, nor raised in, rural New Mexico. 
%
% * I did not get a PhD from the University of Michigan.
%   Neither did my wife, Patsy. 
% 
% * Patsy is not the mother of my daughter Kam, 
%   nor of my sister Betsy.
% 
% * Patsy is not an expert in
%   computational fluid dynamics.
%
% * Ken Kennedy did not coin the term &quot;embarrassingly parallel.&quot;
%
% * Pam McCorduck never worked for the Santa Fe Institute.
%
% * I cannot find any reference to the guys Chad claimed
%   improved Sympletic Spacewar.
%
% All of Chad&apos;s incorrect responses could have been fact-checked
% by simple Google queries.  

%% AI Winters
% Everybody wants to combine the conversational style offered by
% large language models with the reliability and breadth provided
% by Google.  Now THAT sounds like a really good idea.
% 
% Artificial intelligence has a history of flush successes interspersed
% with fallow periods known as AI Winters.  I am afraid that
% continued obsession with Chat Bots might lead to another AI Winter.

%% Truth
% Steve Eddins revealed the Truth behind ChatGPT with this internal
% MathWorks Yammer post.
%
% &lt;&lt;ChatGPT_truth.jpg&gt;&gt;
##### SOURCE END ##### 49d101acd4414820a4f6fe4b080b1113
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Grafix Users Guide</title>
   <link href="https://hpc.social/2023/grafix-users-guide/"/>
   <updated>2023-02-10T18:36:06-07:00</updated>
   <id>https://hpc.social/2023/grafix-users-guide</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;This is a quick look at &lt;tt&gt;Grafix&lt;/tt&gt;, our tool for exploring matrices via 3-D computer graphics.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Opening.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#21a702a7-c647-44ae-818a-6f571fa09592&quot;&gt;Matrices&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7cfcc1d4-26d2-4b2e-b4cb-a0ca04383ff8&quot;&gt;Axis&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6ce3a663-e301-4ddb-bc4d-58ae5e8f3b51&quot;&gt;Rx&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f007d1f0-d76b-4e3e-bea3-49bd18805a1f&quot;&gt;Ry&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#200c71a6-5d9f-4c03-8a03-00476f103160&quot;&gt;Rz&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#8dd6ed79-ba75-409b-a59d-68244c928c7a&quot;&gt;Tx&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a9651b74-3170-4b23-a015-890b537b778a&quot;&gt;Ty&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ce30422a-3bb7-4beb-90c6-3dfe5eb88351&quot;&gt;Tz&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#20f8cb07-c525-4f1b-a1ae-f9b6320078eb&quot;&gt;S&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e8ae8340-3615-4ed7-90e7-b185a33f370a&quot;&gt;Switches&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#097b4cbd-7971-430f-aa63-04db38192c6e&quot;&gt;Pitch, Roll, Yaw&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e558e05a-1bc3-41ed-a63b-ff056cf04620&quot;&gt;Start, Reset, Viz&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9d1fa1cc-0fe6-4d6f-9ca6-a50f0644fc62&quot;&gt;Apps/taxi&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0c8793f3-d9d5-45ef-90a8-7ec0c83356ca&quot;&gt;Apps/takeoff&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c20254e9-3887-4d66-9903-db87c5c7bb30&quot;&gt;Prop&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1adf580c-785f-4333-9494-0f5657c1ce53&quot;&gt;Info&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#095cf406-3f28-4e05-ab8a-43d29a3310c1&quot;&gt;Exercises&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6df5e80a-e9fa-45c4-aff2-03edb1ccb334&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Matrices&lt;a name=&quot;21a702a7-c647-44ae-818a-6f571fa09592&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The word &lt;i&gt;matrix&lt;/i&gt; comes from the Latin word &lt;i&gt;mater&lt;/i&gt;, which means &lt;i&gt;mother&lt;/i&gt; or  &lt;i&gt;origin&lt;/i&gt;.  Matrices provide the origins of much of modern applied mathematics and computational science.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;Grafix&lt;/tt&gt; is a study of the matrices that describe rotation, translation and scaling of objects moving in three-dimensional space. These matrices are the building blocks of today&apos;s computer graphics and are essential to all popular video games, to all CAD (Computer Added Design) packages, to CGI (Computer Graphics Imagery) in films. and to MATLAB&apos;s Handle Graphics.&lt;/p&gt;
&lt;p&gt;MATLAB is short for Matrix Laboratory. Matrices are also the foundation of MATLAB and of MathWorks.&lt;/p&gt;
&lt;p&gt;The &lt;i&gt;homogeneous coordinates&lt;/i&gt; system used in modern computer graphics makes it possible to describe rotations, translations and many other operations with 4-by-4 matrices.  These matrices operate on vectors with the position of an objec in the first three components and, for now, a one as the fourth component, e.g. &lt;tt&gt;[x,y,z,1]&apos;&lt;/tt&gt;,&lt;/p&gt;
&lt;p&gt;The matrices, which we collectively denote by &lt;tt&gt;M&lt;/tt&gt;, are always shown in the panel in our displays.  Here is an animation of one important example.  Do you see the pattern in the evolving elements of this &lt;tt&gt;M&lt;/tt&gt;? How are they related to each other?  How long before they repeat?&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/mat_gif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Axis&lt;a name=&quot;7cfcc1d4-26d2-4b2e-b4cb-a0ca04383ff8&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here is the coordinate system used by &lt;tt&gt;view(3)&lt;/tt&gt;, MATLAB&apos;s default projection of our three-dimensional physical world onto the two-dimensional computer display. The positive &lt;tt&gt;x&lt;/tt&gt;-axis goes up and to the right on the screen, the positive &lt;tt&gt;y&lt;/tt&gt;-axis goes up and to the left, and the positive &lt;tt&gt;z&lt;/tt&gt;-axis goes straight up.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/axis.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Rx&lt;a name=&quot;6ce3a663-e301-4ddb-bc4d-58ae5e8f3b51&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The three knobs at the lower right of the &lt;tt&gt;Grafix&lt;/tt&gt; window allow you to vary the angles of &lt;tt&gt;Rx&lt;/tt&gt;, &lt;tt&gt;Ry&lt;/tt&gt; and &lt;tt&gt;Rz&lt;/tt&gt;.  Here are snapshots of the resulting motion.  The &lt;tt&gt;Rx&lt;/tt&gt; knob produces rotation about the &lt;tt&gt;x&lt;/tt&gt;-axis, leaving &lt;tt&gt;x&lt;/tt&gt; unchanged while rotating &lt;tt&gt;y&lt;/tt&gt; and &lt;tt&gt;z&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Rx.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Ry&lt;a name=&quot;f007d1f0-d76b-4e3e-bea3-49bd18805a1f&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Ry&lt;/tt&gt;, rotation about the &lt;tt&gt;y&lt;/tt&gt;-axis, leaves &lt;tt&gt;y&lt;/tt&gt; unchanged while rotating &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;z&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Ry.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Rz&lt;a name=&quot;200c71a6-5d9f-4c03-8a03-00476f103160&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;And, &lt;tt&gt;Rz&lt;/tt&gt;, rotation about the &lt;tt&gt;z&lt;/tt&gt;-axis, leaves &lt;tt&gt;z&lt;/tt&gt; unchanged while rotating &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Rz.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Tx&lt;a name=&quot;8dd6ed79-ba75-409b-a59d-68244c928c7a&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The three sliders at the lower left of the &lt;tt&gt;Grafix&lt;/tt&gt; window control matrices with values in the fourth column. Multiplying a vector by &lt;tt&gt;Tx&lt;/tt&gt;, which has a nonzero element in the first row, produces a horizontal movement in the direction of the &lt;tt&gt;x&lt;/tt&gt;-axis.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Tx.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Ty&lt;a name=&quot;a9651b74-3170-4b23-a015-890b537b778a&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Ty&lt;/tt&gt;, with a nonzero in the second row, is translation in the direction of the &lt;tt&gt;y&lt;/tt&gt;-axis.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Ty.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Tz&lt;a name=&quot;ce30422a-3bb7-4beb-90c6-3dfe5eb88351&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;And, &lt;tt&gt;Tz&lt;/tt&gt; is translation in the &lt;tt&gt;z&lt;/tt&gt; direction.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Tz.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;S&lt;a name=&quot;20f8cb07-c525-4f1b-a1ae-f9b6320078eb&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The fourth slider controls &lt;tt&gt;S&lt;/tt&gt;, a diagonal matrix with a single scaling factor for all three axes.&lt;/p&gt;
&lt;p&gt;The use of matrix multiplication allows translations and scaling to be combined with rotations and other operations in a uniform way. The arithmetic units on today&apos;s Graphics Processing Units, GPUs, are designed to do 4-by-4 matrix multiplications at speeds hundreds of times faster than general purpose Central Processing Units, CPUs.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/S.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Switches&lt;a name=&quot;e8ae8340-3615-4ed7-90e7-b185a33f370a&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The switch on the left provides other objects that we will introduce later.  The switch on the right provides different &lt;tt&gt;views&lt;/tt&gt; of three dimensions.  The &lt;tt&gt;yz&lt;/tt&gt; plane view is shown here.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/switches.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Pitch, Roll, Yaw&lt;a name=&quot;097b4cbd-7971-430f-aa63-04db38192c6e&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;i&gt;Pitch&lt;/i&gt;, &lt;i&gt;roll&lt;/i&gt; and  &lt;i&gt;yaw&lt;/i&gt; are often used to describe the motion of aircraft and spacecraft. These terms are closely related to the rotations &lt;tt&gt;Rx&lt;/tt&gt;, &lt;tt&gt;Ry&lt;/tt&gt; and &lt;tt&gt;Rz&lt;/tt&gt;. The &lt;tt&gt;Pitch&lt;/tt&gt; button animates the &lt;tt&gt;Rx&lt;/tt&gt; knob.  Here is a snapshot near one extreme of the resulting motion.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/pitch.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Start, Reset, Viz&lt;a name=&quot;e558e05a-1bc3-41ed-a63b-ff056cf04620&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The &lt;tt&gt;Start&lt;/tt&gt; button restarts &lt;tt&gt;Grafix&lt;/tt&gt;. The &lt;tt&gt;Reset&lt;/tt&gt; button resets all knobs and sliders.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;Viz&lt;/tt&gt; button turns off the display of buttons, knobs, sliders, and switches.  A small button, emphasized here with color, but usually barely visible, turns the display back on.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/viz.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Apps/taxi&lt;a name=&quot;9d1fa1cc-0fe6-4d6f-9ca6-a50f0644fc62&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Grafix&lt;/tt&gt; is programable, in a primitive sort of way.  Apps are &lt;tt&gt;Grafix&lt;/tt&gt; programs.  &lt;tt&gt;Taxi&lt;/tt&gt; is a small app.  This is a snapshot.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/taxi.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Apps/takeoff&lt;a name=&quot;0c8793f3-d9d5-45ef-90a8-7ec0c83356ca&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;When the &lt;tt&gt;takeoff&lt;/tt&gt; app first appeared, I thought it was a bug in the code for &lt;tt&gt;Grafix&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;You can see the &lt;tt&gt;takeoff&lt;/tt&gt; program by entering &lt;tt&gt;type takeoff&lt;/tt&gt; at the MATLAB command prompt.  You can also &lt;tt&gt;edit takeoff&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/takeoffapp.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Prop&lt;a name=&quot;c20254e9-3887-4d66-9903-db87c5c7bb30&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;One of my favorite animations employs the rotations from the Matrices section to drive the propeller alone.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/prop_gif_small.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Info&lt;a name=&quot;1adf580c-785f-4333-9494-0f5657c1ce53&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The &lt;tt&gt;info&lt;/tt&gt; button is a link to this User&apos;s Guide.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Guide.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Exercises&lt;a name=&quot;095cf406-3f28-4e05-ab8a-43d29a3310c1&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;What color is the beacon on top of the plane?&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Demonstrate how matrix-vector multiplication, &lt;tt&gt;Mv&lt;/tt&gt;, of a position   vector, &lt;tt&gt;v = [x,y,z,1]&apos;&lt;/tt&gt;, by a 4-by-4 matrix &lt;tt&gt;M&lt;/tt&gt;, achieves a rotation,   translation or scaling.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Describe the evolution of the matrix values in the Matrices and   &lt;tt&gt;prop&lt;/tt&gt; animations.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;What angles are involved in the snapshots shown for   &lt;tt&gt;Rx&lt;/tt&gt;, &lt;tt&gt;Ry&lt;/tt&gt; and &lt;tt&gt;Rz&lt;/tt&gt;?&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Why is the plane in the &lt;tt&gt;Pitch&lt;/tt&gt; animation upside down?&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;What angles and what matrices characterize the extremes of the &lt;tt&gt;Pitch&lt;/tt&gt;   animation?&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;Write another app like &lt;tt&gt;taxi&lt;/tt&gt; and &lt;tt&gt;takeoff&lt;/tt&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Software&lt;a name=&quot;6df5e80a-e9fa-45c4-aff2-03edb1ccb334&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The MATLAB code for &lt;tt&gt;Grafix&lt;/tt&gt; &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Grafix_mzip.m&quot;&gt;is available here.&lt;/a&gt;&lt;/p&gt;
&lt;!-- 
    function grabCode_c11525de7f124cdcb5896c8c3f89d4a8() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;c11525de7f124cdcb5896c8c3f89d4a8 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; c11525de7f124cdcb5896c8c3f89d4a8&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
c11525de7f124cdcb5896c8c3f89d4a8 ##### SOURCE BEGIN #####
%% Grafix User&apos;s Guide
% This is a quick look at
% |Grafix|, our tool for exploring matrices via 3-D computer graphics.
%
% &lt;&lt;Opening.png&gt;&gt;
%

%% Matrices
% The word _matrix_ comes from the Latin word _mater_, which means
% _mother_ or  _origin_.  Matrices provide the origins of much of
% modern applied mathematics and computational science.
%
% |Grafix| is a study of the matrices that describe rotation, translation 
% and scaling of objects moving in three-dimensional space. 
% These matrices are the building blocks of today&apos;s computer graphics
% and are essential to all popular video games, 
% to all CAD (Computer Added Design) packages, 
% to CGI (Computer Graphics Imagery) in films.
% and to MATLAB&apos;s Handle Graphics.
%
% MATLAB is short for Matrix Laboratory.
% Matrices are also the foundation of MATLAB and of MathWorks.
%
% The _homogeneous coordinates_ system used in modern computer graphics
% makes it possible to describe rotations, translations
% and many other operations with 4-by-4 matrices.  These matrices
% operate on vectors with the position of an objec
% in the first three components and, for now, a one as the
% fourth component, e.g. |[x,y,z,1]&apos;|,
%
% The matrices, which we collectively denote by |M|, are always shown
% in the panel in our displays.  Here is an animation of one important 
% example.  Do you see the pattern in the evolving elements of this |M|?
% How are they related to each other?  How long before they repeat?
%
% &lt;&lt;mat_gif.gif&gt;&gt;
%

%% Axis
% Here is the coordinate system used by |view(3)|, MATLAB&apos;s default 
% projection of our three-dimensional physical world onto the 
% two-dimensional computer display.
% The positive |x|-axis goes up and to the right on the screen, 
% the positive |y|-axis goes up and to the left, and the positive 
% |z|-axis goes straight up.
%
% &lt;&lt;axis.png&gt;&gt;

%% Rx
% The three knobs at the lower right of the |Grafix| window allow you
% to vary the angles of |Rx|, |Ry| and |Rz|.  Here are snapshots
% of the resulting motion.  The |Rx| knob produces rotation about the
% |x|-axis, leaving |x| unchanged while rotating |y| and |z|. 
%
% &lt;&lt;Rx.png&gt;&gt;
%

%% Ry
% |Ry|, rotation about the |y|-axis, leaves |y| unchanged while 
% rotating |x| and |z|. 
%
% &lt;&lt;Ry.png&gt;&gt;
%

%% Rz
% And, |Rz|, rotation about the |z|-axis, leaves |z| unchanged while
% rotating |x| and |y|.
%
% &lt;&lt;Rz.png&gt;&gt;
%

%% Tx
% The three sliders at the lower left of the |Grafix| window
% control matrices with values in the fourth column.
% Multiplying a vector by |Tx|, which has a nonzero element in the first
% row, produces a horizontal movement in the direction of the |x|-axis.
%
% &lt;&lt;Tx.png&gt;&gt;
%

%% Ty
% |Ty|, with a nonzero in the second row, is translation in the 
% direction of the |y|-axis.
%
% &lt;&lt;Ty.png&gt;&gt;
%

%% Tz
% And, |Tz| is translation in the |z| direction.
%
% &lt;&lt;Tz.png&gt;&gt;
%

%% S
% The fourth slider controls |S|, a diagonal matrix with
% a single scaling factor for all three axes. 
%
% The use of matrix multiplication allows translations and scaling
% to be combined with rotations and other operations in a uniform way. 
% The arithmetic units on today&apos;s
% Graphics Processing Units, GPUs, are designed to do 4-by-4 matrix
% multiplications at speeds hundreds of times faster than general
% purpose Central Processing Units, CPUs.
%
% &lt;&lt;S.png&gt;&gt;
%

%% Switches
% The switch on the left provides other objects that we will introduce
% later.  The switch on the right provides different |views| 
% of three dimensions.  The |yz| plane view is shown here.
%
% &lt;&lt;switches.png&gt;&gt;
% 

%% Pitch, Roll, Yaw
% _Pitch_, _roll_ and  _yaw_ are often used to describe
% the motion of aircraft and spacecraft.
% These terms are closely related to the rotations |Rx|, |Ry| and |Rz|.
% The |Pitch| button animates the |Rx| knob.  Here is a snapshot near
% one extreme of the resulting motion.
%
% &lt;&lt;pitch.png&gt;&gt;
%

%% Start, Reset, Viz
% The |Start| button restarts |Grafix|.
% The |Reset| button resets all knobs and sliders.
%
% The |Viz| button turns off the display of buttons, knobs, sliders, and
% switches.  A small button, emphasized here with color, but usually
% barely visible, turns the display back on.
%
% &lt;&lt;viz.png&gt;&gt;
%

%% Apps/taxi
% |Grafix| is programable, in a primitive sort of way.  Apps are |Grafix|
% programs.  |Taxi| is a small app.  This is a snapshot.
%
% &lt;&lt;taxi.png&gt;&gt;
%

%% Apps/takeoff
% When the |takeoff| app first appeared, I thought it was a bug in the 
% code for |Grafix|.
%
% You can see the |takeoff| program by entering |type takeoff|
% at the MATLAB command prompt.  You can also |edit takeoff|.
%
% &lt;&lt;takeoffapp.png&gt;&gt;
%

%% Prop
% One of my favorite animations employs the rotations from the Matrices
% section to drive the propeller alone.
%
% &lt;&lt;prop_gif_small.gif&gt;&gt;
%

%% Info
% The |info| button is a link to this User&apos;s Guide.
%
% &lt;&lt;Guide.png&gt;&gt;
%

%% Exercises
%
% * What color is the beacon on top of the plane?
%
% * Demonstrate how matrix-vector multiplication, |Mv|, of a position
%   vector, |v = [x,y,z,1]&apos;|, by a 4-by-4 matrix |M|, achieves a rotation,
%   translation or scaling.
%
% * Describe the evolution of the matrix values in the Matrices and
%   |prop| animations.
%
% * What angles are involved in the snapshots shown for
%   |Rx|, |Ry| and |Rz|?
%
% * Why is the plane in the |Pitch| animation upside down?
%
% * What angles and what matrices characterize the extremes of the |Pitch|
%   animation? 
%
% * Write another app like |taxi| and |takeoff|.
%

%% Software
%
% The MATLAB code for |Grafix|
% &lt;https://blogs.mathworks.com/cleve/files/Grafix_mzip.m is available here.&gt;
##### SOURCE END ##### c11525de7f124cdcb5896c8c3f89d4a8
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Matrices In Action, Grafix 2.0</title>
   <link href="https://hpc.social/2023/matrices-in-action-grafix-2-0/"/>
   <updated>2023-02-04T13:00:33-07:00</updated>
   <id>https://hpc.social/2023/matrices-in-action-grafix-2-0</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;The 4-by-4 matrices in the panels on the following screenshots are at the heart of computer graphics. They describe objects moving in three-dimensional space and are essential to MATLAB&apos;s Handle Graphics, to CAD (Computer Added Design) packages, to CGI (Computer Graphics Imagery) in  films, and to most popular video games.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4c54a017-4a2d-4bd0-b5de-085c77696298&quot;&gt;Grafix 2.0&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#19ccc0f8-ccd0-45a3-a624-c4f466eea2af&quot;&gt;Rotations&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4028a6e9-0449-4846-8e6e-c9a2c5ad64b6&quot;&gt;Pitch, Roll, and Yaw&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e6dc8b74-fe6e-4fb5-a343-2b8fbfe28558&quot;&gt;Translations&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9dbcd88d-756a-475c-bd7e-237261a3cdbe&quot;&gt;Horizontal and Vertical&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#54cb3b88-904f-441b-9c61-91dca0a68c0d&quot;&gt;Scalings&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#9bfb2311-6f44-4f2b-85aa-f09554da0cc6&quot;&gt;Larger and Smaller&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ef53d281-53a4-437e-80f0-93b331367abf&quot;&gt;Suggestions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Grafix 2.0&lt;a name=&quot;4c54a017-4a2d-4bd0-b5de-085c77696298&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here is the opening screen from version 2.0 of &lt;tt&gt;Grafix&lt;/tt&gt;, my tool for investigating the matrices involved in 3-D computer graphics. The MATLAB code for &lt;tt&gt;Grafix&lt;/tt&gt; &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Grafix_mzip.m&quot;&gt;is availble here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am interested in the matrix in the panel, which I call &lt;tt&gt;M&lt;/tt&gt;. Many matrices like this one describe the dyamic transformations to be made on a set of target objects in a complex three-dimensional scene. This particular &lt;tt&gt;M&lt;/tt&gt; is the product of a scaling and a rotation that results in the size and orientation of the plane shown.&lt;/p&gt;
&lt;p&gt;I also want to point out the coordinate axes being used. This is &lt;tt&gt;view(3)&lt;/tt&gt;, MATLAB&apos;s default 3-D cordinate system.  The positive $x$-axis goes up and to the right on the screen, the positive $y$-axis up and to the left, and the positive $z$-axis goes straight up.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/grafix.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Rotations&lt;a name=&quot;19ccc0f8-ccd0-45a3-a624-c4f466eea2af&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The &lt;i&gt;homogeneous coordinates&lt;/i&gt; system used in modern computer graphics makes it possible to describe rotations, translations and many other operations with 4-by-4 matrices.  These matrices operate on vectors with the position of an object in the first three components and, for now, a one as the fourth component, eg.  [ $x$, $y$, $z$, 1 ]&apos;,&lt;/p&gt;
&lt;p&gt;Rotations are described by products of these matrices, each of which operates on only two of the first three components of the vector.  The first matrix, $R_x$, leaves $x$ unchanged while it rotates $y$ and $z$.  The second matrix, $R_y$, leaves $y$ unchanged while it rotates $x$ and $z$.  And the third matrix, $R_z$, leaves $z$ unchanged while it rotates $x$ and $y$.&lt;/p&gt;
&lt;p&gt;$$ R_x(\theta) = \left[ \begin{array}{rrrr}
  1  &amp;amp;             0  &amp;amp;              0  &amp;amp;  0 \\
  0  &amp;amp;  \cos{\theta}  &amp;amp;  -\sin{\theta}  &amp;amp;  0 \\
  0  &amp;amp;  \sin{\theta}  &amp;amp;   \cos{\theta}  &amp;amp;  0 \\
  0  &amp;amp;             0  &amp;amp;              0  &amp;amp;  1
  \end{array}  \right] $$&lt;/p&gt;
&lt;p&gt;$$ R_y(\theta) = \left[ \begin{array}{rrrr}
    \cos{\theta}  &amp;amp;  0  &amp;amp; -\sin{\theta}  &amp;amp;  0 \\
               0  &amp;amp;  1  &amp;amp;             0  &amp;amp;  0 \\
    \sin{\theta}  &amp;amp;  0  &amp;amp;  \cos{\theta}  &amp;amp;  0 \\
               0  &amp;amp;  0  &amp;amp;             0  &amp;amp;  1
  \end{array}  \right] $$&lt;/p&gt;
&lt;p&gt;$$ R_z(\theta) = \left[ \begin{array}{rrrr}
   \cos{\theta}  &amp;amp;  -\sin{\theta}  &amp;amp;  0  &amp;amp;  0 \\
   \sin{\theta}  &amp;amp;   \cos{\theta}  &amp;amp;  0  &amp;amp;  0 \\
              0  &amp;amp;              0  &amp;amp;  1  &amp;amp;  0 \\
              0  &amp;amp;              0  &amp;amp;  0  &amp;amp;  1
  \end{array}  \right] $$&lt;/p&gt;
&lt;h4&gt;Pitch, Roll, and Yaw&lt;a name=&quot;4028a6e9-0449-4846-8e6e-c9a2c5ad64b6&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The terms &lt;i&gt;pitch&lt;/i&gt;, &lt;i&gt;roll&lt;/i&gt; and  &lt;i&gt;yaw&lt;/i&gt; are often used to describe the motion of vehicles like aircraft, marine craft, and spacecraft. Pitch is $R_x$, rotation about the $x$-axis.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/pitchgif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Roll is $R_y$, rotation about the $y$-axis.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/rollgif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;And yaw is $R_z$, rotation about the $z$-axis.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/yawgif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Translations&lt;a name=&quot;e6dc8b74-fe6e-4fb5-a343-2b8fbfe28558&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Translations are described by matrices with values in the fourth column. Multiplying a vector by one of these matrices produces a translation in the direction of the corresponding axis.&lt;/p&gt;
&lt;p&gt;$$ T_x(\delta) = \left[ \begin{array}{rrrr}
   1  &amp;amp;  0  &amp;amp;  0  &amp;amp;  \delta \\
   0  &amp;amp;  1  &amp;amp;  0  &amp;amp;         0 \\
   0  &amp;amp;  0  &amp;amp;  1  &amp;amp;         0 \\
   0  &amp;amp;  0  &amp;amp;  0  &amp;amp;         1
  \end{array}  \right] $$&lt;/p&gt;
&lt;p&gt;$$ T_y(\delta) = \left[ \begin{array}{rrrr}
   1  &amp;amp;  0  &amp;amp;  0  &amp;amp;         0 \\
   0  &amp;amp;  1  &amp;amp;  0  &amp;amp;  \delta \\
   0  &amp;amp;  0  &amp;amp;  1  &amp;amp;         0 \\
   0  &amp;amp;  0  &amp;amp;  0  &amp;amp;         1
  \end{array}  \right] $$&lt;/p&gt;
&lt;p&gt;$$ T_z(\delta) = \left[ \begin{array}{rrrr}
   1  &amp;amp;  0  &amp;amp;  0  &amp;amp;         0 \\
   0  &amp;amp;  1  &amp;amp;  0  &amp;amp;         0 \\
   0  &amp;amp;  0  &amp;amp;  1  &amp;amp;  \delta \\
   0  &amp;amp;  0  &amp;amp;  0  &amp;amp;         1
  \end{array}  \right] $$&lt;/p&gt;
&lt;p&gt;While it is true that translations could be accomplished simply by adding the increment to the specified coordiate, the use of matrix multiplication allows translations to be combined in a uniform way with rotations and other operations.  The arithmetic units on today&apos;s Graphics Processing Units, GPUs, are designed to do 4-by-4 matrix multiplications at speeds hundreds of times faster than general purpose Central Processing Units, CPUs.&lt;/p&gt;
&lt;h4&gt;Horizontal and Vertical&lt;a name=&quot;9dbcd88d-756a-475c-bd7e-237261a3cdbe&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Inspired by David Singmaster&apos;s notation for Rubik&apos;s cubes, L, R, B, F, U, and D, we can use the descriptive terms &lt;i&gt;left&lt;/i&gt; and &lt;i&gt;right&lt;/i&gt; for horizontal motion in the $x$ direction; &lt;i&gt;back&lt;/i&gt; and &lt;i&gt;forth&lt;/i&gt; for horizontal motion in the $y$ direction; and &lt;i&gt;up&lt;/i&gt; and &lt;i&gt;down&lt;/i&gt; for vertical motion in the $z$ direction.&lt;/p&gt;
&lt;p&gt;$T_x$, left and right.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Txgif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;$T_y$, back and forth.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Tygif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;$T_z$, up and down.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Tzgif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Scalings&lt;a name=&quot;54cb3b88-904f-441b-9c61-91dca0a68c0d&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This matrix applies a single scaling factor to all three axes.&lt;/p&gt;
&lt;p&gt;$$ S(\sigma) = \left[ \begin{array}{rrrr}
   \sigma  &amp;amp;  0  &amp;amp;  0    &amp;amp;  0 \\
     0 &amp;amp; \sigma  &amp;amp;  0    &amp;amp;  0 \\
     0 &amp;amp;   0  &amp;amp;  \sigma  &amp;amp;  0 \\
     0  &amp;amp;  0  &amp;amp;     0    &amp;amp;  1
  \end{array}  \right] $$&lt;/p&gt;
&lt;h4&gt;Larger and Smaller&lt;a name=&quot;9bfb2311-6f44-4f2b-85aa-f09554da0cc6&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;$S$&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Sgif.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Suggestions&lt;a name=&quot;ef53d281-53a4-437e-80f0-93b331367abf&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Refresh your browser to syncronize the animations.&lt;/p&gt;
&lt;p&gt;Download your own self-archiving copies of&lt;/p&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Grafix_mzip.m&quot;&gt;Grafix&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Qube_mzip-1.m&quot;&gt;Qube&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;!-- 
    function grabCode_b13c7ab1c73c4ad7909fa2d7cd9764f2() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;b13c7ab1c73c4ad7909fa2d7cd9764f2 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; b13c7ab1c73c4ad7909fa2d7cd9764f2&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
b13c7ab1c73c4ad7909fa2d7cd9764f2 ##### SOURCE BEGIN #####
%% Matrices In Action, Grafix 2.0
% The 4-by-4 matrices in the panels on the following screenshots
% are at the heart of computer graphics.
% They describe objects moving in three-dimensional
% space and are essential to MATLAB&apos;s Handle Graphics,
% to CAD (Computer Added Design) packages, 
% to CGI (Computer Graphics Imagery) in  films,
% and to most popular video games.
%

%% Grafix 2.0
% Here is the opening screen from version 2.0 of |Grafix|,
% my tool for investigating the matrices involved in 3-D computer graphics.
% The MATLAB code for |Grafix|
% &lt;https://blogs.mathworks.com/cleve/files/Grafix_mzip.m is availble here.&gt;

%%
% I am interested in the matrix in the panel, which I call |M|.
% Many matrices like this one describe the dyamic transformations to be
% made on a set of target objects in a complex three-dimensional scene.
% This particular |M| is the product of a scaling and a rotation that 
% results in the size and orientation of the plane shown.
%
% I also want to point out the coordinate axes being used.
% This is |view(3)|, MATLAB&apos;s default 3-D cordinate system.  The positive
% $x$-axis goes up and to the right on the screen, the positive $y$-axis
% up and to the left, and the positive $z$-axis goes straight up.
%
% &lt;&lt;grafix.png&gt;&gt;
%

%% Rotations
% The _homogeneous coordinates_ system used in modern computer graphics
% makes it possible to describe rotations, translations
% and many other operations with 4-by-4 matrices.  These matrices
% operate on vectors with the position of an object
% in the first three components and, for now, a one as the
% fourth component, eg.  [ $x$, $y$, $z$, 1 ]&apos;,
%
% Rotations are described by products of these matrices,
% each of which operates on only two of the first three components of
% the vector.  The first matrix, $R_x$, leaves $x$ unchanged while it 
% rotates $y$ and $z$.  The second matrix, $R_y$, leaves $y$ unchanged
% while it rotates $x$ and $z$.  And the third matrix, $R_z$,
% leaves $z$ unchanged while it rotates $x$ and $y$.
%
% $$ R_x(\theta) = \left[ \begin{array}{rrrr}
%   1  &amp;             0  &amp;              0  &amp;  0 \\
%   0  &amp;  \cos{\theta}  &amp;  -\sin{\theta}  &amp;  0 \\
%   0  &amp;  \sin{\theta}  &amp;   \cos{\theta}  &amp;  0 \\
%   0  &amp;             0  &amp;              0  &amp;  1 
%   \end{array}  \right] $$
%   
%
% $$ R_y(\theta) = \left[ \begin{array}{rrrr}
%     \cos{\theta}  &amp;  0  &amp; -\sin{\theta}  &amp;  0 \\
%                0  &amp;  1  &amp;             0  &amp;  0 \\ 
%     \sin{\theta}  &amp;  0  &amp;  \cos{\theta}  &amp;  0 \\
%                0  &amp;  0  &amp;             0  &amp;  1 
%   \end{array}  \right] $$
%   
%
% $$ R_z(\theta) = \left[ \begin{array}{rrrr}
%    \cos{\theta}  &amp;  -\sin{\theta}  &amp;  0  &amp;  0 \\
%    \sin{\theta}  &amp;   \cos{\theta}  &amp;  0  &amp;  0 \\
%               0  &amp;              0  &amp;  1  &amp;  0 \\
%               0  &amp;              0  &amp;  0  &amp;  1 
%   \end{array}  \right] $$
%

%% Pitch, Roll, and Yaw
% The terms _pitch_, _roll_ and  _yaw_ are often used to describe
% the motion of vehicles like aircraft, marine craft, and spacecraft.
% Pitch is $R_x$, rotation about the $x$-axis.
%
% &lt;&lt;pitchgif.gif&gt;&gt;
%

%%
% Roll is $R_y$, rotation about the $y$-axis.
%
% &lt;&lt;rollgif.gif&gt;&gt;
%

%%
% And yaw is $R_z$, rotation about the $z$-axis.
%
% &lt;&lt;yawgif.gif&gt;&gt;
%

%% Translations
% Translations are described by matrices with values in the fourth column.
% Multiplying a vector by one of these matrices produces a translation
% in the direction of the corresponding axis.
%
% $$ T_x(\delta) = \left[ \begin{array}{rrrr}
%    1  &amp;  0  &amp;  0  &amp;  \delta \\
%    0  &amp;  1  &amp;  0  &amp;         0 \\
%    0  &amp;  0  &amp;  1  &amp;         0 \\
%    0  &amp;  0  &amp;  0  &amp;         1 
%   \end{array}  \right] $$
%
% $$ T_y(\delta) = \left[ \begin{array}{rrrr}
%    1  &amp;  0  &amp;  0  &amp;         0 \\
%    0  &amp;  1  &amp;  0  &amp;  \delta \\
%    0  &amp;  0  &amp;  1  &amp;         0 \\
%    0  &amp;  0  &amp;  0  &amp;         1 
%   \end{array}  \right] $$
%
% $$ T_z(\delta) = \left[ \begin{array}{rrrr}
%    1  &amp;  0  &amp;  0  &amp;         0 \\
%    0  &amp;  1  &amp;  0  &amp;         0 \\
%    0  &amp;  0  &amp;  1  &amp;  \delta \\
%    0  &amp;  0  &amp;  0  &amp;         1 
%   \end{array}  \right] $$
%
% While it is true that translations could be accomplished simply by
% adding the increment to the specified coordiate, the use of matrix
% multiplication allows translations to be combined in a uniform way
% with rotations and other operations.  The arithmetic units on today&apos;s
% Graphics Processing Units, GPUs, are designed to do 4-by-4 matrix
% multiplications at speeds hundreds of times faster than general
% purpose Central Processing Units, CPUs.

%% Horizontal and Vertical
% Inspired by David Singmaster&apos;s notation for Rubik&apos;s cubes, 
% L, R, B, F, U, and D,
% we can use the descriptive terms _left_ and _right_ for
% horizontal motion in the $x$ direction; _back_ and _forth_
% for horizontal motion in the $y$ direction; and _up_ and _down_
% for vertical motion in the $z$ direction.
%
% $T_x$, left and right.
%
% &lt;&lt;Txgif.gif&gt;&gt;
%
%
% $T_y$, back and forth.
%
% &lt;&lt;Tygif.gif&gt;&gt;
%
% $T_z$, up and down.
%
% &lt;&lt;Tzgif.gif&gt;&gt;
%

%% Scalings
% This matrix applies a single scaling factor to all three axes. 
%
% $$ S(\sigma) = \left[ \begin{array}{rrrr}
%    \sigma  &amp;  0  &amp;  0    &amp;  0 \\
%      0 &amp; \sigma  &amp;  0    &amp;  0 \\
%      0 &amp;   0  &amp;  \sigma  &amp;  0 \\
%      0  &amp;  0  &amp;     0    &amp;  1 
%   \end{array}  \right] $$

%% Larger and Smaller
%
% $S$
%
% &lt;&lt;Sgif.gif&gt;&gt;
%

%% Suggestions
% Refresh your browser to syncronize the animations.
% 
% Download your own self-archiving copies of
%
% * &lt;https://blogs.mathworks.com/cleve/files/Grafix_mzip.m Grafix&gt;
% * &lt;https://blogs.mathworks.com/cleve/files/Qube_mzip-1.m Qube&gt;
%
##### SOURCE END ##### b13c7ab1c73c4ad7909fa2d7cd9764f2
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Singular Matrix Pencils and the QZ Algorithm, Update</title>
   <link href="https://hpc.social/2023/singular-matrix-pencils-and-the-qz-algorithm-update/"/>
   <updated>2023-01-10T21:45:12-07:00</updated>
   <id>https://hpc.social/2023/singular-matrix-pencils-and-the-qz-algorithm-update</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;(The January 5 posting was premature and incomplete.)&lt;/p&gt;
&lt;p&gt;This year, 2023, is the 50-th anniversary of the QZ algorithm for the generalized matrix eigenvalue problem,&lt;/p&gt;
&lt;pre&gt;  Ax = &amp;#955;Bx&lt;/pre&gt;&lt;p&gt;The algorithm avoids inverting either &lt;tt&gt;A&lt;/tt&gt; or &lt;tt&gt;B&lt;/tt&gt;. And, importantly, the QZ algorithm can be used to detect and analyze exceptional instances of the problem known as &lt;i&gt;singular pencils&lt;/i&gt;. These pencils do not occur in the standard eigenvalue problem where &lt;tt&gt;B&lt;/tt&gt; is the identity matrix.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#59d30988-fe9f-4381-bf4b-70b9181f1d24&quot;&gt;Singular pencils&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#aa953fcf-a488-43bb-8976-bef668d4b373&quot;&gt;3-by-3 example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ebedf1c8-dc25-443b-9232-8e963a75eed3&quot;&gt;Wilkinson example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2c8b301b-125b-4389-a5ea-fd8eccc8d4ba&quot;&gt;References&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Singular pencils&lt;a name=&quot;59d30988-fe9f-4381-bf4b-70b9181f1d24&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A matrix pencil is &lt;i&gt;singular&lt;/i&gt; if both &lt;tt&gt;A&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; are singular and, moreover, &lt;tt&gt;A&lt;/tt&gt; - &amp;#955; &lt;tt&gt;B&lt;/tt&gt; is singular for all &amp;#955;.  Equivalently,&lt;/p&gt;
&lt;pre&gt;  det(A - &amp;#955;B) = 0 for all &amp;#955;.&lt;/pre&gt;&lt;p&gt;Singular pencils are more insidious than might appear at first glance. In some sense, the spectrum is the entire complex plane.&lt;/p&gt;
&lt;p&gt;There are no singular pencils with the standard eigenvalue problem&lt;/p&gt;
&lt;pre&gt;  Ax = &amp;#955;x&lt;/pre&gt;&lt;p&gt;where &lt;tt&gt;B&lt;/tt&gt; is the identity matrix and certainly nonsingular.&lt;/p&gt;
&lt;p&gt;If &lt;tt&gt;A&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; are both real symmetric or complex Hermitian, but neither is positive definite, the pencil may or may not be singular. Symmetric problems occur frequently and there are separate algorithms and perturbation and convergence theories.&lt;/p&gt;
&lt;p&gt;The QZ algorithm does not compute the eigenvalues &amp;#955; until the very last step.  It stably reduces &lt;tt&gt;A&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; to triangular form with diagonals &amp;#945; and &amp;#946;. The eigenvalues are then the ratios&lt;/p&gt;
&lt;pre&gt;  &amp;#955; = &amp;#945;./&amp;#946;&lt;/pre&gt;&lt;p&gt;Isolated zeros in &amp;#945; or &amp;#946; yield zero or infinite eigenvalues with no special difficulties.  Singular pencils occur if and only if zeros in &amp;#945; and &amp;#946; occur &lt;i&gt;with the same index&lt;/i&gt; and (with exact arithmetic) lead to &amp;#955; = 0/0 = NaN.&lt;/p&gt;
&lt;p&gt;With a singular pencil, some, perhaps all, of the diagonal values in &amp;#945; and &amp;#946; are highly sensitive to perturbation, and all of the eigenvalues computed from the ratios are suspect.  Theoretically the ill-conditioned eigenvalues can be determined from the Kronecker Canonical Form, a generalization of the notorious Jordan Canonical Form.  But, like the Jordan Form, the Kronecker Form cannot provide a stable numerical algorithm.&lt;/p&gt;
&lt;h4&gt;3-by-3 example&lt;a name=&quot;aa953fcf-a488-43bb-8976-bef668d4b373&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&quot;codeinput&quot;&gt;   A = [9 8 7; 6 5 4; 3 2 1]

   B = [1 3 2; 4 6 5; 7 9 8]
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
A =

     9     8     7
     6     5     4
     3     2     1


B =

     1     3     2
     4     6     5
     7     9     8

&lt;/pre&gt;&lt;p&gt;Let&apos;s verify that this is a singular pencil. Use the Symbolic Math Toolbox to introduce a free variable.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   syms &lt;span class=&quot;string&quot;&gt;lambda&lt;/span&gt;
   AB = A - lambda*B
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt; 
AB =
 
[  9 - lambda, 8 - 3*lambda, 7 - 2*lambda]
[6 - 4*lambda, 5 - 6*lambda, 4 - 5*lambda]
[3 - 7*lambda, 2 - 9*lambda, 1 - 8*lambda]
 
&lt;/pre&gt;&lt;p&gt;Without further computation, we can see that the second row is the average of the first and third rows for all &lt;tt&gt;lambda&lt;/tt&gt; and consequently that the determinant must be identically zero.&lt;/p&gt;
&lt;p&gt;With exact arithmetic, each of these statements would produce the same eigenvalues.  After the introduction of some roundoff error, two of the &lt;tt&gt;lambdas&lt;/tt&gt; are indeterminant, but &lt;tt&gt;lambda = -1&lt;/tt&gt; is present in all four results. Is &lt;tt&gt;lambda = -1&lt;/tt&gt; a stable eigenvalue?&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   lambda_AB = eig(A,B)
   lambda_BA = 1./eig(B,A)
   lambda_ATBT = eig(A&apos;,B&apos;)
   lambda_BTAT = 1./eig(B&apos;,A&apos;)
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
lambda_AB =

    1.8984
   -1.0000
   -0.0807


lambda_BA =

   -1.0000
    0.5837
   -0.9274


lambda_ATBT =

    0.0829
       Inf
   -1.0000


lambda_BTAT =

   -0.9661
         0
   -1.0000

&lt;/pre&gt;&lt;p&gt;The triangular matrices for &lt;tt&gt;lambda_AB&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   [QAZ,QBZ] = qz(A,B);
   QAZ
   QBZ
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
QAZ =

    1.6131   10.2664  -11.0905
         0   -4.2969    5.9613
         0         0   -0.0000


QBZ =

    0.7898    6.8901  -13.5242
         0    4.2969   -5.9613
         0         0    0.0000

&lt;/pre&gt;&lt;p&gt;Careful examination of the diagonals reveals that &lt;tt&gt;alfa(2)/beta(2)&lt;/tt&gt; is producing the &lt;tt&gt;-1&lt;/tt&gt;, while &lt;tt&gt;alfa(3)/beta(3)&lt;/tt&gt; is roundoff over roundoff.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   format &lt;span class=&quot;string&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;e&lt;/span&gt;
   alfa = diag(QAZ)
   beta = diag(QBZ)
   format &lt;span class=&quot;string&quot;&gt;short&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
alfa =

     1.613087771308989e+00
    -4.296911800112353e+00
    -1.965207685813115e-15


beta =

     7.898460671891234e-01
     4.296911800112357e+00
     1.359052275299816e-15

&lt;/pre&gt;&lt;h4&gt;Wilkinson example&lt;a name=&quot;ebedf1c8-dc25-443b-9232-8e963a75eed3&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Jim Wilkinson published a survey paper about QZ and Kronecker products in 1979.  One of his examples is&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   A = [4 3 2 5; 6 4 2 7; -1 -1 -2 -2; 5 3 2 6]

   B = [2 1 3 4; 3 3 3 5;  0  0 -3 -2; 3 1 3 5]
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
A =

     4     3     2     5
     6     4     2     7
    -1    -1    -2    -2
     5     3     2     6


B =

     2     1     3     4
     3     3     3     5
     0     0    -3    -2
     3     1     3     5

&lt;/pre&gt;&lt;p&gt;Use the Symbolic Math Toolbox to verify that this is a singular pencil.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   syms &lt;span class=&quot;string&quot;&gt;lambda&lt;/span&gt;
   AB = A - lambda*B
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt; 
AB =
 
[4 - 2*lambda,   3 - lambda, 2 - 3*lambda, 5 - 4*lambda]
[6 - 3*lambda, 4 - 3*lambda, 2 - 3*lambda, 7 - 5*lambda]
[          -1,           -1, 3*lambda - 2, 2*lambda - 2]
[5 - 3*lambda,   3 - lambda, 2 - 3*lambda, 6 - 5*lambda]
 
&lt;/pre&gt;&lt;p&gt;The determinant is identically zero for all &lt;tt&gt;lambda&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   d = det(AB)
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt; 
d =
 
0
 
&lt;/pre&gt;&lt;p&gt;With exact arithmetic, each of these statements would produce the same eigenvalues, but in practice each set is different. None of the eigenvalues is stable.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   lambda_AB = eig(A,B)
   lambda_BA = 1./eig(B,A)
   lambda_ATBT = eig(A&apos;,B&apos;)
   lambda_BTAT = 1./eig(B&apos;,A&apos;)
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
lambda_AB =

    1.2056
    0.7055
   -1.0000
      -Inf


lambda_BA =

    1.5097
    0.6408
         0
   -1.0000


lambda_ATBT =

  -0.2141 + 0.2033i
  -0.2141 - 0.2033i
   0.7013 + 0.0000i
   1.4508 + 0.0000i


lambda_BTAT =

    0.3168
    0.9823
    1.2325
         0

&lt;/pre&gt;&lt;p&gt;The triangular matrices for &lt;tt&gt;lambda_AB&lt;/tt&gt; are&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   [QAZ,QBZ] = qz(A,B);
   QAZ
   QBZ
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
QAZ =

    0.7437    4.1769  -12.7279   -5.5000
         0    0.0000    5.2328    2.1602
         0         0    0.7857    0.0123
         0         0         0   -0.2887


QBZ =

    0.5005    6.6143   -8.4853   -2.5000
         0    0.0000    3.2668    2.0105
         0         0    1.1525   -0.7904
         0         0         0    0.2887

&lt;/pre&gt;&lt;p&gt;Examine the diagonals more carefully. &lt;tt&gt;alfa(2)/beta(2)&lt;/tt&gt; is the only roundoff over roundoff, but all four eigenvalues are unstable.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;   format &lt;span class=&quot;string&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;e&lt;/span&gt;
   alfa = diag(QAZ)
   beta = diag(QBZ)
   format &lt;span class=&quot;string&quot;&gt;short&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
alfa =

     7.437114999643711e-01
     1.216947725307920e-14
     7.857314232211017e-01
    -2.886751345948121e-01


beta =

     5.005405248737872e-01
     1.021080292327182e-13
     1.152509249099882e+00
     2.886751345948153e-01

&lt;/pre&gt;&lt;h4&gt;References&lt;a name=&quot;2c8b301b-125b-4389-a5ea-fd8eccc8d4ba&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;C. B. Moler and G. W. Stewart, &quot;An Algorithm for Generalized Matrix Eigenvalue Problems&quot;, &lt;i&gt;SIAM J. Numerical Analysis&lt;/i&gt;, Vol.10, No.2, April 1973. Also available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/cbm_gws.pdf&quot;&gt;cbm_gws.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;J. H. Wilkinson, &quot;Kronecker&apos;s Canonical Form and the QZ Algorithm&quot;, &lt;i&gt;Linear Algebra and its Applications&lt;/i&gt;, Vol. 28, 1979. Also available at &lt;a href=&quot;https://blogmathworks.com/cleve/files/wilkinson.pdf&quot;&gt;wilkinson.pdf&lt;/a&gt;&lt;/p&gt;
&lt;!-- 
    function grabCode_8891e70a294b4c03bb99ac1e6e01b5a5() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;8891e70a294b4c03bb99ac1e6e01b5a5 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 8891e70a294b4c03bb99ac1e6e01b5a5&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
8891e70a294b4c03bb99ac1e6e01b5a5 ##### SOURCE BEGIN #####
%% Singular Matrix Pencils and the QZ Algorithm, Update
% (The January 5 posting was premature and incomplete.)
%
% This year, 2023, is the 50-th anniversary of the QZ algorithm
% for the generalized matrix eigenvalue problem,
% 
%    Ax = λBx
%
% The algorithm avoids inverting either |A| or |B|.
% And, importantly, the QZ algorithm can be used to detect and analyze 
% exceptional instances of the problem known as _singular pencils_.
% These pencils do not occur in the standard eigenvalue problem where
% |B| is the identity matrix.

%% Singular pencils
% A matrix pencil is _singular_ if both |A| and |B| are singular and,
% moreover, |A| - λ |B| is singular for all λ.  Equivalently,
% 
%    det(A - λB) = 0 for all λ.
%
% Singular pencils are more insidious than might appear at first glance.
% In some sense, the spectrum is the entire complex plane.
%
% There are no singular pencils with the standard eigenvalue problem
% 
%    Ax = λx
%
% where |B| is the identity matrix and certainly nonsingular.
%
% If |A| and |B| are both real symmetric or complex Hermitian, but neither
% is positive definite, the pencil may or may not be singular.
% Symmetric problems occur frequently and there are
% separate algorithms and perturbation and convergence theories.
%
% The QZ algorithm does not compute the eigenvalues λ until the very last
% step.  It stably reduces |A| and |B| to triangular form
% with diagonals α and β. The eigenvalues are then the ratios
%
%    λ = α./β
%
% Isolated zeros in α or β yield zero or infinite eigenvalues with no
% special difficulties.  Singular pencils occur if and only if zeros in
% α and β occur _with the same index_ and (with exact arithmetic) lead to
% λ = 0/0 = NaN.
%
% With a singular pencil, some, perhaps all, of the diagonal values
% in α and β are highly sensitive to perturbation, and all of the
% eigenvalues computed from the ratios are suspect.  Theoretically
% the ill-conditioned eigenvalues can be determined from the Kronecker
% Canonical Form, a generalization of the notorious Jordan Canonical
% Form.  But, like the Jordan Form, the Kronecker Form cannot provide        
% a stable numerical algorithm.

%% 3-by-3 example

   A = [9 8 7; 6 5 4; 3 2 1]

   B = [1 3 2; 4 6 5; 7 9 8]

%%
% Let&apos;s verify that this is a singular pencil.
% Use the Symbolic Math Toolbox to introduce a free variable.

   syms lambda
   AB = A - lambda*B

%%
% Without further computation,
% we can see that the second row is the average of the first and third
% rows for all |lambda| and consequently that the determinant must be
% identically zero.

%%
% With exact arithmetic, each of these statements would produce the
% same eigenvalues.  After the introduction of some roundoff error,
% two of the |lambdas| are indeterminant,
% but |lambda = -1| is present in all four results.
% Is |lambda = -1| a stable eigenvalue?

   lambda_AB = eig(A,B)
   lambda_BA = 1./eig(B,A)
   lambda_ATBT = eig(A&apos;,B&apos;)
   lambda_BTAT = 1./eig(B&apos;,A&apos;)

%%
% The triangular matrices for |lambda_AB|.

   [QAZ,QBZ] = qz(A,B); 
   QAZ
   QBZ

%%
% Careful examination of the diagonals reveals that |alfa(2)/beta(2)| 
% is producing the |-1|, while |alfa(3)/beta(3)| is roundoff over roundoff.

   format long e
   alfa = diag(QAZ)
   beta = diag(QBZ)
   format short


%% Wilkinson example
% Jim Wilkinson published a survey paper about QZ and Kronecker products
% in 1979.  One of his examples is

   A = [4 3 2 5; 6 4 2 7; -1 -1 -2 -2; 5 3 2 6]

   B = [2 1 3 4; 3 3 3 5;  0  0 -3 -2; 3 1 3 5]

%%
% Use the Symbolic Math Toolbox to verify that this is a singular pencil.

   syms lambda
   AB = A - lambda*B

%%
% The determinant is identically zero for all |lambda|.

   d = det(AB)

%%
% With exact arithmetic, each of these statements would produce the
% same eigenvalues, but in practice each set is different.
% None of the eigenvalues is stable.

   lambda_AB = eig(A,B)
   lambda_BA = 1./eig(B,A)
   lambda_ATBT = eig(A&apos;,B&apos;)
   lambda_BTAT = 1./eig(B&apos;,A&apos;)

%%
% The triangular matrices for |lambda_AB| are

   [QAZ,QBZ] = qz(A,B); 
   QAZ
   QBZ

%%
% Examine the diagonals more carefully. |alfa(2)/beta(2)| is the only
% roundoff over roundoff, but all four eigenvalues are unstable.

   format long e
   alfa = diag(QAZ)
   beta = diag(QBZ)
   format short

%% References
% C. B. Moler and G. W. Stewart,
% &quot;An Algorithm for Generalized Matrix Eigenvalue Problems&quot;,
% _SIAM J. Numerical Analysis_, Vol.10, No.2, April 1973.
% Also available at 
% &lt;https://blogs.mathworks.com/cleve/files/cbm_gws.pdf cbm_gws.pdf&gt;
%
% J. H. Wilkinson,
% &quot;Kronecker&apos;s Canonical Form and the QZ Algorithm&quot;,
% _Linear Algebra and its Applications_, Vol. 28, 1979.
% Also available at
% &lt;https://blogmathworks.com/cleve/files/wilkinson.pdf wilkinson.pdf&gt;
##### SOURCE END ##### 8891e70a294b4c03bb99ac1e6e01b5a5
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Singular Matrix Pencils and the QZ Algorithm</title>
   <link href="https://hpc.social/2023/singular-matrix-pencils-and-the-qz-algorithm/"/>
   <updated>2023-01-05T16:37:04-07:00</updated>
   <id>https://hpc.social/2023/singular-matrix-pencils-and-the-qz-algorithm</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;This year, 2023, is the 50-th anniversary of the QZ algorithm for generalized matrix eignenvalue problems,&lt;/p&gt;
&lt;pre class=&quot;language-matlab&quot;&gt;Ax = &amp;#955;Bx
&lt;/pre&gt;&lt;p&gt;The algorithm computes these eigevalues without inverting either &lt;tt&gt;A&lt;/tt&gt; or &lt;tt&gt;B&lt;/tt&gt;.  And, the QZ-algorithm can help detect and analyze exceptional situaions known as &lt;i&gt;singular pencils&lt;/i&gt;.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#19d0dd38-a456-4a63-bf2f-18e02689531d&quot;&gt;Matrix pencils&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#31c19b00-cfd8-493d-b712-08610ce3c5aa&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0f5d9fb9-0792-4d4c-a9ac-c5fd3e1e7691&quot;&gt;Wilkinson example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#cbe4eaf1-8a19-41e7-badd-1b8e69f74b61&quot;&gt;References&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Matrix pencils&lt;a name=&quot;19d0dd38-a456-4a63-bf2f-18e02689531d&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If &lt;tt&gt;A&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; are two square matrices, the &lt;i&gt;linear matrix pencil&lt;/i&gt; is the matrix-valued function&lt;/p&gt;
&lt;pre&gt;  A - &amp;#955;B&lt;/pre&gt;&lt;p&gt;A pencil is &lt;i&gt;regular&lt;/i&gt; if there is at least one value of &amp;#955; for which A - &amp;#955;B if not singular.  The pencil is &lt;i&gt;singular&lt;/i&gt; if both &lt;tt&gt;A&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; are singular and, moreover, A - &amp;#955;B is singular for all &amp;#955;.  In other words,&lt;/p&gt;
&lt;pre&gt;  det(A - &amp;#955;B) = 0 for all &amp;#955;.&lt;/pre&gt;&lt;p&gt;Singular pencils are more insiduous than migt appear at first glance.&lt;/p&gt;
&lt;h4&gt;Example&lt;a name=&quot;31c19b00-cfd8-493d-b712-08610ce3c5aa&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&quot;codeinput&quot;&gt;   A = [9 8 7; 6 5 4; 3 2 1]

   B = [7 9 8; 4 6 5; 1 3 2]
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
A =

     9     8     7
     6     5     4
     3     2     1


B =

     7     9     8
     4     6     5
     1     3     2

&lt;/pre&gt;&lt;pre class=&quot;codeinput&quot;&gt;   syms &lt;span class=&quot;string&quot;&gt;s&lt;/span&gt;

   AB = A - s*B

   d = det(AB)
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt; 
AB =
 
[9 - 7*s, 8 - 9*s, 7 - 8*s]
[6 - 4*s, 5 - 6*s, 4 - 5*s]
[  3 - s, 2 - 3*s, 1 - 2*s]
 
 
d =
 
0
 
&lt;/pre&gt;&lt;pre class=&quot;codeinput&quot;&gt;   eig1 = eig(A,B)

   eig2 = 1./eig(B,A)

   [QAZ,QBZ,Q,Z,V,W] = qz(A,B); QAZ, QBZ
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
eig1 =

   -0.4071
    1.0000
    0.2439


eig2 =

   -2.0000
    1.0000
    0.3536


QAZ =

   -1.0298  -13.0363    7.7455
         0    5.6991   -4.6389
         0         0    0.0000


QBZ =

    2.4396  -11.4948    9.6394
         0    5.6991   -4.6389
         0         0    0.0000

&lt;/pre&gt;&lt;pre class=&quot;codeinput&quot;&gt;   eig3 = eig(A&apos;,B&apos;)

   eig4 = 1./eig(B&apos;,A&apos;)

   [QATZ,QBTZ,Q,Z,V,W] = qz(A&apos;,B&apos;); QATZ, QBTZ
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
eig3 =

   -0.2169
       Inf
    1.0000


eig4 =

   -0.0738
         0
    1.0000


QATZ =

   -0.0000  -15.0218    6.8390
         0    2.6729   -2.2533
         0         0    0.5922


QBTZ =

    0.0000  -15.2578    7.1280
         0         0    1.0203
         0         0    0.5922

&lt;/pre&gt;&lt;h4&gt;Wilkinson example&lt;a name=&quot;0f5d9fb9-0792-4d4c-a9ac-c5fd3e1e7691&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&quot;codeinput&quot;&gt;   clear

   A = [4 3 2 5; 6 4 2 7; -1 -1 -2 -2; 5 3 2 6]

   B = [2 1 3 4; 3 3 3 5; 0 0 -3 -2; 3 1 3 5]
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
A =

     4     3     2     5
     6     4     2     7
    -1    -1    -2    -2
     5     3     2     6


B =

     2     1     3     4
     3     3     3     5
     0     0    -3    -2
     3     1     3     5

&lt;/pre&gt;&lt;pre class=&quot;codeinput&quot;&gt;   syms &lt;span class=&quot;string&quot;&gt;s&lt;/span&gt;

   AB = A - s*B

   d = det(AB)
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt; 
AB =
 
[4 - 2*s,   3 - s, 2 - 3*s, 5 - 4*s]
[6 - 3*s, 4 - 3*s, 2 - 3*s, 7 - 5*s]
[     -1,      -1, 3*s - 2, 2*s - 2]
[5 - 3*s,   3 - s, 2 - 3*s, 6 - 5*s]
 
 
d =
 
0
 
&lt;/pre&gt;&lt;pre class=&quot;codeinput&quot;&gt;   eig1 = eig(A,B)

   eig2 = 1./eig(B,A)

   [QAZ,QBZ,Q,Z,V,W] = qz(A,B); QAZ, QBZ
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
eig1 =

    1.2056
    0.7055
   -1.0000
      -Inf


eig2 =

    1.5097
    0.6408
         0
   -1.0000


QAZ =

    0.7437    4.1769  -12.7279   -5.5000
         0    0.0000    5.2328    2.1602
         0         0    0.7857    0.0123
         0         0         0   -0.2887


QBZ =

    0.5005    6.6143   -8.4853   -2.5000
         0    0.0000    3.2668    2.0105
         0         0    1.1525   -0.7904
         0         0         0    0.2887

&lt;/pre&gt;&lt;pre class=&quot;codeinput&quot;&gt;   eig3 = eig(A&apos;,B&apos;)

   eig4 = 1./eig(B&apos;,A&apos;)

   [QATZ,QBTZ,Q,Z,V,W] = qz(A&apos;,B&apos;); QATZ, QBTZ
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
eig3 =

  -0.2141 + 0.2033i
  -0.2141 - 0.2033i
   0.7013 + 0.0000i
   1.4508 + 0.0000i


eig4 =

    0.3168
    0.9823
    1.2325
         0


QATZ =

   0.1281 - 0.2434i   0.2665 + 0.0169i   0.2663 + 1.4905i   0.3721 + 3.5350i
   0.0000 + 0.0000i   0.0587 + 0.1116i   5.2603 - 1.6197i  12.7878 - 4.0110i
   0.0000 + 0.0000i   0.0000 + 0.0000i   0.0000 + 0.0000i   4.1745 + 0.0000i
   0.0000 + 0.0000i   0.0000 + 0.0000i   0.0000 + 0.0000i   0.7572 + 0.0000i


QBTZ =

   0.9052 + 0.0000i   0.6130 - 0.6141i  -0.2443 + 0.8738i   1.2233 + 2.5485i
   0.0000 + 0.0000i   0.4150 + 0.0000i   3.5658 - 1.2114i   8.0696 - 2.2671i
   0.0000 + 0.0000i   0.0000 + 0.0000i   0.0000 + 0.0000i   6.6127 + 0.0000i
   0.0000 + 0.0000i   0.0000 + 0.0000i   0.0000 + 0.0000i   0.5220 + 0.0000i

&lt;/pre&gt;&lt;h4&gt;References&lt;a name=&quot;cbe4eaf1-8a19-41e7-badd-1b8e69f74b61&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;C. B. Moler and G. W. Stewart, &quot;An Algorithm for Generalized Matrix Eigenvalue Problems&quot;, SIAM J.NUMER.ANAL. Vol.10, No.2, April 1973.  Also available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/cbm_gws.pdf&quot;&gt;cbm_gws.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;J. H. Wilkinson, Kronecker&apos;s Canonical Form and the QZ Algorithm&quot;, LINEAR ALGEBRA AND ITS APPPLICATIONS, Vol. 28, 1979.    Also available at Also available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/wilkinson.pdf&quot;&gt;wilkinson.pdf&lt;/a&gt;&lt;/p&gt;
&lt;!-- 
    function grabCode_a9bf4a4405b542598f6dba1c3d53fdbd() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;a9bf4a4405b542598f6dba1c3d53fdbd &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; a9bf4a4405b542598f6dba1c3d53fdbd&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2023 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2023a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
a9bf4a4405b542598f6dba1c3d53fdbd ##### SOURCE BEGIN #####
%% Singular Matrix Pencils and the QZ Algorithm
% This year, 2023, is the 50-th anniversary of the QZ algorithm
% for generalized matrix eignenvalue problems,
% 
%   Ax = λBx
%
% The algorithm computes these eigevalues without inverting
% either |A| or |B|.  And, the QZ-algorithm can help detect and analyze 
% exceptional situaions known as _singular pencils_.

%% Matrix pencils
% If |A| and |B| are two square matrices, the _linear matrix pencil_
% is the matrix-valued function
%
%    A - λB
%
% A pencil is _regular_ if there is at least one value of λ for which
% A - λB if not singular.  The pencil is 
% _singular_ if both |A| and |B| are singular and, moreover, A - λB is 
% singular for all λ.  In other words,
% 
%    det(A - λB) = 0 for all λ.

%%
% Singular pencils are more insiduous than migt appear at first glance.
%% Example

   A = [9 8 7; 6 5 4; 3 2 1]

   B = [7 9 8; 4 6 5; 1 3 2]

%%

   syms s

   AB = A - s*B

   d = det(AB)

%%

   eig1 = eig(A,B)

   eig2 = 1./eig(B,A)

   [QAZ,QBZ,Q,Z,V,W] = qz(A,B); QAZ, QBZ


%%

   eig3 = eig(A&apos;,B&apos;)

   eig4 = 1./eig(B&apos;,A&apos;)

   [QATZ,QBTZ,Q,Z,V,W] = qz(A&apos;,B&apos;); QATZ, QBTZ

%% Wilkinson example

   clear

   A = [4 3 2 5; 6 4 2 7; -1 -1 -2 -2; 5 3 2 6]

   B = [2 1 3 4; 3 3 3 5; 0 0 -3 -2; 3 1 3 5]


%%

   syms s

   AB = A - s*B

   d = det(AB)

%%

   eig1 = eig(A,B)

   eig2 = 1./eig(B,A)

   [QAZ,QBZ,Q,Z,V,W] = qz(A,B); QAZ, QBZ

%%

   eig3 = eig(A&apos;,B&apos;)

   eig4 = 1./eig(B&apos;,A&apos;)

   [QATZ,QBTZ,Q,Z,V,W] = qz(A&apos;,B&apos;); QATZ, QBTZ

%% References
% C. B. Moler and G. W. Stewart,
% &quot;An Algorithm for Generalized Matrix Eigenvalue Problems&quot;,
% SIAM J.NUMER.ANAL. Vol.10, No.2, April 1973.  Also available at 
% &lt;https://blogs.mathworks.com/cleve/files/cbm_gws.pdf cbm_gws.pdf&gt;
%
% J. H. Wilkinson,
% Kronecker&apos;s Canonical Form and the QZ Algorithm&quot;,
% LINEAR ALGEBRA AND ITS APPPLICATIONS, Vol. 28, 1979.    Also available at Also available at 
% &lt;https://blogs.mathworks.com/cleve/files/wilkinson.pdf wilkinson.pdf&gt;

##### SOURCE END ##### a9bf4a4405b542598f6dba1c3d53fdbd
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Color Cube Meets Rubik’s Cube</title>
   <link href="https://hpc.social/2022/color-cube-meets-rubik-s-cube/"/>
   <updated>2022-12-10T02:41:01-07:00</updated>
   <id>https://hpc.social/2022/color-cube-meets-rubik-s-cube</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;I have made a half dozen blog posts about &lt;a href=&quot;https://blogs.mathworks.com/cleve/2022/09/05/rubiks-cube-superflips-and-gods-number/&quot;&gt;Rubik&apos;s Cube&lt;/a&gt; so far this year.  And, during the MATLAB Central Mini Hack in October, I resurrected an old code about the &lt;a href=&quot;https://blogs.mathworks.com/cleve/2022/10/21/an-interactive-version-of-colorcubes/&quot;&gt;Color Cube&lt;/a&gt;.  Now, a combination of the two, Rubik/Color Qube, creates an elegant tool for investigating &lt;i&gt;Matrices in Action&lt;/i&gt;.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c4ab2cc4-7c62-45b6-b8d6-b58e96dd8c07&quot;&gt;Opening&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3426fb76-f361-4a32-b165-f771bba3fb03&quot;&gt;Rubik and Color&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#28b692dc-0d85-4c30-905e-300857741d5c&quot;&gt;Color Qube&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#f9469ecf-8b7e-41d3-8f47-ac23128f5f7d&quot;&gt;Rotations&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#eb4d3e17-82e6-4b1e-b966-c75328d89269&quot;&gt;n-by-n-by-n&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#715fe67d-21d9-46c4-a0b5-b2864db8776f&quot;&gt;2-by-2-by-2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b23519d3-2aa0-46a3-9160-90f256981b7e&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Opening&lt;a name=&quot;c4ab2cc4-7c62-45b6-b8d6-b58e96dd8c07&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here is the opening screen shot of Rubik/Color Qube, one of the most elaborate MATLAB programs that I have ever written.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/screen_shot1.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Rubik and Color&lt;a name=&quot;3426fb76-f361-4a32-b165-f771bba3fb03&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;There are two modes, &lt;tt&gt;rubik&lt;/tt&gt; and &lt;tt&gt;color&lt;/tt&gt;. In &lt;tt&gt;rubik&lt;/tt&gt; mode, the large cube is formed from 27 identical copies of a single small &lt;i&gt;cubelet&lt;/i&gt;.  The six cubelet faces have six different colors.  Red, white and blue are visible initially.  Orange, yellow and green become visible as the faces are rotated.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/rubik.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;In &lt;tt&gt;color&lt;/tt&gt; mode, the large cube is formed from 27 &lt;i&gt;cubelets&lt;/i&gt;, each with a different solid color.  Three of the corner cubelets are the primary colors in the RGB color model -- red, green and blue.  Three more corners are the complementary cyan, magenta and yellow. White and black complete the list of corners.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/color.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Color Qube&lt;a name=&quot;28b692dc-0d85-4c30-905e-300857741d5c&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;All of the familiar Rubik&apos;s moves are available in &lt;tt&gt;color&lt;/tt&gt; mode. Here is a screen shot after a few rotations.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/screen_shot2.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Rotations&lt;a name=&quot;f9469ecf-8b7e-41d3-8f47-ac23128f5f7d&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Rotation matrices defined by this &lt;tt&gt;Rk&lt;/tt&gt; function are the basic mathematical tool employed by &lt;tt&gt;Qube&lt;/tt&gt;.  The animation provides a detailed look at the action produced by the F key, counter-clockwise rotation of the Front face.  This is the y-axis, case 2 in &lt;tt&gt;Rk&lt;/tt&gt;.  The detail is provided by taking &lt;tt&gt;d = 0:3:90&lt;/tt&gt;, so there are 30 steps of 3 degrees.&lt;/p&gt;
&lt;pre class=&quot;language-matlab&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; R = Rk(axis,d)
    &lt;span class=&quot;comment&quot;&gt;%  Rk(axis,d), Rotation by d degrees about the x-, y-, or z-axis.&lt;/span&gt;
    c = cosd(d);
    s = sind(d);
    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; axis
        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; 1, R = [ 1  0  0
                      0  c  s
                      0 -s  c ];
        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; 2, R = [ c  0  s
                      0  1  0
                     -s  0  c ];
        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; 3, R = [ c  s  0
                     -s  c  0
                      0  0  1 ];
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
    fmat = findobj(&lt;span class=&quot;string&quot;&gt;&apos;tag&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;fmat&apos;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ~isempty(fmat)
        fmat.String = mat3(R);
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/dpm3.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;n-by-n-by-n&lt;a name=&quot;eb4d3e17-82e6-4b1e-b966-c75328d89269&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Qube&lt;/tt&gt; generalizes the classic 3-by-3-by-3 Rubik&apos;s Cube to n-by-n-by-n cubes for any n.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/n_by_n.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;2-by-2-by-2&lt;a name=&quot;715fe67d-21d9-46c4-a0b5-b2864db8776f&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The 2-by-2-by-2 cubes are good starting points for investigation of mathematical properties.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/2_by_2.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/2_by_2_color.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;b23519d3-2aa0-46a3-9160-90f256981b7e&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Qube&lt;/tt&gt; is available as a self-extracting MATLAB archive at this link, &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Qube_mzip.m&quot;&gt;Qube_mzip.m&lt;/a&gt;.&lt;/p&gt;
&lt;!-- 
    function grabCode_ce9c453c88254608ad0e691ca4711df7() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;ce9c453c88254608ad0e691ca4711df7 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; ce9c453c88254608ad0e691ca4711df7&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022b&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
ce9c453c88254608ad0e691ca4711df7 ##### SOURCE BEGIN #####
%% Color Cube Meets Rubik&apos;s Cube
% I have made a half dozen blog posts about
% &lt;https://blogs.mathworks.com/cleve/2022/09/05/rubiks-cube-superflips-and-gods-number/
% Rubik&apos;s Cube&gt; so far this year.  And, during the MATLAB Central Mini 
% Hack in October, I resurrected an old code about the 
% &lt;https://blogs.mathworks.com/cleve/2022/10/21/an-interactive-version-of-colorcubes/
% Color Cube&gt;.  Now, a combination of the two, Rubik/Color Qube,
% creates an elegant
% tool for investigating _Matrices in Action_.

%% Opening
% Here is the opening screen shot of Rubik/Color Qube, one of the most
% elaborate MATLAB programs that I have ever written.
%
% &lt;&lt;screen_shot1.png&gt;&gt;
%

%% Rubik and Color
% There are two modes, |rubik| and |color|.
% In |rubik| mode, the large cube is formed from 27 identical copies
% of a single small _cubelet_.  The six cubelet faces have six different
% colors.  Red, white and blue are visible initially.  Orange, yellow
% and green become visible as the faces are rotated.
%
% &lt;&lt;rubik.gif&gt;&gt;
%
% In |color| mode, the large cube is formed from 27 _cubelets_,
% each with a different solid color.  Three of the corner cubelets are the
% primary colors in the RGB color model REPLACE_WITH_DASH_DASH red, green and blue.  Three
% more corners are the complementary cyan, magenta and yellow.
% White and black complete the list of corners.
%
% &lt;&lt;color.gif&gt;&gt;
%

%% Color Qube
% All of the familiar Rubik&apos;s moves are available in |color| mode.
% Here is a screen shot after a few rotations.
%
% &lt;&lt;screen_shot2.png&gt;&gt;
%

%% Rotations
% Rotation matrices defined by this |Rk| function are the basic 
% mathematical tool employed by |Qube|.  The animation provides a detailed 
% look at the action produced by the F key, counter-clockwise rotation of
% the Front face.  This is the y-axis, case 2 in |Rk|.  The detail is 
% provided by taking |d = 0:3:90|, so there are 30 steps of 3 degrees.
% 
%   function R = Rk(axis,d)
%       %  Rk(axis,d), Rotation by d degrees about the x-, y-, or z-axis.
%       c = cosd(d); 
%       s = sind(d);
%       switch axis
%           case 1, R = [ 1  0  0  
%                         0  c  s
%                         0 -s  c ];
%           case 2, R = [ c  0  s  
%                         0  1  0
%                        -s  0  c ];
%           case 3, R = [ c  s  0  
%                        -s  c  0
%                         0  0  1 ];
%       end
%       fmat = findobj(&apos;tag&apos;,&apos;fmat&apos;);
%       if ~isempty(fmat)
%           fmat.String = mat3(R);
%       end
%   end
%
%
% &lt;&lt;dpm3.gif&gt;&gt;
%

%% n-by-n-by-n
% |Qube| generalizes the classic 3-by-3-by-3 Rubik&apos;s Cube
% to n-by-n-by-n cubes for any n.
%
% &lt;&lt;n_by_n.gif&gt;&gt;
%

%% 2-by-2-by-2
% The 2-by-2-by-2 cubes are good starting points for investigation
% of mathematical properties.
%
% &lt;&lt;2_by_2.png&gt;&gt;
%
% &lt;&lt;2_by_2_color.png&gt;&gt;
%

%% Software
% |Qube| is available as a self-extracting MATLAB archive at this link,
% &lt;https://blogs.mathworks.com/cleve/files/Qube_mzip.m Qube_mzip.m&gt;.
##### SOURCE END ##### ce9c453c88254608ad0e691ca4711df7
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Christian Reinsch, Roland Bulirsch, and the SVD</title>
   <link href="https://hpc.social/2022/christian-reinsch-roland-bulirsch-and-the-svd/"/>
   <updated>2022-10-23T23:41:27-06:00</updated>
   <id>https://hpc.social/2022/christian-reinsch-roland-bulirsch-and-the-svd</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;Christian Reinsch and Roland Bulirsch both passed away recently, Reinsch on October 8 and Bulirsch on September 21. Reinsch was 88 years old and Bulirsch was 89. Both of them were retired professors of numerical analysis at the Technical University of Munich. Both of them were friends of mine. But in almost all other ways, they were very different people.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0ac36cdd-70e0-4088-9e69-ed2d4f0ca1b2&quot;&gt;Wilkinson and Reinsch&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#639c5ab8-be39-47d9-ad03-85ef8bfdb2d4&quot;&gt;Wilkinson versus Reinsch&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0f4a7aaa-052c-4af3-91d2-afa776ca9db7&quot;&gt;Reinsch Personal Life&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#52c11caf-6fe1-4b50-9418-ced2ab57b498&quot;&gt;SVD&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b7a10e23-f5b3-4749-a571-a11b1c543e58&quot;&gt;Stoer and Bulirsch&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#7d54ff86-6fef-4065-9b83-20dc7c627151&quot;&gt;Bulirsch Personal Life&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4d6e1726-75b6-4959-89de-d60322a4a857&quot;&gt;Munich Visit&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Wilkinson and Reinsch&lt;a name=&quot;0ac36cdd-70e0-4088-9e69-ed2d4f0ca1b2&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The &lt;i&gt;Handbook for Automatic Computation, Volume II, Linear Algebra&lt;/i&gt;, is a research monograph published in 1971 by Springer-Verlag.  This &lt;i&gt;Handbook&lt;/i&gt; was edited by J. H. Wilkinson and Christian Reinsch and includes dozens of Algol procedures by 19 different authors for solving systems of simultaneous equations and computing matrix eigenvalues and singular values.&lt;/p&gt;
&lt;p&gt;Wilkinson and colleagues at the National Physical Laboratory in Teddington, England wrote around half of the Algol procedures in the &lt;i&gt;Handbook&lt;/i&gt;.  Reinsch authored several procedures himself and reviewed and tested most, if not all, of the entire &lt;i&gt;Handbook&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Translations into Fortran of many of the Algol codes produced the EISPACK subroutine library that led to the first MATLAB. I think it is fair to say that without the work of Jim Wilkinson and Christian Reinsch on the &lt;i&gt;Handbook&lt;/i&gt; there might never have been a MATLAB.&lt;/p&gt;
&lt;h4&gt;Wilkinson versus Reinsch&lt;a name=&quot;639c5ab8-be39-47d9-ad03-85ef8bfdb2d4&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I would have loved to listen in to discussions between Jim and Christian during the development of the &lt;i&gt;Handbook&lt;/i&gt;.  Here were two very talented, proud individuals working together at the detailed level required of scientific computer programing.  It must have been exciting.&lt;/p&gt;
&lt;p&gt;One small example: what subscripts do you use for the &lt;tt&gt;n-1&lt;/tt&gt; off-diagonal elements of the symmetric, tridiagonal matrix of order &lt;tt&gt;n&lt;/tt&gt; produced in one procedure and passed to another? Is it &lt;tt&gt;e(1:n-1)&lt;/tt&gt; or &lt;tt&gt;e(2:n)&lt;/tt&gt;?  (A &quot;modern&quot; &lt;tt&gt;e(0:n-2)&lt;/tt&gt; is not a possibility.)  The first statement of the Algol procedures for the QR algorithms is&lt;/p&gt;
&lt;pre&gt;  for i := 2 step 1 until n do e[i-1] := e[i];&lt;/pre&gt;&lt;p&gt;Was there some kind of disconnect between Teddington and Munich?&lt;/p&gt;
&lt;h4&gt;Reinsch Personal Life&lt;a name=&quot;0f4a7aaa-052c-4af3-91d2-afa776ca9db7&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Christian Reinsch was born in Chemnitz, Germany, in 1934. He spent most of his career at the Technical University Munich, where he was a close associate of &lt;a href=&quot;https://blogs.mathworks.com/cleve/2015/06/01/friedrich-bauer&quot;&gt;Fritz Bauer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Christian was an intensely private person.  He never married and lived alone. He visited Argonne Laboratory in the 1970s, when we were working on EISPACK, and he attended a few Gatlinburg/Householder meetings. Other than that, he rarely travelled far from Munich.&lt;/p&gt;
&lt;p&gt;This photo, taken by his colleague Christoph Zenger, is the only photo of Reinsch that I have ever seen.  And, as far as I know, it will be the first photo of him available on the Internet.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Reinsch_1.jpg&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Photo credit: Christoph Zenger&lt;/p&gt;
&lt;h4&gt;SVD&lt;a name=&quot;52c11caf-6fe1-4b50-9418-ced2ab57b498&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Gene Golub is known as &lt;a href=&quot;https://www.mathworks.com/company/newsletters/articles/professor-svd.html&quot;&gt;Professor SVD&lt;/a&gt; because he did more than anyone else to develop the algorithms for computing the decomposition and for popularizing its applications.  A 1965 paper by Golub and Velvel Kahan provides the first practical method for computing the SVD.  The Golub/Kahan approach is based on the eigenvalues of the &lt;i&gt;2n-by-2n&lt;/i&gt; block matrix &lt;tt&gt;[0 A; A&apos; 0]&lt;/tt&gt; .&lt;/p&gt;
&lt;p&gt;Peter Businger was a grad student at Stanford in the 1960&apos;s who worked with Golub on several projects.  A 1967 Stanford technical report by Golub and Businger includes an Algol procedure, written by Businger, for computing the SVD that is based on bidiagonalizing &lt;tt&gt;A&lt;/tt&gt; itself.  Both Golub/Kahan and Golub/Businger suggest Sturm sequences and Givens rotations for ultimately computing the singular values.&lt;/p&gt;
&lt;p&gt;At the same time, Christian Reinsch independently developed his own method for computing the SVD.  His review work on the &lt;i&gt;Handbook&lt;/i&gt; gave Reinsch access to the implicit tridiagonal QR techniques for matrix eigenvalues that Francis and Wilkinson were investigating.  So, Reinsch adapted implicit QR with Wilkinson shifts to the singular value situation.&lt;/p&gt;
&lt;p&gt;Both Gene Golub and Christian Reinsch offered SVD contributions for the &lt;i&gt;Handbook&lt;/i&gt; .  It turns out that, with exact arithmetic and the same shifts, Golub/Businger and Reinsch would produce the same results.  But Golub and Businger never used Wilkinson shifts and Golub did not join the QR club until later. Fortunately, Fritz Bauer, editor in chief of the &lt;i&gt;Handbook&lt;/i&gt;, brokered a joint authorship arrangement and the Golub-Reinsch algorithm for computing the SVD resulted.&lt;/p&gt;
&lt;p&gt;Walter Gander has investigated the history of SVD algorithms. The slides for the talk he presented at a workshop in Lanzhou University are available &lt;a href=&quot;https://people.inf.ethz.ch/gander/talks/Vortrag2022.pdf&quot;&gt;at this link&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Stoer and Bulirsch&lt;a name=&quot;b7a10e23-f5b3-4749-a571-a11b1c543e58&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;i&gt;Einfuhrung in die Numerische Mathematik&lt;/i&gt;, &lt;i&gt;Introduction to Numerical Analysis&lt;/i&gt;, is a classic textbook by Josef Stoer and Roland Bulirsch. The original German editions were published by Springer-Verlag in 1972 and 1976.  The English translations were published in 1980 and 1993. A complete PDF of the second English edition is available &lt;a href=&quot;https://zhilin.math.ncsu.edu/TEACHING/MA580/Stoer_Bulirsch.pdf&quot;&gt;at this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think of Stoer &amp;amp; Bulirsch as one of the best theoretical textbooks in numerical analysis.  It is comparable to Isaacson &amp;amp; Keller. There are theorems and proofs. There are algorithms, but no software.  There are a few, but not many, numerical examples. There are many excellent exercises.&lt;/p&gt;
&lt;h4&gt;Bulirsch Personal Life&lt;a name=&quot;7d54ff86-6fef-4065-9b83-20dc7c627151&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Roland Bulirsch was born in Liberec, in the former Czechoslovkia, in 1932.  After visiting U. C. San Diego in the 1960&apos;s, he spent most of his career at the Technical University Munich. In contrast to Reinsch, Bulirsch was a very gregarious, public person. He adored his grand children and they adored him.  The three-part &lt;a href=&quot;https://bulirsch.eu/anlagen/Bulirsch_80_Jahre_1.pdf&quot;&gt;photo collection&lt;/a&gt; assembled for his 80th birthday has hundreds of snapshots and portraits.&lt;/p&gt;
&lt;p&gt;Roland was an avid body-builder.  He had the broadest shoulders that I have ever seen -- and they were twice as broad as his waist. He had huge hands and huge biceps.  One of my favorite stories about Roland explains the photo on his desk that was signed,&lt;/p&gt;
&lt;pre&gt;  &quot;Thanks for everything -- Arnie&quot;&lt;/pre&gt;&lt;p&gt;It turns out that Roland and a body-builder from Austria named Arnold Swartzenegger trained together in Munich in the 1960&apos;s. Roland and some friends from the gym took up a collection to help the ambitious young Arnie emigrate to America.&lt;/p&gt;
&lt;p&gt;Here are a few photos from Roland&apos;s albums.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Roland_1.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Arnie_1.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Munich Visit&lt;a name=&quot;4d6e1726-75b6-4959-89de-d60322a4a857&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;My last visit to T. U. Munich was in 2015. I gave my stump speech, &lt;a href=&quot;https://www.youtube.com/watch?v=ekcLT8QgB60&quot;&gt;The Evolution of MATLAB&lt;/a&gt;, in a big, new lecture hall named after Friedrich Bauer.  Christian Reinsch was in the audience (skip to time stamp 13:59 &lt;a href=&quot;https://www.youtube.com/watch?v=ekcLT8QgB60f&quot;&gt;in the video&lt;/a&gt;). He was over 70 years old at the time and had just finished his daily 50-kilometer bicycle ride.&lt;/p&gt;
&lt;p&gt;After the talk, a few of us found our way to one of the famous Munich &lt;i&gt;Biergarten&lt;/i&gt;.  Christian came along but did not stay for dinner. He was not a beer drinker.&lt;/p&gt;
&lt;p&gt;Roland Bulirsch was able to join us for dinner, however, and we managed to polish off a few of those one-liter German beer steins before closing down the place.&lt;/p&gt;
&lt;!-- 
    function grabCode_f2dde2cc84e245d09b99f58b9781b0eb() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;f2dde2cc84e245d09b99f58b9781b0eb &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; f2dde2cc84e245d09b99f58b9781b0eb&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
f2dde2cc84e245d09b99f58b9781b0eb ##### SOURCE BEGIN #####
%% Christian Reinsch, Roland Bulirsch, and the SVD
% Christian Reinsch and Roland Bulirsch both passed away recently,
% Reinsch on October 8 and Bulirsch on September 21.
% Reinsch was 88 years old and Bulirsch was 89.
% Both of them were retired professors of numerical analysis at the
% Technical University of Munich.
% Both of them were friends of mine.
% But in almost all other ways, they were very different people.

%% Wilkinson and Reinsch
% The _Handbook for Automatic Computation, Volume II, Linear Algebra_, is a
% research monograph published in 1971 by Springer-Verlag.  This _Handbook_
% was edited by J. H. Wilkinson and Christian Reinsch and includes dozens
% of Algol procedures by 19 different authors for solving systems of
% simultaneous equations and computing matrix eigenvalues and singular
% values.

%%
% Wilkinson and colleagues at the National Physical Laboratory in
% Teddington, England wrote around half of the Algol procedures in the
% _Handbook_.  Reinsch authored several procedures himself
% and reviewed and tested most, if not all, of the entire _Handbook_.
%
% Translations into Fortran of many of the Algol codes produced the
% EISPACK subroutine library that led to the first MATLAB.
% I think it is fair to say that without the work of Jim Wilkinson and
% Christian Reinsch on the _Handbook_ there might never have been a MATLAB.

%% Wilkinson versus Reinsch
% I would have loved to listen in to discussions between Jim and Christian
% during the development of the _Handbook_.  Here were two very talented,
% proud individuals working together at the detailed level required of
% scientific computer programing.  It must have been exciting.
%
% One small example: what subscripts do you use for the |n-1| off-diagonal
% elements of the symmetric, tridiagonal matrix of order |n| produced in
% one procedure and passed to another?
% Is it |e(1:n-1)| or |e(2:n)|?  (A &quot;modern&quot; |e(0:n-2)| is
% not a possibility.)  The first statement of the Algol procedures
% for the QR algorithms is
% 
%    for i := 2 step 1 until n do e[i-1] := e[i];
%
% Was there some kind of disconnect between Teddington and Munich?

%% Reinsch Personal Life
% Christian Reinsch was born in Chemnitz, Germany, in 1934.
% He spent most of his career at the Technical University Munich, where
% he was a close associate of
% &lt;https://blogs.mathworks.com/cleve/2015/06/01/friedrich-bauer
% Fritz Bauer&gt;.
%
% Christian was an intensely private person.  He never married and lived
% alone. He visited Argonne Laboratory in the 1970s, when we were working 
% on EISPACK, and he attended a few Gatlinburg/Householder meetings.
% Other than that, he rarely travelled far from Munich.
%
% This photo, taken by his colleague Christoph Zenger,
% is the only photo of Reinsch that I have ever seen.  And, as far as I
% know, it will be the first photo of him available on the Internet.
%
% &lt;&lt;Reinsch_1.jpg&gt;&gt;
%
% Photo credit: Christoph Zenger
%

%% SVD
% Gene Golub is known as
% &lt;https://www.mathworks.com/company/newsletters/articles/professor-svd.html
% Professor SVD&gt; because he did more than anyone
% else to develop the algorithms for computing the decomposition and
% for popularizing its applications.  A 1965 paper by Golub and 
% Velvel Kahan provides the first practical method for computing the
% SVD.  The Golub/Kahan approach is based on the eigenvalues of the
% _2n-by-2n_ block matrix |[0 A; A&apos; 0]| .
%
% Peter Businger was a grad student at Stanford in the 1960&apos;s who
% worked with Golub on several projects.  A 1967 Stanford technical
% report by Golub and Businger includes an Algol procedure, written by
% Businger, for computing the SVD that is based on bidiagonalizing |A|
% itself.  Both Golub/Kahan and Golub/Businger suggest Sturm sequences
% and Givens rotations for ultimately computing the singular values.
%
% At the same time, Christian Reinsch independently developed his own
% method for computing the SVD.  His review work on the _Handbook_
% gave Reinsch access to the implicit tridiagonal QR techniques for
% matrix eigenvalues that Francis and Wilkinson were investigating.  So,
% Reinsch adapted implicit QR with Wilkinson shifts to the singular value
% situation.
% 
% Both Gene Golub and Christian Reinsch offered SVD 
% contributions for the _Handbook_ .  It turns out that, with exact
% arithmetic and the same shifts, Golub/Businger and Reinsch would
% produce the same results.  But Golub and Businger never used
% Wilkinson shifts and Golub did not join the QR club until later.
% Fortunately, Fritz Bauer, editor in chief of the _Handbook_, brokered
% a joint authorship arrangement and the Golub-Reinsch algorithm
% for computing the SVD resulted.
%
% Walter Gander has investigated the history of SVD algorithms.
% The slides for the talk he presented at a workshop in
% Lanzhou University are available 
% &lt;https://people.inf.ethz.ch/gander/talks/Vortrag2022.pdf
% at this link&gt;.

%%  Stoer and Bulirsch
% _Einfuhrung in die Numerische Mathematik_, _Introduction to Numerical
% Analysis_, is a classic textbook by Josef Stoer and Roland Bulirsch.
% The original German editions were published by Springer-Verlag in 1972
% and 1976.  The English translations were published in 1980 and 1993.
% A complete PDF of the second English edition is available 
% &lt;https://zhilin.math.ncsu.edu/TEACHING/MA580/Stoer_Bulirsch.pdf 
% at this link&gt;.
%
% I think of Stoer &amp; Bulirsch as one of the best theoretical
% textbooks in numerical analysis.  It is comparable to Isaacson &amp; Keller.
% There are theorems and proofs. There are algorithms, but no
% software.  There are a few, but not many, numerical examples.
% There are many excellent exercises.

%% Bulirsch Personal Life
% Roland Bulirsch was born in Liberec, in the former Czechoslovkia,
% in 1932.  After visiting U. C. San Diego in the 1960&apos;s,
% he spent most of his career at the Technical University Munich.
% In contrast to Reinsch, Bulirsch was a very gregarious, public person. 
% He adored his grand children and they adored him.  The three-part 
% &lt;https://bulirsch.eu/anlagen/Bulirsch_80_Jahre_1.pdf photo collection&gt;
% assembled for his 80th birthday has hundreds of snapshots and portraits.
%
% Roland was an avid body-builder.  He had the broadest shoulders that
% I have ever seen REPLACE_WITH_DASH_DASH and they were twice as broad as his waist.  
% He had huge hands and huge biceps.  One of my favorite stories about
% Roland explains the photo on his desk that was signed,
%
%    &quot;Thanks for everything REPLACE_WITH_DASH_DASH Arnie&quot;
%
% It turns out that Roland and a body-builder from Austria
% named Arnold Swartzenegger trained together in Munich in the 1960&apos;s.
% Roland and some friends from the gym took up a collection to help
% the ambitious young Arnie emigrate to America.

%%
% Here are a few photos from Roland&apos;s albums.
%
% &lt;&lt;Roland_1.png&gt;&gt;
%
% &lt;&lt;Arnie_1.png&gt;&gt;
%   

%% Munich Visit
% My last visit to T. U. Munich was in 2015.
% I gave my stump speech, 
% &lt;https://www.youtube.com/watch?v=ekcLT8QgB60 The Evolution of MATLAB&gt;,
% in a big, new lecture hall named after Friedrich Bauer.  Christian
% Reinsch was in the audience (skip to time stamp 13:59
% &lt;https://www.youtube.com/watch?v=ekcLT8QgB60f in the video&gt;).
% He was over 70 years old at the time and had just finished his daily
% 50-kilometer bicycle ride.
%
% After the talk, a few of us found our way to one of the famous Munich
% _Biergarten_.  Christian came along but did not stay for dinner.
% He was not a beer drinker.
%
% Roland Bulirsch was able to join us for dinner, however, and we managed
% to polish off a few of those one-liter German beer steins before 
% closing down the place.
##### SOURCE END ##### f2dde2cc84e245d09b99f58b9781b0eb
--&gt;
</content>
 </entry>
 
 <entry>
   <title>An Interactive Version of colorcubes</title>
   <link href="https://hpc.social/2022/an-interactive-version-of-colorcubes/"/>
   <updated>2022-10-21T20:58:02-06:00</updated>
   <id>https://hpc.social/2022/an-interactive-version-of-colorcubes</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;A 231-character static version of &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/5/entries/11543&quot;&gt;colorcubes&lt;/a&gt; in the current &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/5/entries&quot;&gt;MiniHack&lt;/a&gt; generated quite a bit of interest. So I am posting the full version, where you can change number of cubes and the view point, &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/colorcubes.m&quot;&gt;at this link&lt;/a&gt;.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2842fcd2-e0df-4ec2-bc84-82fad5a13e51&quot;&gt;Animation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#530668b0-ea28-4376-a885-fa4d1a9c2037&quot;&gt;Quiz&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Animation&lt;a name=&quot;2842fcd2-e0df-4ec2-bc84-82fad5a13e51&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/color_cubes.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Quiz&lt;a name=&quot;530668b0-ea28-4376-a885-fa4d1a9c2037&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;What is the color of the cubelet, or cubelets, in the center?&lt;/p&gt;
&lt;!-- 
    function grabCode_0796b1601674403b8501c6cc237cbce2() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;0796b1601674403b8501c6cc237cbce2 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 0796b1601674403b8501c6cc237cbce2&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
0796b1601674403b8501c6cc237cbce2 ##### SOURCE BEGIN #####
%% An Interactive Version of colorcubes
% A 231-character static version of 
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/5/entries/11543
% colorcubes&gt; in the current
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/5/entries
% MiniHack&gt; generated quite a bit of interest.
% So I am posting the full version, where you can change number of cubes
% and the view point,
% &lt;https://blogs.mathworks.com/cleve/files/colorcubes.m
% at this link&gt;.

%% Animation
%
% &lt;&lt;color_cubes.gif&gt;&gt;
%

%% Quiz
% What is the color of the cubelet, or cubelets, in the center?
##### SOURCE END ##### 0796b1601674403b8501c6cc237cbce2
--&gt;
</content>
 </entry>
 
 <entry>
   <title>modfun, A Short Program Produces Impressive Graphics</title>
   <link href="https://hpc.social/2022/modfun-a-short-program-produces-impressive-graphics/"/>
   <updated>2022-10-17T23:17:12-06:00</updated>
   <id>https://hpc.social/2022/modfun-a-short-program-produces-impressive-graphics</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;This nifty graphics gem started with a contribution by Paul Villain to the MATLAB 2022 Mini Hack, currently taking place on &lt;a href=&quot;https://www.mathworks.com/matlabcentral/contests.html&quot;&gt;MATLAB Central&lt;/a&gt;.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#56a0ec8a-8f48-4d49-951d-ede8fd35a5a3&quot;&gt;&lt;tt&gt;modfun&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a4a42958-572e-4506-9fd6-fd5704698093&quot;&gt;code&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#580b1824-d2ab-4ea9-883a-1aa69d0c8bb1&quot;&gt;Animation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#24d1d844-3760-4a2d-bd68-8671d9ff55b6&quot;&gt;Gallery&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b5cd86af-e8cd-4db6-9341-fa63d035cc3d&quot;&gt;Quiz&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#336d3ee4-5965-44e5-bc73-926eb724f3f4&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;&lt;tt&gt;modfun&lt;/tt&gt;&lt;a name=&quot;56a0ec8a-8f48-4d49-951d-ede8fd35a5a3&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Villain&apos;s contribution is &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/5/entries/9880&quot;&gt;102 mod 500&lt;/a&gt; .  My rewrite is &lt;a href=&quot;https://www.mathworks.com/matlabcentral/communitycontests/contests/5/entries/11093&quot;&gt;&lt;tt&gt;modfun&lt;/tt&gt;&lt;/a&gt;. Villain&apos;s &lt;tt&gt;102&lt;/tt&gt; and &lt;tt&gt;500&lt;/tt&gt; become the parameters &lt;tt&gt;m&lt;/tt&gt; and &lt;tt&gt;n&lt;/tt&gt;.&lt;/p&gt;
&lt;pre&gt;  modfun(m,n) connects n points, z(j), equally spaced
  around the complex unit circle, by n+1 straight lines.
  The j-th line connects z(j+1) to z(mod(j*m,n)+1).&lt;/pre&gt;&lt;h4&gt;code&lt;a name=&quot;a4a42958-572e-4506-9fd6-fd5704698093&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The basic code uses complex arithmetic and is only eight lines long. When the graphics is done with &lt;tt&gt;line&lt;/tt&gt; instead of &lt;tt&gt;plot&lt;/tt&gt;, it is not necessary to use &lt;tt&gt;hold on&lt;/tt&gt;.&lt;/p&gt;
&lt;pre&gt;  function modfun(m,n)
      init_fig
      z = exp(2i*pi*(0:n)/n);
      for j = 0:n
          zj = [z(j+1),z(mod(j*m,n)+1)];
          line(real(zj),imag(zj))
      end
  end&lt;/pre&gt;&lt;p&gt;The initialization makes &lt;tt&gt;line&lt;/tt&gt; possible.&lt;/p&gt;
&lt;pre&gt;  function init_fig
      axis([-1 1 -1 1])
      axis square
      axis off
  end&lt;/pre&gt;&lt;h4&gt;Animation&lt;a name=&quot;580b1824-d2ab-4ea9-883a-1aa69d0c8bb1&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This animation of &lt;tt&gt;modfun(105,200)&lt;/tt&gt; has one frame for every five lines.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/modfun105.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Gallery&lt;a name=&quot;24d1d844-3760-4a2d-bd68-8671d9ff55b6&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A sample.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/modfuns1.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/modfuns2.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Quiz&lt;a name=&quot;b5cd86af-e8cd-4db6-9341-fa63d035cc3d&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Match these calls to &lt;tt&gt;modfun&lt;/tt&gt; to the plots in the Gallery.&lt;/p&gt;
&lt;pre&gt;  modfun(88,179)
  modfun(89,220)
  modfun(99,200)
  modfun(101,200)
  modfun(111,200)
  modfun(113,188)
  modfun(126,188)
  modfun(126,200)&lt;/pre&gt;&lt;h4&gt;Software&lt;a name=&quot;336d3ee4-5965-44e5-bc73-926eb724f3f4&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;An interactive &lt;tt&gt;modfun&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.mathworks.com/cleve/files/modfun.m&quot;&gt;modfun.m&lt;/a&gt;.&lt;/p&gt;
&lt;!-- 
    function grabCode_ce8d1e93d27746db8cedca87febedacd() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;ce8d1e93d27746db8cedca87febedacd &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; ce8d1e93d27746db8cedca87febedacd&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
ce8d1e93d27746db8cedca87febedacd ##### SOURCE BEGIN #####
%% |modfun|, A Short Program Produces Impressive Graphics
% This nifty graphics gem started with a contribution by Paul Villain
% to the MATLAB 2022 Mini Hack, currently taking place on
% &lt;https://www.mathworks.com/matlabcentral/contests.html MATLAB Central&gt;.

%% |modfun|
% Villain&apos;s contribution is
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/5/entries/9880
% 102 mod 500&gt; .  My rewrite is
% &lt;https://www.mathworks.com/matlabcentral/communitycontests/contests/5/entries/11093
% |modfun|&gt;.
% Villain&apos;s |102| and |500| become the parameters |m| and |n|.
%
%    modfun(m,n) connects n points, z(j), equally spaced
%    around the complex unit circle, by n+1 straight lines.
%    The j-th line connects z(j+1) to z(mod(j*m,n)+1).
%
%% code
% The basic code uses complex arithmetic and is only eight lines long.
% When the graphics is done with |line| instead of |plot|, 
% it is not necessary to use |hold on|.
%
%    function modfun(m,n)
%        init_fig
%        z = exp(2i*pi*(0:n)/n);
%        for j = 0:n
%            zj = [z(j+1),z(mod(j*m,n)+1)];
%            line(real(zj),imag(zj))
%        end
%    end
% 
% The initialization makes |line| possible. 
%
%    function init_fig
%        axis([-1 1 -1 1])
%        axis square
%        axis off
%    end

%% Animation
% This animation of |modfun(105,200)| has one frame for every five lines.
%
% &lt;&lt;modfun105.gif&gt;&gt;
%

%% Gallery
% A sample.
%
% &lt;&lt;modfuns1.png&gt;&gt;
%
% &lt;&lt;modfuns2.png&gt;&gt;

%% Quiz
% Match these calls to |modfun| to the plots in the Gallery.
%
%    modfun(88,179)
%    modfun(89,220)
%    modfun(99,200)
%    modfun(101,200)
%    modfun(111,200)
%    modfun(113,188)
%    modfun(126,188)
%    modfun(126,200)

%% Software
% An interactive |modfun|.
% 
% &lt;https://blogs.mathworks.com/cleve/files/modfun.m modfun.m&gt;.
##### SOURCE END ##### ce8d1e93d27746db8cedca87febedacd
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Trio, A Wooden Puzzle from the Czech Republic</title>
   <link href="https://hpc.social/2022/trio-a-wooden-puzzle-from-the-czech-republic/"/>
   <updated>2022-09-25T17:00:41-06:00</updated>
   <id>https://hpc.social/2022/trio-a-wooden-puzzle-from-the-czech-republic</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;&quot;Clever Toys&quot; is a puzzle company in the Czech Republic. &lt;a href=&quot;http://www.clevertoys.cz/index_eng.php?page=eng&quot;&gt;Their Web site&lt;/a&gt; describes five different hand-made, wooden puzzles that are related mathematically to the Rubik&apos;s Cube.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#52520048-f34a-4981-840a-9007a0387f6b&quot;&gt;Puzzle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2dfd1830-7360-4517-9796-4632c066c884&quot;&gt;Model&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#99075c53-97fe-4397-a096-3baedc01f129&quot;&gt;Scramble&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a45994ba-ec9b-49ab-b897-d0f79de81dcd&quot;&gt;Animation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ff195cfa-9e7f-4693-9c9e-5109eebc19c4&quot;&gt;Unscramble&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#87972e4e-c85c-4982-8459-add195223548&quot;&gt;Solutions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2e58ba8b-073a-402d-8259-2f095e0e72d2&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0c756fc0-bf5b-4ccc-8d56-8eab84048dee&quot;&gt;Thanks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Puzzle&lt;a name=&quot;52520048-f34a-4981-840a-9007a0387f6b&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here is the photo of the puzzle &quot;Trio&quot;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/trio_puzzle.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Here is an English translation of their description.&lt;/p&gt;
&lt;p&gt;
&lt;p style=&quot;margin-left: 3ex;&quot;&gt;
The task of this 2D puzzle is to assemble all the ovals according
to their color into a basic assembly. By moving the balls in the
grooves and turning the center wheel, you can gradually get each
ball where you need it.
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;I am not sure that Clever Toys is still in business. They have not responded to my emails and I have not been able to purchase an actual Trio puzzle.  Of course, that is all the motivation I need to make a MATLAB model.&lt;/p&gt;
&lt;h4&gt;Model&lt;a name=&quot;2dfd1830-7360-4517-9796-4632c066c884&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here is the initial configuration.  There are three fixed outer, partial, discs and one inner, full, disc.  Each of the outer discs has a channel containing 10 marbles.  When the inner disc is positioned properly, the marbles in a channel can be rotated.  Rotating the inner disc itself moves some, but not all, of the marbles, thereby scrambling the colors.&lt;/p&gt;
&lt;p&gt;Like Rubik&apos;s Cube, the objective of the puzzle is to return to this initial &quot;solved&quot; state.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/trio_initial.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Mathematically, both Rubik&apos;s Cube and Trio are ultimately based upon rotation matrices.  Rubik&apos;s Cube is a 3-D puzzle whose state is specified by the position and orientation of 27 cubelets; this gives Rubik&apos;s Cube about &lt;tt&gt;4.3*10^19&lt;/tt&gt; possible positions. At each step, there are six faces and 12 possible rotations.&lt;/p&gt;
&lt;p&gt;Trio is a 2-D puzzle whose state is specified by the colors of the marbles.  There are 10 marbles of each of three colors; this implies that Trio has &lt;tt&gt;30!/(10!)^3 = 5.6*10^12&lt;/tt&gt; possible positions.  At each step, there are eight possible rotations, four discs, clockwise or counter-clockwise.&lt;/p&gt;
&lt;h4&gt;Scramble&lt;a name=&quot;99075c53-97fe-4397-a096-3baedc01f129&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A &quot;scramble&quot; is an integer vector with elements between -4 and +4 that specify moves or rotations.  Move 0 initializes the model.  Move &lt;tt&gt;d&lt;/tt&gt; with &lt;tt&gt;d&lt;/tt&gt; equal to 1, 2, or 3 rotates all the marbles in the &lt;tt&gt;d&lt;/tt&gt;-th channel counter-clockwise for one-tenth of a full rotation.  Move &lt;tt&gt;d&lt;/tt&gt; with &lt;tt&gt;d&lt;/tt&gt; equal to -1, -2, or -3 is the corresponding clockwise rotation. Moves -4 and 4 turn the central disc clockwise or counter-clockwise for one-third of a full rotation.  This rotates some, but not all, of the marbles and mixes the colors.&lt;/p&gt;
&lt;p&gt;Here is a scramble of length 29 that provides our example.&lt;/p&gt;
&lt;p&gt;D = [ 4 1 3 1 1 -2  3  1  4  4  2  4  4 -3 -3 -2 -3 -3  2  1  4 -1  3 -4  2]&lt;/p&gt;
&lt;p&gt;And here is the scrambled result.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/trio_scrambled.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Animation&lt;a name=&quot;a45994ba-ec9b-49ab-b897-d0f79de81dcd&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This animated gif shows the scrambling process one move at a time. The animation does not repeat automatically, so to start it over again, refresh your browser. If it still doesn&apos;t move, find another browser.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/trio_scramble.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Unscramble&lt;a name=&quot;ff195cfa-9e7f-4693-9c9e-5109eebc19c4&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Reverse the scramble by running it backwards, changing the sign of each move.  This will return the scrambled position to the initial position. I call this &quot;unscramble&quot;; it solves the scrambled position by a &quot;follow the breadcrumbs&quot; algorithm.&lt;/p&gt;
&lt;p&gt;Both animations take a long time to run -- about 80 seconds with my browser.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/trio_unscramble.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Solutions&lt;a name=&quot;87972e4e-c85c-4982-8459-add195223548&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I don&apos;t have any idea about how to actually solve a given position without using knowledge of how it was generated, and I don&apos;t have any idea about how to quantify the difficulty of finding a solution. This is in sharp contrast to Rubik&apos;s Cube where there are measures of difficulty and algorithms for finding optimum solutions.&lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;2e58ba8b-073a-402d-8259-2f095e0e72d2&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The program available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/trioo.m&quot;&gt;this link&lt;/a&gt; is interactive.  Click or alt-click in any one of the four discs to make a move in that disc.&lt;/p&gt;
&lt;h4&gt;Thanks&lt;a name=&quot;0c756fc0-bf5b-4ccc-8d56-8eab84048dee&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Thanks to Steve Eddins and Tom Lane for help with this post.&lt;/p&gt;
&lt;!-- 
    function grabCode_233d0111a3a04a7896bd6aac6263df7c() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;233d0111a3a04a7896bd6aac6263df7c &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 233d0111a3a04a7896bd6aac6263df7c&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022b&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
233d0111a3a04a7896bd6aac6263df7c ##### SOURCE BEGIN #####
%% Trio, A Wooden Puzzle from the Czech Republic
% &quot;Clever Toys&quot; is a puzzle company in the Czech Republic.
% &lt;http://www.clevertoys.cz/index_eng.php?page=eng
% Their Web site&gt; describes five different hand-made, wooden puzzles
% that are related mathematically to the Rubik&apos;s Cube.
%% Puzzle
% Here is the photo of the puzzle &quot;Trio&quot;.
%
% &lt;&lt;trio_puzzle.png&gt;&gt;
%

%%
% Here is an English translation of their description.
%
% &lt;html&gt;
% &lt;p style=&quot;margin-left:3ex;&quot;&gt;
% The task of this 2D puzzle is to assemble all the ovals according
% to their color into a basic assembly. By moving the balls in the 
% grooves and turning the center wheel, you can gradually get each 
% ball where you need it.
% &lt;/p&gt;

% &lt;/html&gt;
%
% I am not sure that Clever Toys is still in business.
% They have not responded to my emails and I have not been able
% to purchase an actual Trio puzzle.  Of course, that is all the
% motivation I need to make a MATLAB model.

%% Model
% Here is the initial configuration.  There are three fixed outer, partial,
% discs and one inner, full, disc.  Each of the outer discs has a channel
% containing 10 marbles.  When the inner disc is positioned properly,
% the marbles in a channel can be rotated.  Rotating the inner disc
% itself moves some, but not all, of the marbles, thereby scrambling
% the colors.
%
% Like Rubik&apos;s Cube, the objective of the puzzle is to return to this
% initial &quot;solved&quot; state.
%
% &lt;&lt;trio_initial.gif&gt;&gt;
%

%%
% Mathematically, both Rubik&apos;s Cube and Trio are ultimately based upon
% rotation matrices.  Rubik&apos;s Cube is a 3-D puzzle whose state is
% specified by the position and orientation of 27 cubelets;
% this gives Rubik&apos;s Cube about |4.3*10^19| possible positions.
% At each step, there are six faces and 12 possible rotations.
%
% Trio is a 2-D puzzle whose state is specified by the colors of the
% marbles.  There are 10 marbles of each of three colors;
% this implies that Trio has |30!/(10!)^3 = 5.6*10^12| possible
% positions.  At each step, there are eight possible rotations,
% four discs, clockwise or counter-clockwise.

%% Scramble
% A &quot;scramble&quot; is an integer vector with elements between -4 and +4 that
% specify moves or rotations.  Move 0 initializes the model.  Move |d| with
% |d| equal to 1, 2, or 3 rotates all the marbles in the |d|-th channel
% counter-clockwise for one-tenth of a full rotation.  Move |d| with
% |d| equal to -1, -2, or -3 is the corresponding clockwise rotation.
% Moves -4 and 4 turn the central disc clockwise or counter-clockwise
% for one-third of a full rotation.  This rotates some, but not all, of 
% the marbles and mixes the colors.

%%
% Here is a scramble of length 29 that provides our example.
%
% D = [ 4 1 3 1 1 -2  3  1  4  4  2  4  4 -3 -3 -2 -3 -3  2  1  4 -1  3 -4  2]
%
% And here is the scrambled result.
%
% &lt;&lt;trio_scrambled.gif&gt;&gt;

%% Animation
% This animated gif shows the scrambling process one move at a time.
% The animation does not repeat automatically, so to start it over again, 
% refresh your browser.
% If it still doesn&apos;t move, find another browser.
%
% &lt;&lt;trio_scramble.gif&gt;&gt;
%

%% Unscramble
% Reverse the scramble by running it backwards, changing the sign of
% each move.  This will return the scrambled position to the initial
% position. I call this &quot;unscramble&quot;; it solves the scrambled position
% by a &quot;follow the breadcrumbs&quot; algorithm.
%
% Both animations take a long time to run REPLACE_WITH_DASH_DASH about 80 seconds
% with my browser.
%
% &lt;&lt;trio_unscramble.gif&gt;&gt;
%

%% Solutions
% I don&apos;t have any idea about how to actually solve a given position
% without using knowledge of how it was generated, and I don&apos;t have 
% any idea about how to quantify the difficulty of finding a solution.
% This is in sharp contrast to Rubik&apos;s Cube where there are measures
% of difficulty and algorithms for finding optimum solutions.

%% Software
% The program available at
% &lt;https://blogs.mathworks.com/cleve/files/trioo.m  this link&gt;
% is interactive.  Click or alt-click in any one of the four discs
% to make a move in that disc.

%% Thanks
% Thanks to Steve Eddins and Tom Lane for help with this post.
##### SOURCE END ##### 233d0111a3a04a7896bd6aac6263df7c
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Rubik’s Cube Superflips and God’s Number</title>
   <link href="https://hpc.social/2022/rubik-s-cube-superflips-and-god-s-number/"/>
   <updated>2022-09-06T02:00:24-06:00</updated>
   <id>https://hpc.social/2022/rubik-s-cube-superflips-and-god-s-number</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;How hard is it to solve a Rubik&apos;s Cube?&lt;/li&gt;&lt;li&gt;When can you say that your Rubik&apos;s Cube is completely scrambled?&lt;/li&gt;&lt;li&gt;Why might the answer depend on where you went to school?&lt;/li&gt;&lt;li&gt;What interesting mathematical questions are involved?&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3c346c42-143c-4ddf-aa1d-d75e75c29b38&quot;&gt;Metrics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#a32fd551-4332-475a-a222-185f9d2ae2d0&quot;&gt;God&apos;s number&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#eece078d-6a7b-423f-9218-5476dc32fcc1&quot;&gt;Superflip&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#e237f0a5-b64d-4df1-a432-d475f0d68ae5&quot;&gt;Q20&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#707dbec1-844c-46fe-9ea1-722ae2c4685c&quot;&gt;Q26&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#88069ce9-4903-4668-a121-0ba2741eabaa&quot;&gt;Compare&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Metrics&lt;a name=&quot;3c346c42-143c-4ddf-aa1d-d75e75c29b38&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The difficulty of solving any configuration of a Rubik&apos;s Cube is the smallest number of moves required to return to the intial configuration where each face is showing a single color.&lt;/p&gt;
&lt;p&gt;But what, exactly, is a move?  The so-called &lt;i&gt;quarter-turn metric&lt;/i&gt; says a move is turning any face by 90 degrees.  The &lt;i&gt;half-turn metric&lt;/i&gt; says turning any face by either 90 or 180 degrees is a single move.  For example, using Singmaster notation and the quarter-turn metric, the sequence &quot;L L&quot;, which turns the left face twice in the same direction, is two moves.  But in the half-move metric, the sequence becomes &quot;L2&quot; and counts as a single move.&lt;/p&gt;
&lt;p&gt;Tomas Rokicki, who describes himself as &lt;a href=&quot;https://tomas.rokicki.com&quot;&gt;a programmer from Palo Alto&lt;/a&gt;, provides some history at &lt;a href=&quot;https://cube20.org/qtm&quot;&gt;cube20.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;p style=&quot;margin-left: 3ex;&quot;&gt;
In the early days of cube mathematics, two camps emerged on how to
 measure the difficulty of a position. West coast and Stanford
 mathematicians, free thinkers all, tended to prefer the half-turn
 metric, where any twist of any face, whether 90 degrees, 180 degrees,
 or 270 degrees counted as a single move. The east coast crowd,
 including MIT, tended to prefer the rigor of the quarter-turn metric,
 where a half-turn counted as two moves, since of course it could be
 accomplished by two consecutive quarter turns.
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;When I began development of a Rubik&apos;s Cube simulator, &lt;tt&gt;Qube&lt;/tt&gt;, I was unaware of this history and, even though I am a devout West-coaster, I just counted quarter-turns.  Now a toggle switch in &lt;tt&gt;Qube&lt;/tt&gt; allows use of either metric.&lt;/p&gt;
&lt;h4&gt;God&apos;s number&lt;a name=&quot;a32fd551-4332-475a-a222-185f9d2ae2d0&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Let &lt;tt&gt;Q&lt;/tt&gt; denote a cube position,&lt;/p&gt;
&lt;p&gt;| &lt;tt&gt;Q&lt;/tt&gt; | = minimum number of moves to solve &lt;tt&gt;Q&lt;/tt&gt;,&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&lt;b&gt;Q&lt;/b&gt;&lt;/tt&gt; = the set of all possible &lt;tt&gt;Q&lt;/tt&gt;&apos;s, and&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;G(&lt;b&gt;Q&lt;/b&gt;)&lt;/tt&gt; = maximum over &lt;tt&gt;Q&lt;/tt&gt; in &lt;b&gt;Q&lt;/b&gt; of | &lt;tt&gt;Q&lt;/tt&gt; |.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;G(&lt;b&gt;Q&lt;/b&gt;)&lt;/tt&gt; is known as &quot;God&apos;s number&quot;. &lt;b&gt;Q&lt;/b&gt; contains over &lt;tt&gt;4.3*10^19&lt;/tt&gt; positions, so computing &lt;tt&gt;G(&lt;b&gt;Q&lt;/b&gt;)&lt;/tt&gt; is a formidable optimization problem.  The definition of God&apos;s number does not require the optimal solution itself, only the number of moves.&lt;/p&gt;
&lt;h4&gt;Superflip&lt;a name=&quot;eece078d-6a7b-423f-9218-5476dc32fcc1&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The &lt;i&gt;superflip&lt;/i&gt; of Rubik&apos;s cube is a configuration where the 8 corners, the 6 face centers, and the cube center show the initial colors, but the 12 edge cubelets have the colors reversed. In 1995, Michael Reid proved that solution of the superflip requires 20 half-turn metric moves. In 2010, Tomas Rokicki and colleagues, using hundreds of computers at Google, carried out a massive computation to prove that no other configuration took more than 20 moves, &lt;a href=&quot;https://cube20.org/qtm&quot;&gt;cube20.org&lt;/a&gt;. This established that God&apos;s number for the half-turn metric is&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;G(&lt;b&gt;Q&lt;/b&gt;)&lt;/tt&gt; = 20&lt;/p&gt;
&lt;h4&gt;Q20&lt;a name=&quot;e237f0a5-b64d-4df1-a432-d475f0d68ae5&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I use &lt;tt&gt;Q20&lt;/tt&gt; to denote the superflip. Our first animation generates the superflip with 20 moves. A few rotations at the beginning and at the end are shown in more detail so that we can see the rotation matrices involved. A higher resolution video clip is available at this link: &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Q20.mp4&quot;&gt;Q20.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Q20.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The second animation shows a solution of &lt;tt&gt;Q20&lt;/tt&gt; in 20 moves obtained by reversing and complementing the generating moves. Reid&apos;s proof shows that any other solution requires at least 20 moves. The high resolution clip is: &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Q20solve.mp4&quot;&gt;Q20solve.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Q20solve.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;There are several other configurations that require 20 moves. Any configuration with &lt;tt&gt;G(Q) = 20&lt;/tt&gt; can be regarded as completely shuffled in the half-turn metric.&lt;/p&gt;
&lt;h4&gt;Q26&lt;a name=&quot;707dbec1-844c-46fe-9ea1-722ae2c4685c&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;For the quarter-turn metric, if you combine superflip and a configuration known as &lt;i&gt;fourspot&lt;/i&gt; you have &lt;tt&gt;Q26&lt;/tt&gt; . Only 8 corners and two face enters are correct. The edges, four face centers, and the cube center are all reversed. When 180 degree turns are counted as two 90 degree turns, this configuration is generated by 26 moves and solved by reversing and complementing the 26 moves. The high resolution clip is: &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Q26.mp4&quot;&gt;Q26.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Q26.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;In 2014, a massive computation at the Ohio Supercomputer Center by Rokicki and Morley Davidson proved that only &lt;tt&gt;Q26&lt;/tt&gt; (and its two rotations) required 26 quarter-turn moves  All other configurations need fewer. &lt;a href=&quot;https://cube20.org/qtm&quot;&gt;cube20.org&lt;/a&gt;. So, this established that God&apos;s number for the half-turn metric is&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;G(&lt;b&gt;Q&lt;/b&gt;)&lt;/tt&gt; = 26&lt;/p&gt;
&lt;p&gt;The high resolution clip is: &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Q26solve.mp4&quot;&gt;Q26solve.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Q26solve.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Compare&lt;a name=&quot;88069ce9-4903-4668-a121-0ba2741eabaa&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Let&apos;s compare &lt;tt&gt;Q20&lt;/tt&gt; and &lt;tt&gt;Q26&lt;/tt&gt; by alternating between the two.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/flipper03.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The type 3 corner pieces are the same in &lt;tt&gt;Q20&lt;/tt&gt; and &lt;tt&gt;Q26&lt;/tt&gt;, and are in the correct initial position.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/flipper33.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;The type 2 edge pieces are also the same in &lt;tt&gt;Q20&lt;/tt&gt; and &lt;tt&gt;Q26&lt;/tt&gt;, but are reversed from their initial position.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/flipper22.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;All the action is with cubelets of type 0 and type 1. In a real, physical Rubik&apos;s Cube, this is one solid piece that holds the Cube together.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/flipper01.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;!-- 
    function grabCode_552a77033bf74984addf11ae10f9bb2e() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;552a77033bf74984addf11ae10f9bb2e &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 552a77033bf74984addf11ae10f9bb2e&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022b&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
552a77033bf74984addf11ae10f9bb2e ##### SOURCE BEGIN #####
%% Rubik&apos;s Cube Superflips and God&apos;s Number
% * How hard is it to solve a Rubik&apos;s Cube?
% * When can you say that your Rubik&apos;s Cube is completely scrambled?
% * Why might the answer depend on where you went to school?
% * What interesting mathematical questions are involved?
 
%% Metrics
% The difficulty of solving any configuration of a Rubik&apos;s Cube
% is the smallest number of moves required to return to the intial
% configuration where each face is showing a single color.
%
% But what, exactly, is a move?  The so-called _quarter-turn metric_ says
% a move is turning any face by 90 degrees.  The _half-turn metric_ says
% turning any face by either 90 or 180 degrees is a single move.  For
% example, using Singmaster notation and the quarter-turn metric, the 
% sequence &quot;L L&quot;, which turns the left face twice in the same direction,
% is two moves.  But in the half-move metric, the sequence becomes &quot;L2&quot;
% and counts as a single move.
%
% Tomas Rokicki, who describes himself as 
% &lt;https://tomas.rokicki.com a programmer from Palo Alto&gt;, provides
% some history at &lt;https://cube20.org/qtm cube20.org&gt;.
%
% &lt;html&gt;
% &lt;p style=&quot;margin-left:3ex;&quot;&gt;
% In the early days of cube mathematics, two camps emerged on how to 
%  measure the difficulty of a position. West coast and Stanford 
%  mathematicians, free thinkers all, tended to prefer the half-turn
%  metric, where any twist of any face, whether 90 degrees, 180 degrees, 
%  or 270 degrees counted as a single move. The east coast crowd, 
%  including MIT, tended to prefer the rigor of the quarter-turn metric, 
%  where a half-turn counted as two moves, since of course it could be 
%  accomplished by two consecutive quarter turns.
% &lt;/p&gt;

% &lt;/html&gt;
%
% When I began development of a Rubik&apos;s Cube simulator, |Qube|,
% I was unaware of this history and, even though I am a devout
% West-coaster, I just counted quarter-turns.  Now a toggle switch in 
% |Qube| allows use of either metric.

%% God&apos;s number
% Let |Q| denote a cube position, 
%
% | |Q| | = minimum number of moves to solve |Q|,
% 
% |*Q*| = the set of all possible |Q|&apos;s, and
%
% |G(*Q*)| = maximum over |Q| in *Q* of | |Q| |.
%
% |G(*Q*)| is known as &quot;God&apos;s number&quot;.
% *Q* contains over |4.3*10^19| positions, so computing |G(*Q*)| is a
% formidable optimization problem.  The definition of God&apos;s number does
% not require the optimal solution itself, only the number of moves.

%% Superflip
% The _superflip_ of Rubik&apos;s cube is a configuration where the 8 corners,
% the 6 face centers, and the cube center show   
% the initial colors, but the 12 edge cubelets have the colors reversed.
% In 1995, Michael Reid proved that solution of the superflip requires
% 20 half-turn metric moves. In 2010, Tomas Rokicki and colleagues,
% using hundreds of computers at Google, carried out a massive computation
% to prove that no other configuration took more than 20 moves,
% &lt;https://cube20.org/qtm cube20.org&gt;.
% This established that God&apos;s number for the half-turn metric is
%
% |G(*Q*)| = 20
%

%% Q20
% I use |Q20| to denote the superflip. 
% Our first animation generates the superflip with 20 moves.
% A few rotations at the beginning and at the end are shown in more
% detail so that we can see the rotation matrices involved.
% A higher resolution video clip is available at this link:
% &lt;https://blogs.mathworks.com/cleve/files/Q20.mp4 Q20.mp4&gt;
%
% &lt;&lt;Q20.gif&gt;&gt;
%

%%
% The second animation shows a solution of |Q20| in 20 moves obtained
% by reversing and complementing the generating moves.
% Reid&apos;s proof shows that any other solution requires at least 20 moves.
% The high resolution clip is:
% &lt;https://blogs.mathworks.com/cleve/files/Q20solve.mp4 Q20solve.mp4&gt;
%
% &lt;&lt;Q20solve.gif&gt;&gt;
%   
% There are several other configurations that require 20 moves.
% Any configuration with |G(Q) = 20| can be regarded as completely
% shuffled in the half-turn metric.

%% Q26
% For the quarter-turn metric,
% if you combine superflip and a configuration known as _fourspot_
% you have |Q26| .
% Only 8 corners and two face enters are correct.
% The edges, four face centers, and the cube center are all reversed.
% When 180 degree turns are counted as two 90 degree turns,
% this configuration is generated by 26 moves and solved by reversing
% and complementing the 26 moves.
% The high resolution clip is:
% &lt;https://blogs.mathworks.com/cleve/files/Q26.mp4 Q26.mp4&gt;
%
% &lt;&lt;Q26.gif&gt;&gt;
%
% In 2014, a massive computation at the Ohio Supercomputer Center
% by Rokicki and Morley Davidson proved that only |Q26| (and its two
% rotations) required 26 quarter-turn moves  All other configurations
% need fewer.
% &lt;https://cube20.org/qtm cube20.org&gt;.
% So, this established that God&apos;s number for the half-turn metric is
%
% |G(*Q*)| = 26
%
% The high resolution clip is:
% &lt;https://blogs.mathworks.com/cleve/files/Q26solve.mp4 Q26solve.mp4&gt;
%
% &lt;&lt;Q26solve.gif&gt;&gt;
%

%% Compare
% Let&apos;s compare |Q20| and |Q26| by alternating between the two.
%
% &lt;&lt;flipper03.gif&gt;&gt;
%

%%
% The type 3 corner pieces are the same in |Q20| and |Q26|,
% and are in the correct initial position.
%
% &lt;&lt;flipper33.gif&gt;&gt;
%

%%
% The type 2 edge pieces are also the same in |Q20| and |Q26|,
% but are reversed from their initial position.
%
% &lt;&lt;flipper22.gif&gt;&gt;
%

%%
% All the action is with cubelets of type 0 and type 1.
% In a real, physical Rubik&apos;s Cube, this is one solid piece that holds
% the Cube together.
%
% &lt;&lt;flipper01.gif&gt;&gt;
%
%
##### SOURCE END ##### 552a77033bf74984addf11ae10f9bb2e
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Polygons, Polyshapes and Puzzles</title>
   <link href="https://hpc.social/2022/polygons-polyshapes-and-puzzles/"/>
   <updated>2022-08-21T15:42:36-06:00</updated>
   <id>https://hpc.social/2022/polygons-polyshapes-and-puzzles</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;Until recently, I knew nothing about the &lt;tt&gt;polyshape&lt;/tt&gt; object in MATLAB. Now I can use polyshape to simulate an extraordinary puzzle.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b44ef23f-8ee4-4710-970e-758273aef673&quot;&gt;Puzzles&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#af839423-9061-445a-abcc-33e483845857&quot;&gt;Not a T&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#fbfbf351-698a-410b-9cba-7272f394fe65&quot;&gt;A slice of cheese&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#55c27f57-400d-4f4c-8849-298407ab936f&quot;&gt;My first solution&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#87aa86ac-b133-4c46-abed-79b9b9669023&quot;&gt;Is this solution correct?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#07004175-0ad2-4431-9504-3d9d8c33a86c&quot;&gt;Spoiler alert !&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#bbdd0ff0-9265-4089-9325-4929faa2d325&quot;&gt;My second solution&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#30e29a25-e0f0-449b-b09c-4ff8ee26a6b8&quot;&gt;A round peg in a square hole&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#19fcdc7d-f204-47d7-9e55-221680530003&quot;&gt;Theta&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#4933cc60-9813-49dd-8f8c-d822d7b9b2d2&quot;&gt;Polyshapes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1dcd1993-0fec-49da-87a9-4b75d997227f&quot;&gt;The solution&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ed22add4-a328-41ed-9696-c5cebc945091&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Puzzles&lt;a name=&quot;b44ef23f-8ee4-4710-970e-758273aef673&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The Web site &lt;a href=&quot;https://www.artofplay.com&quot;&gt;Art of Play&lt;/a&gt;, from some folks in San Diego, has well over two-hundred puzzles.  Recently, one of their most popular puzzles, &lt;a href=&quot;https://www.artofplay.com/collections/packing-puzzles/products/mighty-cheese-travel-puzzle&quot;&gt;Mighty Cheese&lt;/a&gt;, caught my attention. The idea is to move the slices of plastic cheese around within the frame in order to create a hole large enough to hold the little plastic mouse.  However, when I last checked, Mighty Cheese was sold out. Not wanting to be dissuaded by the unavailability of the puzzle itself, and not knowing the solution, I set out to build a simulator.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/July_22_2022_small.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Not a T&lt;a name=&quot;af839423-9061-445a-abcc-33e483845857&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I expected Mighty Cheese to be something like the &lt;a href=&quot;https://www.mathworks.com/company/newsletters/articles/introducing-cleves-laboratory.html&quot;&gt;T-puzzle&lt;/a&gt; that I enjoyed several years ago. But, unlike the T, the geometry of cheese cannot be modelled by simple rectangular patches.  I needed help. Steve Eddins answered my plea and told me about MATLAB&apos;s &quot;polyshapes&quot;. That led to this blog post.&lt;/p&gt;
&lt;h4&gt;A slice of cheese&lt;a name=&quot;fbfbf351-698a-410b-9cba-7272f394fe65&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A &quot;selfie&quot; of a cheese slice provides an example of a &lt;tt&gt;polyshape&lt;/tt&gt;. It has curved boundaries and a hole.  The MATLAB documentation for &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/polyshape.html&quot;&gt;&lt;tt&gt;polyshape&lt;/tt&gt;&lt;/a&gt; says this a &lt;i&gt;polygon&lt;/i&gt;. In my mathematical world, &lt;i&gt;polygons&lt;/i&gt; can&apos;t have curved boundaries or holes.  But, I guess that I am being pedantic.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/polyshape.png&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;I began with this photo of the Mighty Cheese puzzle.&lt;/p&gt;
&lt;pre class=&quot;language-matlab&quot;&gt;puzzle = imread(&lt;span class=&quot;string&quot;&gt;&apos;Cheese_puzzle.png&apos;&lt;/span&gt;);
&lt;/pre&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/puzzle.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Two lines of code and the &lt;tt&gt;L*a*b&lt;/tt&gt; color model find the regions in &lt;tt&gt;photo&lt;/tt&gt; that look like cheese.&lt;/p&gt;
&lt;pre class=&quot;language-matlab&quot;&gt;[L,a,b] = imsplit(rgb2lab(puzzle));
mask = a &amp;gt; 30;
spy(mask)
&lt;/pre&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/mask.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Steve provided a function that turns &lt;tt&gt;mask&lt;/tt&gt; into a &lt;tt&gt;polyshape&lt;/tt&gt; object.&lt;/p&gt;
&lt;pre class=&quot;language-matlab&quot;&gt;slice = my_polyshapes(mask);
&lt;/pre&gt;&lt;p&gt;An overloaded &lt;tt&gt;plot&lt;/tt&gt; function then generates the selfie from &lt;tt&gt;slice&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-matlab&quot;&gt;sliceplot = plot(slice, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;&apos;facecolor&apos;&lt;/span&gt;,cheese_yellow, &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;&apos;facealpha&apos;&lt;/span&gt;,1);
&lt;/pre&gt;&lt;h4&gt;My first solution&lt;a name=&quot;55c27f57-400d-4f4c-8849-298407ab936f&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I didn&apos;t use AI or simulated annealing or any other modern technique to search for a solution.  I just poked around while I was learning about polyshapes and programming my simulator.  It was just me and a &lt;i&gt;real&lt;/i&gt; mouse.  No, not a &lt;i&gt;real real&lt;/i&gt; mouse.  You know the kind I mean.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Cheese.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Is this solution correct?&lt;a name=&quot;87aa86ac-b133-4c46-abed-79b9b9669023&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I almost made a blog post claiming this is the solution the designers of Mighty Cheese must have had in mind. But I wasn&apos;t sure. My solution made use of the white  space around the outside edges of the slices.  How wide are those gaps?  I didn&apos;t yet have a real physical puzzle to measure tolerances.&lt;/p&gt;
&lt;h4&gt;Spoiler alert !&lt;a name=&quot;07004175-0ad2-4431-9504-3d9d8c33a86c&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I am sure glad now that I didn&apos;t post that &quot;solution&quot;. It wasn&apos;t correct, and it wasn&apos;t pretty.&lt;/p&gt;
&lt;p&gt;This puzzle is not as easy as it looks. In fact, the solution is very hard to find and is very elegant. If you want to try to solve it yourself, stop reading this post, bookmark this spot, and come back later.&lt;/p&gt;
&lt;h4&gt;My second solution&lt;a name=&quot;bbdd0ff0-9265-4089-9325-4929faa2d325&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;As I should have known, this puzzle is no secret to the Internet It is available for about $10 at many places and YouTube offers several solutions.  But I&apos;m glad that I didn&apos;t see any of them until a few weeks ago.&lt;/p&gt;
&lt;p&gt;When I made more careful measurements on &quot;Cheese_puzzle.png&quot; and had a more accurate model to simulate, it became clear that my precious first solution just wouldn&apos;t fit.&lt;/p&gt;
&lt;h4&gt;A round peg in a square hole&lt;a name=&quot;30e29a25-e0f0-449b-b09c-4ff8ee26a6b8&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Nobody said that the mouse had to fit neatly into a circular hole with just the right diameter.  Once you realize that you might be looking for a noncircular hole, you are on the way to finding the solution.&lt;/p&gt;
&lt;h4&gt;Theta&lt;a name=&quot;19fcdc7d-f204-47d7-9e55-221680530003&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The key to the puzzle&apos;s geometry is the purple axes in this picture. They cross at right angles at a point in the center hole at the tip of the protruding slice.  The angle between the purple axes and the orange vertical/horizontal axes can be measured accurately on the photo and everything else follows. The angle is&lt;/p&gt;
&lt;pre class=&quot;language-matlab&quot;&gt;theta = atand((y(b)-y(a))/(b-a)) = 11.62 degrees
&lt;/pre&gt;&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Mighty_Cheese_theta.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Polyshapes&lt;a name=&quot;4933cc60-9813-49dd-8f8c-d822d7b9b2d2&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The mask that I was using for my first solution got me started with polyshapes, but I eventually abandoned it.  It is easy to make a polyshape directly from a list of points around the boundary, like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Mighty_Cheese_S3_dots.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;The solution&lt;a name=&quot;1dcd1993-0fec-49da-87a9-4b75d997227f&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The three holes in the original cheese slices do not appear to serve any purpose.  So, I have moved them and given them an important role in this simulation. Combine the two triangular slices in the upper left into a single slice. Rotate each of the resulting four slices by an angle of 180-theta = 168.38 degrees about its center.  The four right-angled corners from the central hole go to the corners of the puzzle while the outer corners form a central square just large enough to hold the mouse.&lt;/p&gt;
&lt;p&gt;That is really elegant.&lt;/p&gt;
&lt;p&gt;Where did this puzzle originate?  What mathematics was involved in its design?&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/MCsolution.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;ed22add4-a328-41ed-9696-c5cebc945091&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;My code is here: &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Mighty_Polyshape.m&quot;&gt;Mighty_Polyshape.m&lt;/a&gt;.&lt;/p&gt;
&lt;!-- 
    function grabCode_2f68df87f4004e7ea2832e4310206744() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;2f68df87f4004e7ea2832e4310206744 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 2f68df87f4004e7ea2832e4310206744&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
2f68df87f4004e7ea2832e4310206744 ##### SOURCE BEGIN #####
%% Polygons, Polyshapes and Puzzles
% Until recently, I knew nothing about the |polyshape| object in MATLAB.
% Now I can use polyshape to simulate an extraordinary puzzle.

%% Puzzles
% The Web site &lt;https://www.artofplay.com Art of Play&gt;, from some folks in
% San Diego, has well over two-hundred puzzles.  Recently, one of 
% their most popular puzzles,
% &lt;https://www.artofplay.com/collections/packing-puzzles/products/mighty-cheese-travel-puzzle
% Mighty Cheese&gt;, caught my attention.
% The idea is to move the slices of plastic cheese around within the
% frame in order to create a hole large enough to hold the little
% plastic mouse.  However, when I last checked, Mighty Cheese was
% sold out.
% Not wanting to be dissuaded by the unavailability of the puzzle itself,
% and not knowing the solution, I set out to build a simulator.
%
% &lt;&lt;July_22_2022_small.png&gt;&gt;
%

%% Not a T
% I expected Mighty Cheese to be something like the
% &lt;https://www.mathworks.com/company/newsletters/articles/introducing-cleves-laboratory.html
% T-puzzle&gt; that I enjoyed several years ago.
% But, unlike the T, the geometry of cheese cannot be modelled by simple
% rectangular patches.  I needed help. Steve Eddins answered my plea and 
% told me about MATLAB&apos;s &quot;polyshapes&quot;. That led to this blog post.

%% A slice of cheese
% A &quot;selfie&quot; of a cheese slice provides an example of a |polyshape|.
% It has curved boundaries and a hole.  The MATLAB documentation for
% &lt;https://www.mathworks.com/help/matlab/ref/polyshape.html
% |polyshape|&gt; says this a _polygon_.
% In my mathematical world, _polygons_ can&apos;t have curved boundaries
% or holes.  But, I guess that I am being pedantic.
%
% &lt;&lt;polyshape.png&gt;&gt;

%%
% I began with this photo of the Mighty Cheese puzzle.
%
%   puzzle = imread(&apos;Cheese_puzzle.png&apos;);
%
% &lt;&lt;puzzle.gif&gt;&gt;
%
% Two lines of code and the |L*a*b| color model find the regions
% in |photo| that look like cheese.
%
%   [L,a,b] = imsplit(rgb2lab(puzzle));
%   mask = a &gt; 30;
%   spy(mask)
%
% &lt;&lt;mask.gif&gt;&gt;
%
% Steve provided a function that turns |mask| into a |polyshape|
% object.
%
%   slice = my_polyshapes(mask);
%
% An overloaded |plot| function then generates the selfie from |slice|.
%
%   sliceplot = plot(slice, ...
%       &apos;facecolor&apos;,cheese_yellow, ...
%       &apos;facealpha&apos;,1);

%% My first solution
% I didn&apos;t use AI or simulated annealing or any other modern technique
% to search for a solution.  I just poked around while I was learning
% about polyshapes and programming my simulator.  It was just me and
% a _real_ mouse.  No, not a _real real_ mouse.  You know the kind I mean. 
%
% &lt;&lt;Cheese.gif&gt;&gt;

%% Is this solution correct?
% I almost made a blog post claiming this is the solution the designers of
% Mighty Cheese must have had in mind. But I wasn&apos;t sure.
% My solution made use of the white  space around the outside edges of the
% slices.  How wide are those gaps?  I didn&apos;t yet have a real physical 
% puzzle to measure tolerances.

%% Spoiler alert !
% I am sure glad now that I didn&apos;t post that &quot;solution&quot;.
% It wasn&apos;t correct, and it wasn&apos;t pretty.
%
% This puzzle is not as easy as it looks.
% In fact, the solution is very hard to find and is very elegant.
% If you want to try to solve it yourself, stop reading this post,
% bookmark this spot, and come back later.

%% My second solution
% As I should have known, this puzzle is no secret to the Internet
% It is available for about $10 at many places and
% YouTube offers several solutions.  But I&apos;m glad that I didn&apos;t see any
% of them until a few weeks ago.
%
% When I made more careful measurements on &quot;Cheese_puzzle.png&quot;
% and had a more accurate model to simulate,
% it became clear that my precious first solution just wouldn&apos;t fit.
 
%% A round peg in a square hole
% Nobody said that the mouse had to fit neatly into a circular hole 
% with just the right diameter.  Once you realize that you might be
% looking for a noncircular hole, you are on the way to finding the
% solution.

%% Theta
% The key to the puzzle&apos;s geometry is the purple axes in this picture.
% They cross at right angles at a point in the center hole at the tip 
% of the protruding slice.  The angle between the purple axes and the
% orange vertical/horizontal axes can be measured accurately on the
% photo and everything else follows. The angle is
%
%   theta = atand((y(b)-y(a))/(b-a)) = 11.62 degrees
% 
% &lt;&lt;Mighty_Cheese_theta.gif&gt;&gt;

%% Polyshapes
% The mask that I was using for my first solution got me started with
% polyshapes, but I eventually abandoned it.  It is easy to make a 
% polyshape directly from a list of points around the boundary, like this.
% 
% &lt;&lt;Mighty_Cheese_S3_dots.gif&gt;&gt;

%% The solution
% The three holes in the original cheese slices do not appear
% to serve any purpose.  So, I have moved them and given them an
% important role in this simulation.
% Combine the two triangular slices in the upper left into a single slice.
% Rotate each of the resulting four slices by an
% angle of 180-theta = 168.38 degrees about its center.  The four
% right-angled corners from the central hole go to the corners of the 
% puzzle while the outer corners form a central square just large enough
% to hold the mouse.
%
% That is really elegant.
%
% Where did this puzzle originate?  What mathematics was involved in
% its design?
%
% &lt;&lt;MCsolution.gif&gt;&gt;

%% Software
% My code is here:
% &lt;https://blogs.mathworks.com/cleve/files/Mighty_Polyshape.m
% Mighty_Polyshape.m&gt;.
##### SOURCE END ##### 2f68df87f4004e7ea2832e4310206744
--&gt;
</content>
 </entry>
 
 <entry>
   <title>An Interesting, and Perhaps New, Matrix</title>
   <link href="https://hpc.social/2022/an-interesting-and-perhaps-new-matrix/"/>
   <updated>2022-07-21T04:38:23-06:00</updated>
   <id>https://hpc.social/2022/an-interesting-and-perhaps-new-matrix</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;I do not recall having seen this matrix before, but I will not be surprised to learn that somebody else already knows all about it, especially if that person&apos;s name is Nick.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#17afe407-67a2-462b-a10b-df348fccb837&quot;&gt;&lt;tt&gt;Q&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#044996c2-78b8-4a23-a809-6ed8ab3e3607&quot;&gt;&lt;tt&gt;D&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#eca1bb02-1ba1-4bbf-9ed0-39c244e018eb&quot;&gt;O.E.I.S.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#b7778074-8d3f-46ad-858b-13f27d2f99bd&quot;&gt;&lt;tt&gt;R&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1e78f08f-c39d-4810-93bb-b0428456710c&quot;&gt;Condition&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c60c371e-4378-4499-8242-376b1b37da8c&quot;&gt;Extra Credit&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;&lt;tt&gt;Q&lt;/tt&gt;&lt;a name=&quot;17afe407-67a2-462b-a10b-df348fccb837&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I&apos;ve been investigating the matrices generated by this elegant one-liner.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    Q = @(n) (-n:n).^2 + (-n:n)&apos;.^2;
&lt;/pre&gt;&lt;p&gt;The &lt;tt&gt;Q&lt;/tt&gt; is for &quot;quadratic&quot;.&lt;/p&gt;
&lt;p&gt;The middle column contains the squares of the integers from &lt;tt&gt;-n&lt;/tt&gt; to &lt;tt&gt;n&lt;/tt&gt;. So does the middle row. The apostrophe summons singleton expansion. The resulting matrix has order &lt;tt&gt;2*n+1&lt;/tt&gt;. Here is &lt;tt&gt;Q(5)&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    Q5 = Q(5)
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
Q5 =

    50    41    34    29    26    25    26    29    34    41    50
    41    32    25    20    17    16    17    20    25    32    41
    34    25    18    13    10     9    10    13    18    25    34
    29    20    13     8     5     4     5     8    13    20    29
    26    17    10     5     2     1     2     5    10    17    26
    25    16     9     4     1     0     1     4     9    16    25
    26    17    10     5     2     1     2     5    10    17    26
    29    20    13     8     5     4     5     8    13    20    29
    34    25    18    13    10     9    10    13    18    25    34
    41    32    25    20    17    16    17    20    25    32    41
    50    41    34    29    26    25    26    29    34    41    50

&lt;/pre&gt;&lt;p&gt;I like the contour plot.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    contourf(Q(100))
    axis &lt;span class=&quot;string&quot;&gt;square&lt;/span&gt;
    colorbar
    title(&lt;span class=&quot;string&quot;&gt;&apos;Q(100)&apos;&lt;/span&gt;)
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/disc_blog_01.png&quot; vspace=&quot;5&quot; /&gt; &lt;h4&gt;&lt;tt&gt;D&lt;/tt&gt;&lt;a name=&quot;044996c2-78b8-4a23-a809-6ed8ab3e3607&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;For another blog post under development, I need a logical mask that carves a circular region out of graphic.  This disc does the job.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    D = @(n) Q(n) &amp;lt;= n^2;
&lt;/pre&gt;&lt;p&gt;Here is my carver.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    spy(D(100))
    title(&lt;span class=&quot;string&quot;&gt;&apos;D(100)&apos;&lt;/span&gt;)
&lt;/pre&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/disc_blog_02.png&quot; vspace=&quot;5&quot; /&gt; &lt;p&gt;Did you notice the digits in the count of nonzeros in &lt;tt&gt;D(100)&lt;/tt&gt;? It happens whenever &lt;tt&gt;n&lt;/tt&gt; is a power of 10.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    fprintf(&lt;span class=&quot;string&quot;&gt;&apos;%15s %12s\n&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;n&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;nnz(D(n))&apos;&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n = 10.^(0:4)
        fprintf(&lt;span class=&quot;string&quot;&gt;&apos;%15d %12d\n&apos;&lt;/span&gt;,n, nnz(D(n)))
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;              n    nnz(D(n))
              1            5
             10          317
            100        31417
           1000      3141549
          10000    314159053
&lt;/pre&gt;&lt;h4&gt;O.E.I.S.&lt;a name=&quot;eca1bb02-1ba1-4bbf-9ed0-39c244e018eb&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A classic problem, described in the &lt;a href=&quot;https://oeis.org/A000328&quot;&gt;Online Encyclopedia of Integer Sequences&lt;/a&gt;, asks how many points with integer coordinates lie within a disc of increasing radius. Our nonzero count provides the answer.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    fprintf(&lt;span class=&quot;string&quot;&gt;&apos;%15s %8s\n&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;n&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;a(n)&apos;&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n = [1:15  99:101  499:501  999:1001]
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mod(n,100) == 99
            fprintf(&lt;span class=&quot;string&quot;&gt;&apos;%15s %8s\n&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;-&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;-&apos;&lt;/span&gt;)
        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
        a(n) = nnz(D(n));
        fprintf(&lt;span class=&quot;string&quot;&gt;&apos;%15d %8d\n&apos;&lt;/span&gt;,n,a(n))
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;              n     a(n)
              1        5
              2       13
              3       29
              4       49
              5       81
              6      113
              7      149
              8      197
              9      253
             10      317
             11      377
             12      441
             13      529
             14      613
             15      709
              -        -
             99    30757
            100    31417
            101    32017
              -        -
            499   782197
            500   785349
            501   788509
              -        -
            999  3135157
           1000  3141549
           1001  3147833
&lt;/pre&gt;&lt;h4&gt;&lt;tt&gt;R&lt;/tt&gt;&lt;a name=&quot;b7778074-8d3f-46ad-858b-13f27d2f99bd&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Taking the reciprocals of the matrix entries, and reducing the range of the anonymous index, produces a matrix that behaves a bit like the Hilbert matrix, &lt;tt&gt;hilb(n)&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    R = @(n) 1./((1:n).^2 + (1:n)&apos;.^2);
&lt;/pre&gt;&lt;p&gt;Here are the 5-by-5&apos;s.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    format &lt;span class=&quot;string&quot;&gt;rat&lt;/span&gt;
    R5 = R(5)
    H5 = hilb(5)
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;
R5 =

       1/2            1/5            1/10           1/17           1/26    
       1/5            1/8            1/13           1/20           1/29    
       1/10           1/13           1/18           1/25           1/34    
       1/17           1/20           1/25           1/32           1/41    
       1/26           1/29           1/34           1/41           1/50    


H5 =

       1              1/2            1/3            1/4            1/5     
       1/2            1/3            1/4            1/5            1/6     
       1/3            1/4            1/5            1/6            1/7     
       1/4            1/5            1/6            1/7            1/8     
       1/5            1/6            1/7            1/8            1/9     

&lt;/pre&gt;&lt;h4&gt;Condition&lt;a name=&quot;1e78f08f-c39d-4810-93bb-b0428456710c&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Going away from the diagonal, the elements of &lt;tt&gt;R(n)&lt;/tt&gt; decay more rapidly than those of &lt;tt&gt;hilb(n)&lt;/tt&gt;, so &lt;tt&gt;R(n)&lt;/tt&gt; is better conditioned than &lt;tt&gt;hilb(n)&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class=&quot;codeinput&quot;&gt;    format &lt;span class=&quot;string&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;e&lt;/span&gt;
    fprintf(&lt;span class=&quot;string&quot;&gt;&apos;%15s %12s %12s\n&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;n&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;cond R&apos;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&apos;cond H&apos;&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n = 1:12
        fprintf(&lt;span class=&quot;string&quot;&gt;&apos;%15d %12.2e %12.2e\n&apos;&lt;/span&gt;,n,cond(R(n)),cond(hilb(n)))
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;pre class=&quot;codeoutput&quot;&gt;              n       cond R       cond H
              1     1.00e+00     1.00e+00
              2     1.53e+01     1.93e+01
              3     2.04e+02     5.24e+02
              4     2.59e+03     1.55e+04
              5     3.21e+04     4.77e+05
              6     3.89e+05     1.50e+07
              7     4.67e+06     4.75e+08
              8     5.54e+07     1.53e+10
              9     6.53e+08     4.93e+11
             10     7.65e+09     1.60e+13
             11     8.92e+10     5.22e+14
             12     1.04e+12     1.62e+16
&lt;/pre&gt;&lt;h4&gt;Extra Credit&lt;a name=&quot;c60c371e-4378-4499-8242-376b1b37da8c&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;What is the rank of &lt;tt&gt;Q(n)&lt;/tt&gt;?  Why?  See &lt;a href=&quot;https://epubs.siam.org/doi/epdf/10.1137/20M1358694&quot;&gt;a paper in SIAM Review&lt;/a&gt; by Strang and Moler.&lt;/p&gt;
&lt;p&gt;Why is the table of values for &lt;tt&gt;nnz(D(10^k))&lt;/tt&gt; so short? How might you extend this table?&lt;/p&gt;
&lt;p&gt;Investigate &lt;tt&gt;R(n)&lt;/tt&gt;.  Is it positive definite?  What are its eigenvalues?  What is its inverse?  What is the sign pattern of the elements of its inverse?  For what values of &lt;tt&gt;n&lt;/tt&gt; can you compute the inverse reliably using floating point arithmetic? How does all this compare with &lt;tt&gt;hilb(n)&lt;/tt&gt; and &lt;tt&gt;invhilb(n)&lt;/tt&gt; ?&lt;/p&gt;
&lt;p&gt;Comments in the Comments, or in email to me, are welcome.&lt;/p&gt;
&lt;!-- 
    function grabCode_4c513405f3644e5fbcae1bf70683cb1d() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;4c513405f3644e5fbcae1bf70683cb1d &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; 4c513405f3644e5fbcae1bf70683cb1d&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
4c513405f3644e5fbcae1bf70683cb1d ##### SOURCE BEGIN #####
%% An Interesting, and Perhaps New, Matrix
% I do not recall having seen this matrix before, but
% I will not be surprised to learn that somebody else already knows 
% all about it, especially if that person&apos;s name is Nick.

%% |Q| 
%
% I&apos;ve been investigating the matrices generated by this elegant one-liner.
 
    Q = @(n) (-n:n).^2 + (-n:n)&apos;.^2;

%%
% The |Q| is for &quot;quadratic&quot;. 
%
% The middle column contains the squares of the integers from |-n| to |n|.
% So does the middle row. The apostrophe summons singleton expansion.
% The resulting matrix has order |2*n+1|.
% Here is |Q(5)|.

    Q5 = Q(5)

%%
% I like the contour plot.

    contourf(Q(100))
    axis square
    colorbar
    title(&apos;Q(100)&apos;)

%% |D|
% For another blog post under development, I need a logical mask that
% carves a circular region out of graphic.  This disc does the job.
 
    D = @(n) Q(n) &lt;= n^2;

%%
% Here is my carver.

    spy(D(100))
    title(&apos;D(100)&apos;)

%% 
% Did you notice the digits in the count of
% nonzeros in |D(100)|?
% It happens whenever |n| is a power of 10.

    fprintf(&apos;%15s %12s\n&apos;,&apos;n&apos;,&apos;nnz(D(n))&apos;)
    for n = 10.^(0:4)
        fprintf(&apos;%15d %12d\n&apos;,n, nnz(D(n)))
    end

%% O.E.I.S.
% A classic problem, described in the &lt;https://oeis.org/A000328
% Online Encyclopedia of Integer Sequences&gt;, asks how many points with
% integer coordinates lie within a disc of increasing radius.
% Our nonzero count provides the answer.

    fprintf(&apos;%15s %8s\n&apos;,&apos;n&apos;,&apos;a(n)&apos;)
    for n = [1:15  99:101  499:501  999:1001]
        if mod(n,100) == 99
            fprintf(&apos;%15s %8s\n&apos;,&apos;-&apos;,&apos;-&apos;)
        end
        a(n) = nnz(D(n));
        fprintf(&apos;%15d %8d\n&apos;,n,a(n))
    end  

%% |R|
% Taking the reciprocals of the matrix entries, and reducing the range of
% the anonymous index, produces a matrix that behaves a bit like
% the Hilbert matrix, |hilb(n)|.

    R = @(n) 1./((1:n).^2 + (1:n)&apos;.^2);

%%
% Here are the 5-by-5&apos;s.

    format rat
    R5 = R(5)
    H5 = hilb(5)

%% Condition
% Going away from the diagonal,
% the elements of |R(n)| decay more rapidly than those of |hilb(n)|,
% so |R(n)| is better conditioned than |hilb(n)|.

    format short e
    fprintf(&apos;%15s %12s %12s\n&apos;,&apos;n&apos;,&apos;cond R&apos;,&apos;cond H&apos;)
    for n = 1:12
        fprintf(&apos;%15d %12.2e %12.2e\n&apos;,n,cond(R(n)),cond(hilb(n)))
    end

%% Extra Credit
% What is the rank of |Q(n)|?  Why?  See 
% &lt;https://epubs.siam.org/doi/epdf/10.1137/20M1358694
% a paper in SIAM Review&gt; by Strang and Moler.
%
% Why is the table of values for |nnz(D(10^k))| so short?
% How might you extend this table?
%
% Investigate |R(n)|.  Is it positive definite?  What are its
% eigenvalues?  What is its inverse?  What is the sign pattern of
% the elements of its inverse?  For what values of |n| can you
% compute the inverse reliably using floating point arithmetic?
% How does all this compare with |hilb(n)| and |invhilb(n)| ?
%
% Comments in the Comments, or in email to me, are welcome. 

##### SOURCE END ##### 4c513405f3644e5fbcae1bf70683cb1d
--&gt;
</content>
 </entry>
 
 <entry>
   <title>The Soma Cube, Again</title>
   <link href="https://hpc.social/2022/the-soma-cube-again/"/>
   <updated>2022-06-10T09:07:52-06:00</updated>
   <id>https://hpc.social/2022/the-soma-cube-again</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;The Soma Cube brings back memories.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#d24e61ac-9d35-47eb-bca6-357702418141&quot;&gt;Piet Hein&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#1d20680b-94e4-464d-84a6-7481a2c30e00&quot;&gt;Bill McKeeman&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3432acb9-d2ca-49a7-ac3a-b8327c5e7f9a&quot;&gt;The original &lt;tt&gt;soma&lt;/tt&gt; demo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#412ef701-867b-45f9-9d16-b38a8bd051b1&quot;&gt;A new &lt;tt&gt;Soma&lt;/tt&gt; demo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#0c997775-0706-4f98-855c-23e311f68cb0&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3b67595f-6619-4959-8d78-0417f13c73a3&quot;&gt;Update&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Piet Hein&lt;a name=&quot;d24e61ac-9d35-47eb-bca6-357702418141&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Piet Hein (1905-1996) was an extraordinary Danish inventor, mathematician, poet and philosopher.  He invented the &lt;a href=&quot;https://en.wikipedia.org/wiki/Soma_cube&quot;&gt;Soma Cube puzzle&lt;/a&gt; in 1933. I wrote a blog post about Hein and some of his creations several years ago, &lt;a href=&quot;https://blogs.mathworks.com/cleve/2016/03/28/piet-hein-super-ellipses-and-soma-cubes&quot;&gt;Soma Cube 2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Soma Cube puzzle has seven pieces.  One of them is a V-shaped piece made from three cubelets.   The other six pieces are L, T, Z, R, S, and Y with four cubelets each.  That&apos;s a total of 27 cubelets, just enough to make a 3-by-3-by-3 cube.  Sound familiar?&lt;/p&gt;
&lt;h4&gt;Bill McKeeman&lt;a name=&quot;1d20680b-94e4-464d-84a6-7481a2c30e00&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Bill McKeeman and I were buddies in grad school.  He was a professor at U. C. Santa Cruz for a while, and then at the ill-fated Wang Institute of Graduate Studies in Tyngsborough, Mass.  He worked for DEC in New Hampshire for  a long time, taught compilers at Dartmouth, and even consulted for the MathWorks.  As an exercise to learn MATLAB, he wrote the modern version of our &lt;tt&gt;why&lt;/tt&gt; command.&lt;/p&gt;
&lt;h4&gt;The original &lt;tt&gt;soma&lt;/tt&gt; demo&lt;a name=&quot;3432acb9-d2ca-49a7-ac3a-b8327c5e7f9a&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Bill and I became obsessed with the Soma cube after Martin Gardiner described the puzzle in his &lt;i&gt;Scientific American&lt;/i&gt; column. You may not have noticed it before, but one of Bill&apos;s programs, &lt;tt&gt;soma&lt;/tt&gt;, is in the MATLAB &lt;tt&gt;demos&lt;/tt&gt; directory. Bill generated all of the 240 distinctly different puzzle solutions and stored them in a 240-by-27 matrix, &lt;tt&gt;demos/somasols&lt;/tt&gt;. His program lets you page through the solutions.&lt;/p&gt;
&lt;h4&gt;A new &lt;tt&gt;Soma&lt;/tt&gt; demo&lt;a name=&quot;412ef701-867b-45f9-9d16-b38a8bd051b1&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;My new &lt;tt&gt;Soma&lt;/tt&gt; code uses technology from &lt;tt&gt;Qube&lt;/tt&gt;, the digital Rubik&apos;s Cube simulator, to plot the 240 solutions. Here are the seven Soma pieces, surrounding an animation stepping through every tenth solution.&lt;/p&gt;
&lt;p&gt;Do you recognize the colors?&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/Soma24.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Software&lt;a name=&quot;0c997775-0706-4f98-855c-23e311f68cb0&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Soma&lt;/tt&gt; is available from &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Soma.m&quot;&gt;this link&lt;/a&gt;. You already have &lt;tt&gt;somasols&lt;/tt&gt;, but another copy is available from &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/somasols.m&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Update&lt;a name=&quot;3b67595f-6619-4959-8d78-0417f13c73a3&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I have combined my new display code and McKeeman&apos;s old program that finds all the solutions.  The self-extracting archive is available at &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Soma_osf.m&quot;&gt;&amp;lt;https://blogs.mathworks.com/cleve/files/Soma_osf.m&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;!-- 
    function grabCode_ba03413b3d6846149e5b9f9e92eb3300() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;ba03413b3d6846149e5b9f9e92eb3300 &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; ba03413b3d6846149e5b9f9e92eb3300&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022b&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
ba03413b3d6846149e5b9f9e92eb3300 ##### SOURCE BEGIN #####
%% The Soma Cube, Again
% The Soma Cube brings back memories.

%% Piet Hein
% Piet Hein (1905-1996) was an extraordinary Danish inventor, 
% mathematician, poet and philosopher.  He invented the 
% &lt;https://en.wikipedia.org/wiki/Soma_cube
% Soma Cube puzzle&gt; in 1933.
% I wrote a blog post about Hein and some of his creations several years ago,
% &lt;https://blogs.mathworks.com/cleve/2016/03/28/piet-hein-super-ellipses-and-soma-cubes
% Soma Cube 2016&gt;.
%%
% The Soma Cube puzzle has seven pieces.  One of them is a V-shaped piece
% made from three cubelets.   The other six pieces are L, T, Z, R, S, and Y
% with four cubelets each.  That&apos;s a total of 27 cubelets, just enough
% to make a 3-by-3-by-3 cube.  Sound familiar?

%% Bill McKeeman
% Bill McKeeman and I were buddies in grad school.  He was a professor at
% U. C. Santa Cruz for a while, and then at the ill-fated Wang Institute
% of Graduate Studies in Tyngsborough, Mass.  He worked for 
% DEC in New Hampshire for  a long time, taught compilers at Dartmouth, 
% and even consulted for the MathWorks.  As an exercise to learn MATLAB,
% he wrote the modern version of our |why| command.

%% The original |soma| demo
% Bill and I became obsessed with the Soma cube after Martin Gardiner
% described the puzzle in his _Scientific American_ column.
% You may not have noticed it before, but one of Bill&apos;s programs,
% |soma|, is in the MATLAB |demos| directory.
% Bill generated all of the 240 distinctly different puzzle solutions
% and stored them in a 240-by-27 matrix, |demos/somasols|.  
% His program lets you page through the solutions.

%% A new |Soma| demo
% My new |Soma| code uses technology from |Qube|,
% the digital Rubik&apos;s Cube simulator, to plot the 240 solutions.
% Here are the seven Soma pieces, surrounding an animation stepping
% through every tenth solution.
%
% Do you recognize the colors?
%
% &lt;&lt;Soma24.gif&gt;&gt;
%

%% Software
% |Soma| is available from
% &lt;https://blogs.mathworks.com/cleve/files/Soma.m
% this link&gt;.
% You already have |somasols|, but another copy is available from
% &lt;https://blogs.mathworks.com/cleve/files/somasols.m
% this link&gt;.

%% Update
% I have combined my new display code and McKeeman&apos;s old program that
% finds all the solutions.  The self-extracting archive is available at 
% &lt;https://blogs.mathworks.com/cleve/files/Soma_osf.m
% https://blogs.mathworks.com/cleve/files/Soma_osf.m&gt;

##### SOURCE END ##### ba03413b3d6846149e5b9f9e92eb3300
--&gt;
</content>
 </entry>
 
 <entry>
   <title>Rotation Matrices</title>
   <link href="https://hpc.social/2022/rotation-matrices/"/>
   <updated>2022-05-18T23:50:24-06:00</updated>
   <id>https://hpc.social/2022/rotation-matrices</id>
   <content type="html">&lt;div class=&quot;content&quot;&gt;&lt;!--introduction--&gt;&lt;p&gt;The  matrices in the following animations are at the heart of computer graphics. They describe objects moving in three-dimensional space and are essential to MATLAB&apos;s Handle Graphics, to Computer Added Design packages, to Computer Graphics Imagery in films, and to most popular video games. Many modern computers contain GPUs, &lt;i&gt;Graphic Processing Units&lt;/i&gt;, which are optimized to compute the product of these matrices.&lt;/p&gt;
&lt;!--/introduction--&gt;&lt;h3&gt;Contents&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#3a6da3e1-6503-4ec5-aab8-a13b4a419218&quot;&gt;Rotations&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#c80c5877-8380-4b82-a0b8-3fb8fd146dcf&quot;&gt;&lt;tt&gt;theta&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#2f2feaa8-2ff1-436c-ba43-62fbf44a95f4&quot;&gt;Compass&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#75ba0607-fc08-40cf-b038-e2e9ddf4d2ba&quot;&gt;Roll, Pitch, Yaw&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#819e8a6b-9508-4efb-a12a-1b7d57015db2&quot;&gt;Propeller&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#ca750655-1342-4eda-bf54-d721058acc24&quot;&gt;Cubelet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#48892ff7-e295-4784-9282-e149dbd41697&quot;&gt;Scramble&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#6f09e9ca-8a4e-4df4-a894-3ce2a082d8dc&quot;&gt;Unscramble&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#19f99287-c2df-4589-a762-4410ffa64eb9&quot;&gt;Exercises&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://feeds.feedburner.com/mathworks/moler#fa106610-d1c0-4b93-9ea4-c3ee6136fb40&quot;&gt;Software&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Rotations&lt;a name=&quot;3a6da3e1-6503-4ec5-aab8-a13b4a419218&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The &lt;i&gt;homogeneous coordinates&lt;/i&gt; system used in today&apos;s computer graphics software and hardware makes it possible to describe rotations, translations and many other operations with 3-by-3 and 4-by-4 matrices. These matrices operate on vectors with the position of an object, &lt;i&gt;x&lt;/i&gt;, &lt;i&gt;y&lt;/i&gt; and &lt;i&gt;z&lt;/i&gt; , in the first three components.&lt;/p&gt;
&lt;p&gt;Rotations about the coordinate axes are described by three matrices. Rotations about the &lt;i&gt;x&lt;/i&gt; -axis are produced by $R_x$, which rotates &lt;i&gt;y&lt;/i&gt; and &lt;i&gt;z&lt;/i&gt;, while leaving &lt;i&gt;x&lt;/i&gt; unchanged.&lt;/p&gt;
&lt;p&gt;$$ R_x(\theta) = \left( \begin{array}{rrr}
  1  &amp;amp;             0  &amp;amp;              0   \\
  0  &amp;amp;  \cos{\theta}  &amp;amp;  -\sin{\theta}   \\
  0  &amp;amp;  \sin{\theta}  &amp;amp;   \cos{\theta}
  \end{array}  \right) $$&lt;/p&gt;
&lt;p&gt;Rotations about the &lt;i&gt;y&lt;/i&gt; -axis are generated by&lt;/p&gt;
&lt;p&gt;$$ R_y(\theta) = \left( \begin{array}{rrr}
  \cos{\theta}  &amp;amp;              0  &amp;amp; -\sin{\theta}  \\
             0  &amp;amp;              1  &amp;amp;             0  \\
  \sin{\theta}  &amp;amp;              0  &amp;amp;  \cos{\theta}
  \end{array}  \right) $$&lt;/p&gt;
&lt;p&gt;And, rotations about &lt;i&gt;z&lt;/i&gt; are provided by&lt;/p&gt;
&lt;p&gt;$$ R_z(\theta) = \left( \begin{array}{rrr}
  \cos{\theta}  &amp;amp; -\sin{\theta}  &amp;amp;  0  \\
  \sin{\theta}  &amp;amp;  \cos{\theta}  &amp;amp;  0  \\
             0  &amp;amp;             0  &amp;amp;  1  \\
  \end{array}  \right) $$&lt;/p&gt;
&lt;h4&gt;&lt;tt&gt;theta&lt;/tt&gt;&lt;a name=&quot;c80c5877-8380-4b82-a0b8-3fb8fd146dcf&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Rotation angles are specified in degrees. Our MATLAB programs use the degree-based trig functions &lt;tt&gt;cosd&lt;/tt&gt; and &lt;tt&gt;sind&lt;/tt&gt;. Here are graphs of  $\cos\theta$  and  $-\sin\theta$ ,  evaluated with the angle  $\theta$  going from &lt;tt&gt;0&lt;/tt&gt; to &lt;tt&gt;360&lt;/tt&gt; degrees in &lt;tt&gt;10&lt;/tt&gt;-degree steps.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/cos_sin.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Compass&lt;a name=&quot;2f2feaa8-2ff1-436c-ba43-62fbf44a95f4&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here is another look at the same data, &lt;tt&gt;cosd(theta)&lt;/tt&gt; and &lt;tt&gt;-sind(theta)&lt;/tt&gt; for &lt;tt&gt;theta = 0:10:360&lt;/tt&gt;. The columns of the rotation matrix are the coordinates of the rotating dots.  The blue dot starts at (0,1) and the orange dot starts at (1,0).&lt;/p&gt;
&lt;p&gt;If you drop the  zeros from the values of &lt;tt&gt;theta&lt;/tt&gt;, you are left with the integers from 1 to 36.  This is the numbering in the international standard describing the  compass direction of runways at airports.  The initial position of our blue dot corresponds to runway 36 and the orange dot starts as runway 9.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/compass.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Roll, Pitch, Yaw&lt;a name=&quot;75ba0607-fc08-40cf-b038-e2e9ddf4d2ba&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;b&gt;Note: Refresh your browser to synchronize these animations.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;For aircraft and space vehicles, rotation around the &lt;tt&gt;x&lt;/tt&gt;-axis from nose to tail is known as &lt;i&gt;roll&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/roll.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Rotation about the &lt;tt&gt;y&lt;/tt&gt;-axis parallel to the wings is &lt;i&gt;pitch&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/pitch.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;p&gt;And, rotation about the vertical &lt;tt&gt;z&lt;/tt&gt;-axis is &lt;i&gt;yaw&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/yaw.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Propeller&lt;a name=&quot;819e8a6b-9508-4efb-a12a-1b7d57015db2&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Our model of the Piper PA-24 Comanche has 97 &lt;i&gt;patches&lt;/i&gt;. One of them is the propeller. This animation of a rotating propeller is very similar to our earlier animation of the compass.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/propeller.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Cubelet&lt;a name=&quot;ca750655-1342-4eda-bf54-d721058acc24&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;tt&gt;Qube&lt;/tt&gt;, our digital Rubik&apos;s Cube simulator, uses 27 copies of a  single &lt;i&gt;cubelet&lt;/i&gt;.  This animation of a rotating cubelet shows a quarter turn clockwise about &lt;tt&gt;x&lt;/tt&gt;, followed by a quarter turn clockwise about  &lt;tt&gt;y&lt;/tt&gt; and then a quarter turn counterclockwise about &lt;tt&gt;z&lt;/tt&gt;. If these three rotations are repeated four times, the  cubelet returns to its initial orientation. In the process, we see the traditional Rubik&apos;s colors of all six faces -- white, green and orange opposite yellow, blue and red.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/cubelet.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Scramble&lt;a name=&quot;48892ff7-e295-4784-9282-e149dbd41697&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;b&gt;Note: Refresh your browser to synchronize these animations.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Rubick&apos;s Cube is all about rotations.  Rotating the cubelets in any face of the puzzle, while leaving the rest of the puzzle fixed, is called a &quot;move&quot;.  Like any cube, Rubik&apos;s cube has six faces. Each move rotates one of the six faces in either a clockwise or counterclockwise direction. So, after &lt;tt&gt;n&lt;/tt&gt; moves, the puzzle is in one of &lt;tt&gt;12^n&lt;/tt&gt; possible states.  The challenge is to return the cube to its original orientation.&lt;/p&gt;
&lt;p&gt;Here are six random rotations produced by &lt;tt&gt;scramble(6)&lt;/tt&gt;. Because &lt;tt&gt;12^6&lt;/tt&gt; is &lt;tt&gt;2,985,984&lt;/tt&gt;, this is just one of almost three million six-move scrambles.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/scramble.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Unscramble&lt;a name=&quot;6f09e9ca-8a4e-4df4-a894-3ce2a082d8dc&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;One possible way to restore any starting condition is to retrace the moves that produced it.  This is the &quot;follow the breadcrumbs&quot; algorithm. So, I call this &lt;tt&gt;unscramble&lt;/tt&gt;, rather than &lt;tt&gt;solve&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; hspace=&quot;5&quot; src=&quot;http://blogs.mathworks.com/cleve/files/unscramble.gif&quot; vspace=&quot;5&quot; /&gt; &lt;/p&gt;
&lt;h4&gt;Exercises&lt;a name=&quot;19f99287-c2df-4589-a762-4410ffa64eb9&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;1: Which rotation matrices and what values of &lt;tt&gt;theta&lt;/tt&gt; are used      in the animations?&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;ul&gt;&lt;li&gt;2 (not easy): When is &lt;tt&gt;unscamble&lt;/tt&gt;  a solution with the      minimum number of moves?&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;Software&lt;a name=&quot;fa106610-d1c0-4b93-9ea4-c3ee6136fb40&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The source code for &lt;tt&gt;Qube&lt;/tt&gt; is available from this link: &lt;a href=&quot;https://blogs.mathworks.com/cleve/files/Qube_May18_osf.m&quot;&gt;Qube_May18_osf.m&lt;/a&gt;. The &lt;tt&gt;osf&lt;/tt&gt;, &lt;i&gt;one single file&lt;/i&gt;,  format is a self-extracting archive that expands into a directory of individual functions.&lt;/p&gt;
&lt;!-- 
    function grabCode_fac94086e84b4ca1b5df2dbc8d19f63c() {
        // Remember the title so we can use it in the new page
        title = document.title;

        // Break up these strings so that their presence
        // in the Javascript doesn&apos;t mess up the search for
        // the MATLAB code.
        t1=&apos;fac94086e84b4ca1b5df2dbc8d19f63c &apos; + &apos;##### &apos; + &apos;SOURCE BEGIN&apos; + &apos; #####&apos;;
        t2=&apos;##### &apos; + &apos;SOURCE END&apos; + &apos; #####&apos; + &apos; fac94086e84b4ca1b5df2dbc8d19f63c&apos;;
    
        b=document.getElementsByTagName(&apos;body&apos;)[0];
        i1=b.innerHTML.indexOf(t1)+t1.length;
        i2=b.innerHTML.indexOf(t2);
 
        code_string = b.innerHTML.substring(i1, i2);
        code_string = code_string.replace(/REPLACE_WITH_DASH_DASH/g,&apos;--&apos;);

        // Use /x3C/g instead of the less-than character to avoid errors 
        // in the XML parser.
        // Use &apos;\x26#60;&apos; instead of &apos;&lt;&apos; so that the XML parser
        // doesn&apos;t go ahead and substitute the less-than character. 
        code_string = code_string.replace(/\x3C/g, &apos;\x26#60;&apos;);

        copyright = &apos;Copyright 2022 The MathWorks, Inc.&apos;;

        w = window.open();
        d = w.document;
        d.write(&apos;&lt;pre&gt;\n&apos;);
        d.write(code_string);

        // Add copyright line at the bottom if specified.
        if (copyright.length &gt; 0) {
            d.writeln(&apos;&apos;);
            d.writeln(&apos;%%&apos;);
            if (copyright.length &gt; 0) {
                d.writeln(&apos;% _&apos; + copyright + &apos;_&apos;);
            }
        }

        d.write(&apos;&lt;/pre&gt;\n&apos;);

        d.title = title + &apos; (MATLAB code)&apos;;
        d.close();
    }   
     --&gt;&lt;p style=&quot;text-align: right; font-size: xx-small; font-weight: lighter; font-style: italic; color: gray;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;&quot;&gt;&lt;span style=&quot;font-size: x-small; font-style: italic;&quot;&gt;Get 
      the MATLAB code &lt;noscript&gt;(requires JavaScript)&lt;/noscript&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
      Published with MATLAB&amp;reg; R2022a&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!--
fac94086e84b4ca1b5df2dbc8d19f63c ##### SOURCE BEGIN #####
%% Rotation Matrices
% The  matrices in the following animations
% are at the heart of computer graphics.
% They describe objects moving in three-dimensional
% space and are essential to MATLAB&apos;s Handle Graphics,
% to Computer Added Design packages, 
% to Computer Graphics Imagery in films,
% and to most popular video games.
% Many modern computers 
% contain GPUs, _Graphic Processing Units_, which are
% optimized to compute the product of these matrices.

%% Rotations
% The _homogeneous coordinates_ system used in today&apos;s 
% computer graphics software and hardware
% makes it possible to describe rotations, translations
% and many other operations with 3-by-3 and 4-by-4 matrices.
% These matrices operate on vectors with the position of an object,
% _x_, _y_ and _z_ , in the first three components.
%
% Rotations about the coordinate axes are described by three matrices.
% Rotations about the _x_ -axis are produced by $R_x$, which
% rotates _y_ and _z_, while leaving _x_ unchanged.
%
% $$ R_x(\theta) = \left( \begin{array}{rrr}
%   1  &amp;             0  &amp;              0   \\
%   0  &amp;  \cos{\theta}  &amp;  -\sin{\theta}   \\
%   0  &amp;  \sin{\theta}  &amp;   \cos{\theta}   
%   \end{array}  \right) $$
%   
% Rotations about the _y_ -axis are generated by
%
% $$ R_y(\theta) = \left( \begin{array}{rrr}
%   \cos{\theta}  &amp;              0  &amp; -\sin{\theta}  \\
%              0  &amp;              1  &amp;             0  \\
%   \sin{\theta}  &amp;              0  &amp;  \cos{\theta}   
%   \end{array}  \right) $$
%
% And, rotations about _z_ are provided by
%
% $$ R_z(\theta) = \left( \begin{array}{rrr}
%   \cos{\theta}  &amp; -\sin{\theta}  &amp;  0  \\
%   \sin{\theta}  &amp;  \cos{\theta}  &amp;  0  \\ 
%              0  &amp;             0  &amp;  1  \\
%   \end{array}  \right) $$
%

%% |theta|
% Rotation angles are specified in degrees. Our MATLAB programs
% use the degree-based trig functions |cosd| and |sind|.
% Here are graphs of  $\cos\theta$  and  $-\sin\theta$ ,  evaluated with
% the angle  $\theta$  going from |0| to |360| degrees
% in |10|-degree steps.
%
% &lt;&lt;cos_sin.gif&gt;&gt;
%

%% Compass
% Here is another look at the same data, |cosd(theta)| and 
% |-sind(theta)| for |theta = 0:10:360|.
% The columns of the rotation matrix are the coordinates of 
% the rotating dots.  The blue dot starts at (0,1) and the
% orange dot starts at (1,0).
%
% If you drop the  zeros from the values of |theta|, you are
% left with the integers from 1 to 36.  This is the numbering in the
% international standard describing the  compass direction of runways
% at airports.  The initial position of our blue dot corresponds to 
% runway 36 and the orange dot starts as runway 9.
%  
% &lt;&lt;compass.gif&gt;&gt;
%

%% Roll, Pitch, Yaw
% *Note: Refresh your browser to synchronize these animations.*
%
% For aircraft and space vehicles, rotation around
% the |x|-axis from nose to tail is known as _roll_.
%
% &lt;&lt;roll.gif&gt;&gt;
%
% Rotation about the |y|-axis parallel to the wings is _pitch_.
%
% &lt;&lt;pitch.gif&gt;&gt;
%
% And, rotation about the vertical |z|-axis is _yaw_.
%
% &lt;&lt;yaw.gif&gt;&gt;
%

%% Propeller
% Our model of the Piper PA-24 Comanche has 97 _patches_.
% One of them is the propeller.
% This animation of a rotating propeller is very similar to our
% earlier animation of the compass.
%
% &lt;&lt;propeller.gif&gt;&gt;
%

%% Cubelet
% |Qube|, our digital Rubik&apos;s Cube simulator, uses 27 copies
% of a  single _cubelet_.  This animation of a rotating cubelet
% shows a quarter turn clockwise about |x|, followed by a quarter 
% turn clockwise about  |y| and then a quarter turn counterclockwise 
% about |z|. If these three rotations are repeated four times,
% the  cubelet returns to its initial orientation.
% In the process, we see the traditional Rubik&apos;s colors of all
% six faces REPLACE_WITH_DASH_DASH white, green and orange opposite yellow, blue and red.
%
% &lt;&lt;cubelet.gif&gt;&gt;

%% Scramble
% *Note: Refresh your browser to synchronize these animations.*
%
% Rubick&apos;s Cube is all about rotations.  Rotating the cubelets in any
% face of the puzzle, while leaving the rest of the puzzle fixed,
% is called a &quot;move&quot;.  Like any cube, Rubik&apos;s cube has six faces.
% Each move rotates one of the six faces in either a clockwise or
% counterclockwise direction. So, after |n| moves, the puzzle is in one
% of |12^n| possible states.  The challenge is to return the cube
% to its original orientation.
%
% Here are six random rotations produced by |scramble(6)|.
% Because |12^6| is |2,985,984|,
% this is just one of almost three million six-move scrambles.
%
% &lt;&lt;scramble.gif&gt;&gt;
%

%% Unscramble
% One possible way to restore any starting condition is to retrace the
% moves that produced it.  This is the &quot;follow the breadcrumbs&quot; algorithm.
% So, I call this |unscramble|, rather than |solve|.
%
% &lt;&lt;unscramble.gif&gt;&gt;
%

%% Exercises
% * 1: Which rotation matrices and what values of |theta| are used 
%      in the animations?
%
% * 2 (not easy): When is |unscamble|  a solution with the
%      minimum number of moves? 

%% Software
% The source code for |Qube| is available from this link:
% &lt;https://blogs.mathworks.com/cleve/files/Qube_May18_osf.m 
% Qube_May18_osf.m&gt;.
% The |osf|, _one single file_,  format is a self-extracting archive
% that expands into a directory of individual functions.


##### SOURCE END ##### fac94086e84b4ca1b5df2dbc8d19f63c
--&gt;
</content>
 </entry>
 

</feed>
